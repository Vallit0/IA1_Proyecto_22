[
    {
        "instruction": "Develop a classification algorithm in Python to predict whether a bird is a hawk or a falcon. ",
        "response": "import pandas as pd\nimport numpy as np\n\n# Define features\nfeatures = [\"wing_shape\", \"size\", \"tails_length\", \"color_pattern\"] \n\n# Load the data\ndata = pd.read_csv(\"birds.csv\")\n\n# Preprocess the data to generate feature vectors\nX = np.array(data[features]) \n\n# Make a target vector \ny = np.array(data[\"species\"]) \n\n# Divide the data into training and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a classification model\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Generate evaluation metrics\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Model accuracy: %.2f\" % accuracy)"
    },
    {
        "instruction": "Write a Python function to convert a given string to lowercase. string = \"FOO\"",
        "response": "def to_lowercase(string):\n    return string.lower()\n\nstring = \"FOO\"\nprint(to_lowercase(string))"
    },
    {
        "instruction": "Write a function in JavaScript to count the number of vowels in a given string. const string = \"abcdefg\"",
        "response": "function countVowels(string) {\n    let vowelCount = 0;\n    const vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n  \n    for (let i = 0; i < string.length; i++) {\n      if (vowels.includes(string[i])) {\n        vowelCount++;\n      }\n    }\n  \n    return vowelCount;\n}\n\nconst string = \"abcdefg\";\nconsole.log(countVowels(string));"
    },
    {
        "instruction": "Edit the Python code so that it prints out the total number of elements in the list. list = [1, 2, 3, 4, 5]",
        "response": "list = [1, 2, 3, 4, 5]\nprint(\"Total number of elements in the list: \", len(list))"
    },
    {
        "instruction": "Sum up the numbers in the array in Javascript. arr = [1,2,3,4,5]",
        "response": "let sum = arr.reduce((total, num) => total + num);\nconsole.log(sum); // 15"
    },
    {
        "instruction": "Write an algorithm in Python to determine if a number is even or odd. ",
        "response": "def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "instruction": "Write a JavaScript code to get the current browser URL. ",
        "response": "var currentURL = window.location.href;\nconsole.log(currentURL);"
    },
    {
        "instruction": "How can we encrypt a string in Python? ",
        "response": "We can encrypt a string in Python using the cryptography module. The cryptography module provides high level cryptographic primitives using the Fernet cipher. The Fernet cipher uses AES-128 in CBC mode and PKCS7 padding to encrypt the string."
    },
    {
        "instruction": "Write a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index. list_one = [1, 2, 3, 4]\nlist_two = [\"a\", \"b\", \"c\", \"d\"]",
        "response": "def list_dict(list_one, list_two):\n    \"\"\"Create a dictionary of elements in the two lists which have the same index.\"\"\"\n    assert len(list_one) == len(list_two), \"lists must be same length\"\n    dict = {}\n    for i in range(len(list_one)):\n        dict[list_one[i]] = list_two[i]\n    return dict"
    },
    {
        "instruction": "Create a quick-sort algorithm in Python. ",
        "response": "def quick_sort(arr):\n    \"\"\"Sort a list of numbers in ascending order using the Quick-Sort algorithm\"\"\"\n    if len(arr) == 0:\n        return []\n\n    pivot = arr[0]\n    left_arr = [x for x in arr if x < pivot]\n    right_arr = [x for x in arr if x > pivot]\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)"
    },
    {
        "instruction": "Write a Python program to split a string on a given character separator. mystring = \"Hello, World!\"\nseparator = \",\"",
        "response": "def split(mystring, separator):\n    return mystring.split(separator)"
    },
    {
        "instruction": "Write a Python program to get the day of week from a given date and time. from datetime import datetime\ndate = datetime(2020, 4, 20, 19, 15, 0)",
        "response": "from datetime import datetime\n\ndef get_day_of_week(date):\n    return date.strftime(\"%A\")"
    },
    {
        "instruction": "Write a Javascript function to determine if the given number is an even number or not. ",
        "response": "function isEven(num) {\nreturn num % 2 === 0;\n}"
    },
    {
        "instruction": "Write a Python program to print out an ASCII art of a given word. word = \"happy\"",
        "response": "def draw_word(word):\n    art = \"\"\"\n                 __\n           _   /  \\\\\n           \\\\_/\\_/\\_/\n           /    |\n           \\___/\n          \\\\\\\\_//\n           \\/ \\/\n            \\/\n        \"\"\"\n    for letter in word:\n        art += \"  \" + letter\n    print(art)"
    },
    {
        "instruction": "Write a JavaScript function to validate a given URL. ",
        "response": "function isValidURL(url) {\n    const regex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n    return regex.test(url);\n}"
    },
    {
        "instruction": "Write a Python program to concatenate all elements in a list into a string separated by a given separator. input_list = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\nseparator = \"-\"",
        "response": "def list_to_string(input_list, separator):\n    return separator.join(input_list)"
    },
    {
        "instruction": "Rewrite the following Python code using a for-loop. i = 0\nwhile i <= 10:\n    print(i)\n    i += 1",
        "response": "for i in range(11):\n    print(i)"
    },
    {
        "instruction": "Create a function in JavaScript that takes an array of integers and returns the largest number. ",
        "response": "function findMax(arr) {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}"
    },
    {
        "instruction": "Write a Python code to calculate the mean of a given array. [1,2,3,4]",
        "response": "# calculate the mean of given array\narr = [1,2,3,4]\n\ndef calc_mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum / len(arr)\n\nprint(calc_mean(arr)) # prints 2.5"
    },
    {
        "instruction": "Create a function in JavaScript to find the number of occurrences of a letter in a word. word: hello\nletter: l",
        "response": "function findOccurrences(word, letter) {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n        if (word.charAt(i) === letter) {\n            count++;\n        }\n    }\n    return count;\n}"
    },
    {
        "instruction": "Write a JavaScript code snippet to print the numbers from 1 to 10. ",
        "response": "for (let i = 1; i <= 10; i++) {\n  console.log(i);\n}"
    },
    {
        "instruction": "Create a JavaScript function which takes a string as a parameter and returns the most frequent character in the string. 'Hello World!'",
        "response": "function mostFrequentChar(string) {\n    let charMap = {};\n    let maxCount = 0;\n    let freqChar = '';\n  \n    for (let char of string) {\n        if (charMap[char]) {\n            charMap[char]++;\n        } else {\n            charMap[char] = 1;\n        }\n    }\n  \n    for (let char in charMap) {\n        if (charMap[char] > maxCount) {\n            maxCount = charMap[char];\n            freqChar = char;\n        }\n    }\n  \n    return freqChar;\n}"
    },
    {
        "instruction": "Write a Python program to remove all instances of a given value from a given list. [1, 2, 3, 2, 3, 4], 2",
        "response": "def remove_value(nums, val):\n    res = []\n    for num in nums:\n        if num != val:\n            res.append(num)\n    return res"
    },
    {
        "instruction": "Create a JavaScript function that takes a given sentence as a parameter and capitalizes the first letter of each word. 'hello world'",
        "response": "function capitalizeSentence(str) {\n    let words = str.split(' ');\n    let res = [];\n  \n    for (let word of words) {\n        res.push(word[0].toUpperCase() + word.slice(1));\n    }\n  \n    return res.join(' ');\n}"
    },
    {
        "instruction": "Write a Python program to generate the first n Fibonacci numbers. ",
        "response": "def generate_fibonacci_numbers(n):\n   if n==1:\n       return [0]\n   elif n==2:\n       return [0,1]\n   else:\n       fib_list = [0,1]\n       for i in range(2,n):\n           fib_list.append(fib_list[i-1]+fib_list[i-2])\n       return fib_list"
    },
    {
        "instruction": "Create a JavaScript program which takes an array of integers as a parameter and reverses the array in-place. [3, 5, 9, 1, 6]",
        "response": "function reverseArrayInPlace(nums) {\n    let left = 0;\n    let right = nums.length - 1;\n  \n    while (left < right) {\n        let temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n  \n        left++;\n        right--;\n    }\n    return nums;\n}"
    },
    {
        "instruction": "Design a function in Python to delete duplicates from a list. The list is: [2, 3, 2, 4, 5, 5, 6]",
        "response": "def remove_duplicates(list): \n      \n    unique_list = [] \n      \n    for x in list: \n        if x not in unique_list: \n            unique_list.append(x) \n    return unique_list \n  \nlist = [2, 3, 2, 4, 5, 5, 6] \nprint (\"Original List: \", list) \nprint (\"Unique List: \", remove_duplicates(list)) \n\nOutput: \nOriginal List: [2, 3, 2, 4, 5, 5, 6]\nUnique List: [2, 3, 4, 5, 6]"
    },
    {
        "instruction": "Write a JavaScript function to capitalize the first letter of each word in a string. String: \"This is an example\".",
        "response": "function capitalizeFirstLetter(str) {\n    return str.replace(/\\w\\S*/g, function(txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}\ncapitalizeFirstLetter('This is an example');"
    },
    {
        "instruction": "Write a Python program to loop through all the items in a given list. List: [1, 2, 3, 4, 5, 6]",
        "response": "my_list = [1, 2, 3, 4, 5, 6]\nfor item in my_list:\n    print(item)"
    },
    {
        "instruction": "Write a JavaScript code snippet to remove the last element from an array. Array: [1, 2, 3, 4, 5]",
        "response": "let array = [1, 2, 3, 4, 5];\narray.pop(); // remove the last element\nconsole.log(array); // [1, 2, 3, 4]"
    },
    {
        "instruction": "Create a function in Python which takes two parameters and returns their product. ",
        "response": "def product(a, b):\n    return a*b"
    },
    {
        "instruction": "Create a class in Python to represent a Person. ",
        "response": "class Person:\n    # Constructor \n    def __init__(self, name, age): \n         \n        # instance attributes \n        self.name = name \n        self.age = age \n  \n    # instance method \n    def greeting(self): \n        print(\"My name is\", self.name) \n  \n# construct an object \nperson1 = Person(\"John\", 36) \n  \n# call a method of the object \nperson1.greeting()"
    },
    {
        "instruction": "Write a Python program to split special characters with a given string. string = \"Hello@#World\"",
        "response": "string = \"Hello @# World\""
    },
    {
        "instruction": "Create a JavaScript function that finds the shortest word in a string. sentence = \"I'm so excited to begin this journey\"",
        "response": "function findShortestWord(sentence) { \n    let words = sentence.split(\" \"); \n    let shortestWord = words[0]; \n  \n    for (let i = 0; i < words.length; i++) { \n        if (words[i].length < shortestWord.length) \n            shortestWord = words[i]; \n    } \n  \n    return shortestWord; \n}"
    },
    {
        "instruction": "Write a Python program that tests if a given number is divisible by 3. num = 51",
        "response": "if (num % 3 == 0):\n    print(\"The number is divisible by 3\")\nelse:\n    print(\"The number is not divisible by 3\")"
    },
    {
        "instruction": "Write a JavaScript code to calculate the factorial of a number ",
        "response": "function factorial(n){\n    if (n == 0){\n        return 1;\n    }\n    else{\n        return n * factorial(n - 1);\n    }\n}"
    },
    {
        "instruction": "Generate a unique and random password for a user using python. ",
        "response": "import random \ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[ ]{}:'\npassword = random.choices(characters, k = 16) \nprint(\"\".join(password))"
    },
    {
        "instruction": "Debug the following Python code def f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1",
        "response": "\"\"\"\nDebug the following Python code\n\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n\"\"\"\n\n# incorrect indentation of the else statement\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1   # correct indentation"
    },
    {
        "instruction": "Design a function in Python that returns the median of an array of integers. ",
        "response": "def median(arr):\n  sortedArr = sorted(arr)\n  length = len(arr)\n  if length % 2 == 0:\n    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)\n  else:\n    return sortedArr[length//2]"
    },
    {
        "instruction": "Write a JavaScript code to valid a password based on the following rules: ",
        "response": "function validatePassword(password) {\n  // Minimum 8 characters, one uppercase letter, one lowercase letter, one number, and one special character\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/;\n  if (password.match(re)) {\n    return true;\n  }\n  return false;\n}"
    },
    {
        "instruction": "Redesign the following Python program with functions. my_list = [5, 10, 15, 20]\nsum = 0\nfor number in my_list:\nsum = sum + number",
        "response": "def sum_of_list(my_list):\n  sum = 0\n  for number in my_list:\n    sum = sum + number\n  return sum\n\nmy_list = [5, 10, 15, 20]\nresult = sum_of_list(my_list)"
    },
    {
        "instruction": "Debug the following JavaScript code which calculates the average of an array of integers: arr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\nsum += arr[i]}\naverage = sum / arr.length",
        "response": "arr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\naverage = sum / arr.length;\nconsole.log(average);"
    },
    {
        "instruction": "Write a Python function to calculate the factorial of a number (a non-negative integer). ",
        "response": "def factorial(num):\n    \"\"\"\n    Calculates factorial of a given number.\n    \"\"\"\n    # Base case\n    if num == 0:\n        return 1\n    # Recursion\n    else:\n        return num * factorial(num-1)"
    },
    {
        "instruction": "Write a Python function to check if a value exists in a list. ",
        "response": "def is_in_list(lst, val):\n    return val in lst"
    },
    {
        "instruction": "How do you declare a variable in Python? ",
        "response": "In Python, you can declare a variable by assigning a value to it. For example, x = 1 is a variable declaration which creates a variable named x with the value of 1."
    },
    {
        "instruction": "Write a Javascript code to check if the given number is a prime number. ",
        "response": "function isPrimeNumber(num) {\n  for(var i = 2; i < num; i++){\n    if(num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns the median value from the array. ",
        "response": "function getMedian(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  \n  let mid = Math.floor(arr.length / 2);\n  \n  if (arr.length % 2 === 0) {\n    return (arr[mid - 1] + arr[mid]) / 2;\n  } else {\n    return arr[mid];\n  }\n}"
    },
    {
        "instruction": "Given a string, write a Python program to find the first non-repeating character in it. input_str = \"aaaaabbbbccc\"",
        "response": "def first_non_repeating_char(input_str): \n \n    char_count = {}\n \n    for ch in input_str: \n \n        if ch in char_count: \n \n            char_count[ch] += 1\n \n        else: \n \n            char_count[ch] = 1\n \n    for ch in input_str: \n \n        if char_count[ch] == 1: \n            return ch \n \n    return None\n\nprint(first_non_repeating_char(input_str))"
    },
    {
        "instruction": "Write a JavaScript function to check if an array contains a specific element. var arr = [1,2,3,4];",
        "response": "function contains(arr, element) {\n  return arr.indexOf(element) > -1;\n}\n\nconsole.log(contains(arr, 2)); //true"
    },
    {
        "instruction": "Count the number of words in this sentence using Python. This sentence has a total of eight words.",
        "response": "8"
    },
    {
        "instruction": "Generate a 15-digit random number using Python. ",
        "response": "import random\n\nrandom.randint(100000000000000, 999999999999999)"
    },
    {
        "instruction": "Classify the following transaction as valid or invalid using Python. Transaction ID: 101\nTransaction Amount: -200",
        "response": "\"invalid\""
    },
    {
        "instruction": "Implement a function in JavaScript to calculate the average of all elements in an array. [2, 3, 9]",
        "response": "function avg(arr) {\n    let sum = 0;\n    for (const val of arr) {\n        sum += val;\n    }\n    return sum/arr.length;\n}\n\nconsole.log(avg([2,3,9])); // 4.666"
    },
    {
        "instruction": "Generate a random string of 12 characters using Python. ",
        "response": "import string\nimport random\n\n''.join(random.choices(string.ascii_letters + string.digits, k=12))"
    },
    {
        "instruction": "What is the command to print \"Hello World\" twelve times in Python? ",
        "response": "for i in range(12):\n    print(\"Hello World\")"
    },
    {
        "instruction": "Explain the purpose of try-catch statement in JavaScript. ",
        "response": "The try-catch statement is used to handle errors in JavaScript code. It allows the code to continue running even if there is an error. The try clause contains the code that may throw an error, and the catch clause contains code that will execute when an error is thrown."
    },
    {
        "instruction": "Write a Python code snippet to print the pyramid structure with the given number of lines. 4",
        "response": "*   \n   ***\n  *****\n *******"
    },
    {
        "instruction": "Reverse a string using Python code. input_str = \"Hello world!\"",
        "response": "def reverse_string(input_str): \n    new_string = \"\" \n    for char in input_str: \n        new_string = char + new_string\n  \n    return new_string \n  \ninput_str = \"Hello world!\"\n\nprint(reverse_string(input_str))\n##\n5. Instruction: Create a program that prints a multiplication table that shows the product of any two numbers between 1 and 10.\n5. Input:\n<noinput>\n5. Output:\nfor i in range(1, 11): \n    for j in range(1, 11): \n        product = i * j\n        print(str(i) + '*' + str(j) +'=' + str(product), end = '  ') \n    print()"
    },
    {
        "instruction": "Write a JavaScript code to print the first 10 terms of the Fibonacci series. ",
        "response": "let a = 0, b = 1, c, limit = 10;\n\nconsole.log(\"Fibonacci Series of \"+limit+\" numbers:\");\n\nfor(var i=0; i < limit; i++){\n    if(i<=1){\n        c=i;\n    }\n    else{\n        c=a+b;\n        a=b;\n        b=c;\n    }\n    \n    console.log(c);\n}"
    },
    {
        "instruction": "Write a Python program to print the following pattern. ",
        "response": "for i in range(1,6):\n  for j in range(1,i+1):\n    print(\"*\", end=\" \")\n  print()"
    },
    {
        "instruction": "Write a Python function to check if a given string is an anagram of another or not. word1 = \"cat\"\nword2 = \"tac\"",
        "response": "def is_anagram(word1, word2):\n return sorted(word1) == sorted(word2)"
    },
    {
        "instruction": "Write a Python function to create a two-dimensional array of specified dimensions. ",
        "response": "def create_2D_array(rows, columns):\n arr = [[] * columns] * rows\n return arr"
    },
    {
        "instruction": "Write a Python function to replace all the occurrences of a given substring with another. string = \"Hello World\"\nsubstring = \"World\"\nreplacement = \"Universe\"",
        "response": "def replace_substring(string, substring, replacement):\n return string.replace(substring, replacement)"
    },
    {
        "instruction": "Write a Python function to compute the maximum value for each key in a given dictionary. d = {'a':10, 'b':20, 'c':30}",
        "response": "def max_values(d):\n return {key: max(d.values()) for key in d}"
    },
    {
        "instruction": "Write a Python script to count the number of occurances of each character in a given string. string = \"Mississippi\"",
        "response": "def count_chars(string):\n char_occurrences = {}\n for char in string:\n  if char not in char_occurrences:\n   char_occurrences[char] = 1\n  else:\n   char_occurrences[char] += 1\n return char_occurrences"
    },
    {
        "instruction": "Write a Python function to generate the powerset of a given list. list = [2, 4, 6]",
        "response": "def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\n\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) != 0"
    },
    {
        "instruction": "Name a few Python libraries used for data analysis. ",
        "response": "Data analysis libraries in Python include Pandas, NumPy, SciPy, Matplotlib, Scikit-Learn and Seaborn."
    },
    {
        "instruction": "Explain the concept of inheritance in Python? ",
        "response": "Inheritance in Python allows a class to inherit attributes and behavior from another class, called the parent class. Inheritance enables code reuse, making it an important part of object-oriented programming (OOP). A class that inherits attributes and behavior from a parent is called a child class or derived class. The parent class is also known as the base class or superclass.\n\nIn Python, inheritance is specified by placing classes in parentheses after the class name: class DerivedClass(BaseClass):. This syntax allows the DerivedClass to inherit all attributes and methods from the BaseClass. It also allows the DerivedClass to override methods of the BaseClass, and add new attributes and methods."
    },
    {
        "instruction": "Using Python, create a list containing the first 20 prime numbers. ",
        "response": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]"
    },
    {
        "instruction": "Sort the given list of numbers in ascending order using Python. numbers = [3, 5, 7, 1, 2]",
        "response": "sorted_numbers = [1, 2, 3, 5, 7]"
    },
    {
        "instruction": "Create a function to find the greatest common divisor of two numbers in Python. ",
        "response": "def gcd(a, b):\n     while b != 0:\n        a, b = b, a % b\n     return a"
    },
    {
        "instruction": "Write a Python script to find the common elements in two given lists. list1 = [1, 2, 3, 5, 7]\nlist2 = [2, 3, 4, 5, 6]",
        "response": "def common_elements(list1, list2):\n    common_ele = []   \n    for i in list1:\n        for j in list2:\n            if i==j:\n                common_ele.append(i)\n    return common_ele"
    },
    {
        "instruction": "Compute the result of the following mathematical expression in Python. (4 + 5 * 7 - 9) / 2",
        "response": "result = 17"
    },
    {
        "instruction": "Using Python, create a function to check if a given string contains an uppercase letter. ",
        "response": "def contains_uppercase(text):\n  for char in text:\n    if char.isupper():\n      return True\n  return False"
    },
    {
        "instruction": "Convert the following number into binary representation using Python. 12",
        "response": "binary = \"0b1100\""
    },
    {
        "instruction": "Write a Python function to format a specified string to limit the number of characters to 6. string = \"Hello world\"",
        "response": "def limit_char(string):\n    if len(string) > 6 :\n        return string[:6]\n    else:\n        return string"
    },
    {
        "instruction": "Find the longest palindrome in a given string using Python. string = \"My name is John\"",
        "response": "def longest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                palindrome = substring\n    return palindrome"
    },
    {
        "instruction": "Calculate the sum of all elements in a given list using Python. list1 = [1, 2 ,3, 4, 5]",
        "response": "sum_list = 15"
    },
    {
        "instruction": "Write a Python function to remove the characters which have odd index values of a given string. string = \"Hello World\"",
        "response": "def remove_odd_index(string):\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result"
    },
    {
        "instruction": "Create a function to convert a given number from decimal to binary representation using Python. ",
        "response": "def dec_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary+= str(num % 2)\n        num = num // 2\n    return binary[::-1]"
    },
    {
        "instruction": "Write a Python function to find the intersection between two lists. list1 = [1, 2, 3, 5, 7]\nlist2 = [3, 4, 5, 6]",
        "response": "def intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    return result"
    },
    {
        "instruction": "Create a Python program to find the maximum value in the given array. [2, 4, 5, 7, 8]",
        "response": "def find_max(arr): \n    max_val = arr[0] \n    for i in range(len(arr)): \n        if max_val < arr[i]: \n            max_val = arr[i] \n    return max_val \n\narr = [2, 4, 5, 7, 8] \nmax_val = find_max(arr) \nprint(max_val)"
    },
    {
        "instruction": "Write a JavaScript code to eliminate any symbols from a given string. ",
        "response": "const eliminateSymbols = str => str.replace(/[^\\w\\s]/gi, \"\");"
    },
    {
        "instruction": "Write a Python program to determine if a given number is an Armstrong number. ",
        "response": "def isArmstrongNumber(num):\n sum = 0\n temp = num\n while temp > 0:\n  digit = temp % 10\n  sum += digit ** 3\n  temp //= 10\n if num == sum:\n  return True\n else:\n  return False"
    },
    {
        "instruction": "Create a function in Python that prints out a stringified version of a list. [1, 4, 6, 8]",
        "response": "def print_str_list(in_list):\n    \"\"\"This function takes a list and returns a stringified version of it\"\"\"\n    return \" \".join(str(x) for x in in_list)"
    },
    {
        "instruction": "Create a python class called \"Employee\" that contains 3 instance variables. ",
        "response": "class Employee:\n    \"\"\"A class for representing an employee\"\"\"\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary"
    },
    {
        "instruction": "What type of object is \"None\" in Python? ",
        "response": "None is a special constant in Python and is of type NoneType."
    },
    {
        "instruction": "Write a function in Python to calculate the value of \"e\" to 4 decimal places. ",
        "response": "from math import e\n\ndef calc_e():\n    \"\"\"This function calculates the value of e to 4 decimal places\"\"\"\n    return round(e, 4)"
    },
    {
        "instruction": "How can you get the length of a list in Python? ",
        "response": "You can use the built-in function len() to get the length of a list in Python."
    },
    {
        "instruction": "Create a function in Python to calculate the factorial of a number. ",
        "response": "def factorial(n):\n    \"\"\"This function returns the factorial of a given integer\"\"\"\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1)"
    },
    {
        "instruction": "Describe the details of the try-except statement in Python. ",
        "response": "The try-except statement in Python is used to handle exceptions in code. All the code that has a potential for raising an exception is placed in the \"try\" block and the code that is executed if an exception is raised is placed in the \"except\" block. The \"Except\" block is also used to catch a specific exception and handle it accordingly."
    },
    {
        "instruction": "Create an if-else statement in Python that checks if an integer is even or odd. ",
        "response": "if num % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")"
    },
    {
        "instruction": "Write a JavaScript code to check if a string is a valid email address. ",
        "response": "function validateEmail(email) \n{\n\tvar re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\treturn re.test(String(email).toLowerCase());\n}"
    },
    {
        "instruction": "Write a Python code to calculate the sum of natural numbers up to n. ",
        "response": "def n_sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum"
    },
    {
        "instruction": "Determine the output of the given Python code. x = [1, 2, 3, 4, 5] \ny = x \ny[2] = 6",
        "response": "The output of the given Python code is [1, 2, 6, 4, 5]."
    },
    {
        "instruction": "Write a JavaScript function that takes a single parameter and returns a string. Parameter: num (integer) = 3",
        "response": "function getString(num) { \n  return \"The number is \" + num; \n}"
    },
    {
        "instruction": "Create a new array in JavaScript containing only even numbers from the given input array. Array: [3,7,10,6,23]",
        "response": "let evenArray = [3,7,10,6,23].filter(num => num % 2 == 0); \n//evenArray: [10,6]"
    },
    {
        "instruction": "Rewrite the given JavaScript code in Python. let array = [0,1,2,3];\n  const newArray = array.map(item => item + 3);",
        "response": "array = [0,1,2,3]\nnew_array = list(map(lambda item: item + 3, array))"
    },
    {
        "instruction": "Implement a function in Python to convert a string containing dates from the format MM/DD/YYYY to DD-MM-YYYY. \"02/20/2020\"",
        "response": "def mmddyyyy2ddmmyyyy(date_string):\n    if len(date_string) != 10:\n        raise ValueError('Invalid date format')\n    mm, dd, yyyy = date_string.split('/')\n    new_date_string = '{}-{}-{}'.format(dd, mm, yyyy)\n    return new_date_string"
    },
    {
        "instruction": "Create a function in Python to evaluate if a given number is prime. ",
        "response": "def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num//2 + 1): \n        if num % i == 0: \n            return False\n    return True"
    },
    {
        "instruction": "Create a program in JavaScript to check if two strings are anagrams. ",
        "response": "// Function to check if two strings are anagrams\nconst isAnagram = (string1, string2) => {\n  // Check if string lengths are the same\n  let string1Arr = string1.split('').sort();\n  let string2Arr = string2.split('').sort();\n  if (string1Arr.length !== string2Arr.length) return false;\n  \n  // Compare each character in the strings\n  for (let i = 0; i < string1Arr.length; i++) {\n    if (string1Arr[i] !== string2Arr[i]) return false;\n  }\n  \n  // Return true if all characters match\n  return true;\n}"
    },
    {
        "instruction": "Write a Python program to print out the Fibonacci sequence up to 20 numbers ",
        "response": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \nprint(\"Fibonacci sequence:\") \nfor i in range(20): \n    print(fibonacci(i))"
    },
    {
        "instruction": "Edit the original code snippet so that it prints in the correct syntax for a Python 3 script. #!/usr/bin/python\nprint \"Hello, World!\"",
        "response": "#!/usr/bin/python\nprint(\"Hello, World!\")"
    },
    {
        "instruction": "Write a function in JavaScript that takes an integer n and returns the nth Fibonacci number. ",
        "response": "function Fibonacci(n) { \n  if (n <= 1) return n; \n  return Fibonacci(n-1) + Fibonacci(n-2); \n}"
    },
    {
        "instruction": "Given the following object, write a function in JavaScript to count the occurrences of each character in the object's values. obj = {\n \"name\": \"John Doe\"\n}",
        "response": "function countOccurences(obj) {\n    let result = {};\n    for (let value of Object.values(obj)) {\n        for (let char of value) {\n            result[char] = result[char] + 1 || 1;\n        }\n    }\n    return result; \n}"
    },
    {
        "instruction": "Using the given list, create a function in Python that classifies each number as odd or even. lst = [1, 2, 6, 8, 4]",
        "response": "def classifyList(lst):\n    result = []\n    for num in lst: \n        if num % 2 == 0: \n            result.append('even')\n        else:\n            result.append('odd')\n    return result"
    },
    {
        "instruction": "Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries. arr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n]",
        "response": "def longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix"
    },
    {
        "instruction": "Given a string and a set of delimiters, write a function in JavaScript to split the string. string = \"Hello, world!\"\ndelimiters = [\" \", \",\", \"-\", \"!\"]",
        "response": "function splitStringWithDelimiters (string, delimiters) { \n  let result = []; \n  let s = string; \n  while (s.length > 0) { \n    let char = s[0]; \n    if (delimiters.includes(char)) { \n      s = s.substr(1); \n    } else { \n      let index = 0; \n      for (const delimiter of delimiters) { \n        if (s.indexOf(delimiter) > 0 && s.indexOf(delimiter) < index) { \n          index = s.indexOf(delimiter); \n        } \n      } \n      if (index === 0) { \n        index = s.length; \n      } \n      result.push(s.substr(0, index)); \n      s = s.substr(index); \n    } \n  } \n  return result; \n}"
    },
    {
        "instruction": "Write a function in Python that takes a string and a set of characters as inputs and removes all characters in the string that are in the set. string = \"Hello, world!\"\ncharset = [\"o\", \"!\"]",
        "response": "def removeChars(string, charset):\n\tresult = \"\"\n\tfor c in string:\n\t\tif c not in charset:\n\t\t\tresult += c\n\treturn result"
    },
    {
        "instruction": "Create a program in Python that calculates the average of numbers in a list. [9, 5, 10, 12]",
        "response": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([9, 5, 10, 12]))   # Output: 9.5"
    },
    {
        "instruction": "Use JavaScript to filter an array of numbers such that only even numbers are returned. [1, 4, 6, 7, 8, 3, 10]",
        "response": "const arr = [1, 4, 6, 7, 8, 3, 10];\n\nconst evenArr = arr.filter(num => num % 2 == 0);\n\nconsole.log(evenArr); // Output: [4, 6, 8, 10]"
    },
    {
        "instruction": "Create a JavaScript function that takes in two parameters and returns their sum. ",
        "response": "function sum(num1, num2) {\n return num1 + num2;\n}"
    },
    {
        "instruction": "Create a binary search tree in JavaScript. ",
        "response": "class Node { \n  constructor(data) \n  { \n    this.data = data; \n    this.left = null; \n    this.right = null; \n  } \n} \n  \nclass BinarySearchTree { \n  constructor() \n  { \n    this.root = null; \n  } \n\n  insert(data) \n  { \n    let newNode = new Node(data); \n    if(this.root === null) \n    {\n      this.root = newNode; \n    }\n\n    else\n    { \n      this.insertNode(this.root, newNode);\n    } \n  }\n  \n  insertNode(node, newNode) \n  { \n    if(newNode.data < node.data) \n    { \n      if(node.left === null) \n      { \n        node.left = newNode; \n      } else { \n        this.insertNode(node.left, newNode); \n      } \n    } \n    else { \n      if(node.right === null) \n      { \n        node.right = newNode; \n      } else { \n        this.insertNode(node.right,newNode); \n      } \n    } \n  } \n}"
    },
    {
        "instruction": "Create a Python function to parse a string and remove all special characters. ",
        "response": "import re\n\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]','', s)"
    },
    {
        "instruction": "Create an object in JavaScript that performs a task given a condition. ",
        "response": "const myObject = {\n  doTask: (condition) => {\n    if(condition) {\n      // code to perform the task\n    } \n  }\n}"
    },
    {
        "instruction": "What data type should you use to store a list like [4, 7, 2] in a Python variable? ",
        "response": "The data type you should use to store a list like [4, 7, 2] in a Python variable is a list. The list type is specified using square brackets when declaring the variable. For example: my_list = [4, 7, 2]."
    },
    {
        "instruction": "Write a Python program to find out the common items from two given arrays. arr1 = [1, 2, 3, 5, 7 ]\narr2 = [2, 3, 5, 6, 7]",
        "response": "common_items = []\n\nfor item in arr1:\n  if item in arr2:\n    common_items.append(item)\n\nprint(common_items)  # Output: [2, 3, 5, 7]"
    },
    {
        "instruction": "Write a Python function to check whether a string has all unique characters. ",
        "response": "def all_unique(string): \n  # loops through each character in string \n  for char in string: \n  \n    # if character appears more than once, \n    # return False \n    if string.count(char) > 1: \n      return False \n      \n  # return True if no characters appear more than once\n  return True"
    },
    {
        "instruction": "Edit a python function to generate the fibonacci sequence. def fibonacci(n):\n    a = 1\n    b = 0\n    for i in range(n):\n        print(a)\n        a, b = b, a+b",
        "response": "def fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a)\n        a, b = b, a+b"
    },
    {
        "instruction": "Write a JavaScript function to check whether a given number is odd or even. num = 21",
        "response": "function isEvenNumber(num) {\n  return num % 2 === 0;\n}\n\nlet result = isEvenNumber(21);\nconsole.log(result); //false"
    },
    {
        "instruction": "Explain what a for loop does in Python. ",
        "response": "A for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. It executes a set of statements specified in the for loop for each item of the sequence. It makes it easier to write and execute code multiple times without having to write the same code multiple times."
    },
    {
        "instruction": "Write a Python program to print out the list of even numbers from 0 to given limit. limit = 10",
        "response": "# declare list of numbers\nnumbers = [x for x in range(0, limit+1)]\n\n# declare empty list of even numbers\neven_numbers = []\n\n# loop through list of numbers\nfor num in numbers:\n    # if number is even, append to even_numbers list\n    if num % 2 == 0:\n        even_numbers.append(num)\n\n# print even numbers\nprint(even_numbers) # Output: [0, 2, 4, 6, 8, 10]"
    },
    {
        "instruction": "Create a class in Python called 'Car' and add instance variables for the car's make, model and year. ",
        "response": "class Car:\n    \n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year"
    },
    {
        "instruction": "Initialize an empty list in Python and then add three items to it. ",
        "response": "my_list = []\nmy_list.append(\"item1\")\nmy_list.append(\"item2\")\nmy_list.append(\"item3\")"
    },
    {
        "instruction": "Create a JavaScript function that prints out the numbers from 1 to n. ",
        "response": "function printNumbers(n) {\n for (let i = 1; i <= n; i++) {\n console.log(i);\n }\n}"
    },
    {
        "instruction": "Create a JavaScript class that returns the area and circumference of a circle when given the radius. ",
        "response": "class Circle {\n  constructor(radius) {\n    this._radius = radius;\n  }\n \n  get area() {\n    return Math.PI * this._radius * this._radius;\n  }\n \n  get circumference() {\n    return 2 * Math.PI * this._radius;\n  }\n}"
    },
    {
        "instruction": "Build a deep learning model in Python to predict the stock price of a given company. ",
        "response": "# import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# import data\ndata = pd.read_csv('stock_data.csv')\n\n# preprocess data\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\n\n# split into training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# build the model\nimport keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\nmodel = Sequential()\nmodel.add(Dense(units=6, activation='relu', input_dim=4))\nmodel.add(Dense(units=4, activation='sigmoid'))\nmodel.add(Dense(units=1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae','accuracy'])\nmodel.fit(X_train, y_train, epochs=20, batch_size=10)\n\n# test the model\ny_pred = model.predict(X_test)\n\n# evaluate the model\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)"
    },
    {
        "instruction": "Write a JavaScript function to sort an array of integers. ",
        "response": "function sortArray(arr) {\n return arr.sort(function(a, b) {\n  return a - b;\n });\n}"
    },
    {
        "instruction": "Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list. test_list = [4, 6, 8, 10, 3, 1, 9]",
        "response": "def greatest_difference(numbers_list):\n    max_difference = 0\n    for num1 in numbers_list:\n        for num2 in numbers_list:\n            if num1 != num2:\n                difference = abs(num1 - num2)\n                if difference > max_difference:\n                    max_difference = difference\n    \n    return max_difference\n\ngreatest_difference(test_list)"
    },
    {
        "instruction": "Create a loop in JavaScript that prints the numbers from 1 to 10 in the console. ",
        "response": "for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}"
    },
    {
        "instruction": "What is a callback function in JavaScript? ",
        "response": "A callback function in JavaScript is a function that is passed as an argument to another function and is executed after the outer function has finished executing."
    },
    {
        "instruction": "Create a Python program to generate the Fibonacci series between 0 and 10. ",
        "response": "def FibonacciSequence():\n  a, b = 0, 1\n  for _ in range(10):\n    yield a\n    a, b = b, a + b\n\nfor num in FibonacciSequence():\n  print(num)"
    },
    {
        "instruction": "Write a JavaScript program to replace all the vowels in a given string with '*'. ",
        "response": "function replaceVowels(str) {\n  return str.replace(/[aeiou]/gi, '*');\n}"
    },
    {
        "instruction": "Create a Python function which takes an array and returns true if the array contains all unique values. array = [1, 2, 3, 2]",
        "response": "\"\"\"\nCreate a Python function which takes an array and returns \ntrue if the array contains all unique values\n\"\"\"\n\ndef is_unique(arr):\n    seen = set()\n    for x in arr: \n        if x in seen: \n            return False\n        seen.add(x)\n    return True\n    \nif __name__ == '__main__':\n    arr = [1,2,3,2]\n    result = is_unique(arr)\n    print(result)\n    \n# Output\n# False"
    },
    {
        "instruction": "Write a short JavaScript code snippet to detect a browser language and display a response message in that particular language. ",
        "response": "// get the current browser language\nvar language = navigator.language || navigator.userLanguage;\n\nif (language === \"en\") {\n    console.log(\"Hello, welcome to the website!\");\n} \nelse if (language === \"de\") {\n    console.log(\"Hallo, willkommen auf der Webseite!\");\n}\nelse if (language === \"fr\") {\n    console.log(\"Bonjour, bienvenue sur le site Web!\");\n}\nelse {\n    console.log(\"Welcome to the website!\");\n}"
    },
    {
        "instruction": "Describe how to add an element in a linked list in Python. ",
        "response": "// To add an element in a linked list in Python:\n// 1. Create a new node containing the value to be added\n// 2. Set the \"next\" attribute of the new node to point to the current head node\n// 3. Set the head node to be the newly created node\n// 4. Increase the size of the linked list by 1"
    },
    {
        "instruction": "Suggest a Python code to parse an XML document. ",
        "response": "# Parse an XML document using Python\nimport xml.etree.ElementTree as ET\n\n# load the XML document\ntree = ET.parse('document.xml')\n# get the root element\nroot = tree.getroot()\n# loop through all the elements\nfor element in root.findall('element'):\n    # print the attributes of all elements\n    print(element.attrib)"
    },
    {
        "instruction": "Generate a Frequency Table for the following sequence of characters using Python. 'aabbccddee'",
        "response": "# Create a frequency table for the given sequence\n# using Python\nfrom collections import Counter\n\nstring = 'aabbccddee'\n# create the Counter object\nfreq_table = Counter(string)\n# print the output\nprint(freq_table)\n\n# Output\nCounter({'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2})"
    },
    {
        "instruction": "In Python, write code to identify whether a given string contains only numeric values. ",
        "response": "# To identify whether a given string contains only numeric values in Python:\n# 1. Use the isdigit method of the str object\n# 2. Pass the given string as an argument to the isdigit method\n# 3. The method will return True if the given string contains only numeric values,\n#    and False otherwise\n\n# Example\ngiven_string = \"1234\"\n\nif given_string.isdigit():\n    print(\"The given string contains only numeric values\")  \nelse:\n    print(\"The given string does not contain only numeric values\")"
    },
    {
        "instruction": "Write a script in JavaScript to parse an XML document. ",
        "response": "// To parse an XML document in JavaScript:\n// 1. Use the DOMParser to load the XML document into an XML Document object\n// 2. Use the getElementsByTagName method to obtain all the elements with a specific tag in the document\n// 3. Use the getElementsByTagNameNS method to obtain all the elements with a specific tag and namespace in the document\n// 4. Use the getAttribute method to obtain the attribute values of the desired elements\n// 5. Use the getElementsByClassName method to obtain all the elements with a specific class in the document  \n// 6. Parse the elements and create a custom object according to the returned XML."
    },
    {
        "instruction": "Write a JavaScript function for reversing a string. ",
        "response": "function reverseString(str) {\n    let revStr = '';\n    for(let i = str.length-1; i >= 0; i--) {\n        revStr += str[i];\n    }\n    return revStr;\n}"
    },
    {
        "instruction": "Create a class in Python that implements a stack. ",
        "response": "class Stack: \n    def __init__(self): \n        self.stack = []\n\n    def push(self,element): \n        self.stack.append(element)  \n\n    def pop(self): \n        return self.stack.pop()\n\n    def peek(self):\n        return self.stack[-1]"
    },
    {
        "instruction": "Create a Python program to extract all unique words from a given sentence. This sentence contains multiple words.",
        "response": "sentence_words = set(sentence.split())\nunique_words = set(word for word in sentence_words if word not in visited_words)\nprint(unique_words)\n# Output: {'contains', 'words', 'multiple', 'This'}"
    },
    {
        "instruction": "What is the purpose of the \"if-else\" statement in JavaScript? ",
        "response": "The if-else statement is a control statement in JavaScript that is used to execute a block of code if a certain condition is true, and a different block of code if the condition is false. It is a type of decision-making statement which allows a program to execute a certain code depending on a certain condition."
    },
    {
        "instruction": "Write a function in Python that takes in two strings and concatenates them together with a space in between. ",
        "response": "def my_concat(string1, string2)\n    return string1 + ' ' + string2"
    },
    {
        "instruction": "Find the minimum element in an unordered array given in Python. arr = [17, 21, 4, 7, 29, 34, 11]",
        "response": "min_ele = arr[0]\nfor i in range (1, len(arr)):\n    if (min_ele > arr[i]):\n       min_ele = arr[i] \n    \nprint(\"Minimum element in array is\", min_ele)"
    },
    {
        "instruction": "Suggest an algorithm for finding the maximum element in an unordered array given in JavaScript. let array = [9, 4, 15, 10, 6, 20];",
        "response": "// max is assign to 0 as a starting point\nlet max = 0;\n\nfor (let i=0; i < array.length; i++) {\n  // If the current value of i is greater than max, max will be updated\n  if (array[i] > max) { \n    max = array[i];\n  }\n}\n\nconsole.log(max); // Output: 20"
    },
    {
        "instruction": "Create an empty set in Python and add the following items into it: \"A\", \"B\", \"C\" ",
        "response": "mySet = {\"A\", \"B\", \"C\"}"
    },
    {
        "instruction": "Create a Python dictionary with keys \"A\", \"B\", \"C\" and each key value should be the length of corresponding key. ",
        "response": "{\"A\": 1, \"B\": 1, \"C\": 1}"
    },
    {
        "instruction": "Create a JavaScript object to represent a person's name and age. ",
        "response": "let person = {\n  name: \"John Doe\",\n  age: 25\n};"
    },
    {
        "instruction": "Create a JavaScript variable to store the current date and time. ",
        "response": "let datetime = new Date();"
    },
    {
        "instruction": "Write a Python function to count the letters in a given sentence and return a dictionary of letter counts. sentence = \"Hello World!\"",
        "response": "def letter_counts(sentence):\n  count_dict = {}\n  for char in sentence:\n    if char.isalpha():\n      if char in count_dict:\n        count_dict[char] += 1\n      else:\n        count_dict[char] = 1\n  return count_dict"
    },
    {
        "instruction": "Generate a 5-element tuple of random numbers between 5 and 15 using Python. ",
        "response": "import random\n\nrandom_tuple = tuple(random.randint(5, 15) for _ in range(5))"
    },
    {
        "instruction": "Write a function in Python to check if two strings are an anagram or not. ",
        "response": "def is_anagram(str1, str2): \n    if len(str1) != len(str2): \n        return False \n  \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n  \n    if s1 == s2: \n        return True\n  \n    return False"
    },
    {
        "instruction": "Create a Python program to generate a random string of 5 characters. ",
        "response": "import random\n\ndef generate_random_string():\n  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  random_string = ''\n  for x in range(5):\n    random_string += random.choice(characters)\n  \n  return random_string\n\nprint(generate_random_string())"
    },
    {
        "instruction": "Manipulate the given list in Python to include the new element at the beginning. list = [1, 2, 3]\nnew_element = 0",
        "response": "list = [0] + list \nlist.insert(0, new_element)"
    },
    {
        "instruction": "Write a JavaScript code snippet to center text in a div element with id \"myDiv\". ",
        "response": "document.getElementById('myDiv').style.textAlign = \"center\";"
    },
    {
        "instruction": "Write a Python code to print \"Hello World!\" on the console. ",
        "response": "print(\"Hello World!\")"
    },
    {
        "instruction": "Write a JavaScript code to add two numbers using a prompt. ",
        "response": "let a = prompt('Enter the first number:');\nlet b = prompt('Enter the second number:');\nlet sum = parseInt(a) + parseInt(b);\nconsole.log(sum);"
    },
    {
        "instruction": "Implement a linked list in Python. ",
        "response": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        curr_node = self.head\n        while curr_node.next is not None: \n            curr_node = curr_node.next\n        curr_node.next = new_node\n\n    def delete_by_value(self, data):\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            self.head = curr_node.next\n            return\n        prev_node = curr_node\n        while curr_node is not None:\n            if curr_node.data == data:\n                break\n            prev_node = curr_node\n            curr_node = curr_node.next\n        if curr_node is None:\n            return\n        prev_node.next = curr_node.next"
    },
    {
        "instruction": "Edit this JavaScript code to use the correct syntax for the switch statement. if (action == 'play') {\n  console.log('Playing...');\n} else if (action == 'stop') {\n  console.log('Stopping...');\n} else {\n  console.log('Undefined action');\n}",
        "response": "switch (action) {\n  case 'play':\n    console.log('Playing...');\n    break;\n  case 'stop':\n    console.log('Stopping...');\n    break;\n  default:\n    console.log('Undefined action'); \n}"
    },
    {
        "instruction": "Change the variable names in the following Python code. x1 = 10\ny1 = 20",
        "response": "a = 10\nb = 20"
    },
    {
        "instruction": "Edit the following JavaScript code to reverse the characters of a given string. ",
        "response": "function reverseString(string) {\n  let reversedString = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n  return reversedString;\n}"
    },
    {
        "instruction": "Fix the Python code below to make the script work. import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile)",
        "response": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile, indent=4)"
    },
    {
        "instruction": "Build a linear regression model using Python's scikit learn library. import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1],\n    'y': [2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9]\n    })\n\nX = data['x'].values.reshape(-1, 1)\ny = data['y'].values.reshape(-1, 1)",
        "response": "from sklearn.linear_model import LinearRegression\n\n# Create linear regression model\nmodel = LinearRegression()\n\n# Train the model using the training set\nmodel.fit(X, y)\n\n# Make predictions using the testing set\ny_pred = model.predict(X)"
    },
    {
        "instruction": "Write a function returning the factorial of a given number in Python. ",
        "response": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)"
    },
    {
        "instruction": "Create an array from elements 0 to 10 in JavaScript. ",
        "response": "const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"
    },
    {
        "instruction": "Create a function in JavaScript to check if an array is empty. ",
        "response": "function isArrayEmpty(arr) {\n    return arr.length === 0;\n}"
    },
    {
        "instruction": "Apply the filter method in JavaScript to return only those elements of a given array that are not null. const array = [1, null, 2, undefined, 3, NaN];",
        "response": "const filteredArray = array.filter(el => el != null);"
    },
    {
        "instruction": "Clean the given data in Python by replacing NaN and None with 0. import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])",
        "response": "import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])\n\ndf.fillna(0, inplace = True)"
    },
    {
        "instruction": "Implement a method in JavaScript that checks if a String is a palindrome. String = \"racecar\"",
        "response": "function checkPalindrome(str){\n    let revStr = str.split('').reverse().join(''); \n    return (str == revStr);\n}\n\ncheckPalindrome(\"racecar\"); // returns true"
    },
    {
        "instruction": "Write JavaScript to swap two elements in an array. array = [10, 20, 30, 40]",
        "response": "function swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp; \n} \n\nlet array = [10, 20, 30, 40];\nswap(array, 0, 2);\nconsole.log(array);\n\n// Output: [30, 20, 10, 40]"
    },
    {
        "instruction": "Write Python code to generate a random password of 8 alphanumeric characters. ",
        "response": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())\n\n// Output:\n// h5Kp0FHc"
    },
    {
        "instruction": "Generate an array of 10 random numbers between 1 and 100 using Python ",
        "response": "import random\n\ndef generate_random_array(n):\n    array= []\n    for _ in range(n):\n        array.append(random.randint(1, 100))\n    return array\n\nprint(generate_random_array(10))\n\n// Output\n// [14, 20, 32, 84, 59, 45, 11, 34, 57, 19]"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of strings and returns true if the strings are in sorted order. array = [\"apple\", \"boy\", \"cat\", \"dog\"]",
        "response": "function isSorted(arr) {\n    let isSorted = true;\n    for (let i=1;i<arr.length;i++){\n        if(arr[i-1] > arr[i]){\n            isSorted = false;\n            break; \n        }\n    }\n    return isSorted;\n}\n\nconsole.log(isSorted([\"apple\", \"boy\", \"cat\", \"dog\"]));\n\n// Output\n// true"
    },
    {
        "instruction": "Using list comprehension, create a list of even numbers between 1 and 20 in Python. ",
        "response": "even_nums_list = [num for num in range(1, 21) if num % 2 == 0]"
    },
    {
        "instruction": "Design an algorithm to find the shortest path in a maze using JavaScript. ",
        "response": "function findShortestPath(maze) {\n    let visited = new Set();\n\n    let queue = [];\n    queue.push({\n        row: 0,\n        col: 0\n    });\n\n    let minLength = Number.POSITIVE_INFINITY;\n\n    while (queue.length > 0) {\n        let node = queue.shift();\n        let row = node.row;\n        let col = node.col;\n        let length = node.length;\n\n        // Reached the end\n        if (row === maze.length - 1 && col === maze[0].length - 1) {\n            minLength = Math.min(minLength, length);\n        }\n\n        // Add neighbors\n        if (row - 1 >= 0 && maze[row - 1][col] === 0\n            && !visited.has(row - 1 + '_' + col)) {\n            queue.push({\n                row: row - 1,\n                col: col,\n                length: length + 1\n            });\n            visited.add(row - 1 + '_' + col);\n        }\n\n        if (row + 1 < maze.length && maze[row + 1][col] === 0\n            && !visited.has(row + 1 + '_' + col)) {\n            queue.push({\n                row: row + 1,\n                col: col,\n                length: length + 1\n            });\n            visited.add(row + 1 + '_' + col);\n        }\n\n        if (col - 1 >= 0 && maze[row][col - 1] === 0\n            && !visited.has(row + '_' + (col - 1))) {\n            queue.push({\n                row: row,\n                col: col - 1,\n                length: length + 1\n            });\n            visited.add(row + '_' + (col - 1));\n        }\n\n        if (col + 1 < maze[0].length && maze[row][col + 1] === 0\n            && !visited.has(row + '_' + (col + 1))) {\n            queue.push({\n                row: row,\n                col: col + 1,\n                length: length + 1\n            });\n            visited.add(row + '_' + (col + 1));\n        }\n    }\n\n    return minLength;\n}"
    },
    {
        "instruction": "How to check if a given number is even or odd using Python? ",
        "response": "def is_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "instruction": "Write a loop in Python to print all the numbers from 0 to 10 ",
        "response": "for i in range(0, 11):\n  print(i)"
    },
    {
        "instruction": "How do you remove the last item from a list in Python? ",
        "response": "list.pop()"
    },
    {
        "instruction": "Build a Python program to transform a string in a dictionary. String: \" John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener\"",
        "response": "people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}"
    },
    {
        "instruction": "Please write a program to create a JavaScript function that is used to validate an email address. ",
        "response": "// Function to validate email address \nfunction validateEmail(email) {\n  var pattern = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; \n  \n  if (pattern.test(email)) {\n    return true;\n  } else {\n    return false;\n  }\n}"
    },
    {
        "instruction": "Create a basic REST API in python that takes a string as input and returns the reversed string ",
        "response": "from fastapi import FastAPI\n@app.get(\"/reverse-string/{string}\")\n\ndef reverse_string(string: str):\n    return string[::-1]"
    },
    {
        "instruction": "What is a JavaScript Promise? ",
        "response": "A JavaScript Promise is an object that represents the eventual completion of an asynchronous operation. A Promise object can be either resolved (successful) or rejected (failed). It provides a unified API for handling asynchronous operations, no matter when the operations are completed."
    },
    {
        "instruction": "Create a JavaScript function that converts all the characters in a string to uppercase. ",
        "response": "function toUpperCase(string) {\n return string.toUpperCase();\n}"
    },
    {
        "instruction": "Write a Python function to compute the factorial of an integer. ",
        "response": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"
    },
    {
        "instruction": "What is the purpose of a try-catch block in Python? ",
        "response": "The try-catch block is used in Python to handle exceptions. It is a construct used to catch and handle any unexpected errors that may occur in a program, allowing the program to continue running instead of crashing. The statements under the try block are the ones that may raise the exception, and the except block contains code that will be executed if an error does occur. The finally block is generally used to perform clean-up operations, regardless of whether an error occurs or not."
    },
    {
        "instruction": "Generate a random 2-digit number using JavaScript. ",
        "response": "Math.floor(Math.random() * 100);"
    },
    {
        "instruction": "Write a function in Python for printing a given 2D array. arr = [[1,2,3], [4,5,6], [7,8,9]]",
        "response": "def print_2D_array(arr):\n  for row in arr:\n    for element in row:\n      print(element,end=\" \")\n    print()\n\nprint_2D_array(arr)"
    },
    {
        "instruction": "Create a function in Python for reversing a list. my_list = [1,2,3,4,5]",
        "response": "def reverse_list (my_list):\n  return my_list[::-1]\n  \nreverse_list(my_list)"
    },
    {
        "instruction": "Write a function in Python for calculating the area of a circle. ",
        "response": "def area_circle(r):\n  return 3.14 * r**2"
    },
    {
        "instruction": "Given a Python list, write the code to flatten it l1=[1,2,3,[4,[5,6]]]",
        "response": "def flatten(nums):\n    flattened_list = []\n    for elem in nums:\n        if type(elem) == list:\n            flattened_list.extend(flatten(elem))\n        else:\n            flattened_list.append(elem)\n    return flattened_list\n\nflatten(l1)"
    },
    {
        "instruction": "Write a function in Python that takes two parameters and returns a list containing those two numbers ",
        "response": "def make_list(a, b):\n  return [a, b]"
    },
    {
        "instruction": "Create a function in Python that returns all permutations of a string. ",
        "response": "def get_all_permutations(string):\n \n  if len(string) == 1:\n    return [string]\n \n  permutations = []\n  for index, char in enumerate(string):\n    slice_string  = string[:index] + string[index+1:]\n    for permutation in get_all_permutations(slice_string):\n      permutations.append(char + permutation)\n\n  return permutations"
    },
    {
        "instruction": "Write a JavaScript function to convert an array of strings to a comma-separated string. arr = [\"this\", \"is\", \"a\", \"test\"]",
        "response": "//Function to convert an array of strings to a comma-separated string\nfunction arr_to_csv(arr) {\n    return arr.join(\",\");\n}\n\n// Testing code\nconsole.log(arr_to_csv(arr));"
    },
    {
        "instruction": "Toast a Python function to swap the values of two given variables. a = 10, b= 20",
        "response": "def swap(a, b): \n    a, b = b, a \n    return (a,b)"
    },
    {
        "instruction": "Create a neural network in Python to recognize handwriting. MNIST hand-written digit dataset",
        "response": "The code to create a neural network in Python to recognize handwriting should consist of several parts. These parts include importing the MNIST dataset, preprocessing the data, building the neural network model, training the network, evaluting the network's performance, and improving the accuracy using hyperparameters."
    },
    {
        "instruction": "Write a JavaScript function to generate a random whole number. ",
        "response": "function getRandomNumber() {\n return Math.floor(Math.random() * 100);\n}"
    },
    {
        "instruction": "Replace the \"TODO\" placeholder in the following python code. def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    # TODO",
        "response": "def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    return a + b"
    },
    {
        "instruction": "How can you remove an element from a JavaScript array? ",
        "response": "In JavaScript, you can remove an element from an array using the splice() method. For example: myArray.splice(index,1);"
    },
    {
        "instruction": "Write a Python program to find the unique elements in a list. 2, 3, 9, 5, 2, 4, 9",
        "response": "def unique_elements(input_list): \n    result_list = []\n    for item in input_list: \n        if item not in result_list: \n            result_list.append(item)\n    return result_list\n\ninput_list = [2, 3, 9, 5, 2, 4, 9]\nprint(unique_elements(input_list))\n# Output: [2, 3, 9, 5, 4]"
    },
    {
        "instruction": "Write a JavaScript function to convert a number from octal to decimal. octal_number = 014",
        "response": "function octToDec(octal_number){\n    let dec_number = 0;\n    let i = 0;\n    while(octal_number != 0){\n        dec_number += (octal_number % 10) * Math.pow(8,i);\n        octal_number = Math.floor(octal_number/10);\n        i++;\n    }\n    return dec_number;\n}\nvar decimal_number = octToDec(014);\nconsole.log(decimal_number);"
    },
    {
        "instruction": "Find the length of a given string using JavaScript. str = \"I'm a GPT model\"",
        "response": "let str = \"I'm a GPT model\";\nlet length = str.length;\nconsole.log(length); // 16"
    },
    {
        "instruction": "Write a JavaScript function that swaps the values of two variables. ",
        "response": "function swap(a, b) {\n    let temp = a;\n    a = b;\n    b = temp;\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes two integers and returns true if the numbers are equal and false otherwise. ",
        "response": "function isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    return false;\n}"
    },
    {
        "instruction": "Develop an algorithm in Python to calculate the factorial of a given number n. ",
        "response": "def factorial(n): \n   if n == 0: \n       return 1\n   elif n > 0: \n       return n * factorial(n-1) \n   else: \n       return \"Enter a positive integer\""
    },
    {
        "instruction": "Construct a python class to store a person's data like name, age, and hobbies. ",
        "response": "class Person:\n     def __init__(self, firstname, lastname, age, hobbies):\n           self.firstname = firstname\n           self.lastname = lastname\n           self.age = age\n           self.hobbies = hobbies"
    },
    {
        "instruction": "Construct a python method to get the nth Fibonacci number. ",
        "response": "def get_nth_fibonacci(n):\n if n == 0 or n == 1:\n return n\n else:\n return get_nth_fibonacci(n-1) + get_nth_fibonacci(n-2)"
    },
    {
        "instruction": "Modify the following python code so that it accepts two numbers as input and returns the maximum of those numbers. def get_max(num1):\n return num1",
        "response": "def get_max(num1, num2):\n return max(num1, num2)"
    },
    {
        "instruction": "Explain how to create a custom exception in Python. ",
        "response": "To create a custom exception in Python, you will have to subclass Exception class and define your own exception class. For example: \n \nclass MyCustomException(Exception):\n  pass \n \nThen you can use the exception in a try-except block to handle expected errors:\n \ntry: \n  ...\nexcept MyCustomException: \n  ..."
    },
    {
        "instruction": "Write an expression to verify the validity of a given password in Python. ",
        "response": "import re \n  \ndef check(password): \n  \n    #Define pattern rules\n    pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}\"\n      \n    if (re.search(pattern,password)): \n        return True\n    else: \n        return False \n  \n# Driver code     \npassword = \"Geronimo1\"\nif (check(password)): \n    print(\"Valid Password\") \nelse: \n    print(\"Invalid Password\")"
    },
    {
        "instruction": "Write an expression in JavaScript to convert a given number of minutes to seconds. minutes = 55",
        "response": "let minutes = 55;\nlet seconds = minutes * 60;\n\nconsole.log(seconds); //3300"
    },
    {
        "instruction": "Write a function in Python to assign the value 0 for special values, i.e. empty strings and NaN. my_list = [5, 2, 3, None, '', 8]",
        "response": "def assign_values(list): \n    for i, val in enumerate(list): \n        if not val or val != val: \n            list[i] = 0\n            \n    return list\n\nmy_list = [5, 2, 3, None, '', 8] \nresult = assign_values(my_list) \nprint(result) \n# Output: [5, 2, 3, 0, 0, 8]"
    },
    {
        "instruction": "Create a program in JavaScript to calculate the area of a triangle with given side lengths. side_1 = 10\nside_2 = 10\nside_3 = 8",
        "response": "let side_1= 10;\nlet side_2= 10;\nlet side_3= 8;\n \n//calculate the permiter of triangle \nlet perimiter = (side_1 + side_2 + side_3)/2;\n \n//calculate the area of triangle using Heron's formula \nlet area = Math.sqrt(perimiter*(perimiter-side_1)*(perimiter-side_2)*(perimiter-side_3));\n \nconsole.log(area);"
    },
    {
        "instruction": "Calculate the sum of the numbers given in the following list using Python. my_list = [1, 2, 3, 4, 5]",
        "response": "my_list = [1, 2, 3, 4, 5]\n\n# Calculate the sum \nsum_nums = sum(my_list)\n\nprint(sum_nums) \n# Output: 15"
    },
    {
        "instruction": "Design a GUI in Python to accept user input and display a welcome message. Message: Welcome to our website!",
        "response": "import tkinter as tk\n\nwindow = tk.Tk()\n\nlabel = tk.Label(text='Please enter your name:')\nlabel.pack()\n\nname = tk.Entry(window, width=25)\nname.pack()\n\ndef greet_user():\n\twelcome = \"Welcome to our website, \" + name.get()\n\t\n\tgreeting = tk.Label(text=welcome)\n\tgreeting.pack()\n\nbtn = tk.Button(window, text='Submit', command=greet_user)\nbtn.pack()\n\nwindow.mainloop()"
    },
    {
        "instruction": "Create a while loop in JavaScript to print out all the numbers between 20 and 30. ",
        "response": "let i = 20;\nwhile (i <= 30) {\n  console.log(i);\n  i++;\n}"
    },
    {
        "instruction": "Convert the following JSON string to a Python dictionary. {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}",
        "response": "import json\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npy_dict = json.loads(json_str)\n\n# py_dict would be {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}"
    },
    {
        "instruction": "Write a Python program to add two matrices. matrix1 = [[3, 5],\n           [6, 2]]\n\nmatrix2 = [[1, 2],\n           [3, 4]]",
        "response": "def add_matrices(mat1, mat2):\n    \"\"\"\n    This function takes two 2D matrices and adds them,\n    returning a new 2D matrix.\n    \"\"\"\n    output = []\n    \n    for i in range(len(mat1)):\n        row_m1 = mat1[i]\n        row_m2 = mat2[i]\n        row_sum = []\n        for j in range(len(row_m1)):\n            row_sum.append(row_m1[j] + row_m2[j])\n        output.append(row_sum)\n        \n    return output\n    \nresult = add_matrices(matrix1, matrix2)"
    },
    {
        "instruction": "Identify two coding languages used by Python developers. ",
        "response": "Two coding languages used by Python developers are Python and C++."
    },
    {
        "instruction": "Create a customer management system using Python and the Django web framework. ",
        "response": "Steps for creating a customer management system using Python and the Django web framework:\n1. Create a Django project\n2. Add customers app to the project \n3. Create a model for customers in the customers app\n4. Update the customers app's views function to include the logic for adding, deleting, and updating customers\n5. Add customers app the the project's urls.py file to map requests to the views functions\n6. Create and update templates in the customers app to provide the UI\n7. Run the Django project to launch the web application"
    },
    {
        "instruction": "Combine the two lists below using Python to produce a single list containing all elements from both. list_one = [1, 2, 3]\nlist_two = [4, 5, 6]",
        "response": "list_one = [1, 2, 3]\nlist_two = [4, 5, 6]\ncombined_list = list_one + list_two\nprint(combined_list) # Output: [1, 2, 3, 4, 5, 6]"
    },
    {
        "instruction": "Upgrade the following JavaScript code to use ES6 features. function addNumbers(num1, num2) {\n  return num1 + num2;\n}",
        "response": "const addNumbers = (num1, num2) => num1 + num2;"
    },
    {
        "instruction": "Provide an example of a recursive Python function to calculate the factorial of a number. ",
        "response": "def calculateFactorial(n):\n  if n == 0:\n    return 1\n\n  return n * calculateFactorial(n - 1)"
    },
    {
        "instruction": "What is the syntax for creating a class in Python? ",
        "response": "class MyClass:\n    <statement(s)>"
    },
    {
        "instruction": "Write a JavaScript code snippet to check if a given string contains the substring 'hello'. ",
        "response": "if (str.indexOf('hello') !== -1) {\n  console.log('The string contains the substring hello');\n}"
    },
    {
        "instruction": "Write a function in Python to extract the first 5 characters of a string. string = \"This is a sample string.\"",
        "response": "def get_first_five_characters(string):\n  return string[:5]\n\nprint(get_first_five_characters(string)) # Output: 'This '"
    },
    {
        "instruction": "How can we create a dictionary in JavaScript? ",
        "response": "let myDict = {\n  key1: value1,\n  key2: value2\n}"
    },
    {
        "instruction": "What is the syntax for creating an array in JavaScript? ",
        "response": "let myArray = [element1, element2, ...elementN];"
    },
    {
        "instruction": "How can we generate a random number within a given range in Python? ",
        "response": "import random\n\nrandomNumber = random.randint(minNum, maxNum)"
    },
    {
        "instruction": "Write a Python function to find the most common element in a given list. ",
        "response": "def most_common(myList):\n  return max(set(myList), key=myList.count)"
    },
    {
        "instruction": "Write a code to parse a JSON string into Python objects. json_string = '{\"name\": \"John Doe\", \"age\": 42 }'",
        "response": "import json\n\njson_string = '{\"name\": \"John Doe\", \"age\": 42 }'\ndata = json.loads(json_string)\n\nprint(data['name']) # John Doe\nprint(data['age']) # 42"
    },
    {
        "instruction": "Write an algorithm in Python which reads a string and reorders it alphabetically. string s = 'dcba'",
        "response": "def reorder_string(s):\n    s = sorted(s)\n    return ''.join(s)\n\nprint(reorder_string('dcba'))"
    },
    {
        "instruction": "Find and remove the bug from this Python code. def function(a):\n    b = a / 0.5\n    c = a / 2.0\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"",
        "response": "def function(a):\n    b = a * 2\n    c = a * 0.5\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\""
    },
    {
        "instruction": "Compress a string using Huffman coding in Python. String: \"aaabbcc\"",
        "response": "def get_freq_list(s): \n      \n    # dictionaries are efficient for such a task \n    freq_list = {} \n  \n    for char in s: \n        if char in freq_list.keys(): \n            freq_list[char] += 1\n        else: \n            freq_list[char] = 1\n  \n    return freq_list \n  \ndef create_huffman_tree(freq_list): \n  \n    # create a priority queue \n    # to pop two minimum element each time \n    priority_queue = [] \n    for key in freq_list.keys(): \n        node = Node(key, freq_list[key]) \n        heapq.heappush(priority_queue, node) \n  \n    while len(priority_queue) > 1: \n        left_node = heapq.heappop(priority_queue) \n        right_node = heapq.heappop(priority_queue) \n  \n        new_node = Node(None, \n              left_node.freq + right_node.freq, \n              left_node, \n              right_node) \n        heapq.heappush(priority_queue, new_node) \n  \n    huffman_tree = heapq.heappop(priority_queue) \n    return huffman_tree \n    \ndef compress_string(huffman_tree, symbols): \n  \n    # create a character-code dict\n    code_dict = {} \n    _generate_codes(huffman_tree, '', code_dict) \n  \n    # encode the string \n    encoded_str = '' \n    for char in symbols: \n        encoded_str += code_dict[char] \n  \n    return encoded_str"
    },
    {
        "instruction": "What python library can be used for working with JSON data? ",
        "response": "The Python library 'json' can be used for working with JSON data."
    },
    {
        "instruction": "Suggest an approach to add items to an array in JavaScript. ",
        "response": "A common approach to add items to an array in JavaScript is to use the Array.push() method. This method adds the item to the end of the array. \n\nFor example: \nlet arr = [1, 2, 3];\narr.push(4); // [1, 2, 3, 4]"
    },
    {
        "instruction": "Write a JavaScript code to sort an array of numbers in descending order. ",
        "response": "let arr = [4, 5, 2, 1, 8];\narr.sort((a, b) => b - a); // [8, 5, 4, 2, 1]"
    },
    {
        "instruction": "Explain what the following function in Python does. def print_max_element_idx(arr):\n    max_num = arr[0]\n    max_idx = 0\n    i = 1\n    while i < len(arr):\n        if arr[i] > max_num:\n            max_idx = i\n            max_num = arr[i]\n        i += 1\n    return max_idx",
        "response": "This function takes an array as input and then iterates through it. It keeps track of the maximum number and its index. At the end, it returns the index at which the maximum number is located."
    },
    {
        "instruction": "Develop a Python program to find the most frequent element in an array. [3, 5, 1, 2, 4, 5, 5, 4, 2]",
        "response": "def most_frequent_element(arr):\n    count = 0\n    for i in arr:\n        current_count = arr.count(i)\n        if current_count > count:\n            count = current_count\n            most_frequent_element = i\n    return most_frequent_element\n\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5"
    },
    {
        "instruction": "Suggest a way to delete an item from a python list. ",
        "response": "You can use the built-in method \"remove\" to delete an item from a python list. \n\nFor example:\n\nmy_list = [1, 2, 3, 4, 5]\nmy_list.remove(4) # Remove item 4 from the list\n\nThe list will now be: [1, 2, 3, 5]"
    },
    {
        "instruction": "Develop a Python program to generate a list with numbers in range 3 to 12. ",
        "response": "# Generate a list with numbers in range 3 to 12 \nmy_list = list(range(3, 13)) \nprint(my_list) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
    },
    {
        "instruction": "Suggest a way to convert a JSON object to a string in JavaScript. ",
        "response": "The JSON.stringify() method can be used to convert a JSON object to a string in JavaScript. It takes two parameters: the object to be stringified and an optional replacer to modify the values before they are stringified. The result is a JSON-formatted string.\n\nExample: \nconst object = {'name': 'John', 'age': 25};\nconst string = JSON.stringify(object); \nconsole.log(string);  // '{\"name\": \"John\", \"age\": 25}'"
    },
    {
        "instruction": "Show how to convert the JSON object below to a JavaScript object {\n    \"id\": 1234,\n    \"num_sessions\": 5\n}",
        "response": "let data = {\n id: 1234,\n num_sessions: 5\n};\nlet object = JSON.parse(JSON.stringify(data));"
    },
    {
        "instruction": "What is the JavaScript syntax for creating a new object? ",
        "response": "The syntax for creating a new object in JavaScript is:  const objectName = new Object();"
    },
    {
        "instruction": "Replace the placeholder with a valid JavaScript expression let x = <placeholder>;",
        "response": "let x = 8 * 8;"
    },
    {
        "instruction": "Clean the input data using Python, so it is valid for a machine learning model. data = [{'age': '30', 'income': '$1,000', 'address': 'New York'}, {'age': 'ab*', 'income': '$2,000', 'address': 'California'}]",
        "response": "data = [{'age': 30, 'income': 1000, 'address': 'New York'}, {'age': None, 'income': 2000, 'address': 'California'}]"
    },
    {
        "instruction": "Convert a string to lowercase, using Python. my_string = \"Hello World\"",
        "response": "my_string.lower() # Output: \"hello world\""
    },
    {
        "instruction": "Check if a string contains a substring, using Python. haystack = \"The quick brown fox\"\nneedle = \"brown\"",
        "response": "needle in haystack # Output: True"
    },
    {
        "instruction": "Write a code snippet to create a new JavaScript array of n length. ",
        "response": "var array = [];\nfor (var i = 0; i < n; i++) {\n  array.push(null);\n}"
    },
    {
        "instruction": "How would you check if an array contains a specific value in JavaScript? ",
        "response": "Using the Array.prototype.includes() method:\n\nfunction checkIfArrayContainsValue(arr, value) {\n  if(arr.includes(value)) {\n    return true;\n  }\n  return false;\n}"
    },
    {
        "instruction": "Design a class with 3 data members in Python. ",
        "response": "class MyClass: \n  def __init__(self, member1, member2, member3): \n    self.member1 = member1\n    self.member2 = member2\n    self.member3 = member3"
    },
    {
        "instruction": "How would you check if two strings are anagrams in JavaScript? ",
        "response": "function isAnagram(str1, str2) { \n  // Compare the length of the two string\n  if (str1.length !== str2.length) { \n    return false; \n  } \n \n  // Convert both strings to lowercase\n  str1 = str1.toLowerCase(); \n  str2 = str2.toLowerCase(); \n \n  // Store the frequency of characters\n  // in the first string\n  const frequencyCounter1 = {}; \n  for (let char of str1) { \n    frequencyCounter1[char] = (frequencyCounter1[char] || 0) + 1; \n  } \n \n  // Store the frequency of characters\n  // in the second string\n  const frequencyCounter2 = {}; \n  for (let char of str2) { \n    frequencyCounter2[char] = (frequencyCounter2[char] || 0) + 1; \n  }\n \n  // Compare the frequency of characters \n  for (let key in frequencyCounter1) { \n    if (!(key in frequencyCounter2)) { \n      return false; \n    } \n   \n    if (frequencyCounter2[key] !== frequencyCounter1[key]) { \n      return false; \n    } \n  }  \n  return true; \n}"
    },
    {
        "instruction": "Create a Python list of 10 numbers from 0 to 9. ",
        "response": "numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "instruction": "Create a JavaScript function to remove all spaces from a string. ",
        "response": "function removeSpaces(str) { \n  return str.replace(/ /g,\"\"); \n}"
    },
    {
        "instruction": "Code a method in Python that determines the number of words in a given string. ",
        "response": "def word_count(s):\n  return len(s.split())"
    },
    {
        "instruction": "Describe in Python a custom exception for handling database connection errors. ",
        "response": "class DBConnectionError(Exception):\n  def __init__(self, message):\n    self.message = message\n    \n  def __str__(self):\n    return 'An Error Occured:\\n\\t' + self.message"
    },
    {
        "instruction": "Generate a URL in JavaScript for an API endpoint to fetch data from a given database table. Table Name: users",
        "response": "const generateURL = (tableName) => {\n  return `https://website.com/api/v1/table/${tableName}`;\n}\n\nconst url = generateURL('users');\n// Output: https://website.com/api/v1/table/users"
    },
    {
        "instruction": "Implement a function in JavaScript that flips a given binary tree. ",
        "response": "function invertBinaryTree(tree) {\n  if (!tree) {\n    return;\n  }\n  let temp = tree.left;\n  tree.left = tree.right;\n  tree.right = temp;\n\n  invertBinaryTree(tree.left);\n  invertBinaryTree(tree.right);\n}"
    },
    {
        "instruction": "Create a function in JavaScript that displays an alert with a given message. ",
        "response": "function alertMe(message) {\n  alert(message);\n}"
    },
    {
        "instruction": "Write a Python script to generate a randomized list of 10 integers. ",
        "response": "import random\n\nrandom_numbers = random.sample(range(0, 101), 10)\nprint(random_numbers)"
    },
    {
        "instruction": "Write a function to compute the maximum of two given numbers in JavaScript. ",
        "response": "function max(num1, num2) {\n  return (num1 > num2) ? num1 : num2;\n}"
    },
    {
        "instruction": "Generate a JavaScript object with two properties. ",
        "response": "const myObject = {\n    name: 'John',\n    age: 25\n};"
    },
    {
        "instruction": "Create a variable in Python with the name “studentName” and assign it your name as a string. ",
        "response": "studentName = \"John\""
    },
    {
        "instruction": "Extract the type of the following object in Python. a = [1, 2, 3]",
        "response": "list"
    },
    {
        "instruction": "Write a Python program to print all integer numbers from a given range. from 1 to 10",
        "response": "for i in range(1, 11):\n    print(i)"
    },
    {
        "instruction": "Convert the following statement into valid Python syntax. x = \"string\"",
        "response": "x = 'string'"
    },
    {
        "instruction": "Write a Python script to sort a given list of numbers in ascending order. [3, 7, 1, 5, 4]",
        "response": "def sort_numbers_ascending(numbers): \n    # Sort the list \n    numbers.sort() \n    return numbers\n  \n# Driver code \nnums = [3, 7, 1, 5, 4] \n\nprint(sort_numbers_ascending(nums))"
    },
    {
        "instruction": "Create a Python dictionary with the following elements Name: John\nAge: 25\nCity: New York",
        "response": "data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n}"
    },
    {
        "instruction": "Write a Python function that takes a list of floats as an argument and returns the sum of all elements. some_list = [1.5, 5.9, 3.7, 5.2]",
        "response": "def sum_list(some_list):\n    result = 0\n    for num in some_list:\n        result += num\n    return result\n\nprint(sum_list(some_list)) # Prints 15.3"
    },
    {
        "instruction": "Create an object in JavaScript to store a student's information. name = \"John Doe\"\nage = 18",
        "response": "let studentObj = {\n  name: \"John Doe\",\n  age: 18\n}"
    },
    {
        "instruction": "Write an expression in JavaScript to check if a number is divisible by 2 or not. number = 12",
        "response": "(number % 2 === 0) ? true : false"
    },
    {
        "instruction": "Write a code snippet using Python to pop an element from a list. some_list = [1, 2, 3]",
        "response": "some_list.pop() # pops 3"
    },
    {
        "instruction": "Write a JavaScript program to convert a Celsius temperature to Fahrenheit. ",
        "response": "function celsiusToFahrenheit(celsius) {\n  let temperatureInFahrenheit = celsius * (9 / 5) + 32;\n  return temperatureInFahrenheit;\n}"
    },
    {
        "instruction": "Define a JavaScript function to sort an array of strings in alphabetical order. [\"Tony\", \"Steve\", \"Peter\", \"Bruce\"]",
        "response": "function sortStrings(arr) {\n  return arr.sort((a, b) => a.localeCompare(b));\n}"
    },
    {
        "instruction": "Implement a sorting algorithm for a given array in Python. [3, 2, 1, 4]",
        "response": "sorted_array = [1, 2, 3, 4]\n\ndef SortArray(array):\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n\nsorted_array = SortArray(array)"
    },
    {
        "instruction": "Generate a Python code to remove the given substring from the string. String: \"The quick brown fox jumped over the lazy dog\"\nSubstring: \"brown\"",
        "response": "string = \"The quick brown fox jumped over the lazy dog\"\nsubstring = \"brown\"\nnew_string = string.replace(substring, \"\")\nprint(new_string)\n# Output: The quick  fox jumped over the lazy dog"
    },
    {
        "instruction": "Generate a Python dictionary containing the squares of the numbers from 1 to n. int n = 10;",
        "response": "def generateDict(n):\n    dict = {}\n    for i in range(1, n+1):\n        dict[i] = i**2\n    return dict\n\nn = 10\nprint(generateDict(n))"
    },
    {
        "instruction": "Develop a code in Python to update all the elements of an array by a number a = [1, 4, 5, 7, 9]",
        "response": "def update(a):\n    n = 2\n    a[:] = [x + n for x in a]\n    return a"
    },
    {
        "instruction": "Generate a program in Python that takes two parameters and prints the result of their addition. ",
        "response": "def add_two_numbers(a, b):\n    return a + b"
    },
    {
        "instruction": "Write an example of a for loop in JavaScript. ",
        "response": "for (let i = 0; i < 10; i++) {\n  console.log(i);\n}"
    },
    {
        "instruction": "Write a function in Python to remove a given element from a list. list = ['A', 'B', 'C', 'D']\nelement = 'B'",
        "response": "def remove_element(list, element): \n  if element in list: \n    list.remove(element)\n  return list\n\nprint(remove_element(list, element))"
    },
    {
        "instruction": "Convert the following Python statement into C code. x = x + 1",
        "response": "x++;"
    },
    {
        "instruction": "What are type hints in Python? ",
        "response": "Type hints in Python are optional pieces of information that can be specified when declaring a class, function or method, that allow Python to better understand the code and provide better type safety. Type hints allow the IDE or interpreter to provide better autocompletion and code checking features, as well as allow the compiler to optimize the code better."
    },
    {
        "instruction": "Explain how to use callbacks in JavaScript. ",
        "response": "A callback is a function passed as an argument to another function. It is called after the other function has finished executing. Callback functions can be used to help make asynchronous code more organized and easier to read. The callback function will be called with the result of the other function once it is complete. For example, if a function needs to wait for a response from an API before continuing, a callback can be passed in as an argument to execute when the response is received. The callback can outline exactly what happens after the response is received. This helps the code stay organized and readable."
    },
    {
        "instruction": "Create a method in Python to round a number to 4 decimal points. ",
        "response": "def round_to_4_dp(num):\n    return round(num, 4)"
    },
    {
        "instruction": "Write a JavaScript code to display the current date in the following format: yyyy-mm-dd. ",
        "response": "const date = new Date();\nconst dateString = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\nconsole.log(dateString);"
    },
    {
        "instruction": "Create a Python class that has an initialization method which takes in two parameters and sets them as class variables. ",
        "response": "class ExampleClass:\n    def __init__(self, param1, param2):\n        self.param1 = param1\n        self.param2 = param2"
    },
    {
        "instruction": "Given a sentence, remove all punctuation using JavaScript. This is a sentence!",
        "response": "function removePunctuation(sentence) {\n  return sentence.replace(/[^\\w\\s]/gi, '');\n}\n\nconsole.log(removePunctuation(\"This is a sentence!\"));"
    },
    {
        "instruction": "Create a Python function to check if a given array is sorted in ascending order. arr = [1, 3, 5, 7, 6]",
        "response": "def is_sorted_ascending(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"
    },
    {
        "instruction": "Write a function to generate the Cartesian product of 2 sets in Python. A = {1, 2}; B = {'a', 'b'}",
        "response": "from itertools import product\n \ndef get_cartesian_product(A, B):\n  return set(product(A, B))\n \nA = {1, 2}; B = {'a', 'b'}\nprint(get_cartesian_product(A,B))"
    },
    {
        "instruction": "Using Python, classify the following sentence \"The cat is a mammal\" into either Animal or Plant. ",
        "response": "def classify_sentence(sentence):\n  if \"animal\" in sentence.lower():\n    return \"Animal\"\n  elif \"plant\" in sentence.lower():\n    return \"Plant\"\n\nsentence = \"The cat is a mammal\"\nprint(classify_sentence(sentence))"
    },
    {
        "instruction": "Write a JavaScript code snippet to display a welcome message to the user. ",
        "response": "console.log('Welcome!');"
    },
    {
        "instruction": "Using Python, write a function to multiply two matrices. ",
        "response": "def multiply_matrices(matrixA, matrixB): \n    \"\"\"\n    Matrix multiplication\n    :param matrixA: 2D array\n    :param matrixB: 2D array\n    :return: product of matrixA and matrixB\n    \"\"\"\n    \n    # Initialize matrix to store the result with size (m x n), where m and n are the rows and columns of matrixA and matrixB\n    result_matrix = [[0 for _ in range(len(matrixB[0]))] for _ in range(len(matrixA))]\n\n    for i in range(len(matrixA)): \n        for j in range(len(matrixB[0])): \n            for k in range(len(matrixB)): \n                result_matrix[i][j] += matrixA[i][k] * matrixB[k][j] \n  \n    return result_matrix"
    },
    {
        "instruction": "Write a JavaScript code snippet to limit the maximum length a user can enter in an input field. ",
        "response": "document.getElementById('inputField').maxLength = \"20\";"
    },
    {
        "instruction": "Generate five random numbers between 0 and 10 in Python. ",
        "response": "import random\nrandom.sample(range(0, 10), 5)"
    },
    {
        "instruction": "Modify the following JavaScript code to remove all whitespaces from a given string. var mystring = \" This is a  string  with  extra spaces \";",
        "response": "var mystring = mystring.replace(/\\s/g,'');"
    },
    {
        "instruction": "How can you convert a given list of integers into a comma-separated string in Python? ",
        "response": "We can use the join() method to convert a given list of integers into a comma-separated string in Python. The syntax for this method is as follows:\n\nlistOfIntegers = [1, 2, 3, 4] \ns = ','.join(str(e) for e in listOfIntegers)\nprint(s)"
    },
    {
        "instruction": "How can you copy the contents of an array in JavaScript? ",
        "response": "We can use the slice() method to copy the contents of an array in JavaScript. The syntax for this method is as follows:\n\nvar arrayCopy = array.slice();"
    },
    {
        "instruction": "How can you convert a given object to a JSON string in JavaScript? ",
        "response": "We can use the JSON.stringify() method to convert a given object to a JSON string in JavaScript. The syntax for this method is as follows:\n\nvar jsonString = JSON.stringify(object);"
    },
    {
        "instruction": "Name the parameter of a Python function? ",
        "response": "The parameter of a Python function is the variable name listed after the function name in the function definition."
    },
    {
        "instruction": "Create a class in Python with two methods, one of which accepts an argument. ",
        "response": "class MyClass:\n    def __init__(self):\n        pass\n\n    def my_method(self, arg):\n        # method code\n        pass"
    },
    {
        "instruction": "How do you convert a string to an integer in Python? ",
        "response": "In Python, strings can be converted to integers using the int() function. This function takes a string as its argument and returns an integer object. The int() function can also take optional parameters that allow for conversion from one base or radix, or from different types of numbers (e.g. octal, hexadecimal, binary)."
    },
    {
        "instruction": "What is the difference between a list and a tuple in Python? ",
        "response": "The main difference between a list and a tuple in Python is that a list is mutable while a tuple is immutable. This means that a list can be changed or modified, while a tuple cannot. Tuples also have better performance than lists in terms of speed and memory usage. Tuples are also generally easier to read than lists, since they don't have commas separating their elements."
    },
    {
        "instruction": "Explain polymorphism in Python. ",
        "response": "Polymorphism in Python is the ability of an object to take on multiple forms. It is an object-oriented programming concept that allows for different implementations of a function or method to be used depending on the object type being used. In Python, this is done through sub-classing, the use of special methods such as the __init__ method, and by using type hints."
    },
    {
        "instruction": "What is the advantage of using dictionary comprehension in Python? ",
        "response": "The main advantage of using dictionary comprehension in Python is that it offers an efficient and concise way to create dictionaries. It can be used to create dictionaries from existing sequences or iterables, or to create new dictionaries from scratch. It also eliminates the need for writing multiple lines of code to create dictionaries."
    },
    {
        "instruction": "Write a JavaScript statement to delete the key-value pair of age in the following object. let person = {\n    name: \"John\",\n    age: 30\n}",
        "response": "delete person.age;"
    },
    {
        "instruction": "Write a JavaScript expression to get the length of the following string. let str = \"Hello World!\"",
        "response": "str.length"
    },
    {
        "instruction": "Explain the purpose of lambda functions in Python. ",
        "response": "Lambda functions are anonymous short functions that have no name. They are used when a user needs to define a function in just a single expression, usually a function that takes an argument and performs an action on it. Lambda functions can also be used in Python as an alternative to traditional functions when they’re used within a code block, making the code more concise and easier to understand. Lambda functions can also be used to pass a function as an argument to another function. Finally, lambda functions can also be used to create smaller, simpler anonymous functions when the full power of Python’s functions is not required."
    },
    {
        "instruction": "Write a Python script that prints the current date and time. ",
        "response": "from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%d-%m-%Y %H:%M:%S\"))"
    },
    {
        "instruction": "Write a JavaScript function that sorts an array of strings alphabetically. myArray = [\"cat\",\"apple\",\"dog\"]",
        "response": "function sortArray(arr) {\n    let sortedArray = arr.sort();\n    return sortedArray;\n}"
    },
    {
        "instruction": "Write a JavaScript function to check if a string ends with the given substring. mainStr = “Hello World”\nsubStr = “orld”",
        "response": "function endsWith(mainStr, subStr) {\n    let startIndex = mainStr.length - subStr.length;\n    let checkStr = mainStr.substring(startIndex);\n    return checkStr === subStr;\n}"
    },
    {
        "instruction": "Create a JavaScript program to convert temperatures between Celsius and Fahrenheit. ",
        "response": "function convertTemp(temp, unit) {\n    let newTemp;\n    if (unit === \"C\") {\n        newTemp = temp * 9/5 + 32;\n    } else {\n        newTemp = (temp - 32) * 5/9;\n    }\n    return newTemp;\n}"
    },
    {
        "instruction": "Change the following JavaScript function so that it returns true if the number passed as a parameter is even, and false if it is odd. function isEven(number) {\n  return number % 2;\n}",
        "response": "function isEven(number) {\n  return number % 2 === 0;\n}"
    },
    {
        "instruction": "Write a Python script to print out a 5x5 multiplication table. ",
        "response": "for i in range(1, 6):\n    for j in range(1, 6):\n        print(i * j, end=\"\\t\")\n    print()"
    },
    {
        "instruction": "Create a HTTP GET request using Python. ",
        "response": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nprint(response.text)"
    },
    {
        "instruction": "Create a Python dictionary that contains the following key-value pairs: \"a\":1, \"b\":2, \"c\": 3. ",
        "response": "d = {\n  \"a\": 1,\n  \"b\": 2,\n  \"c\": 3\n}"
    },
    {
        "instruction": "What is the difference between variables declared with let and const in JavaScript? ",
        "response": "The difference between let and const is that variables declared with let can be reassigned a different value or reassigned a different value type. On the other hand, variables declared with const are fixed, and cannot be reassigned or reassigned a different value type."
    },
    {
        "instruction": "Convert the following function from Python to C++. def add_numbers(x, y):\n    return x + y",
        "response": "int add_numbers(int x, int y) {\n  return x + y;\n}"
    },
    {
        "instruction": "Describe the benefits of using JavaScript. ",
        "response": "JavaScript has many advantages, such as being easy to learn and implement, being interpreted rather than compiled, and being supported by all major browsers. JavaScript also allows for dynamic and interactive webpages, enabling more user engagement and more sophisticated web experiences. Finally, JavaScript has the ability to run on both the server side and the client side, providing flexibility in how the code is used."
    },
    {
        "instruction": "Given the following JSON structure, write a JavaScript expression that returns the value of the property \"firstName\". {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"age\": 25\n}",
        "response": "jsonObject.firstName"
    },
    {
        "instruction": "Create a function in JavaScript that takes two strings as parameters and returns the concatenation of both strings. ",
        "response": "const concatStrings = (string1, string2) => {\n    return string1 + string2;\n}"
    },
    {
        "instruction": "Rewrite the following JavaScript code in the Java language. const numList = [1, 2, 3, 4];\n\nnumList.map((num) => {\n  return num * 2;\n});",
        "response": "int[] numList = {1, 2, 3, 4};\n\nfor (int i = 0; i < numList.length; i++) {\n  numList[i] = numList[i] * 2;\n}"
    },
    {
        "instruction": "Create a Python program that takes a given list of strings and prints out the string with the maximum length. ['code', 'programming', 'computer science', 'javascript', 'HTML']",
        "response": "max_len = 0\nmax_string = ''\nfor elem in ['code', 'programming', 'computer science', 'javascript', 'HTML']:\n    if len(elem) > max_len:\n        max_len = len(elem)\n        max_string = elem\n\nprint(max_string)"
    },
    {
        "instruction": "Create a for loop in JavaScript to iterate through the given array and print out their sum. [20, 32, 45, 16]",
        "response": "let result = 0;\nlet numList = [20, 32, 45, 16];\n\nfor (let i = 0; i < numList.length; i++){\n    result += numList[i];\n}\n\nconsole.log(result);"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of strings and returns a new array containing the length of each string. ",
        "response": "const getLengths = (arr) => {\n     return arr.map(elem => elem.length);\n}"
    },
    {
        "instruction": "Convert the following pseudocode into Python code for i = 0 to 9\n    print i",
        "response": "for i in range(10):\n    print(i)"
    },
    {
        "instruction": "Create a program in python to find the longest common contiguous subarray between two integers. int arr1[7] = {1,2,4,4,4,4,7}\nint arr2[5] = {1,4,4,5,5}",
        "response": "def long_com_subarr(arr1, arr2):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    res = 0\n    count = 0 \n    \n    for i in range(len1):\n        for j in range(len2):\n            if arr1[i] == arr2[j]:\n                count += 1\n            else: \n                if result < count:\n                    res = count\n                count = 0\n    \n    return res"
    },
    {
        "instruction": "Write an algorithm in python to find the second largest number of an unsorted list arr = [1, 3, 4, 5, 9, 10, 11]",
        "response": "def find_sec_largest(arr):\n  max1 = max(arr[0], arr[1])\n  max2 = min(arr[0], arr[1])\n\n#Iterate over the array to find max2 and max1\nfor i in range(2, len(arr)):\n  if arr[i] > max1:\n    max2 = max1\n    max1 = arr[i]\n  elif arr[i] > max2 and arr[i]!=max1:\n    max2 = arr[i]\n  else:\n    continue\n\n# else return the second max\nreturn max2"
    },
    {
        "instruction": "Create a repeatable random number generator in Python ",
        "response": "import random\n\ndef repeatRandom(seed):\n  random.seed(seed)\n  return random.random()"
    },
    {
        "instruction": "Construct an algorithm in python to find the length of the longest common substring between two strings str1 = \"'abbcdefg\"\nstr2 = \"zabxdefujh\"",
        "response": "def longest_common_substring(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n    return result"
    },
    {
        "instruction": "Create a search algorithm in Python to find an element in a sorted array in less than log(n) time. arr = [1, 2, 3, 4, 5, 6, 7, 8]",
        "response": "def binarySearch(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n    return -1"
    },
    {
        "instruction": "Write a Python program to compute the gravitational force between two masses. m1 = 5 kg, m2 = 10 kg",
        "response": "def calc_grav_force(m1, m2):\n    G = 6.67 * 10 ** -11 # gravitational constant\n    force = G * m1 * m2 / (4 * 3.14 ** 2)\n    return force"
    },
    {
        "instruction": "Create a function in JavaScript to convert a given string to a positive integer. str = \"323\"",
        "response": "const convertStringToInteger = str => {\n  return  parseInt(str, 10);\n}"
    },
    {
        "instruction": "Create a function in JavaScript to create a subset of a given array. array = [1, 2, 3, 4, 5], k = 3",
        "response": "const subset = (array, k) => { \n  const output = []\n  for (let i = 0; i < k; i++) { \n      let index = Math.floor(Math.random() * array.length);\n      output.push(array.splice(index, 1)[0]);\n  }\n  return output;\n}"
    },
    {
        "instruction": "Write a Python program to generate a list that contains only the non-unique elements from a given list. [1,2,3,4,5,1,2,2,3,4]",
        "response": "def generate_non_unique_list(lst):\n new_list = []\n for i in lst:\n  if lst.count(i) > 1 and i not in new_list:\n   new_list.append(i)\n return new_list"
    },
    {
        "instruction": "Correct the following Python code so it prints out the current hour in 24-hour format. import datetime\n\ncurrent_hour = datetime.now()\nprint(\"Current hour is\")\nprint(current_hour.hour)",
        "response": "import datetime\n\ncurrent_time = datetime.datetime.now()\nprint(\"Current hour is\")\nprint(current_time.strftime(\"%H\"))"
    },
    {
        "instruction": "Create a virtual environment with Python version 2.7. ",
        "response": "pip install virtualenv\nvirtualenv -p python2.7 venv\nsource venv/bin/activate"
    },
    {
        "instruction": "Calculate the Fibonacci sequence till 10 using Python. ",
        "response": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nfor i in range(1,11): \n    print(Fibonacci(i))"
    },
    {
        "instruction": "Write a function in Javascript to check if a given list is palindrome. let list = [1, 2, 3, 3, 2, 1]",
        "response": "function isPalindrome(list) {\n    for (let i = 0; i < Math.floor(list.length / 2); i++) {\n        if (list[i] !== list[list.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Create a dictionary with two key-value pairs in Python. ",
        "response": "my_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}"
    },
    {
        "instruction": "Use python to call a API to get the current temperature in New York City? ",
        "response": "import requests\n\n# API call to get current temperatures in New York City\nurl = 'http://api.openweathermap.org/data/2.5/weather?q=New York City,NY&units=imperial'\nresponse = requests.get(url)\ndata = response.json()\ncurrent_temperature = data['main']['temp']\nprint(current_temperature)"
    },
    {
        "instruction": "Create a JavaScript regex to match an email address. ",
        "response": "let regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;"
    },
    {
        "instruction": "Create an object-oriented design in Python to represent a customer. ",
        "response": "class Customer:\n    def __init__(self, name, address, email):\n        self.name = name\n        self.address = address\n        self.email = email\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        self.name = name\n\n    def get_address(self):\n        return self.address\n\n    def set_address(self, address):\n        self.address = address\n\n    def get_email(self):\n        return self.email\n\n    def set_email(self, email):\n        self.email = email"
    },
    {
        "instruction": "Write a function in Python to shuffle an array. [1, 2, 3, 4, 5, 6]",
        "response": "import random\n\ndef shuffleArray(arr):\n    # Create a copy of the array\n    temp_arr = arr.copy()\n\n    # Iterate through the array and randomly\n    # swap elements\n    for i in range(len(temp_arr)):\n        j = random.randint(0, len(temp_arr)-1)\n        temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n\n    return temp_arr"
    },
    {
        "instruction": "Parse and convert a string containing a valid JSON to a Python dictionary. string = '{ \"a\": 1, \"b\": 2, \"c\": 3 }'",
        "response": "import json\n\ndef convert_json_string(string):\n    return json.loads(string)\n\nconvert_json_string(string) # Returns { \"a\": 1, \"b\": 2, \"c\": 3 }"
    },
    {
        "instruction": "Write a JavaScript method to return the sum of array elements. ",
        "response": "function sumArray (arr) {\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Implement a quick-sort algorithm in Python to sort a given array in ascending order. ",
        "response": "def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)"
    },
    {
        "instruction": "Create a class named Dog in Python. ",
        "response": "class Dog:\n    def __init__(self):\n        pass\n    \n    def bark(self):\n        print(\"Bark!\")"
    },
    {
        "instruction": "Create a distributed system using Python ",
        "response": "import multiprocessing\n\ndef send_task(task):\n    # Send the task to a worker process \n    pass\n\ndef process(task):\n    # Process the task \n    pass\n\nif __name__ == '__main__': \n    processes = []\n    # Create two processes\n    process1 = multiprocessing.Process(target=send_task, args=(task,))\n    process2 = multiprocessing.Process(target=process, args=(task,))\n    processes.append(process1) # Put processes in a list \n    processes.append(process2)\n\n    # Run processes\n    for process in processes:\n        process.start()\n\n    # Exit the completed processes\n    for process in processes:\n        process.join()"
    },
    {
        "instruction": "Write a Python program to implement a text-based game ",
        "response": "import random\n\ndef intro():\n    print(\"Welcome to the game! You are stuck in a dungeon and must find a way out. Type 'help' for instructions.\")\n\ndef help_command():\n  print(\"Type 'north', 'south', 'west', or 'east' to move in that direction. Type 'check inventory' to view items in your inventory. Type 'quit' to quit.\")\n\ndef move(direction):\n  if direction == 'north':\n    print(\"You moved north.\")\n  elif direction == 'south':\n    print(\"You moved south.\")\n  elif direction == 'west':\n    print(\"You moved west.\")\n  elif direction == 'east':\n    print(\"You moved east.\")\n\ndef check_inventory():\n  print(\"You have nothing in your inventory.\")\n\ndef quit_game():\n  print(\"Thanks for playing!\")\n  return False\n\nintro()\nplaying = True\nwhile playing:\n  command = input(\"What would you like to do? > \").lower()\n  if command == 'help':\n    help_command()\n  elif command == 'north' or command == 'south' or command == 'west' or command == 'east':\n    move(command)\n  elif command == 'check inventory':\n    check_inventory()\n  elif command == 'quit':\n    playing = quit_game()"
    },
    {
        "instruction": "Write a Python function to calculate the least common multiple of two numbers. ",
        "response": "def lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm\n\ndef gcd(a,b): \n    if a == 0 : \n        return b \n          \n    return gcd(b%a, a)"
    },
    {
        "instruction": "Write a Python class to represent a 2-dimensional point. ",
        "response": "class Point: \n    def __init__(self, x, y): \n        self.x = x \n        self.y = y \n        \n    def distance(self, other_point):\n        x1, y1 = self.x, self.y\n        x2, y2 = other_point.x, other_point.y\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5"
    },
    {
        "instruction": "Analyze the sentiment of this statement using Python. I am truly happy with the amazing results",
        "response": "import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"I am truly happy with the amazing results\"\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(sentence)\n\nprint(\"The sentiment of the statement is:\", sentiment['compound'])"
    },
    {
        "instruction": "Implement a binary search algorithm using Python. nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def binary_search(nums, target): \n    start = 0\n    end = len(nums) - 1\n\n    while start <= end:\n        mid = start + (end - start)//2\n\n        if nums[mid] == target:\n            return mid\n\n        if nums[mid] > target:\n            end = mid - 1\n\n        else: \n            start = mid + 1\n\n    return -1"
    },
    {
        "instruction": "Create a stack data structure using Python. ",
        "response": "class Stack: \n  \n    def __init__(self): \n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def is_empty(self):\n        return self.stack == []\n  \n    def pop(self): \n        if self.is_empty():\n            return None\n          \n        return self.stack.pop()"
    },
    {
        "instruction": "Write a Python program to check if a given number is divisible by 5 and 11 or not? ",
        "response": "def checkDivisibility(n):\n    if n % 5 == 0 and n % 11 == 0: \n        print(\"It is divisible by 5 and 11.\")\n    else: \n        print(\"It is not divisible by 5 and 11.\")\n     \n# Driver code \nn = 55\ncheckDivisibility(n)"
    },
    {
        "instruction": "Create a JavaScript function to simulate a dice roll with a random number generator? ",
        "response": "function rollDice() {\n  let max = 6;\n  let min = 1;\n  let randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n  return randomNumber;\n}"
    },
    {
        "instruction": "Translate the following word problem into Python code. Gary has 45 dollars, John has 11 dollars and Sam has 3 dollars. They decide to split their money equally.",
        "response": "gary_share = 45 // 3\njohn_share = 11 // 3\nsam_share = 3 // 3\ntotal_share = gary_share + john_share + sam_share\n\nprint('Gary has {} dollars, John has {} dollars and Sam has {} dollars. The each get {} dollars in total.'.format(gary_share, john_share, sam_share, total_share))"
    },
    {
        "instruction": "Update the following code, to use Python's modern type hint annotation. def my_func(list):\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result",
        "response": "def my_func(list: list) -> int:\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result"
    },
    {
        "instruction": "Write a JavaScript function to format a number to a specific number of decimal places. 3.14159\n2 decimal places",
        "response": "function formatNumber(num, decimalPlaces){\n   var result = num.toFixed(decimalPlaces);\n   return result;\n}\n\nconsole.log(formatNumber(3.14159, 2));\n\n# 3.14"
    },
    {
        "instruction": "Evaluate the sum of two numbers using a JavaScript expression. x = 3;\ny = 5;",
        "response": "x + y"
    },
    {
        "instruction": "Write a function to perform regex match in Python. ",
        "response": "def regex_match(string, pattern):\n  return re.match(pattern, string)"
    },
    {
        "instruction": "Write a JavaScript ternary operator to add 10 if a number is even else subtract 10 from it. x = 8",
        "response": "(x % 2 == 0) ? x + 10 : x - 10;"
    },
    {
        "instruction": "Create a JavaScript function to extract the text from a given HTML element. ",
        "response": "function extractText(element) {\n  return element.textContent || element.innerText;\n}"
    },
    {
        "instruction": "Write a JavaScript function to extract the numbers in the given string. \"a1b2c3\"",
        "response": "function extractNumbers(string) {\n  return string.replace(/\\D/g, '');\n}"
    },
    {
        "instruction": "Create a function in Python to find the highest common factor (HCF) of two numbers. a = 30 / b = 12",
        "response": "def hcf(a, b):\n    j = min(a,b)\n    hcf = 1\n    for i in range(2, j+1):\n        if(a%i == 0 and b%i == 0):\n            hcf = i\n    \n    return hcf"
    },
    {
        "instruction": "Write a JavaScript program to convert month numbers to month names. ",
        "response": "function monthName(num) {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return months[num - 1];\n}"
    },
    {
        "instruction": "Modify the given python program to accept an input string and output the length of that string. def func():\n    print(\"Hello World!\")",
        "response": "def func(s):\n    print(\"Length of the string is: \" + str(len(s)))"
    },
    {
        "instruction": "Create a JavaScript code to accept a number and check if it is a prime number. ",
        "response": "function is_prime(num) {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Generate an array of numbers from 0-10 in Python. ",
        "response": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "instruction": "Create a for loop in JavaScript to print out numbers from 0-10. ",
        "response": "for (let i = 0; i <= 10; i++) { \n  console.log(i); \n}"
    },
    {
        "instruction": "Create an object in JavaScript with properties name, age, and location. Name = Sam, Age = 30, Location = New York",
        "response": "let person = {\n  name: \"Sam\",\n  age: 30,\n  location: \"New York\"\n};"
    },
    {
        "instruction": "Generate a random number between 0-100 in Python. ",
        "response": "import random \n  \n#Generate a random number between 0-100\nrandomNum =  random.randint(0, 100) \nprint (\"Random number:\", randomNum)"
    },
    {
        "instruction": "Create a function in Python to multiply two matrices. matrixA = [[1, 2], [3, 4]], matrixB = [[5, 6], [7, 8]]",
        "response": "def multiplyMatrix(A, B):\n    rowsA = len(A)\n    columnsA = len(A[0])\n    rowsB = len(B)\n    columnsB = len(B[0])\n    \n    if columnsA != rowsB:\n        print(\"Cannot multiply\")\n        return\n    \n    result = [[0 for row in range(columnsB)] for col in range(rowsA)]\n    \n    # Compute matrix multiplication\n    for i in range(rowsA):\n        for j in range(columnsB):\n            for k in range(columnsA):\n                result[i][j] += A[i][k] * B[k][j]\n    \n    return result\n\nA = [[1, 2], [3, 4]]\nB = [[5, 6], [7, 8]]\n\n print(\"Result:\")\n result = multiplyMatrix(A, B) \n  \nfor i in result: \n    print(i)"
    },
    {
        "instruction": "Write a JavaScript program to calculate the sum of the first 10 even numbers. ",
        "response": "let sum = 0;\nfor (let i = 0; i <= 10; i += 2) {\n   sum += i;\n}\nconsole.log(sum);"
    },
    {
        "instruction": "Create a JavaScript program to validate the username entered by the user. ",
        "response": "function validateUsername(username) {\n    let rx =\n        new RegExp('^[A-Za-z0-9_]{3,20}$');\n    return rx.test(username);\n}"
    },
    {
        "instruction": "How would you sort the following list of strings in alphabetical order? list1 = [\"Ruby\", \"Python\", \"JavaScript\"]",
        "response": "def sort_list(list1): \n    return sorted(list1) \n\nInput:\nlist1 = [\"Ruby\", \"Python\", \"JavaScript\"]\n\nOutput:\n[\"JavaScript\", \"Python\", \"Ruby\"]"
    },
    {
        "instruction": "Write a JavaScript code snippet to toggle a div's visibility. ",
        "response": "const toggleDiv = () => {\n    const div = document.querySelector('.div');\n    if (div.style.display === 'none') {\n        div.style.display = 'block';\n    } else {\n        div.style.display = 'none';\n    }\n}"
    },
    {
        "instruction": "Create a program to create a dictionary with words and their frequencies from a given sentence. sentence = \"Python is an easy, powerful language with a simple syntax and high readability\"",
        "response": "def create_dict(sentence):\n    words = sentence.split()\n    res = {}\n    for word in words:\n        res[word] = words.count(word)\n    return res\n\n# Output\n{'Python': 1, 'is': 1, 'an': 1, 'easy,': 1, 'powerful': 1, 'language': 1, 'with': 1, 'a': 1, 'simple': 1, 'syntax': 1, 'and': 1, 'high': 1, 'readability': 1}"
    },
    {
        "instruction": "Create a class in Python for representing a 2-dimensional point. ",
        "response": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y"
    },
    {
        "instruction": "Create an array in Python containing the cube of all the integers from 1 to 10. ",
        "response": "import array\nint_array = array.array(\"i\", [i*i*i for i in range(1, 11)])"
    },
    {
        "instruction": "Given a string s and a character c, write a Python program to count the number of occurrences of c in s. s = 'apple'\nc = 'p'",
        "response": "count = 0 \nfor char in s:\n if char == c:\n count += 1\nprint(count)"
    },
    {
        "instruction": "Write a Python code to open a web page and print its content. url = \"www.wikipedia.org\"",
        "response": "import requests\n\nurl = \"www.wikipedia.org\"\n\ntry:\n    response = requests.get(url)\n    if response.status_code == 200:\n        print(response.text)\n    else:\n        print(\"Oops! Something went wrong!\")\n\nexcept Exception as e:\n    print(\"Exception occurred: %s\" % (e))"
    },
    {
        "instruction": "Generate a function to convert seconds to time format in JavaScript. ",
        "response": "function convertSecondsToTime(seconds) {\n const hours = Math.floor(seconds / 3600);\n const minutes = Math.floor((seconds % 3600) / 60);\n const seconds = seconds % 60;\n return { hours, minutes, seconds };\n}"
    },
    {
        "instruction": "Correct the syntax errors in the following JavaScript snippet. let outpt;\nif(val == 1)\n outpt = 1;\nelse\n outpt = 2;",
        "response": "let output;\nif(val == 1) {\n output = 1;\n} else {\n output = 2;\n}"
    },
    {
        "instruction": "Write a SQL query to select the elements from the table whose ID is not present in the given python list. Table: 'products'\nColumns: 'id', 'name', 'category', 'price'\nPython List: [2, 3, 8]",
        "response": "SELECT * FROM products WHERE id NOT IN (2,3,8);"
    },
    {
        "instruction": "Add functionality to a given Python class to retrieve a book ISBN by its title. ",
        "response": "class Book:\n    def __init__(self, title, isbn):\n        self.title = title\n        self.isbn = isbn\n        \n    def get_ISBN_by_title(self, title):\n        if self.title == title:\n            return self.isbn\n        else:\n            return None"
    },
    {
        "instruction": "Write a function in Python to convert a given decimal number into its binary form. ",
        "response": "def decimal_to_binary(num):\n    binary = []\n\n    while num > 0:\n        binary.append(num%2)\n        num //= 2\n    binary.reverse()\n    return binary"
    },
    {
        "instruction": "Implement a function in Python that takes an array of numbers and returns the index of the maximum element. [4,7,9,2,10]",
        "response": "def find_index_max(arr):\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[max_index] < arr[i]:\n            max_index = i\n    return max_index"
    },
    {
        "instruction": "Create an API call in Python to search for a movie by title. ",
        "response": "import requests\n\ndef search_movie_by_title(title):\n    url = 'https://api.themoviedb.org/3/search/movie?api_key=<api_key>&query=' + title\n    response = requests.get(url).json()\n    return response"
    },
    {
        "instruction": "Compare two JSON objects in Python. first_obj = {\n    'name': 'John',\n    'age': 30\n}\nsecond_obj = {\n    'name': 'John',\n    'age': 34\n}",
        "response": "import json\n\n# Compare two JSON objects and return `True` if equal, `False` if not\ndef compare_json_objects(first_obj, second_obj):\n    first_obj_str = json.dumps(first_obj)\n    second_obj_str = json.dumps(second_obj)\n    if first_obj_str == second_obj_str:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    first_obj = {\n        'name': 'John',\n        'age': 30\n    }\n    second_obj = {\n        'name': 'John',\n        'age': 34\n    }\n    print(compare_json_objects(first_obj, second_obj))"
    },
    {
        "instruction": "Write a code to convert an integer to a float in Python. ",
        "response": "# Convert an integer to a float in Python\ndef int_to_float(num):\n    return float(num)\n\nif __name__ == '__main__':\n    integer = 5 # Sample integer\n    print(int_to_float(integer))"
    },
    {
        "instruction": "Find the maximum value from a Python dictionary. sample_dict = {'a': 10, 'b': 20, 'c': 40, 'd': 30}",
        "response": "def find_max(sample_dict):\n  max_val = 0\n  for key, val in sample_dict.items():\n    if val > max_val:\n      max_val = val\n  return max_val"
    },
    {
        "instruction": "Find the number of words in a given sentence using a Python function. sentence = \"This is a test sentence\"",
        "response": "def word_count(sentence):\n  return len(sentence.split())"
    },
    {
        "instruction": "Convert the following Celsius temperature to Fahrenheit using a JavaScript function. temperature = -4.5",
        "response": "function celsiusToFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\nvar fahrenheit = celsiusToFahrenheit(-4.5);"
    },
    {
        "instruction": "Create a function that takes in a list of strings and returns a new list of only the strings longer than 4 characters. ['Python', 'JavaScript', 'C++', 'Scala', 'Haskell']",
        "response": "def filter_long_words(str_list):\n    \"\"\"This function takes a list of strings and returns a new list of only the strings longer than 4 characters\"\"\"\n    result = []\n    for word in str_list:\n        if len(word) > 4:\n            result.append(word)\n    return result"
    },
    {
        "instruction": "Write a python program to determine whether a given number is a perfect square or not. ",
        "response": "def is_perfect_square(n):\n    \"\"\"This function takes a number as input and determines whether it is a perfect square or not\"\"\"\n    i = 1\n    while i*i < n:\n        i += 1\n    if i*i == n:\n        return True\n    return False"
    },
    {
        "instruction": "Generate a code that concatenates a reversed copy of a given string to itself. Python",
        "response": "def concatenate_reversed(s):\n    \"\"\"This function takes a string as input and concatenates a reversed copy of it to itself\"\"\"\n    return s + s[::-1]"
    },
    {
        "instruction": "Replace the \"TODO\" with the appropriate code for implementing a binary search algorithm in Python. # TODO",
        "response": "def binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        elif arr[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "instruction": "Write a Python program to print the multiplication table of a number. ",
        "response": "def print_mult_table(n):\n    for i in range(1, 11):\n        print('{} x {} = {}'.format(n, i, n*i))"
    },
    {
        "instruction": "Create a function to merge two dictionaries in Python. ",
        "response": "def merge_dicts(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict"
    },
    {
        "instruction": "Given a JavaScript string, replace all instances of the word \"today\" with the word \"tomorrow\". let str = \"Today is a great day.\"",
        "response": "let str = \"Tomorrow is a great day.\""
    },
    {
        "instruction": "Create a Python class called \"Person\" with name and age as attributes. ",
        "response": "class Person:\n def __init__(self, name, age):\n     self.name = name\n     self.age = age"
    },
    {
        "instruction": "Given a Python dictionary with integer keys, write a function to convert the dictionary into a list of tuples. d = {1: 'a', 2: 'b'}",
        "response": "def dict_to_tuple(d):\n  return list(d.items())"
    },
    {
        "instruction": "Write a short JavaScript program to detect browser type. ",
        "response": "function detectBrowser() { \n        // return the browser version \n        var browserName = navigator.appName;\n        var browserVersion = navigator.appVersion;\n        return (browserName + \" \" + browserVersion);\n    }"
    },
    {
        "instruction": "What is the purpose of an immutable object in Python? ",
        "response": "The purpose of an immutable object in Python is to make sure that once an object is created, it cannot be modified. This is useful when data must not change between multiple parts of a program. Immutable objects can also help ensure thread safety by preventing different threads from modifying the same data."
    },
    {
        "instruction": "Generate a JavaScript program to check if a number is within a given range Lower bound x = 10 \nUpper bound y = 20",
        "response": "function withinRange(number, x, y) \n{\n    return (number >= x && number <= y);\n}"
    },
    {
        "instruction": "Write a Python code snippet to calculate the area of a triangle with side lengths 3, 4, and 5. ",
        "response": "def area(a, b, c):\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\nprint(area(3, 4, 5)) # 6.0"
    },
    {
        "instruction": "Write a code snippet using Python to print the following sentence \"Programming is fun!\". ",
        "response": "print(\"Programming is fun!\")"
    },
    {
        "instruction": "Create an object data structure in JavaScript to represent a student and store details such as student's name, age, gender, and program. ",
        "response": "let student = {\n  name: '',\n  age: 0,\n  gender: '',\n  program: ''\n};"
    },
    {
        "instruction": "Design a data structure using JavaScript to represent a binary tree. ",
        "response": "class Node {\n  constructor(data, left = null, right = null) {\n      this.data = data;\n      this.left = left;\n      this.right = right;\n  }\n}\n\nclass BinaryTree {\n  constructor() {\n      this.root = null;\n  }\n}"
    },
    {
        "instruction": "Generate a random array of 10 integers using JavaScript. ",
        "response": "let randomArray = []; \nfor(let i = 0; i < 10; i++) { \n    randomArray.push(Math.floor(Math.random() * 100)); \n} \nconsole.log(randomArray);"
    },
    {
        "instruction": "Create a Python program to remove the characters from specific index within a string. mystring = \"Hello, World!\"\nindex = 5",
        "response": "mystring = \"Hello, World!\"\nindex = 5\n\nresult = mystring[:index] + mystring[index+1:]\n\nprint(\"Result after removing characters from index {}: {}\".format(index, result))"
    },
    {
        "instruction": "Create a Python class with the same content as a JSON string. myjson_string = '{\"name\": \"John\", \"age\": 20}'",
        "response": "import json\n\nclass Person:\n def __init__(self, json_string):\n  data = json.loads(json_string)\n  self.name = data['name']\n  self.age = data['age']\n\nmyjson_string = '{\"name\": \"John\", \"age\": 20}'\nperson = Person(myjson_string)\nprint(person.name, person.age)"
    },
    {
        "instruction": "Write a JavaScript code snippet for validating an email address. ",
        "response": "function validateEmail(email) {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}"
    },
    {
        "instruction": "Edit the given Python code to make the algorithm run faster. def slow_algo(n):\n    result = 0\n    for i in range(n):\n        result += i\n    return result",
        "response": "def fast_algo(n):\n    result = (n * (n + 1))// 2\n    return result"
    },
    {
        "instruction": "Write a function in Python to convert JSON data into a Python dictionary. json_data = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'",
        "response": "import json\n\ndef json_to_dict(json_data):\n return json.loads(json_data)\n\ndata = json_to_dict(json_data)\nprint(data)"
    },
    {
        "instruction": "Create a Python function to insert a new element in a list at the given index. list1 = [1, 2, 3, 4, 5]\nindex = 3\nelement = 6",
        "response": "def insert_element(lst, idx, element):\n lst.insert(idx, element)\n return lst\n\nlist1 = insert_element(list1, index, element)\nprint(list1)"
    },
    {
        "instruction": "Write a function in Python to calculate the Euclidean Distance between two points. point1 = [-1, 0]\npoint2 = [4, 7]",
        "response": "def euclidean_distance(point1, point2):\n from math import sqrt\n return sqrt(sum([(x - y)**2 for x, y in zip(point1, point2)]))\n\ndistance = euclidean_distance(point1, point2)\nprint(distance)"
    },
    {
        "instruction": "Write the output of this Python code. a = 10\nb = 5\nc = 6\n\nprint(a + b * c)",
        "response": "56"
    },
    {
        "instruction": "Convert this python code into Java code my_list = [1, 2, 3, 4, 5]\n\nfor i in my_list:\n    if i % 2 == 0:\n        print(i)",
        "response": "int[] my_list = {1,2,3,4,5};\n\nfor(int i : my_list){\n   if(i % 2 == 0)\n       System.out.println(i);\n}"
    },
    {
        "instruction": "Write a Python program to combine the elements of two lists of equal length into a dictionary. list1 = ['a', 'b', 'c'] \nlist2 = [1, 2, 3]",
        "response": "dict = {}\nfor i in range(len(list1)): \n    dict[list1[i]] = list2[i] \n  \nprint(dict)"
    },
    {
        "instruction": "Create a Python function to calculate the area of a triangle using Heron’s formula. a = 4\nb = 5\nc = 7",
        "response": "def triangle_area(a, b, c):\n    \"\"\"Calculate the area of a triangle using Heron's formula\"\"\"\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(a, b, c))"
    },
    {
        "instruction": "Create a python program that takes a sentence as input and returns the amount of vowels that occur in the sentence ",
        "response": "def count_vowels(sentence):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in sentence:\n        if char in vowels:\n            count += 1\n    return count"
    },
    {
        "instruction": "Call a user-defined function in Python. def add_two_numbers(x, y):\nreturn x + y",
        "response": "result = add_two_numbers(3, 5)\nprint(result)  # Outputs 8"
    },
    {
        "instruction": "Write a function in JavaScript to print the Fibonacci sequence up to the given number. ",
        "response": "function fibonacciSequence(n) {\n    let sequence = [0, 1]\n    let i = 2 \n    while (i < n) {\n        sequence.push(sequence[i - 2] + sequence[i - 1]);\n        i++;\n    }\n    return sequence;\n}"
    },
    {
        "instruction": "Write a JavaScript code to compare the values of two strings ",
        "response": "if (string1 === string2) {\n    console.log(\"The strings are equal.\")\n} else {\n    console.log(\"The strings are not equal.\")\n}"
    },
    {
        "instruction": "Write a JavaScript function to find the longest common subsequence between two given sequences. sequence1 = [1, 5, 9, 3, 2]\nsequence2 = [8, 2, 5, 7]",
        "response": "function longestCommonSubsequence(sequence1, sequence2) {\n let dp = [];\n\n for(let i=0; i<=sequence1.length; i++) {\n  dp.push([]);\n  for(let j=0; j<=sequence2.length; j++) {\n   dp[i][j] = 0;\n  }\n }\n\n for(let i=1; i<=sequence1.length; i++) {\n  for(let j=1; j<=sequence2.length; j++) {\n   if(sequence1[i-1] == sequence2[j-1]) {\n    dp[i][j] =1+ dp[i-1][j-1];\n   }\n   else {\n    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n   }\n  }\n }\n return dp[sequence1.length][sequence2.length];\n}"
    },
    {
        "instruction": "How do you import the math module in a Python program? ",
        "response": "import math"
    },
    {
        "instruction": "Write a JavaScript function to generate all possible combinations of a given set of elements. ",
        "response": "function getCombinations(array) {\n  let result = [];\n  for (let i = 0;i < array.length; i++) {\n    let current = array.splice(i, 1);\n    let tempArray = array.slice();\n    if (array.length > 1) {\n      let tempPermutations = getCombinations(tempArray);\n      tempPermutations.forEach(permutations => {\n        result.push(current.concat(permutations));\n      });\n    } else {\n      result.push(current.concat(array));\n    }\n    array.splice(i, 0, current[0]);\n  }\n  return result;\n}"
    },
    {
        "instruction": "Manipulate the spreadsheet with Python to identify duplicates in column A. ",
        "response": "def find_duplicates(spreadsheet):\n    df = pd.read_excel(spreadsheet)\n    return df['A'][df['A'].duplicated(keep=False)]"
    },
    {
        "instruction": "Write a JavaScript code to merge two arrays into a third array. arr1 = [“a”, “b”]\narr2 = [1, 2]",
        "response": "let arr3 = [...arr1, ...arr2];\n\nconsole.log(arr3); // [\"a\", \"b\", 1, 2]"
    },
    {
        "instruction": "Develop a Python code to replace all occurrences of a specified phrase in a string. string = \"This is a sample string. This has to be replaced.\"\nphrase = \"This\"\nnewString = \"That\"",
        "response": "string = string.replace(phrase, newString) \nprint(string) \n\n# Output: \nThat is a sample string. That has to be replaced."
    },
    {
        "instruction": "Write a JavaScript program to check if two numbers are equal. 3 and 5",
        "response": "function areEqual(x, y){\n    if (x === y){\n        return true;\n    }\n    else{\n        return false;\n    }\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes in an array as an argument and counts the occurrence of a given element [1, 2, 2, 4, 6], element=2",
        "response": "function countOccurrence(arr, element) {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == element) {\n      count++;\n    }\n  }\n  return count;\n}\n\nlet arr = [1, 2, 2, 4, 6];\nlet element = 2;\nconsole.log(countOccurrence(arr, element)); // Output: 2"
    },
    {
        "instruction": "Implement a python function to return \"true\" if the string is a palindrome and \"false\" if it is not ",
        "response": "def is_palindrome(s): \n    # Reversing string \n    rev = s[::-1] \n  \n    # Checking if reversed string is equal to  \n    # original string \n    if (s == rev): \n        return \"true\"\n    else: \n        return \"false\""
    },
    {
        "instruction": "Create a Python program to remove an item from a given list ",
        "response": "def remove_item_from_list(my_list, item):\n    if item in my_list:\n        my_list.remove(item)\n    return my_list"
    },
    {
        "instruction": "Create a JavaScript code snippet to generate a random number between 0 and 100 ",
        "response": "function getRandomNumberBetween0And100() {\n  return Math.floor(Math.random() * 101);\n}\n\nlet randomNumber = getRandomNumberBetween0And100();\nconsole.log(randomNumber);"
    },
    {
        "instruction": "Create an algorithm using JavaScript that finds the largest number in an array. [1, 7, 4, 11, 18]",
        "response": "function findLargestNumber(nums) {\n    let largest = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] > largest) {\n            largest = nums[i];\n        }\n    }\n    return largest;\n}"
    },
    {
        "instruction": "Create a JavaScript program to toggle a boolean value. ",
        "response": "function toggleBoolean(val) {\n  return !val\n}"
    },
    {
        "instruction": "Fix the following JavaScript bug. function helloWorld() {\n  console.log('Hello' + 'World')",
        "response": "function helloWorld() {\n  console.log('Hello' + ' ' + 'World')"
    },
    {
        "instruction": "Create a Python script that takes a list of numbers as an argument and returns the maximum number in the list. numbers = [8, 1, 2, 3, 4, 5, 6, 7]",
        "response": "def maximum_number(numbers):\n    max_number = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_num:\n            max_number = numbers[i]\n    \n    return max_number\n\nmax_number = maximum_number(numbers)\nprint(max_number) # 8"
    },
    {
        "instruction": "Assign a variable 'name' with a value of your choice in JavaScript. ",
        "response": "let name = \"John\";"
    },
    {
        "instruction": "Create a while loop in Python to print all odd numbers between two numbers A and B (both inclusive). ",
        "response": "a = int(input(\"Enter lower range: \"))\nb = int(input(\"Enter upper range: \"))\n\nwhile a <= b: \n    if a % 2 != 0: \n        print(a) \n    a += 1"
    },
    {
        "instruction": "Develop a classifier in Python to predict the language of a given text. ",
        "response": "import nltk\n\nclass LanguageClassifier(object):\n\t\n    def __init__(self):\n        self.languages = []\n\t\n    def train(self, data):\n        train_sents = []\n        train_tags = []\n\n        # extract sentences and tags from data\n        for lang, sentences in data.items():\n            self.languages.append(lang)\n            train_sents.extend(sentences)\n            train_tags.extend([lang] * len(sentences))\n\n        # build featureset\n        feature_set = []\n        for (words, lang) in zip(train_sents, train_tags):\n            words_dict = dict([(word, True) for word in words])\n            feature_set.append((words_dict, lang))\n\t\n        # train classifier\n        self.classifier = nltk.NaiveBayesClassifier.train(feature_set)\n\n    def predict(self, sentence):\n        words_dict = dict([(word, True) for word in sentence])\n        return self.classifier.classify(words_dict)"
    },
    {
        "instruction": "Generate a function to sort a 2-dimensional list in Python by the values of the second element in each sublist. ",
        "response": "def sort_by_second_element(lst): \n    lst.sort(key = lambda x: x[1]) \n    return lst"
    },
    {
        "instruction": "Take the following algorithm and turn it into a Python program. ",
        "response": "# Function to calculate \n# maximum number of edges \n# that can be added \n# to a graph without cycles \ndef max_edges(total_nodes): \n\t# initialize result to 0 \n\tresult = 0 \n\t\n\t# consider every pair of nodes \n\tfor i in range(total_nodes): \n\t\tfor j in range(i + 1, total_nodes): \n\t\t\tresult += 1  \n\t\t\n\t# return the result \n\treturn result"
    },
    {
        "instruction": "Develop an algorithm to find the greatest common factor (GCF) of two numbers in Python. ",
        "response": "def gcf(a,b):\n    if a == 0 :\n        return b \n    return gcf(b % a, a)"
    },
    {
        "instruction": "Rewrite the following python program to convert UTC time to local time. from datetime import datetime, timedelta\n\nutc_time = datetime.utcnow()",
        "response": "from datetime import datetime, timedelta \nimport time \n\nutc_time = datetime.utcnow()\nlocal_time = time.localtime(time.mktime(utc_time.timetuple())) \n\nprint(\"Local time: \", local_time)"
    },
    {
        "instruction": "Write a script in JavaScript for reversing an array. ",
        "response": "const reverseArray = arr => \n    arr.slice().reverse();"
    },
    {
        "instruction": "Suggest a loop in JavaScript for traversing an array of objects. ",
        "response": "for (let obj of array) {\n  // Your loop code here\n}"
    },
    {
        "instruction": "Suggest code for finding the maximum element in a Python dictionary. ",
        "response": "key_max = max(map_dictionary.keys(), key=(lambda k: map_dictionary[k])) \nval_max = map_dictionary[key_max]"
    },
    {
        "instruction": "Suggest a function in JavaScript for repeating a given string a specified number of times. ",
        "response": "const repeat = (str, n) => \n    Array(n).fill(str).join('');"
    },
    {
        "instruction": "How can you replace a specific element from an array in JavaScript? ",
        "response": "The element can be replaced in JavaScript by using the Array.prototype.fill() method. \n\nFor example:\narr.fill(value, start, end); \n// start is the index of the first element to be replaced, end is the index of the last element to be replaced."
    },
    {
        "instruction": "Suggest a way to remove duplicate characters from a string in JavaScript. ",
        "response": "The Set data structure can be used to remove duplicate characters from a string in JavaScript. \n\nFor example:\n[...new Set(\"string\")].join(\"\"); // returns \"strng\""
    },
    {
        "instruction": "Write a script for reversing the order of alphabets in a string in Python. ",
        "response": "def reverseAlphabets(string): \n    string = ''.join(reversed(string)) \n    return string \n \nstring = \"string\"\nprint(reverseAlphabets(string)) # Output: gnirts"
    },
    {
        "instruction": "Write a Python script for checking if a given number is an even or odd number. ",
        "response": "\"\"\"\nCheck a given number is even or odd\n\"\"\"\ndef check_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number to check : \"))\n    print(\"The given number is\",check_even_or_odd(num))"
    },
    {
        "instruction": "Create an array in JavaScript of 10 numbers ranging from 1 to 100. ",
        "response": "// Create an array of 10 numbers ranging from 1 to 100\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\narray = array.map(num => num * 10);\nconsole.log(array); // [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
    },
    {
        "instruction": "What are three methods to reverse a string in JavaScript? ",
        "response": "Three methods to reverse a string in JavaScript are: \n1. Using the reverse() method \n2. Using a for loop \n3. Using the split() and join() methods"
    },
    {
        "instruction": "Using JavaScript, create a function that takes two arguments and returns the greater one. ",
        "response": "function getGreater(num1, num2) {\n return Math.max(num1, num2);\n}"
    },
    {
        "instruction": "Implement an iterator in Python for the following string. string = 'Hello World!'",
        "response": "class Iterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\niterator = Iterator(string)\nfor char in iterator:\n    print(char)"
    },
    {
        "instruction": "Implement bubble sort in Python. ",
        "response": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]"
    },
    {
        "instruction": "Write a function definition in JavaScript that calculates the factorial of a number. ",
        "response": "function factorial(n) {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    fact = fact * i;\n  }\n  return fact;\n}"
    },
    {
        "instruction": "Create a Python program to edit the following line of code to change the text color of the button. <button>Press Me</button>",
        "response": "<button style=\"color: red;\">Press Me</button>"
    },
    {
        "instruction": "Given the following JSON data, create a Python program to read the data and print the name of the city with the highest population. {\n  \"cities\": [\n    {\n      \"name\": \"New York\",\n      \"population\": 8175133\n    },\n    {\n      \"name\": \"Los Angeles\",\n      \"population\": 3792621\n    },\n    {\n      \"name\": \"Chicago\",\n      \"population\": 2695598\n    }\n  ]\n}",
        "response": "import json\n\nwith open('data.json') as f:\n    data = json.load(f)\n\nmax_population = 0\nmax_city_name = \"\"\nfor city in data['cities']:\n    if city['population'] > max_population:\n        max_population = city['population']\n        max_city_name = city['name']\n\nprint(\"The city with the highest population is\", max_city_name)"
    },
    {
        "instruction": "Write a JavaScript code to create a Date object. ",
        "response": "let today = new Date();"
    },
    {
        "instruction": "Write a Python method to generate a random string of length 10 ",
        "response": "import random\nimport string\n\ndef random_string(length):\n    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))"
    },
    {
        "instruction": "Write a JavaScript expression to compute the remainder of 5 divided by 3. ",
        "response": "5 % 3;"
    },
    {
        "instruction": "Write a Python code to create two empty lists. ",
        "response": "list_one = []\nlist_two = []"
    },
    {
        "instruction": "Write a Python code to extract the first 3 elements of the following list. list = [1, 2, 3, 4, 5]",
        "response": "first_three_elements = list[:3]"
    },
    {
        "instruction": "What is the significance of the ‘except’ statement in Python? ",
        "response": "The ‘except’ statement in python is used to handle exceptions that may arise while executing a program. Exceptions can be either syntactic or logical errors. The ‘except’ statement can be used to catch the specific type of exception and handle them appropriately. For example, it can be used to catch a ValueError, TypeError or IndexError, or any other type of exception, and appropriately handle it."
    },
    {
        "instruction": "How do we define the scope of a variable in Python? ",
        "response": "In Python, the scope of a variable is determined by the location of its definition. Variables defined within a function have a local scope, while variables defined outside a function have a global scope. Local variables are accessible only within the same function in which they are declared, while global variables are accessible within all functions."
    },
    {
        "instruction": "Generate a JavaScript algorithm to sort a given array Input array: [2, 3, 1, 4]",
        "response": "function sortArray(nums) {\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = i + 1; j < nums.length; j++) {\n            if (nums[j] < nums[i]) {\n                let temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n    return nums;\n}"
    },
    {
        "instruction": "Generate Python code to reverse a string Input string: Hello",
        "response": "def reverseString(str): \n    reversed_str = \"\" \n    for i in str: \n        reversed_str = i + reversed_str \n    return reversed_str   \n\nreverseString(\"Hello\")"
    },
    {
        "instruction": "Create a for-loop in Python for printing all numbers from 1 to 9 (inclusive). ",
        "response": "for x in range(1, 10): \n  print(x)"
    },
    {
        "instruction": "Create a dictionary in Python with two keys and it corresponds to two values. ",
        "response": "my_dict = {\"key1\" : \"value1\", \"key2\" : \"value2\"}"
    },
    {
        "instruction": "Modify the given Python code to redirect to a different page when the button is clicked. <button>Visit example.com</button>",
        "response": "<button onclick=\"window.location.href='https://example.com/';\">Visit example.com</button>"
    },
    {
        "instruction": "Create an array of 8 string objects in JavaScript with different values. ",
        "response": "var stringArray = [\"word1\", \"word2\", \"word3\", \"word4\", \"word5\", \"word6\", \"word7\", \"word8\"];"
    },
    {
        "instruction": "Generate a random string using 8 characters in Python. ",
        "response": "import random \nimport string\n\ndef generate_random_string(size):\n    return ''.join(random.choices(string.ascii_uppercase + string.digits, k = size))\n    \nprint(generate_random_string(8))"
    },
    {
        "instruction": "How to make an http request in Python ",
        "response": "import requests\n\nr = requests.get('http://www.example.com/')\nprint(r.text)"
    },
    {
        "instruction": "How to redirect a page using JavaScript ",
        "response": "window.location.replace(\"http://www.example.com\");"
    },
    {
        "instruction": "Write a code to check if the string has all unique characters in Python ",
        "response": "def isUnique(string): \n \n    # Assuming character set is ASCII (128 characters) \n    if len(string) > 128: \n        return False\n \n    char_set = [False for _ in range(128)] \n    for char in string: \n        char_value = ord(char) \n \n        if char_set[char_value]: \n            return False\n \n        char_set[char_value] = True\n \n    return True"
    },
    {
        "instruction": "Write a code to get the current time in Python ",
        "response": "import time\n\n# return UTC time as a float\ncurrent_time = time.time()\n\n# return current time as a string in this format:\n# 'Thu Feb 28 15: 16: 14 2019'\ncurrent_time_str = time.ctime()"
    },
    {
        "instruction": "How to remove the first and last characters from a string in JavaScript? ",
        "response": "let str = 'Hello World!';\nlet newStr = str.slice(1, -1);\nconsole.log(newStr); //outputs 'ello Worl'"
    },
    {
        "instruction": "How to reverse a given string in JavaScript? ",
        "response": "let str = 'Hello World!';\nlet newStr = str.split('').reverse().join('');\nconsole.log(newStr); //outputs '!dlroW olleH'"
    },
    {
        "instruction": "Create an HTML page using JavaScript that generates a table with the following data. const data = [\n  {\n    name: \"John Doe\",\n    age: 30,\n    city: \"New York\"\n  },\n  {\n    name: \"Jane Smith\",\n    age: 25,\n    city: \"San Francisco\"\n  },\n  {\n    name: \"Adam Johnson\",\n    age: 27,\n    city: \"Los Angeles\"\n  }\n];",
        "response": "<html>\n  <head>\n    <script>\n      function generateTable() {\n        const data = [\n          {\n            name: \"John Doe\",\n            age: 30,\n            city: \"New York\"\n          },\n          {\n            name: \"Jane Smith\",\n            age: 25,\n            city: \"San Francisco\"\n          },\n          {\n            name: \"Adam Johnson\",\n            age: 27,\n            city: \"Los Angeles\"\n          }\n        ];\n\n        let table = document.createElement('table');\n\n        // Add Table Headers\n        let tableHeaders = \"<tr>\";\n        [\"Name\",\"Age\",\"City\"].forEach(header => {\n          tableHeaders += `<th>${header}</th>`;\n        });\n        tableHeaders += \"</tr>\";\n        table.innerHTML = tableHeaders;\n\n        //Add Table Rows\n        data.forEach(datum => {\n          let tableRow = document.createElement('tr');\n          for (let key in datum) {\n            let tableData = document.createElement('td');\n            tableData.innerText = datum[key];\n            tableRow.appendChild(tableData);\n          }\n          table.appendChild(tableRow);\n        });\n\n        document.getElementById('table-container').appendChild(table);\n      }\n    </script>\n  </head>\n  <body>\n    <div id=\"table-container\"></div>\n    <script> generateTable(); </script>\n  </body>\n</html>"
    },
    {
        "instruction": "Replace all the ``None`` in the following code to create a valid python statement. def find_min(numbers):\n    min = None\n    for number in numbers:\n        if min is None:\n            min = number\n        elif number < min:\n            min = number",
        "response": "def find_min(numbers):\n    min = float('inf')  # use a high value\n    for number in numbers:\n        if number < min:\n            min = number\n    return min"
    },
    {
        "instruction": "Write a Python program to convert a given list of lists into a single list. input_list = [[1, 2], [3, 4], [5, 6]]",
        "response": "def flatten_list(list):\n new_list = []\n for sublist in list:\n for item in sublist:\n new_list.append(item)\n return new_list\n\nprint(flatten_list(input_list))"
    },
    {
        "instruction": "Write a Python program to swap the first and last element of a given list of integers. numbers = [2, 3, 4, 5, 6]",
        "response": "def swap_first_last(list):\n list[0], list[-1] = list[-1], list[0]\n return list\n\nprint(swap_first_last(numbers))"
    },
    {
        "instruction": "Write a Python program to retrieve a specific element from a given list. list = [1, 4, 7, 9, 10]\nindex = 2",
        "response": "def get_element_by_index(list, index):\n return list[index]\n\nprint(get_element_by_index(list, index))"
    },
    {
        "instruction": "Write a Python program to filter out even numbers from a given list. numbers = [2, 4, 6, 8, 10]",
        "response": "def filter_even_numbers(list):\n return [number for number in list if number % 2 == 1]\n\nprint(filter_even_numbers(numbers))"
    },
    {
        "instruction": "Write a Python script to combine two given list of strings. list1 = [\"Python\", \"Ruby\", \"JavaScript\"]\nlist2 = [\"C++\", \"C#\", \"GO\"]",
        "response": "def combine_lists(list1, list2):\n combined_list = list1 + list2\n return combined_list\n\nprint(combine_lists(list1, list2))"
    },
    {
        "instruction": "Write a Python code to sort the given list of strings alphabetically. lst = [\"Java\", \"C++\", \"Go\", \"Python\"]",
        "response": "def alphabetical_sort(lst):\n lst.sort()\n return lst\n\nprint(alphabetical_sort(lst))"
    },
    {
        "instruction": "Write a Python Evaluator to evaluate Python expression. expression = \"5+3\"",
        "response": "def eval_expression(expression): \n return eval(expression) \n  \n# Call the function \nprint(eval_expression(expression))"
    },
    {
        "instruction": "Create a variable with the value 10 using JavaScript ",
        "response": "var number = 10;"
    },
    {
        "instruction": "Create a Python loop that prints numbers from 1 to 20 ",
        "response": "for i in range(1, 21):\n    print(i)"
    },
    {
        "instruction": "Create a Python script that asks the user to input an integer number and display the sum of all the preceding numbers. ",
        "response": "num = int(input(\"Please enter an integer number: \"))\n\nsum = 0\n\nfor i in range(1, num + 1):\n    sum += i\n    \nprint(\"The sum of all the preceding numbers is:\", sum)"
    },
    {
        "instruction": "Create a function in Python that takes a string as an input and returns TRUE if it is a palindrome or FALSE if it is not. ",
        "response": "def is_palindrome(string): \n    left_pos = 0\n    right_pos = len(string) - 1\n    \n    while right_pos >= left_pos: \n        if not string[left_pos] == string[right_pos]: \n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True"
    },
    {
        "instruction": "Create a variable in Python that stores the value \"Hello World!\" ",
        "response": "message = \"Hello World!\""
    },
    {
        "instruction": "Create a JavaScript function that takes two parameters, an integer and a character, and returns a string with the character repeated that many times. 2, '#'",
        "response": "const repeatCharacter = (num, character) => {\n  let str = '';\n  for (let i = 0; i < num; i++) {\n    str += character;\n  }\n  return str;\n};\n\nrepeatCharacter(2, '#'); // returns '##'"
    },
    {
        "instruction": "Create an array of 10 random integers in JavaScript between -100 and 100. ",
        "response": "let randomIntegers = [-99,  44, -54,  83,  -7,  81, -14, -49,  35, 100];"
    },
    {
        "instruction": "Write a Python function that validates a given credit card number. ",
        "response": "def validate(number):\n\"\"\" Validate credit card number using Luhn algorithm \"\"\"\n \n  num = [int(x) for x in str(number)]\n  return (sum(num[::-2] + [sum(divmod(d*2,10)) for d in num[-2::-2]]) % 10 == 0"
    },
    {
        "instruction": "Write a Python script to extract text from a given PDF page. A PDF page with this content:\n\nThis is an example PDF page.\n\nIt contains text of varying lengths, from short one-word sentences to long multi-sentence paragraphs.",
        "response": "import PyPDF2\n \n#open the pdf\npdfFileObj = open('example.pdf', 'rb')\npdfReader = PyPDF2.PdfFileReader(pdfFileObj)\n \n#get the text from the specified page\npageObj = pdfReader.getPage(0)\n \n#print the text from the page\nprint(pageObj.extractText())"
    },
    {
        "instruction": "Write a Python function to return an array of adjacent (horizontal and vertical) numbers of a given two-dimensional array. [[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]]",
        "response": "def adjacent_numbers(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n    return list(adjacent_set)"
    },
    {
        "instruction": "Create a Python class to represent the 'Employee' entity. ",
        "response": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_salary(self):\n        return self.salary"
    },
    {
        "instruction": "Given a comma separated string, write a Python program to convert the string into a list. my_string = \"Hello,World,Hi\"",
        "response": "my_list = my_string.split(',')\nprint(\"List:\", my_list)"
    },
    {
        "instruction": "Describe an effective way to debug a JavaScript program. ",
        "response": "A good approach to debugging a JavaScript program is to start by checking for syntax errors. This can be done by using an integrated development environment (IDE) or text editor with built-in syntax checking capabilities. Additionally, the JavaScript console can be used to inspect variables and view output. It is also useful to set breakpoints in the code and step through the code line-by-line to identify the cause of any issues."
    },
    {
        "instruction": "Compare arrays in JavaScript. ",
        "response": "Arrays can be compared in JavaScript using the comparison operators == and !=. When comparing two arrays, the == operator will return true if the arrays contain the same elements in the same order, and false if the arrays are not equal. The != operator will return the opposite boolean value."
    },
    {
        "instruction": "What is the return type of a Javascript function? ",
        "response": "In JavaScript, the return type of a function is the type of value returned by the function. It can be any valid JavaScript data type, including primitive data types (e.g. number, string, boolean), objects, arrays, or even functions and symbols. If the function does not have an explicit return statement, it returns undefined."
    },
    {
        "instruction": "Create a JavaScript program to validate an IP address. ",
        "response": "function validateIP(ipAddress) {\n    let ipElements = ipAddress.split(\".\");\n    if(ipElements.length !== 4) {\n        return false;\n    } \n    for(let i=0; i<ipElements.length; i++)\n    {\n        let number = Number(ipElements[i]);\n        if(number < 0 || number > 255) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Write a Python script to generate Fibonacci sequence upto n ",
        "response": "def generate_fibonacci(n): \n    FibArray = [0, 1] \n    while len(FibArray) < n: \n        FibArray.append(FibArray[-1]+FibArray[-2]) \n  \n    return FibArray"
    },
    {
        "instruction": "Write a Python script to print out the max and min values from the given list. [2,10,18,24,36,95]",
        "response": "list = [2,10,18,24,36,95]\nmax_value = max(list)\nmin_value = min(list)\nprint(\"Max value: \", max_value)\nprint(\"Min value: \", min_value)"
    },
    {
        "instruction": "Write a function in Python to print out the sum of the squares of its input. ",
        "response": "def sum_of_squares(nums):\n    \"\"\"This function calculates the sum of the squares of a given list of numbers\"\"\"\n    return sum(x**2 for x in nums)"
    },
    {
        "instruction": "How can we join two lists in Python? ",
        "response": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Join two lists\nlist3 = list1 + list2"
    },
    {
        "instruction": "How can we evaluate a given Python expression dynamically? ",
        "response": "We can use the eval() function to evaluate a Python expression dynamically. \n\nExample:\n\nexpr = '2 + 3'\nresult = eval(expr) # result will be 5"
    },
    {
        "instruction": "Write a python code to multiply two given numbers. x = 10\ny = 5",
        "response": "# Multiply two given numbers\nx = 10\ny = 5\n\n# Calculate the multiplication\nresult = x * y\nprint(result) # Output: 50"
    },
    {
        "instruction": "Take input of a Python list and return its reversed version list_in = [3,5,7,9]",
        "response": "list_in.reverse() \nlist_out = list_in \nprint(list_out) \n\n# Output \n# [9,7,5,3]"
    },
    {
        "instruction": "Create a Python program to convert a given number of inches to centimeters inches = 5",
        "response": "def convert(inches): \n    cm = inches * 2.54\n    return cm \n  \n# Convert inches to cm \nresult = convert(5) \n  \n# Output \nprint(\"5 inches =\",result,\"cm\") \n\n# Output\n# 5 inches = 12.7 cm"
    },
    {
        "instruction": "Create a function in JavaScript to subtract two dates and return the difference in days date1 = 2020-11-01\ndate2 = 2020-11-06",
        "response": "function subtractDates(date1, date2) {\n    const diffTime = Math.abs(date2 - date1);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \n\n    return diffDays;\n}\n\n# Subtract two dates\nresult = subtractDates(new Date(\"2020-11-01\"), new Date(\"2020-11-06\"));\n\n# Output\n# 5"
    },
    {
        "instruction": "Convert the following Python dictionary to a JSON String data = {\"name\": \"John Doe\", \"age\": 37, \"hobby\": \"reading\"}",
        "response": "import json\n\ndata_json_string = json.dumps(data)"
    },
    {
        "instruction": "Write a Python program to sort the list of dictionaries by values in ascending order. data = [{'name': 'John', 'age': 23}, \n        {'name': 'Joe', 'age': 28}, \n        {'name': 'Jack', 'age': 25}]",
        "response": "def sort_by_age(data):\n  return sorted(data, key=lambda k: k['age'], reverse=False)\n\nsorted_list = sort_by_age(data)\nprint(sorted_list)"
    },
    {
        "instruction": "Write a JavaScript program to simulate a coin toss. ",
        "response": "const coinToss = () => {\n  let result = Math.random();\n\n  if (result <= 0.5) {\n    return 'heads';\n  } else {\n    return 'tails';\n  }\n};\n\nlet toss = coinToss();\nconsole.log(toss);"
    },
    {
        "instruction": "Rewrite the following JavaScript code as an arrow function. function sum(a, b) {\n  return a + b;\n}",
        "response": "const sum = (a, b) => a + b;"
    },
    {
        "instruction": "Create a JavaScript function to calculate the total price of an order. const items = [ \n  { \n    name: 'Toothbrush', \n    price: 10.00\n  }, \n  { \n    name: 'Toothpaste', \n    price: 4.50\n  }\n]",
        "response": "function calculateTotalPrice(items) {\n  let total = 0;\n  for (let item of items) {\n    total += item.price\n  }\n  return total;\n}"
    },
    {
        "instruction": "Parse the following JSON string and create a JavaScript object. {\"name\":\"John\", \"age\":30, \"city\":\"New York\"}",
        "response": "const jsonString = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}';\n\nconst obj = JSON.parse(jsonString);\nconsole.log(obj);\n// {\"name\":\"John\", \"age\":30, \"city\":\"New York\"}"
    },
    {
        "instruction": "Sum up an array of numbers to a single number using JavaScript. [1, 2, 3, 4]",
        "response": "function sumArray(arr) {\n    let sum = 0;\n    arr.forEach(function(item){\n        sum += item;\n    });\n    return sum;\n}"
    },
    {
        "instruction": "You need to reverse the following array using JavaScript. [1,3,5,7]",
        "response": "function reverseArray(arr) {\n    let revArray = [];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        revArray.push(arr[i]);\n    }\n    return revArray;\n}"
    },
    {
        "instruction": "Read an array and return the contents in a singple comma-separated string in JavaScript. [1, 5, 10]",
        "response": "function arrToString(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ',';\n    }\n    return str.substring(0, str.length - 1);\n}"
    },
    {
        "instruction": "You need to read a given string and convert it to an appropriate list object in JavaScript. \"alpha, beta, gamma\"",
        "response": "let list = \"alpha, beta, gamma\".split(\", \");"
    },
    {
        "instruction": "Write a Python method to determine if a string contains all unique characters. string variable: str =“Im so excited to learn GPT”",
        "response": "def isUnique(str): \n\tstr_set = set() \n\tfor ch in str: \n\t\tif ch in str_set: \n\t\t\treturn False\n\t\telse:\n\t\t\tstr_set.add(ch)\n\t\t\t\n\treturn True"
    },
    {
        "instruction": "Convert this code from Python to C++. def reverse(s): \n    return s[::-1]",
        "response": "#include <string> \n  \nusing namespace std; \n\nstring reverse(string s) \n{ \n    string reverse = \"\"; \n    \n    for (int i = s.length() - 1; i >= 0; i--) \n        reverse += s[i]; \n    \n    return reverse; \n}"
    },
    {
        "instruction": "Create a function in Python to generate a Fibonacci sequence. ",
        "response": "def fibonacci_sequence(n):  \n    a = 0 \n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else:  \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b"
    },
    {
        "instruction": "Create a scatterplot of some toy dataset using a python library. import numpy as np\nX_train = np.array([[1,2], [3,4], [5,6]])\nY_train = np.array([1,2,3])",
        "response": "import matplotlib.pyplot as plt\nplt.scatter(X_train[:, 0], X_train[:, 1], c=Y_train)"
    },
    {
        "instruction": "Write a JavaScript code to create an array of integers from 1 to 10. ",
        "response": "let array = [];\nfor (let i=1; i<=10; i++) {\n  array.push(i);\n}"
    },
    {
        "instruction": "Write a code snippet in Python for converting Unix timestamp to date and time. 1594102055",
        "response": "import datetime\n \n# Unix timestamp\nunix = 1594102055\n \n# Convert Unix timestamp to Date\ndate_time = datetime.datetime.fromtimestamp(unix).strftime('%Y-%m-%d %H:%M:%S')\n \nprint(\"Date & Time (UTC):\", date_time)"
    },
    {
        "instruction": "Split a string by a number greater than the length of the string in Python. string = \"Hello World\"",
        "response": "split_string = string[:11]\nprint(split_string) # Output = \"Hello World\""
    },
    {
        "instruction": "Suggest a way to explore a large dataset efficiently in Python. ",
        "response": "We can explore a large dataset efficiently in Python by using the built-in Pandas library. The features of the Pandas library, such as its ability to read CSV files, make it a great tool for exploring large datasets. Additionally, Pandas provides convenient methods such as head() and tail() to quickly explore the first and last elements of a dataset, as well as info() and describe() methods to provide a better understanding of the entire dataset."
    },
    {
        "instruction": "Rewrite the given python program to generate the same output but using a while loop instead of a for loop. mylist = [1, 2, 3, 4, 5]\nfor i in mylist:\n    print(i)",
        "response": "i = 0\nmylist = [1, 2, 3, 4, 5]\nwhile i < len(mylist):\n    print(mylist[i])\n    i += 1"
    },
    {
        "instruction": "Create a guide to explain the usage of the built-in Python sort() function. ",
        "response": "The Python sort() function is used to sort a list of elements. It takes two parameters: the list to be sorted and a function (optional) that defines the sorting criteria. The sorted list is returned in ascending order by default. The sort() function is stable, meaning that the original positions of equal elements will be preserved."
    },
    {
        "instruction": "Change the given Python code to an equivalent expression using list comprehension. mylist = []\nfor x in range(1, 10):\n    mylist.append(x*x)",
        "response": "mylist = [x*x for x in range(1, 10)]"
    },
    {
        "instruction": "Write a JavaScript callback function so that when it is called, it will alert a given message. ",
        "response": "function alertMessage(msg) {\n alert(msg);\n}"
    },
    {
        "instruction": "Write a Python loop to find the number of elements in a given list that are between 0 and 10 (inclusive). array = [3, 7, 11, 15]",
        "response": "def count_elements(array):\n count = 0 \n for item in array:\n if 0 <= item <= 10:\n count += 1\n return count"
    },
    {
        "instruction": "Use the given JSON object to create a JavaScript function which will output the total number of \"users\" which are in the provided JSON object. {\n  \"users\": [\n    {\n      \"name\": \"John\",\n      \"age\": 33\n    },\n    {\n      \"name\": \"Jane\",\n      \"age\": 43\n    }\n  ]\n}",
        "response": "function countUsers(object) {\n let count = 0;\n const users = object.users;\n \n for (let i = 0; i < users.length; i++) {\n  count++;\n }\n \n return count; \n}"
    },
    {
        "instruction": "Write a JavaScript function to randomize the order of elements in an array array = [\"dog\", \"cat\", \"horse\", \"elephant\"]",
        "response": "function shuffleArray(array) {\n let temp, j;\n for (let i = array.length - 1; i > 0; i--) {\n  j = Math.floor(Math.random() * (i + 1));\n  temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n }\n return array;\n}"
    },
    {
        "instruction": "Write a Python script to fetch the top 10 latest YouTube videos. ",
        "response": "import requests\nimport json\n\n#Generating Youtube API URL\nurl = 'https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=10&regionCode=US&key={YOUR_API_KEY}'\n\n#Sending a GET request to API for obtaining data\nresponse = requests.get(url)\n\n#Data parsing and extracting top 10 latest YouTube Videos\ndata = json.loads(response.text)\nlatest_videos = []\nfor items in data['items']:\n    latest_videos.append(items['snippet']['title'])\n\nprint(\"Top 10 latest videos : \")\nfor item in latest_videos:\n    print(item)"
    },
    {
        "instruction": "Create a JavaScript class to generate random numbers. ",
        "response": "class RandomGenerator {\n  constructor() {\n    \n  }\n\n  generateRandomNumber() {\n    return Math.random();\n  }\n}"
    },
    {
        "instruction": "Write a python snippet to reverse the words in a sentence. This sentence should be reversed.",
        "response": "''.join(reversed(sentence.split()))"
    },
    {
        "instruction": "Describe how to use a while loop in python. ",
        "response": "A while loop in Python is a loop that runs until a certain condition is met. The syntax is similar to an if statement, but the condition is evaluated after each iteration of the loop. The code within the loop is executed until the condition evaluates to False.\n\nExample:\n\ni = 0\nwhile i < 10:\n    print(i)\n    i += 1\n\nThis will print out the numbers from 0 to 9 as the condition is evaluated after each iteration."
    },
    {
        "instruction": "How can we select unique elements from a list in Python? ",
        "response": "We can select unique elements from a list in Python using the set() and list() functions. The set() function takes an iterable object, such as a list, and returns the unique elements of that object in the form of a set. The list() function takes the set and returns its elements as a list.\n\nExample:\n\noriginal_list = [1, 2, 3, 1, 4, 2]\nunique_list = list(set(original_list))\n\nprint(unique_list)\n\nOutput: [1, 2, 3, 4]"
    },
    {
        "instruction": "Write a for loop in Python to sum up the elements of an array. [5, 9, 2]",
        "response": "arr = [5, 9, 2]\ntotal = 0\n\nfor num in arr:\n    total+=num\n\nprint(total)\n\nOutput: 16"
    },
    {
        "instruction": "Write a while loop in Python which prints numbers from 1 to 10. ",
        "response": "i = 1\nwhile i <= 10:\n  print(i)\n  i += 1"
    },
    {
        "instruction": "Write a block of code to check if the given value is a string or not in JavaScript. Value: hello",
        "response": "if (typeof value === \"string\"){\n  console.log(\"It is a string\");\n}"
    },
    {
        "instruction": "Create a python function to return the highest value in a given list of numbers. ",
        "response": "def get_max(list):\n    max_value = list[0]\n    for value in list:\n        if value > max_value:\n            max_value = value\n    return max_value"
    },
    {
        "instruction": "Given an array, write a JavaScript snippet to return an object of frequencies for each element. Array: [1, 2, 2, 3, 4, 5]",
        "response": "const nums = [1, 2, 2, 3, 4, 5];\n\nconst freq = {};\n\nfor (let num of nums) {\n  if (freq[num]) {\n    freq[num]++;\n  } else {\n    freq[num] = 1;\n  }\n}\n\nconsole.log(freq); // {1: 1, 2: 2, 3: 1, 4: 1, 5: 1}"
    },
    {
        "instruction": "Write a function in JavaScript to remove all vowels from an input string. ",
        "response": "function removeVowels(str) {\n  return str.replace(/[aeiou]/gi, '');\n}"
    },
    {
        "instruction": "Create an recursive algorithm in Python to find the nth number in Fibonacci sequence. ",
        "response": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)"
    },
    {
        "instruction": "Design a Python function that computes the sum of two numbers. ",
        "response": "def sum_two_numbers(num1, num2):\n    \"\"\"\n    This function will take two numbers as inputs and return their sum.\n    \"\"\"\n    return num1 + num2"
    },
    {
        "instruction": "Create a web page using HTML, CSS and JavaScript that displays a user's full name. const fullName = \"John Doe\";",
        "response": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My First Webpage</title>\n</head>\n<body>\n\n    <h1>My Full Name</h1>\n    <p>My full name is <span id=\"name\">John Doe</span>.</p>\n\n    <script>\n        const fullName = \"John Doe\";\n        document.getElementById('name').innerHTML = fullName;\n    </script>\n\n</body>\n</html>"
    },
    {
        "instruction": "Create an object in JavaScript for employee records. ",
        "response": "const employeeRecords = {\n    id: 0,\n    name: '',\n    email: '',\n    department: '',\n    salary: 0\n}"
    },
    {
        "instruction": "Implement a function in Python 3 to get the largest element from a sequence. numbers = [2, 4, 7, 8, 10]",
        "response": "def get_largest_element(seq):\n  return max(seq)\n\n#Usage \nlargest_element = get_largest_element(numbers)\n#largest_element is 10"
    },
    {
        "instruction": "Generate a random 8 digit string composed of numbers and letters in Python 3. ",
        "response": "import string\nimport random\n \n#Generate 8 character random string\ndef generate_random_string(stringLength=8):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\n#Driver code \nrandom_string = generate_random_string()\nprint(f\"Random String Generator: {random_string}\")"
    },
    {
        "instruction": "Develop a JavaScript code snippet to find the maximum and minimum numbers in an array. nums = [2, 5, 8, 9, 10]",
        "response": "function maxmin(nums) {  \n    let max = nums[0];\n    let min = nums[0];\n  \n    for (let i = 0; i < nums.length; i++) {\n        // comparison to find the maximum\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        // comparison to find the minimum\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    \n    return {max:max, min:min};  \n}\n\n//driver code\nlet nums = [2, 5, 8, 9, 10];\nlet maxmin_result = maxmin(nums);\nconsole.log(`Max is ${maxmin_result.max}, and min is ${maxmin_result.min}.`);"
    },
    {
        "instruction": "Write a Python script to call a web API Call openweathermap.org's API with a given city name.",
        "response": "import requests \n  \napi_key = \"YOURAPIKEY\"\n  \n# base_url variable to store url \nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n  \n# Give city name \ncity_name = input(\"Enter city name : \") \n  \n# complete_url variable to store \n# complete url address \ncomplete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name \n\n# get method of requests module \n# return response object \nresponse = requests.get(complete_url) \n  \n# json method of response object  \n# convert json format data into \n# python format data \nx = response.json() \n  \n# Now x contains list of nested dictionaries \n# Check the value of \"cod\" key is equal to \n# \"404\", means city is found otherwise, \n# city is not found \nif x[\"cod\"] != \"404\": \n  \n    # store the value of \"main\" \n    # key in variable y \n    y = x[\"main\"] \n  \n    # store the value corresponding \n    # to the \"temp\" key of y \n    current_temperature = y[\"temp\"] \n  \n    # store the value corresponding \n    # to the \"pressure\" key of y \n    current_pressure = y[\"pressure\"] \n  \n    # store the value corresponding \n    # to the \"humidity\" key of y \n    current_humidiy = y[\"humidity\"] \n  \n    # store the value of \"weather\" \n    # key in variable z \n    z = x[\"weather\"] \n  \n    # store the value corresponding  \n    # to the \"description\" key at  \n    # the 0th index of z \n    weather_description = z[0][\"description\"] \n  \n    # print following values \n    print(\" Temperature (in kelvin unit) = \" +\n                    str(current_temperature) + \n          \"\\n atmospheric pressure (in hPa unit) = \" +\n                    str(current_pressure) +\n          \"\\n humidity (in percentage) = \" +\n                    str(current_humidiy) +\n          \"\\n description = \" +\n                    str(weather_description)) \n  \nelse: \n    print(\" City Not Found \")"
    },
    {
        "instruction": "Develop a Python program Create a program to validate an ISBN number.",
        "response": "def is_valid_isbn(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n        return True"
    },
    {
        "instruction": "Create a class for doubly linked list in Python. ",
        "response": "class DoublyLinkedList:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.previous = None\n\n    def append(self, val): \n        current = self \n        while current.next is not None: \n            current = current.next\n        current.next = DoublyLinkedList(val) \n        current.next.previous = current"
    },
    {
        "instruction": "Develop a Python class for handling the API calls. ",
        "response": "class APIHandler:\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.api_key = api_key\n    \n    def get(self, endpoint):\n        response = requests.get(self.base_url + endpoint)\n        return response\n    \n    def post(self, endpoint, data):\n        headers = {'Authorization': 'Bearer ' + self.api_key}\n        response = requests.post(self.base_url + endpoint, headers=headers, data=data)\n        return response"
    },
    {
        "instruction": "Write a JavaScript function to find all the even numbers from a given array of integers. [3, 12, 17, 24, 4, 10]",
        "response": "function findEvenNumbers(nums) {\n  let evenNums = []\n  nums.forEach(num => {\n    if (num % 2 === 0) {\n      evenNums.push(num)\n    }\n  })\n  return evenNums\n}"
    },
    {
        "instruction": "Create a program in JavaScript to remove the duplicate entries in an array. arr = [1, 2, 3, 1, 4, 5, 6, 4, 1]",
        "response": "function removeDuplicates(arr)  {\n    let uniqueArr = new Set(arr);\n    let arrAfterRemoval = Array.from(uniqueArr);\n    return arrAfterRemoval;\n}"
    },
    {
        "instruction": "Write a Python script to generate a random number between two numbers. ",
        "response": "import random\n\ndef rand_num(min_num,max_num):\n    return random.randrange(min_num,max_num)"
    },
    {
        "instruction": "Translate the following code from Java to Python. public static void main (String[] args) {\n    int x = 5;\n    while (x > 0) {\n        System.out.println(x);\n        x--;\n    }\n}",
        "response": "x = 5\nwhile x > 0:\n    print(x)\n    x -= 1"
    },
    {
        "instruction": "Write JavaScript code to add the following data to the web page. [\n        { name: \"John\", age: 25 },\n        { name: \"Rob\", age: 27 },\n        { name: \"Mia\", age: 22 }\n]",
        "response": "let data = [\n    { name: \"John\", age: 25 },\n    { name: \"Rob\", age: 27 },\n    { name: \"Mia\", age: 22 }\n];\n\nlet table = document.createElement(\"table\");\ntable.setAttribute(\"id\", \"personTable\");\n\nlet thead = document.createElement(\"thead\");\nlet tr = document.createElement(\"tr\");\nlet th = document.createElement(\"th\");\nth.innerText = \"Name\";\ntr.appendChild(th);\nlet th1 = document.createElement(\"th\");\nth1.innerText = \"Age\";\ntr.appendChild(th1);\nthead.appendChild(tr);\n\nlet tbody = document.createElement(\"tbody\");\n\ndata.map(value => {\n    let tr1 = document.createElement(\"tr\");\n    Object.values(value).map(val => {\n        let td = document.createElement(\"td\");\n        td.innerText = val;\n        tr1.appendChild(td);\n    })\n    tbody.appendChild(tr1);\n});\n\ntable.appendChild(thead);\ntable.appendChild(tbody);\ndocument.body.appendChild(table);"
    },
    {
        "instruction": "Write a Python code snippet that creates a dictionary containing the numbers 1 to 10 as the keys and their squares as the values. ",
        "response": "squares_dict = { i:i*i for i in range(1, 11) }"
    },
    {
        "instruction": "Using the Python library `pygame`, create a simple game where the player is able to move a character on screen using the arrow keys. ",
        "response": "import pygame \npygame.init()  \n  \n# setting up the display window \nwin = pygame.display.set_mode((500, 500)) \n\n# creating a character that is used to move in the window \nx = 50 \ny = 50 \nvel = 5\n\n# The main game loop \nrun = True\nwhile run: \n  \n    # reacts to the event from keyboard \n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            run = False\n          \n    # checks if the key pressed is left or right\n    # and moves the character accordingly \n    keys = pygame.key.get_pressed() \n\n    if keys[pygame.K_LEFT]: \n        x -= vel\n\n    if keys[pygame.K_RIGHT]: \n        x += vel\n\n    # draws the character at its x and y position \n    pygame.draw.rect(win, (255, 0, 0), (x, y, 40, 40))\n\npygame.quit()"
    },
    {
        "instruction": "Use the following list to create an array in Python. ",
        "response": "list = [1, 2, 3, 4, 5]\narray = np.array(list)"
    },
    {
        "instruction": "Construct a loop statement in JavaScript that prints each word in the given array and its corresponding index. var words = [\"apple\", \"banana\", \"corn\"];",
        "response": "for (var i = 0; i < words.length; i++){\n console.log(words[i] + \" \" + i);\n}\n// prints: apple 0, banana 1, corn 2"
    },
    {
        "instruction": "Create a Python script that adds two numbers together and returns the result. ",
        "response": "def add_numbers(a, b):\n return a + b"
    },
    {
        "instruction": "Use JavaScript to separate the given array into two arrays, one containing the even numbers and one containing the odd numbers. var numbers = [1,2,3,4,5,6];",
        "response": "let evens = [];\nlet odds = [];\nnumbers.forEach(number => {\n if (number % 2 == 0) {\n  evens.push(number);\n } else {\n  odds.push(number);\n }\n});"
    },
    {
        "instruction": "Construct a for loop in JavaScript that adds the values in the given array. var numbers = [1,2,3,4];",
        "response": "let sum = 0;\nfor (let i = 0; i < numbers.length; i++) {\n sum += numbers[i];\n}"
    },
    {
        "instruction": "Write a python program to find all anagrams in a given string str = “abc”",
        "response": "def find_anagrams(str):\n    # list to store anagrams\n    anagrams = [] \n      \n    # create a frequency array of alphabets present in string \n    freq = [0] * 26\n    for char in str: \n        freq[ord(char) - ord('a')] += 1\n          \n    # Loop through all the elements from 0 to ( 2^length of string – 1 ) \n    for i in range(1<<len(str)): \n          \n        # Convert the number to binary string \n        # and calculate its frequency array \n        temp_freq = list(freq)\n        str_bin = bin(i)[2:] \n        n = len(str_bin) \n        for j in range(n): \n            if str_bin[j] == '1': \n                temp_freq[j] -= 1\n              \n        # temp_freq is anagram if all element are 0 \n        if all(x == 0 for x in temp_freq): \n            anagram = \"\" \n            for j in range(n):\n                if str_bin[j] == '1': \n                    anagram += str[j]\n            anagrams.append(anagram)\n                  \n    print(\"All anagrams for '\"+str +\"' are :\" + str(anagrams))"
    },
    {
        "instruction": "Use the re module in Python to extract the numbers from a given string. Input string: “There are 9 dogs and 8 cats here”",
        "response": "import re\n\ninput_string = \"There are 9 dogs and 8 cats here\"\n\n# Get the numbers from the string\nnumbers = re.findall('\\d+', input_string) \n\nprint(numbers)\n# Output ['9', '8']"
    },
    {
        "instruction": "Using Python, find the number of unique characters in the string \"hello world\". ",
        "response": "len(set(\"hello world\")) # 10 unique characters"
    },
    {
        "instruction": "Convert the following C++ program to Python. #include <iostream>\n\nint main()\n{\n  int i = 0;\n  int x = 0;\n\nwhile(i<5){\n  x=x+i;\n  i++;\n}\n  std::cout << x;\n\nreturn 0;",
        "response": "i = 0 \nx = 0 \nwhile i < 5: \n    x += i \n    i += 1 \nprint(x)"
    },
    {
        "instruction": "Design a program in Python for searching for a given item in a list. list_items = ['apple', 'banana', 'cake', 'orange']\nitem_to_search = 'cake'",
        "response": "def search_item(list_items, item_to_search): \n    for item in list_items: \n        if item == item_to_search: \n            return True \n    return False \n\nlist_items = ['apple', 'banana', 'cake', 'orange']\nitem_to_search = 'cake'\n\nprint(search_item(list_items, item_to_search))"
    },
    {
        "instruction": "Create a function in JavaScript that returns the highest number from the given list. list_number = [2, 7, 3, 19, 4, 7]",
        "response": "function highest_num(list_number) {\n    let highest_val = 0;\n    for (let i = 0; i < list_number.length; i++) {\n        if (list_number[i] > highest_val) {\n            highest_val = list_number[i];\n        }\n    }\n    return highest_val;\n}\n\nlist_number = [2, 7, 3, 19, 4, 7] \nprint(highest_num(list_number))"
    },
    {
        "instruction": "How would you call a function 'process' in JavaScript? ",
        "response": "The function 'process' can be called with the following syntax: process();"
    },
    {
        "instruction": "Reverse a Python dictionary. { 1: 'A', 2: 'B', 3: 'C' }",
        "response": "def reverse_dict(d):\n    return {v: k for k, v in d.items()}\n\nif __name__ == '__main__':\n    print(reverse_dict({ 1: 'A', 2: 'B', 3: 'C' }))"
    },
    {
        "instruction": "How do you format a date in the YYYY-mm-dd format in JavaScript? ",
        "response": "The date can be formatted in the YYYY-mm-dd format as follows: var date = new Date(); var formatted_date = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();"
    },
    {
        "instruction": "Add two numbers using Python. Numbers: 5, 7",
        "response": "def add_two_numbers(x, y):\n    return x + y\n\nif __name__ == '__main__':\n    print(add_two_numbers(5, 7))"
    },
    {
        "instruction": "Reverse a string without using any in-built Python functions. String: racecar",
        "response": "rev_str = \"\"\nfor ch in string:\n    rev_str = ch + rev_str\nreturn rev_str"
    },
    {
        "instruction": "Execute the following code in a Python Shell and explain the output. a = 5\nb = 6\n\nprint(a,b)",
        "response": "The code will print 5 and 6 on separate lines. This is because we have not specified a separator, thus the default separator (whitespace) will be used.\n\nOutput:\n5\n6"
    },
    {
        "instruction": "Create a python program to count how many times a word appears in a given string. The quick brown fox jumps over the lazy dog",
        "response": "def count_word(word, input):\n    count = 0\n    for w in input.split():\n        if w == word:\n           count += 1\n    return count\n\nif __name__ == '__main__':\n    word = 'fox'\n    input = 'The quick brown fox jumps over the lazy dog'\n    result = count_word(word, input)\n    print(f' \"{word}\" occurs {result} times in the given string.')"
    },
    {
        "instruction": "Create a class in Python named ``Rectangle`` with two attributes length and width. ",
        "response": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width"
    },
    {
        "instruction": "Select the correct method to find the length of a string in JavaScript. ",
        "response": "var myString = \"Hello World!\";\nvar stringLength = myString.length;"
    },
    {
        "instruction": "How would you create a new array with only the positive numbers from the following array in Python? [-2, -5, 3, 6, 0, -3]",
        "response": "arr = [-2,-5,3,6,0,-3]\n\npos_arr = [num for num in arr if num >= 0]"
    },
    {
        "instruction": "Sort the following array in ascending order using insertion sort in JavaScript. [7, 2, 5, 3, 8]",
        "response": "function insertionSort(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    let currentVal = arr[i];\n    for (var j = i - 1; j >= 0 && arr[j] > currentVal; j--) {\n      arr[j + 1] = arr[j];\n    }\n    arr[j + 1] = currentVal;\n  }\n  return arr;\n}\n\n// Test\nlet arr = [7, 2, 5, 3, 8];\ninsertionSort(arr);\n// [2, 3, 5, 7, 8]"
    },
    {
        "instruction": "How would you capitalize the first letter of a string in JavaScript? ",
        "response": "function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}"
    },
    {
        "instruction": "Write a Python script to remove all the elements with value 3 from the following list. [1, 2, 3, 4, 3, 5, 3]",
        "response": "my_list = [1, 2, 3, 4, 3, 5, 3]\n\nfiltered_list = [number for number in my_list if number != 3]"
    },
    {
        "instruction": "Suggest a modification to the following python code to make it efficient. def median(my_list):\n\thalf = len(my_list)//2\n\tmedian_index = len(my_list) - half\n\treturn my_list[median_index]",
        "response": "def median(my_list):\n\thalf = len(my_list)//2\n\tmy_list.sort()\n\tmedian_index = len(my_list) - half\n\treturn my_list[median_index]\n\nThe suggested modification is to add a sorting step to the code before finding the median index. This will ensure the list is always in order and the median index can be found in an efficient manner."
    },
    {
        "instruction": "Create a Python code that takes two strings and combine them into a single string. str1 = \"Hello\"\nstr2 = \"World\"",
        "response": "combinedString = str1 + ' ' + str2\nprint(combinedString) # Hello World"
    },
    {
        "instruction": "How would you find the frequency of each character in a string using JavaScript? string = \"Hello World\"",
        "response": "function getCharacterFrequencies(string) {\n    let charMap = {};\n    for (let char of string) { \n        charMap[char] = charMap[char] + 1 || 1; \n    }\n    return charMap;\n}"
    },
    {
        "instruction": "How would you create a 2-dimensional array in JavaScript? ",
        "response": "var myArray = [[], []];"
    },
    {
        "instruction": "What is the maximum number of parameters that a function can take in Python? ",
        "response": "A function in Python can take up to 255 parameters."
    },
    {
        "instruction": "What is the syntax of a for loop in Python? ",
        "response": "The syntax of a for loop in Python is: \nfor item in iterable:\n    statement(s)"
    },
    {
        "instruction": "Change the first character of a given string to uppercase. String: \"python\"",
        "response": "String: \"Python\""
    },
    {
        "instruction": "Is a string immutable in Python? ",
        "response": "Yes, a string is immutable in Python. Once a string is created, it cannot be changed."
    },
    {
        "instruction": "Create a class in Python which has a method to sort an array of numbers in increasing order. nums = [4, 3, 1, 6]",
        "response": "class ArraySort:\n    def __init__(self, nums):\n        self.nums = nums\n    \n    def sort(self):\n        for i in range(len(self.nums)):\n            for j in range(i+1, len(self.nums)):\n                if self.nums[i] > self.nums[j]:\n                    temp = self.nums[i]\n                    self.nums[i] = self.nums[j]\n                    self.nums[j] = temp\n        return self.nums"
    },
    {
        "instruction": "Develop a python code snippet to create a list, with the name \"fruits\" containing strings of the names of 5 fruits. ",
        "response": "fruits = [\"apple\", \"banana\", \"mango\", \"strawberry\", \"kiwi\"]"
    },
    {
        "instruction": "Formulate a regex expression in Python to check if a given string is an email address. ",
        "response": "import re \n\ndef is_email(string): \n   regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w+$'\n   if(re.search(regex,string)): \n      print(\"Valid Email\")  \n   else: \n      print(\"Invalid Email\")"
    },
    {
        "instruction": "Formulate a regex expression in JavaScript to verify if a given string contains only numbers. ",
        "response": "const isOnlyNumbers = (str) => {\n  let regex = /^[0-9]+$/;\n  return regex.test(str);\n};"
    },
    {
        "instruction": "Suggest a way to combine two lists of dictionaries into one list of dictionaries in Python. list1 = [{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 20}]\nlist2 = [{'name': 'Steve', 'age': 25}, {'name': 'Jake', 'age': 18}]",
        "response": "combinedList = list1 + list2"
    },
    {
        "instruction": "Write a JavaScript program that logs to the console a random number between 0 and 10. ",
        "response": "var randomNumber = Math.floor(Math.random()*11);\nconsole.log(randomNumber);"
    },
    {
        "instruction": "Edit the following code to make it work in Python 3. # Python 2\ndef greet(name):\n    print \"Hello,\", name\n\ngreet(\"John\")",
        "response": "# Python 3\ndef greet(name):\n    print(\"Hello,\", name)\n    \ngreet(\"John\")"
    },
    {
        "instruction": "Code a JavaScript function to calculate the area of a rectangle, given its length and width. length:  5\nwidth:  10",
        "response": "function calculateArea(length, width) {\n  return length * width;\n}\nconsole.log(calculateArea(5, 10));  // Output: 50"
    },
    {
        "instruction": "Design a Python class to represent a student and their GPA. ",
        "response": "class Student:\n\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\n    def get_name(self):\n        return self.name\n\n    def get_gpa(self):\n        return self.gpa"
    },
    {
        "instruction": "Design a Python class to represent a Triangle and its properties, such as area, perimeter, and angles. ",
        "response": "class Triangle:\n    def __init__(self, side_a, side_b, side_c):\n        self.side_a = side_a\n        self.side_b = side_b\n        self.side_c = side_c\n\n    def get_area(self):\n        s = (self.side_a+self.side_b+self.side_c)/2\n        return (s*(s-self.side_a)*(s-self.side_b)*(s-self.side_c)) ** 0.5\n\n    def get_perimeter(self):\n        return self.side_a + self.side_b + self.side_c\n\n    def get_angles(self):\n        a = (self.side_b**2 + self.side_c**2 - self.side_a**2)/(2*self.side_b*self.side_c)\n        b = (self.side_a**2 + self.side_c**2 - self.side_b**2)/(2*self.side_a*self.side_c)\n        c = (self.side_b**2 + self.side_a**2 - self.side_c**2)/(2*self.side_b*self.side_a)\n        return [a, b, c]"
    },
    {
        "instruction": "Create a python function that takes in a list and returns a new list with all the even elements of the original list. ",
        "response": "def get_even_elements(arr):\n    return [num for num in arr if num % 2 == 0]"
    },
    {
        "instruction": "Create a Python function that takes in a list of integers and returns a list containing only the odd numbers from the original. ",
        "response": "def get_odd_elements(arr):\n    return [num for num in arr if num % 2 != 0]"
    },
    {
        "instruction": "Create a Python script to delete all the even numbers in the original list. ",
        "response": "# function to delete all the even numbers in the original list\ndef remove_even_elements(arr):\n    return [num for num in arr if num % 2 != 0]"
    },
    {
        "instruction": "Create a Python script to print the first N numbers of the Fibonacci sequence. ",
        "response": "def print_fibonacci(n):\n    # make a list of the first n numbers in the Fibonacci series\n    fibonacci = [0, 1]\n    while len(fibonacci) < n:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    \n    # print out the list\n    for number in fibonacci:\n        print(number)"
    },
    {
        "instruction": "Create a python class to manage a sports team. ",
        "response": "# define a class to manage a sports team\nclass SportsTeam:\n    def __init__(self, name):\n        # store the team name\n        self.name = name\n        # create an empty list for team members\n        self.team_members = []\n\n    # create a method to add a new player to the team\n    def add_player(self, player_name):\n        if player_name not in self.team_members:\n            self.team_members.append(player_name)\n    \n    # create a method to remove a player from the team\n    def remove_player(self, player_name):\n        if player_name in self.team_members:\n            self.team_members.remove(player_name)"
    },
    {
        "instruction": "Reverse the following string using a Python program \"Hello World!\"",
        "response": "def reverse_string(str):\n  return str[::-1]\n\nreverse_string('Hello World!') # output: '!dlroW olleH'"
    },
    {
        "instruction": "Explain what is Closure in Python Programming? ",
        "response": "In Python, a closure is a higher order function (a function that takes one or more functions as arguments or returns a function) that allows a function to remember or access the variables or arguments of the enclosing scope—even after the execution of the outer function has finished. A closure is created when a nested function is defined, and an inner function remembers the variables of its enclosing scope even after the execution of the outer function has finished."
    },
    {
        "instruction": "Given a list of numbers and the length n, write a Python program to add the elements of all even indexed values to the corresponding odd indexed values. my_list = [5, 10, 15, 20, 25]\nn = 5",
        "response": "def add_corresponding_elements(lst, n):\n    result = 0\n\n    for i in range(0, n, 2): \n        result += lst[i] + lst[i + 1] \n\n    return result\n\nmy_list = [5, 10, 15, 20, 25]\nn = 5\n\nresult = add_corresponding_elements(my_list, n)\nprint(result)  # Output: 35"
    },
    {
        "instruction": "Convert the following Python code from functions to lambda expressions. def cube(x):\n    return x ** 3\n\ndef add_cube(x, y):\n    return cube(x) + cube(y)",
        "response": "cube = lambda x: x ** 3\nadd_cube = lambda x, y: cube(x) + cube(y)"
    },
    {
        "instruction": "Write a Python program to iterate the given list and print the square or each element. my_list = [1, 2, 3, 4]",
        "response": "my_list = [1, 2, 3, 4]\n\nfor i in my_list:\n    print(i**2)\n\n# Output: 1, 4, 9, 16"
    },
    {
        "instruction": "Write a Python program to divide two numbers and return the quotient and remainder of the division. x = 10\ny = 3",
        "response": "x = 10\ny = 3\n\nquotient = int(x / y)\nremainder = x % y\n\nprint(\"Quotient:\", quotient)\nprint(\"Remainder:\", remainder)\n# Output: Quotient: 3, Remainder: 1"
    },
    {
        "instruction": "Write a Python program to compare two strings and return True if both the strings are equal, otherwise False. s1 = \"Hello\"\ns2 = \"Hello\"",
        "response": "s1 = \"Hello\"\ns2 = \"Hello\"\n\nprint(s1 == s2) # Output: True"
    },
    {
        "instruction": "Write a Python function to return the most frequent character in the given string. my_string = \"hello world\"",
        "response": "def most_frequent(s):\n    char_freq = {}\n    max_freq = 0\n    most_frequent_char = \"\"\n\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n\n        if char_freq[c] > max_freq:\n            max_freq = char_freq[c]\n            most_frequent_char = c\n\n    return most_frequent_char\n\nmy_string = \"hello world\"\nprint(most_frequent(my_string)) # Output: 'l'"
    },
    {
        "instruction": "Given a two dimensional array, write a Python program to print the second diagonal of the array. my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]",
        "response": "my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]\n\n# A function to print second diagonal of \n# given array\ndef print_second_diagonal(arr): \n    # Find length of given array \n    n = len(arr)  \n      \n    # Traverse second diagonal \n    for i in range(0, n): \n        print(arr[i][n-1-i], end = \" \") \n          \n# Driver code \nprint_second_diagonal(my_array)\n# Output: 3 6 9"
    },
    {
        "instruction": "Write a Python program to find the equilibrium index of an array. An index of an array is called equilibrium index if the sum of elements at lower indexes is equal to the sum of elements at higher indexes. arr = [-7, 1, 9, -4, 3, 2]",
        "response": "def find_equilibrium_index(arr):\n    total_sum = sum(arr)\n\n    left_sum = 0\n    \n    for index, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return index \n        left_sum += num\n    return -1\n\narr = [-7, 1, 9, -4, 3, 2]\nprint(find_equilibrium_index(arr)) # Output: 2"
    },
    {
        "instruction": "Create a JavaScript function to merge two given arrays. ",
        "response": "function mergeArray(arr1, arr2){\n    return arr1.concat(arr2);\n }"
    },
    {
        "instruction": "Implement a function in Python to determine if a string is a palindrome. ",
        "response": "def is_palindrome(str): \n    rev = ''.join(reversed(str)) \n\n    if (str == rev): \n        return True\n    return False"
    },
    {
        "instruction": "Write an algorithm in Python to determine if an array has duplicate elements or not. ",
        "response": "def containsDuplicate(arr):\n    seen = set()\n    for element in arr:\n        if element in seen:\n            return True\n        seen.add(element)\n    return False"
    },
    {
        "instruction": "Create a JavaScript function to convert a given number to an array. ",
        "response": "function toArray(numb){\n    let arr = [];\n\n    while (numb > 0) {\n        let remainder = numb % 10;\n        numb = Math.floor(numb / 10);\n        arr.unshift(remainder);\n    }\n\n    return arr;\n}"
    },
    {
        "instruction": "Generate a Python function that takes 'string' as an argument and return a new string with the last two characters of 'string' repeated. ",
        "response": "def repeat_last_two_char(string):\n    \"\"\"Takes a string as an argument and returns a new string with the last two characters repeated.\"\"\"\n    if len(string) < 2:\n        return \"\"\n    return string[:-2] + string[-2:] * 2"
    },
    {
        "instruction": "Write a Python function to generate a dictionary with the keys 'a', 'b', 'c', and values of '1', '2', '3', respectively. ",
        "response": "def generate_dictionary():\n    \"\"\"Generate a dictionary with the keys 'a', 'b', 'c' and values of '1', '2', '3' respectively.\"\"\"\n    return {'a': 1, 'b': 2, 'c': 3}"
    },
    {
        "instruction": "Write a Python function to split a string into a list of strings, separated by a given delimiter. ",
        "response": "def split_string(string, delimiter):\n    \"\"\"Split a string into a list of strings, separated by a given delimiter.\"\"\"\n    return string.split(delimiter)"
    },
    {
        "instruction": "Create a code snippet for making a POST request using Python. ",
        "response": "import requests \nurl = 'https://www.example.com' \ndata = {'var1': 'value1', 'var2': 'value2'} \nresponse = requests.post(url, data=data)"
    },
    {
        "instruction": "Create a new array in JavaScript given an existing one and a number. [1,2,3,4]",
        "response": "var newArray = [1,2,3,4];\nvar n = 5;\n\nfor (let i = 0; i < n; i++) {\n newArray.push(i+1);\n}\n\nconsole.log(newArray); // [1,2,3,4,5]"
    },
    {
        "instruction": "Write a Python function to find the number of odd numbers in the given list. [1, 4, 2, 6, 3, 9]",
        "response": "def countOddNumbers(numbers):\n  odd_numbers = 0\n  for i in numbers:\n    if i % 2 == 1: \n      odd_numbers += 1\n  return odd_numbers\n  \nprint(countOddNumbers([1, 4, 2, 6, 3, 9]))\n# Output: 3"
    },
    {
        "instruction": "Write a Python code to convert the given temperature from Celsius to Fahrenheit. 25",
        "response": "Celsius = 25\nFahrenheit = (Celsius * 9/5) + 32\n\nprint('{} degrees Celsius is equal to {} degrees Fahrenheit.'.format(Celsius, Fahrenheit))\n# Output: 25 degrees Celsius is equal to 77 degrees Fahrenheit."
    },
    {
        "instruction": "Write a JavaScript code to set the background color of the element. #ffa11f",
        "response": "document.getElementById(\"element\").style.backgroundColor = \"#ffa11f\";"
    },
    {
        "instruction": "Rewrite the code to implement a shell sort algorithm in Python. ",
        "response": "def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n \n    while gap > 0:\n \n        for i in range(gap,n):\n            temp = arr[i]\n            j = i\n            while  j >= gap and arr[j-gap] >temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2"
    },
    {
        "instruction": "Output the maximum value of the following array in JavaScript. A = [2, 4, 6, 8, 10]",
        "response": "10"
    },
    {
        "instruction": "Add a condition to the following code in Python to check if the given number is greater or less than 5. num = 3",
        "response": "if num > 5:\n    print(\"The number is greater than 5\")\nelif num < 5:\n    print(\"The number is less than 5\")"
    },
    {
        "instruction": "Write a Python program to find all the prime numbers in the range between 1 to 1000. ",
        "response": "# Python program to find all the prime numbers in a \n# given range using Sieve of Eratosthenes \n\ndef SieveOfEratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and \n    # initialize all entries it as true. A value   \n    # in prime[i] will finally be False if i is \n    # Not a prime, else True. \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is  \n        # a prime \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    \n    # Print all prime numbers \n    prime_nums_list = [] \n    for p in range(2, n): \n        if prime[p]: \n            prime_nums_list.append(p) \n    \n    return prime_nums_list \n  \n# Driver code \nn = 1000\nprint(SieveOfEratosthenes(n))"
    },
    {
        "instruction": "Write a Python program to inverse a dictionary, so that the keys become values and values become keys. dictionary = {1:'Apple', 2:'Orange', 3:'Banana'}",
        "response": "# Python program to inverse a dictionary \n  \n# Function to inverse a dictionary\ndef inverse_dict(dictionary): \n    inverse = dict() \n    for key in dictionary: \n        linverse = inverse.setdefault(dictionary[key], []) \n        linverse.append(key) \n    return inverse\n  \n# example dictionary  \ndictionary = {1:'Apple', 2:'Orange', 3:'Banana'}\n  \n# Print the inverse dictionary\nprint(inverse_dict(dictionary))"
    },
    {
        "instruction": "Create a JavaScript function for sorting an array of numbers in ascending order. ",
        "response": "function sortNumsAscend(arr) {\n    return arr.sort(function(a, b) {\n        return a - b;\n    });\n}"
    },
    {
        "instruction": "Write a function in Python that takes in two lists and returns the lengths of the lists and the values that are common in both. list1 = [1, 2, 3, 4, 6]\nlist2 = [2, 4, 8, 10]",
        "response": "def compare_lists(list1, list2):\n    length1 = len(list1) \n    length2 = len(list2) \n    common_values = list(set(list1).intersection(list2)) \n    return length1, length2, common_values"
    },
    {
        "instruction": "Answer the following question: What is an example of a while loop in JavaScript? ",
        "response": "A while loop in JavaScript repeats a set of instructions while a given condition is true. For example:\n\nlet i = 0;\nwhile (i < 10) {\n  console.log(i);\n  i++;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers as parameter and returns the second largest element in it. ",
        "response": "function secondLargestElement(arr){\n    let largest=arr[0];\n    let second_largest=arr[0];\n\n    for(let i=1; i<arr.length; i++){\n      // If current element is \n      // greater than largest \n      if (arr[i] > largest){\n        second_largest = largest; \n        largest = arr[i]; \n      }\n  \n      // If arr[i] is in between  \n      // largest and second_largest \n      else if (arr[i] > second_largest) \n        second_largest = arr[i]; \n    }\n    return second_largest; \n}"
    },
    {
        "instruction": "Complete the following task: Create a function in JavaScript to check if a given number is even or odd. ",
        "response": "function isEven(num) {\n    if (num % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}"
    },
    {
        "instruction": "Edit the following code in Python to swap two elements in a list. list1 = [1, 2, 4]\n\nlist1[0], list1[1] = list1[1], list1[0]",
        "response": "list1 = [1, 2, 4]\n\nlist1[0], list1[2] = list1[2], list1[0]"
    },
    {
        "instruction": "Create an object with key-value pairs using JavaScript. ",
        "response": "let myObj = {\n key1: \"value1\",\n key2: \"value2\",\n key3: \"value3\"\n};"
    },
    {
        "instruction": "Write a JavaScript program to find out the day of the week for a given date. Date: June 1, 2021",
        "response": "let date = new Date('June 1, 2021');\nlet dayName = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\nlet day = dayName[date.getDay()];\n\nconsole.log(day);"
    },
    {
        "instruction": "Create a Python class \"Point\" that has two instance variables x and y. ",
        "response": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y"
    },
    {
        "instruction": "Create a custom function to use in a python program that checks whether a given number is even or odd. ",
        "response": "def even_odd(num):\n    '''This function will check if a number is even or odd\n    and return 'even' or 'odd'.\n    '''\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    {
        "instruction": "Generate a list with the numbers from 1 to 10 using Python. ",
        "response": "# Generate a list with the numbers from 1 to 10\nlistA = []\nfor i in range(1,11):\n    listA.append(i)\n    \nprint(listA)"
    },
    {
        "instruction": "Given a string variable, write a function to convert it to uppercase using Javascript. ",
        "response": "function toUpperCase(str) {\n  return str.toUpperCase();\n}"
    },
    {
        "instruction": "Convert the following function to use the reduce method in Python. def sum_list(nums):\n  total = 0\n  for num in nums:\n    total += num\n  return total",
        "response": "def sum_list(nums):\n    return reduce(lambda x,y: x + y, nums)"
    },
    {
        "instruction": "Write a function in Python to merge two sorted arrays. arr1 = [1, 5, 9]\narr2 = [2, 3, 6, 8]",
        "response": "def merge_sorted_arrays(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr3[k] = arr1[i]\n            i += 1\n        else:\n            arr3[k] = arr2[j]\n            j += 1\n        k += 1\n\n    # Copy remaining elements \n    while i < n1:\n        arr3[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n2:\n        arr3[k] = arr2[j]\n        j += 1\n        k += 1\n\n    return arr3"
    },
    {
        "instruction": "List three differences between a list and a tuple in Python. ",
        "response": "The three main differences between a list and a tuple in Python are:\n1. Lists are mutable and tuples are immutable. That is, changes can be made to a list whereas elements of a tuple cannot be changed.\n2. Lists use square brackets and tuples use parentheses.\n3. Lists store arbitrary objects, whereas tuples store data of a specific type. For example, a list could contain integers, strings and objects while a tuple can only contain a predetermined number of elements."
    },
    {
        "instruction": "Write a code to print out all dates between two given dates in Python start_date = '08/20/2020'\nend_date = '08/30/2020'",
        "response": "from datetime import timedelta, date\n\ndef daterange(start_date, end_date):\n    for n in range(int ((end_date - start_date).days)):\n        yield start_date + timedelta(n)\n\nstart_date = date(2020, 8, 20)\nend_date = date(2020, 8, 30)\nfor single_date in daterange(start_date,end_date):\n    print(single_date.strftime(\"%d/%m/%Y\"))"
    },
    {
        "instruction": "What is stdin and stdout in Python? ",
        "response": "In Python, stdin and stdout are two objects used to read standard input and print standard output respectively. stdin is used to read input from the command line or a script and stdout is used to write the output back to the command line or script. The advantage of using stdin and stdout is that they are portable and work on all versions of Python, whereas using input() and print() functions work only if the code is executed directly in Python interactive shell."
    },
    {
        "instruction": "Write a code that prints the reversed version of a given Python list. list = [1, 2, 3, 4]",
        "response": "def reverse_list(lst):\n    reversed_list = lst[::-1]\n    return reversed_list\n\nprint(reverse_list([1, 2, 3, 4]))"
    },
    {
        "instruction": "What is type hinting in Python? ",
        "response": "Type hinting is a feature of the Python language that allows one to add type information to a variable, a function, and its parameters. The type hinting allows Python to infer the type of data to be used and this helps the interpreter to identify any errors and provide more feedback during the development process. It also makes the code more readable and maintainable since type information can be used to provide auto-complete and better error messages."
    },
    {
        "instruction": "Compare inheritance and composition in Python ",
        "response": "Inheritance and composition in Python are two approaches for achieving code reuse. Inheritance involves creating a parent class which contains method and member field definitions. These are then used in a subclass and can be overridden to make them more specialized. Composition involves designing objects that contain references to other objects, using instance variables whose types are interfaces or classes. This way, the composition object can act as a proxy to the inner objects, passing requests on to them as required. The advantages of composition over inheritance include greater control over class dependencies and better encapsulation."
    },
    {
        "instruction": "Develop a python code to sort an array of numbers ",
        "response": "def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]"
    },
    {
        "instruction": "Create a JavaScript function that takes a name as a parameter and replaces spaces with '_' Tom Smith",
        "response": "function replaceSpace(name){\n  return name.replace(/\\s/g,'_');\n}"
    },
    {
        "instruction": "Generate a function in Python to calculate the total cost of an item given its price and quantity Price=10 and Quantity=5",
        "response": "def calculate_total_cost(price, quantity):\n    return price * quantity"
    },
    {
        "instruction": "Create a JavaScript function to convert a given string to a Base-64 encoded value. ",
        "response": "const convertToBase64 = str => btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\n  (match, p1) => String.fromCharCode(`0x${p1}`)));"
    },
    {
        "instruction": "Create a Python program to create a list of the first 10 prime numbers. ",
        "response": "def prime_numbers(n): \n  primes = [2] \n  num = 3\n \n  while len(primes) < n: \n    for i in range(2, num): \n      if (num % i == 0): \n        break\n    else: \n      primes.append(num) \n    num += 1\n  \n  return primes\n\n# Usage\nprint(prime_numbers(10)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"
    },
    {
        "instruction": "Create a Python script to scrape all links from a web page. <link to web page>",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('<link to web page>')\nsoup = BeautifulSoup(page.text, 'html.parser')\n\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n\n# Usage\nprint(links)"
    },
    {
        "instruction": "Convert the following array to a dictionary using Python. [('A', 5), ('B', 3), ('C', 4), ('D', 7)]",
        "response": "def to_dictionary(arr):\n    dict = {}\n    for i in arr:\n        dict[i[0]] = i[1]\n    return dict\n\nto_dictionary([('A',5), ('B', 3), ('C', 4), ('D', 7)])\n\n# Output:\n{'A': 5, 'B': 3, 'C': 4, 'D': 7}"
    },
    {
        "instruction": "Determine if a given number is prime using Python. Input: 20",
        "response": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\nis_prime(20)\n\n# Output:\nFalse"
    },
    {
        "instruction": "Write a function in Python to print out the elements of a given array in reverse order. array = [1,2,3,4,5];",
        "response": "def reverse_array(array): \n  for i in reversed(array): \n    print(i) \n\nreverse_array(array); // Output: 5,4,3,2,1"
    },
    {
        "instruction": "Write a JavaScript code snippet to sum all the elements of an array. array = [1,2,3,4,5];",
        "response": "function sumArray(array){\n  let sum = 0;\n  for (let i=0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\nsumArray(array); // Output: 15"
    },
    {
        "instruction": "Write an algorithm in Python to search for the first non-repeating element in a given array. array = [4,6,4,1,8,6,44,21];",
        "response": "def find_non_repeating(array):\n  for i in array:\n    if array.count(i) == 1:\n      return i\n  \nfind_non_repeating(array); // Output: 1"
    },
    {
        "instruction": "Write a for loop in Python to print the first 10 even numbers. ",
        "response": "for i in range(2, 21, 2): \n    print(i)"
    },
    {
        "instruction": "List the four basic types of loops in JavaScript. ",
        "response": "The four basic types of loops in JavaScript are the for loop, for-in loop, for-of loop, and the while loop."
    },
    {
        "instruction": "Write a JavaScript program to create a random string of 10 characters. ",
        "response": "function getRandomString() {\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var randomstring = '';\n    for (var i=0; i<10; i++) {\n        var rnum = Math.floor(Math.random() * chars.length);\n        randomstring += chars.substring(rnum,rnum+1);\n    }\n    return randomstring;\n}"
    },
    {
        "instruction": "Create an AJAX request in JavaScript to retrieve data from the following URL: http://www.example.com/data. ",
        "response": "var xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n        //Action to be performed when the document is read;\n    }\n};\nxhttp.open(\"GET\", \"http://www.example.com/data\", true);\nxhttp.send();"
    },
    {
        "instruction": "Rewrite the following JavaScript code using the shorthand property syntax: var x = 5;\nvar y = 10;\nvar obj = {x:x, y:y};",
        "response": "var x = 5;\nvar y = 10;\nvar obj = {x, y};"
    },
    {
        "instruction": "Create a JavaScript code to validate the syntax of a given string. The given string is \"Hello world\".",
        "response": "// Function to validate a given string \nfunction validate(str) { \n    \n    // Regex pattern to check if the string has any special characters \n    let strRegex = /^[A-Za-z]+$/; \n  \n    // Check if the string is valid \n    if(strRegex.test(str)) { \n        return true; \n    } \n    else { \n        return false; \n    } \n} \n  \n// String to be validated \nlet str = \"Hello world\"; \n  \n// Function call \nlet result = validate(str); \n  \n// Print the result \nconsole.log(result);"
    },
    {
        "instruction": "Explain the concept of variable scoping in JavaScript. ",
        "response": "In JavaScript, variable scoping determines the accessibility of variables. Variables declared outside of a function can be accessed within the same function or any other functions. On the other hand, variables declared inside a function are limited in scope and can only be accessed within the same function. This is known as the lexical scoping rule in JavaScript."
    },
    {
        "instruction": "What is the purpose of the \"os\" module in Python? ",
        "response": "The \"os\" module in Python provides a way of using operating system dependent functionality. It includes functions for interacting with the filesystem, manipulating paths, and creating and interpreting file descriptors. It also provides miscellaneous operating system interfaces, such as tools for accessing environmental variables and for changing the current working directory."
    },
    {
        "instruction": "Write a function in Python to check if a string consists of only alphabetic characters. ",
        "response": "def check_alphabetic(s):\n    for c in s:\n        if not c.isalpha():\n            return False\n    return True"
    },
    {
        "instruction": "Create an array of unique values in JavaScript from the given array. [1, 2, 3, 1, 2]",
        "response": "let array = [1, 2, 3, 1, 2];\nlet uniqueArray = [...new Set(array)];\nconsole.log(uniqueArray); // [1, 2, 3]"
    },
    {
        "instruction": "Write a JavaScript function to compare two numbers and return a boolean value. ",
        "response": "function compareNumbers(num1, num2) {\n  if (num1 < num2) {\n    return true;\n  } else {\n    return false;\n  }\n}"
    },
    {
        "instruction": "Obtain the parameter names from a given JavaScript function. function sum(x, y, z){\nreturn x + y + z;\n}",
        "response": "x, y, z"
    },
    {
        "instruction": "Create a JavaScript class to represent a rectangle with properties for width and height. ",
        "response": "class Rectangle {\n    constructor(width,height) {\n        this.width = width;\n        this.height = height;\n    }\n}"
    },
    {
        "instruction": "Create a Python function that takes a list of strings and removes any words that include numbers. list_of_strings = [\"hello123\", \"world456\", \"foo\", \"bar7\"]",
        "response": "def remove_numbers_from_list(list_of_strings):\n    '''This function will take a list of strings and remove any words that include numbers.'''\n    modified_list = []\n    for word in list_of_strings:\n        if not any(char.isdigit() for char in word):\n            modified_list.append(word)\n    return modified_list\n    \nif __name__ == '__main__':\n    list_of_strings = [\"hello123\", \"world456\", \"foo\", \"bar7\"]\n    print(remove_numbers_from_list(list_of_strings))"
    },
    {
        "instruction": "Write a JavaScript code snippet to display \"Hello World!\" on the webpage. ",
        "response": "document.write(\"Hello World!\");"
    },
    {
        "instruction": "Define a Python class called “Person”. ",
        "response": "class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n \n  def speak(self, message):\n    print(f\"{self.name} says: {message}\")"
    },
    {
        "instruction": "Create a Python program to calculate the product of a list of integers. ",
        "response": "def calculate_product(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\nif __name__ == \"__main__\":\n    print(calculate_product([1,2,3,4,5]))"
    },
    {
        "instruction": "Implement a version of your own version of quicksort in Python ",
        "response": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[0]\n    left = []\n    right = []\n\n    for num in arr[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n\n    return quicksort(left) + [pivot] + quicksort(right)\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(quicksort(arr))"
    },
    {
        "instruction": "What is the best way to generate a random number in Python? ",
        "response": "The best way to generate a random number in Python is to use the random module. The random module provides access to functions  that are used to generate a random number in various distributions such as uniform, normal, exponential, and others.\n\nThe most basic function in random module is the function random(), which generates a random number from range [0, 1).\n\nFor example, the following code will generate a random number from range [1, 10):\n\n    import random\n\n    num = random.random() * 9 + 1  # Generates a random number from range [1, 10)"
    },
    {
        "instruction": "How would you print the contents of a 2D array in Python? ",
        "response": "def print_2d_array(arr):\n    for row in arr:\n        for value in row:\n            print(value, end=\" \")\n        print()\n\nif __name__ == '__main__':\n    arr = [[1,2,3], [4,5,6], [7,8,9]]\n    print_2d_array(arr)"
    },
    {
        "instruction": "Write a Python program to convert all strings in a list to lower case ",
        "response": "def convert_to_lowercase(list_of_strings):\n    return [string.lower() for string in list_of_strings]\n\nif __name__ == '__main__':\n    string_list = [\"UPPERCASE\", \"lOwErCaSe\", \"MiXeDcAsE\"]\n    print(convert_to_lowercase(string_list))"
    },
    {
        "instruction": "Create a Python class for a 3×3 matrix. ",
        "response": "class Matrix3x3:\n\n    def __init__(self):\n        # Set the default 3x3 matrix values to 0\n        self.matrix = [[0,0,0],[0,0,0],[0,0,0]]\n\n    def set_value(self, x, y, value): \n        # Set the value in the matrix at position x and y\n        self.matrix[x][y] = value\n\n    def get_value(self, x, y): \n        # Get the value in the matrix at position x and y\n        return self.matrix[x][y]\n\n    def multiply_scalar(self, scalar): \n        # Multiply the matrix with a scalar\n        for i in range(3): \n            for j in range(3): \n                self.matrix[i][j] *= scalar"
    },
    {
        "instruction": "Create a JavaScript code to find the frequency of each character in a string. string=\"JavaScript\"",
        "response": "function getCharFrequencies (str) {\n  let charFreq = {};\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    if (charFreq[char]) {\n      charFreq[char]++;\n    } \n    else {\n      charFreq[char] = 1;\n    }\n  }\n  return charFreq;\n}\n\nconsole.log(getCharFrequencies(string));"
    },
    {
        "instruction": "You need to edit a given code in JavaScript to add multiple classes to a div element. <div class=\"main-div\"></div>",
        "response": "<div class=\"main-div main-class second-class third-class\"></div>"
    },
    {
        "instruction": "Create a JavaScript Object for a Student with key-value pairs for their id, name, and nationality. ",
        "response": "var student = { \n id: 0,\n name: \"John Doe\",\n nationality: \"American\"\n}"
    },
    {
        "instruction": "Code a function in Python to output the words \"Retrieved successfully\" if a web page request is successful. ",
        "response": "def check_status_success(request):\n    if request.status_code == 200:\n        print(\"Retrieved successfully\")\n    else:\n        print(\"Error connecting\")"
    },
    {
        "instruction": "Write a basic Javascript program to calculate the area of a triangle with the side lengths 8, 10, and 15. 8, 10, 15",
        "response": "function findArea(side1, side2, side3) {\n    var p = (side1 + side2 + side3) / 2;\n    var area = Math.sqrt(p * (p - side1) * (p - side2) * (p-side3));\n    return area;\n}\n\nconsole.log(findArea(8, 10, 15));"
    },
    {
        "instruction": "Create a TCP server program using Python. ",
        "response": "import socket\n\n# create a socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# get local machine name\nhost = socket.gethostname()\n\nport = 9999\n\n# bind to the port\ns.bind((host, port))\n\n# queue up to 5 requests\ns.listen(5)\n\nwhile True:\n   # establish a connection\n   clientsocket,addr = s.accept()\n   print(\"Got a connection from %s\" % str(addr))\n\n   msg = 'Thank you for connecting' + \"\\r\\n\"\n   clientsocket.send(msg.encode('ascii'))\n   clientsocket.close()"
    },
    {
        "instruction": "Create a code to import a module called 'math' in Python. ",
        "response": "import math"
    },
    {
        "instruction": "Generate a code to execute a block of code 10 times in Python. ",
        "response": "for i in range(10): \n  # execute code here"
    },
    {
        "instruction": "What is the JavaScript operator used to check if the value of two operands are equal or not? ",
        "response": "The JavaScript operator used to check if the value of two operands are equal or not is the triple equals (\"===\") operator."
    },
    {
        "instruction": "Design a classifier using Machine Learning in Python ",
        "response": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split dataset into training and testing sets\nX, y = data.iloc[:, 0: -1], data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, \n                                                    random_state=42)\n\n# Preprocess by scaling the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Create the model \nclf = GradientBoostingClassifier(n_estimators=100, max_depth=4, \n                                 learning_rate=0.1)\n\n# Train the model\nclf.fit(X_train_scaled, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test_scaled)"
    },
    {
        "instruction": "Given a JSON object representing a student record, write a JavaScript code snippet to get the student's name. {\"name\": \"John\", \"age\": 20, \"degree\": \"B.S\"}",
        "response": "let studentName = JSON.parse(input).name;"
    },
    {
        "instruction": "Given a list of numbers, write a Python function to find out the sum of the squares of all the numbers. [1, 2, 3]",
        "response": "def sumSquares(numbers):\n  sum = 0\n  for num in numbers:\n    sum += (num ** 2)\n  return sum"
    },
    {
        "instruction": "Given two strings, write a JavaScript code snippet to check if the two strings are anagrams of each other. ",
        "response": "function areAnagrams(str1, str2) {\n  if (str1.length !== str2.length) {\n    return false;\n  }\n  let charMap1 = {};\n  let charMap2 = {};\n    \n  for(let i = 0; i < str1.length; i++) {\n    if(!charMap1[str1.charAt(i)]) {\n      charMap1[str1.charAt(i)] = 1;\n    } else { \n      charMap1[str1.charAt(i)]++;\n    }\n    \n    if(!charMap2[str2.charAt(i)]) {\n      charMap2[str2.charAt(i)] = 1;\n    } else { \n      charMap2[str2.charAt(i)]++;\n    }\n  }\n  \n  for(let key in charMap1) {\n    if (charMap1[key] != charMap2[key]) {\n      return false;\n    }\n  }\n  \n  return true;\n\n}"
    },
    {
        "instruction": "Given a JSON object representing user scores for a game, write a JavaScript code snippet to get the highest user score. {\"John\": 80, \"Jane\": 98, \"Tom\": 50, \"Samantha\": 79}",
        "response": "let highestScore = 0;\n\nObject.keys(JSON.parse(input)).forEach((key) => {\n    const score = JSON.parse(input)[key];\n    if (score > highestScore) {\n       highestScore = score;\n    }\n});\n\nconsole.log(highestScore);"
    },
    {
        "instruction": "Create a JavaScript function to validate if a given string is a valid URL. ",
        "response": "function isValidUrl(url) {\n    const regex = new RegExp(\"^(http|https)://\");\n    return regex.test(url);\n}\n\n// Example Usage\nlet url = \"https://example.com\";\nlet result = isValidUrl(url);\nconsole.log(result); // should be true"
    },
    {
        "instruction": "Create a JavaScript function for the linear search algorithm. ",
        "response": "// Linear search algorithm \nfunction linearSearch(array, item) {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === item) {\n      return i;\n    }\n  }\n  return -1; \n}\n\n// Example Usage\nlet array = [2, 3, 4, 5, 6, 7];\nlet item = 5;\nlet index = linearSearch(array, item);\n// index should be 3"
    },
    {
        "instruction": "Write a Python program to create a histogram for a given list of numbers. list = [2, 3, 6, 5]",
        "response": "import matplotlib.pyplot as plt\n\nplt.hist(list)\n\nplt.title(\"Histogram of numbers\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()"
    },
    {
        "instruction": "Create a Python function to print out the last n items from a given list. list = [1, 2, 3, 4, 5], n = 3",
        "response": "def last_n_items(arr, n):\n    if len(arr) < n:\n        return arr\n    return arr[-n:]\n    \n# Example\nlast_n_items(list, n) # returns [3, 4, 5]"
    },
    {
        "instruction": "Create a valid JavaScript array of objects containing the three elements \"name\", \"age\" and \"gender\". [{ name: 'John', age: 25, gender: 'male'},{ name: 'Lane', age: 28, gender: 'female'},{ name: 'Mike', age: 33, gender: 'male'}]",
        "response": "let arr = [\n    { name: 'John', age: 25, gender: 'male'},\n    { name: 'Lane', age: 28, gender: 'female'},\n    { name: 'Mike', age: 33, gender: 'male'}\n];"
    },
    {
        "instruction": "Generate a Python script that iterates over a list and prints each item. list = [1, 2, 3, 4]",
        "response": "for item in list:\n    print(item)"
    },
    {
        "instruction": "Write a JavaScript function that takes an argument and determines whether it is even or odd. ",
        "response": "const evenOrOdd = (x) => {\n    if (x % 2 == 0) {\n        return 'even';\n    } \n    else {\n        return 'odd';\n    }\n}"
    },
    {
        "instruction": "Create a Python program to validate an email address according to RFC5322 syntax. ",
        "response": "import re\ndef validate(email):\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.search(regex, email):\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "In Python, define a function to extract characters after a given substring. String = \"Hello-world-123\"\nSubstring = \"-world\"",
        "response": "def extract_string(str, substr):\n    start_index = str.find(substr)\n    if start_index == -1:\n        return \"\"\n    else:\n        end_index = start_index + len(substr)\n        return str[end_index:] \n   \nx = extract_string(\"Hello-world-123\", \"-world\")\nprint(x)"
    },
    {
        "instruction": "What is the best way to print something to the console in Python? ",
        "response": "The best way to print something to the console in Python is by using the built-in print() function. The syntax of this function is as follows:\n\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nThe print() function prints the given object to the standard output. The sep and end are keyword-only arguments which specify string to separate and end the output respectively. The default separator is a single space and the default end-string is a newline. The file argument specifies an open file object, for printing to a file, or an object with a write() method.\n\nFor example, to print the string \"hello\" to the console, you can use this code:\n\nprint(\"hello\")"
    },
    {
        "instruction": "What is the most efficient way to check if a given number is a prime in Python? ",
        "response": "The most efficient way to check if a given number is a prime in Python is to use the numpy.prime() function. This function returns a boolean value indicating whether the given number is a prime or not. The syntax is as follows:\n\nnumpy.prime(n)\n\nThe argument n must be a positive integer.\n\nFor example, to check if the number 7 is prime, you can use the following code:\n\nimport numpy as np\n\nnumber = 7\nprint(np.isprime(number)) # returns True"
    },
    {
        "instruction": "Replace the last occurrence of a given word in a string. str = \"Welcome to the world of Python\"\nword = \"Python\"",
        "response": "updated_str = str.rsplit('Python',1)[0] + 'Java'\n\nThe updated string is \"Welcome to the world of Java\"."
    },
    {
        "instruction": "Given the example JSON string, neatly organize the contents of the object using Python code. { \"1\": \"Apple\", \"2\": \"Orange\", \"3\": {\"A\": \"Banana\", \"B\": \"Grape\"} }",
        "response": "import json\n\ndata = { \"1\": \"Apple\", \"2\": \"Orange\", \"3\": {\"A\": \"Banana\", \"B\": \"Grape\"} }\n\ndata_json = json.dumps(data, indent=4)\n\nprint(data_json)"
    },
    {
        "instruction": "Using a unique function in JavaScript, remove the duplicate values in the given array. arr = [1,1,2,2,4,4,4]",
        "response": "let noDuplicates = [...new Set(arr)];\n\nconsole.log(noDuplicates);"
    },
    {
        "instruction": "In Python, write a code snippet to calculate the average of numbers in a list. listOfNumbers = [2, 4, 6, 8]",
        "response": "def avg(listOfNumbers):\n    total = 0\n    for number in listOfNumbers:\n        total += number\n    return total / len(listOfNumbers)\n\nprint(avg(listOfNumbers))"
    },
    {
        "instruction": "Execute the following JavaScript code to add two numbers. var x = 10;\nvar y = 20;",
        "response": "var result = x + y;\nconsole.log(result); // 30"
    },
    {
        "instruction": "Create a JavaScript object that converts from Celsius to Fahrenheit ",
        "response": "let celsiusToFahrenheit = {\n  convert: function(temp) {\n    return (temp * 1.8) + 32;\n  }\n};"
    },
    {
        "instruction": "Write Python code to return all indices of substrings in a given string. string= \"hi world bye world\"",
        "response": "def substring_indices(string): \n    lengths = []\n    # calculate length of substring \n    for i in range(len(string)): \n        for j in range(i+1, len(string)+1): \n            lengths.append(string[i:j]) \n\n    # create array to hold all indices \n    indices = []\n    for length in lengths:\n        indices.append([i for i in range(len(string)) if string.startswith(length, i)])\n\n    return indices"
    },
    {
        "instruction": "Describe the necessary steps to debug a python program. ",
        "response": "Steps to debug a python program:\n\n1. Check the syntax of your code to look for any obvious mistakes\n2. Use print statement to understand the the variables in your program and the flow of execution.\n3. Working your way through the program line by line to identify the source of the bug.\n4. Use debugging tools such as pdb to step through the code and look for any unexpected values or flow. \n5. If the bug is in a library that you're using, try to look into its source code to look for the bug.\n6. Test small pieces of your code in isolation.\n7. Take a break and come back to it with a fresh mind.\n8. Ask for help from other programmers."
    },
    {
        "instruction": "Given a list of numbers, write code using Python to print the sum of all elements. list_numbers = [2, 3, 4, 5, 6]",
        "response": "sum_of_numbers = 0\n\nfor i in list_numbers:\n    sum_of_numbers += i\n\nprint(sum_of_numbers)"
    },
    {
        "instruction": "Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2. s1 = 'listen'\ns2 = 'silent'",
        "response": "def isAnagram(s1, s2): \n    if (sorted(s1) == sorted(s2)): \n        print(\"The strings are anagrams.\") \n    else: \n        print(\"The strings aren't anagrams.\")\n  \nisAnagram(s1, s2)"
    },
    {
        "instruction": "Use JavaScript to convert 24-hour time format to 12-hour time format. ",
        "response": "function convertTimeFormat(time) {\n    let hour = time.slice(0, 2);\n    let am_or_pm = hour >= 12 ? 'pm' : 'am';\n    let twelve_hour_format = (hour % 12 ? hour % 12 : 12) + time.slice(2, 5) + am_or_pm;\n    \n    return twelve_hour_format;\n}"
    },
    {
        "instruction": "Write Python code to print out an inverse dictionary where the original key becomes the value and the original value become the key. original_dict = {'a':1, 'b':2, 'c':3}",
        "response": "inverse_dict = {value:key for key, value in original_dict.items()}\nprint(inverse_dict)"
    },
    {
        "instruction": "Given a dictionary of words, write Python code to find out the longest word in the dictionary. dictionary = [\"apple\", \"orange\", \"pineapple\", \"banana\"]",
        "response": "def findLongestWord(dictionary):\n    longestWord = ''\n    longestLength = 0\n    for word in dictionary:\n        if len(word) > longestLength:\n            longestWord = word\n            longestLength = len(word)\n    return longestWord"
    },
    {
        "instruction": "Write a function in Python that takes two arguments, a list of strings and a letter, and returns the strings which contain the letter. lst = [\"apple\",\"banana\",\"kiwi\",\"pear\"], letter = \"a\"",
        "response": "def find_with_letter(lst, letter):\n    result = []\n    for s in lst:\n        if letter in s:\n            result.append(s)\n    \n    return result"
    },
    {
        "instruction": "What is the stack overflow limit of Python? ",
        "response": "The stack overflow limit of Python is 2800 frames."
    },
    {
        "instruction": "How can one randomly shuffle a list using Python? ",
        "response": "import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list"
    },
    {
        "instruction": "Write code in python to find the biggest number in a given list. my_list = [1, 25, 8, 10, 6]",
        "response": "def find_biggest_number(my_list):\n    biggest_number = my_list[0]\n    for i in range(0, len(my_list)):\n        if my_list[i] > biggest_number:\n            biggest_number = my_list[i]\n    return biggest_number"
    },
    {
        "instruction": "Construct an if condition in Python to check if a given number is within the range of [2, 12]. ",
        "response": "if 2 <= x <= 12:\n    # do something"
    },
    {
        "instruction": "Write Python code to reverse the letters in the string \"hello\". ",
        "response": "def reverseString(s): \n    return s[::-1]\n\nprint(reverseString('hello'))"
    },
    {
        "instruction": "Write a JavaScript code to set a cookie with the name \"username\" and value \"JohnDoe\". ",
        "response": "document.cookie = \"username=JohnDoe\";"
    },
    {
        "instruction": "Describe the purpose of a \"while\" loop in JavaScript. ",
        "response": "The purpose of a \"while\" loop in JavaScript is to execute a piece of code until a given condition is met. This loop can execute the code any number of times until the condition is evaluated to be \"true\"."
    },
    {
        "instruction": "Build a Python dictionary that contains the names of the months as keys and the numbers of days in each month as values. ",
        "response": "months = {\"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":31, \"September\":30, \"October\":31, \"November\":30, \"December\":31}"
    },
    {
        "instruction": "How do you use a ‘for’ loop in Python to iterate over a list of strings? list=[\"Dog\",\"Cat\",\"Cow\"]",
        "response": "for string in list:\n    print(string)"
    },
    {
        "instruction": "Generate a random number between -1 and 1 using a Python library. ",
        "response": "import random\nrandom_num = random.uniform(-1,1)\nprint(random_num)"
    },
    {
        "instruction": "How can we check the type of a variable in JavaScript? ",
        "response": "We can check the type of a variable in JavaScript using the typeof operator. For example, to check the type of the variable x, we can use the following code:\n\nvar x = 10;\nconsole.log(typeof x); // outputs \"number\""
    },
    {
        "instruction": "Write a Python program to calculate the median of three given numbers. ",
        "response": "def median_num(n1, n2, n3):\n    if n1 > n2 and n2 > n3:\n        return n2\n    elif n3 > n2 and n2 > n1:\n        return n2\n    elif n1 > n3 and n3 > n2:\n        return n3\n    elif n2 > n3 and n3 > n1:\n        return n3\n    elif n2 > n1 and n1 > n3:\n        return n1\n    else:\n        return n1"
    },
    {
        "instruction": "Create a Python class with methods that accept a value and increase the stored value by 5. ",
        "response": "class MyClass:\n    def __init__(self, value):\n        self.value = value\n        \n    def increase_by_five(self):\n        self.value += 5"
    },
    {
        "instruction": "Write a JavaScript function to get the Nth element from the end of a given array. ",
        "response": "function getFromEnd(arr, n) {\n    return arr[arr.length - n];\n}"
    },
    {
        "instruction": "Write code in Python to calculate the number of times a given number appears in a list. list = [2, 4, 3, 5, 4, 2, 3]\nNumber to find: 4",
        "response": "count = 0\nfor x in list:\n  if x == 4:\n    count = count +1\n\nprint(\"The number 4 appears in the list \", count, \" times.\")"
    },
    {
        "instruction": "Write a JavaScript program to search a given element x in a sorted array. arr = [1, 2, 4, 8, 10];\nx = 8",
        "response": "function searchElement(arr, x) {\n let start = 0;\n let end = arr.length - 1;\n let mid;\n\n while (start <= end) {\n  mid = Math.floor((start + end) / 2);\n  if (arr[mid] === x) {\n   return mid;\n  }\n  if (arr[mid] < x) {\n   start = mid + 1;\n  } else {\n   end = mid - 1;\n  }\n }\n\n return false;\n}\n\nconsole.log(searchElement(arr, x));"
    },
    {
        "instruction": "Write a function to concatenate two strings in Python. ",
        "response": "def concat_strings(string1, string2): \n    return string1 + string2"
    },
    {
        "instruction": "Rewrite the below JAVA program in Python public static void main (String[] args) { \n  int count = 10; \n  while (count > 0) { \n    System.out.println(\"Code:\" + count); \n    count--; \n  } \n}",
        "response": "count = 10\nwhile count > 0:\n    print(\"Code:\", count)\n    count -= 1"
    },
    {
        "instruction": "Construct a JavaScript program to create an alert message when a button is clicked. ",
        "response": "<button onclick=\"alert('Button clicked')\">Click me</button>"
    },
    {
        "instruction": "Create a new list of words with the given words in the same order. words = [\"Python\", \"is\", \"fun\"]",
        "response": "new_words = [\"Python\", \"is\", \"fun\"]"
    },
    {
        "instruction": "Transform the following list of tuples into a dictionary. list_tuples = [(\"python\", 1), (\"is\", 2), (\"fun\", 3)]",
        "response": "dict_tuples = { item[0] : item[1]  for item in list_tuples }"
    },
    {
        "instruction": "Name three built-in Python data types. ",
        "response": "The three built-in Python data types are integers, floats, and strings."
    },
    {
        "instruction": "Create an object constructor in Javascript which takes three arguments: name, age, and city. ",
        "response": "function Person (name, age, city) {\n  this.name = name;\n  this.age = age;\n  this.city = city;\n}"
    },
    {
        "instruction": "Create a looping structure in JavaScript that executes a task 10 times ",
        "response": "for (let i = 0; i < 10; i++) {\n    // The task to be executed\n}"
    },
    {
        "instruction": "Generate a function \"capitalize\" in JavaScript to capitalize the first letter of every word ",
        "response": "function capitalize(str) {\n  return str.replace(/\\b\\w/g, l => l.toUpperCase());\n}"
    },
    {
        "instruction": "Create a while loop in Python that runs while the given condition is true while x is greater than 10",
        "response": "while x > 10:\n    # do something\n    x = x - 1"
    },
    {
        "instruction": "Parse the following HTML code and store the data in a Python dictionary. <div><h2>Header</h2><p>Text</p></div>",
        "response": "data = {\n \"header\": \"Header\",\n \"text\": \"Text\"\n}"
    },
    {
        "instruction": "Write a JavaScript function that returns the first 50 prime numbers. ",
        "response": "function getFirstFiftyPrimes(){\n  let primes = [2];\n  let num = 3;\n  \n  while(primes.length < 50){\n      let isPrime = true;\n      for(let i = 0; i < primes.length; i++){\n          if(num % primes[i] === 0){\n              isPrime = false;\n          }\n      }\n      if(isPrime)\n        primes.push(num);\n      num += 1;\n  }\n  \n  return primes;\n}"
    },
    {
        "instruction": "Write a Python program to print the combination of the given list. list = [1, 2, 3]",
        "response": "from itertools import combinations\n\nlist1 = [1, 2, 3]\n\ncombinations = list(combinations(list1, 2))\nprint(combinations)\n\n# Output: [(1, 2), (1, 3), (2, 3)]"
    },
    {
        "instruction": "Write a Python code to generate a random password of 12 characters containing a mix of numbers, alphabets, and special characters. ",
        "response": "password = DX$bf7uj3@q3"
    },
    {
        "instruction": "Write a Python program to verify if an integer is odd or even. num = 8",
        "response": "False"
    },
    {
        "instruction": "Create a program in Python to compute the sum of two numbers. ",
        "response": "def add_numbers(num1, num2):\n  sum_nums = num1 + num2\n  return sum_nums"
    },
    {
        "instruction": "Complete the following Javascript code to filter out all numbers divisible by 3. const numbers = [1,2,3,4,5,6,7,8,9];\n\nconst result =",
        "response": "const numbers = [1,2,3,4,5,6,7,8,9];\n\nconst result = numbers.filter(num => num % 3 !== 0);"
    },
    {
        "instruction": "Create a content aggregator application in Python. ",
        "response": "import requests\nimport json \n\ndef content_aggregator():\n    api_url = \"https://www.example.com/api/\"\n    response = requests.get(api_url)\n    response_data = json.loads(response.text)\n    for item in response_data:\n        print(item)\n\nif __name__ == '__main__':\n    content_aggregator()"
    },
    {
        "instruction": "Write a Python program that uses recursion to calculate the Fibonacci sequence up to the 25th number. ",
        "response": "def Fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\nfibonacci_list = []\n\nfor i in range(26):\n    fibonacci_list.append(Fibonacci(i))\n\nprint(fibonacci_list)"
    },
    {
        "instruction": "Write a script in Python that will find the average of a list of numbers. [2.3, 6.7, 8.2, 4.3, 9.1]",
        "response": "import numpy as np\n\ndata = [2.3, 6.7, 8.2, 4.3, 9.1] \navg = np.mean(data)\nprint(\"Average of the list of numbers is:\", avg)"
    },
    {
        "instruction": "Write a JavaScript function that multiplies two numbers together. ",
        "response": "function multiply(x, y) {\n  return x * y;\n}"
    },
    {
        "instruction": "Find the index of the maximum value in an array of numbers in Python. [1, 6, 2, 8, 4, 9]",
        "response": "list = [1, 6, 2, 8, 4, 9]\nmax_index = list.index(max(list))\nprint(max_index) # Output: 4"
    },
    {
        "instruction": "Compose a python function to find the maximum element in a 2-dimensional array. array = [[2, 4, 7, 1], [8, 12, 9, 5]]",
        "response": "def max_element(arr): \n    max_value = arr[0][0] \n    for i in range(len(arr)): \n        for j in range(len(arr[i])): \n            if arr[i][j] > max_value: \n                max_value = arr[i][j] \n    return max_value \n  \n# Driver code \narr = [[2, 4, 7, 1], [8, 12, 9, 5]] \nmax_val = max_element(arr) \nprint(\"The maximum element in 2-dimensional array is\",max_val)"
    },
    {
        "instruction": "In the given code, add an environment variable that should be used to set the desired version of Python. ",
        "response": "import os\nos.environ[\"PYTHON_VERSION\"] = \"3.7\""
    },
    {
        "instruction": "Transform the following Python function to a pseudo code. def find_max(x):\n max_val = -1\n for i in x:\n if i > max_val:\n max_val = i\n return max_val",
        "response": "# Find the maximum value in x\nmax_val = -1\nFOR each i in x\n    IF i > max_val\n        max_val = i\nEND FOR\nRETURN max_val"
    },
    {
        "instruction": "Develop a Python program to calculate the greatest common factor of two positive integers. ",
        "response": "def gcd(x, y): \n  \n    # base case \n    if x == 0: \n        return y \n    \n    # a is greater \n    if x > y: \n        return gcd(x % y, y) \n    \n    # b is greater\n    return gcd(x, y % x) \n\n# Driver code\n# x and y are the two positive integers\nx = 16\ny = 24\ngcd_val = gcd(x, y)\nprint(\"The greatest common factor of\",x,\"and\",y,\"is\",gcd_val)"
    },
    {
        "instruction": "Create a JavaScript function that takes no more than two parameters and returns the larger of the two parameters. ",
        "response": "function maxNumber(a, b) {\n  return (a > b) ? a : b;\n}"
    },
    {
        "instruction": "Write a python program to filter a list of numbers to only include even numbers [1, 2, 3, 4]",
        "response": "def filter_even(nums):\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "instruction": "Write a JavaScript program to implement the bubble sort algorithm for sorting an array of numbers. [4, 2, 7, 1, 6, 5]",
        "response": "function bubbleSort(arr) {\n  let temp;\n  let swapped;\n  for (let i = 0; i < arr.length; i++) {\n    swapped = false;\n    for (let j = 0; j < arr.length - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        swapped = true;\n      }\n    }\n    if (!swapped) break;\n  }\n  return arr;\n}"
    },
    {
        "instruction": "Provide a demo snippet to illustrate different ways of looping through a Python dictionary. ",
        "response": "#Looping through a dictionary using a for loop \ndict = {'a': 1, 'b': 2, 'c': 3, 'd': 4} \n  \nfor key in dict: \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through a dictionary using items() method \nfor key, value in dict.items(): \n    print(\"% s : % s\" %(key, value)) \n  \n#Looping through dictionary keys \nfor key in dict.keys(): \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through dictionary values \nfor value in dict.values(): \n    print(\"% s\" %value)"
    },
    {
        "instruction": "Code a Python algorithm to reverse a given string. \"Hello, World!\"",
        "response": "def reverse(s):  \n    return s[::-1] \n\nx = \"Hello, World!\"\n  \nprint(reverse(x))"
    },
    {
        "instruction": "Edit the Python code block below to print the text in reverse. word = \"Hello\"\nprint (word)",
        "response": "word = \"Hello\"\nprint (word[::-1])"
    },
    {
        "instruction": "Develop a Python3 program to extract the words of length 3 from a given sentence. \"The quick brown fox jumped over the lazy dog\"",
        "response": "def extract_words(s):   \n    words = s.split()\n    length_3_words = []\n    for word in words:\n        if len(word) == 3:\n            length_3_words.append(word)\n    return length_3_words\n\ns = \"The quick brown fox jumped over the lazy dog\"\nprint(extract_words(s))"
    },
    {
        "instruction": "Create optional command line parameters in a Python script. ",
        "response": "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('-i', '--inputfile', type=str,help='input file')\nparser.add_argument('-o', '--outputfile', type=str,help='output file')\nparser.add_argument('-d', '--debug', action='store_true',help='enable debugging')\nargs = parser.parse_args()"
    },
    {
        "instruction": "Create a function in Python that takes two parameters and calculates the Employee Bonus depending on the hours worked. hours - 14\nhourly_rate - 17",
        "response": "def employee_bonus(hours, hourly_rate):\n    if hours <= 0:\n        return 0\n\n    # Calculate the total amount\n    total_amount = hours * hourly_rate\n    \n    # Calculate the bonus with 10%\n    bonus = total_amount * 0.1\n\n    return bonus"
    },
    {
        "instruction": "Modify the following Javascript code to check if a given number is prime or not. ",
        "response": "function isPrime(n) {\n  if (n <= 1) {\n    return false;\n  }\n  \n  // Check from 2 to n-1\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n \n  return true;\n}"
    },
    {
        "instruction": "Generate a correct JavaScript code to subtract two numbers. 391, 198",
        "response": "let result = 391 - 198;\nconsole.log(result);"
    },
    {
        "instruction": "Write a Python program to check if a string contains any special characters. CS 1501",
        "response": "def has_special_characters(s):\n  special_characters = '!@#$%^&*()_+-=[]{};:,.<>/?'\n  for char in special_characters:\n    if char in s:\n      return True\n  return False"
    },
    {
        "instruction": "You are given an array of strings. Write a Python script to sort the array in alphabetical order. \"ball\", \"cat\", \"dog\", \"apple\"",
        "response": "arr = [\"ball\", \"cat\", \"dog\", \"apple\"]\narr.sort()\nprint(arr)"
    },
    {
        "instruction": "Design a Python class to represent geometric shapes. ",
        "response": "class GeometricShape:\n\n    def __init__(self, sides):\n        self.sides = sides\n\n    def area(self):\n        if self.sides == 3:\n            return ((self.sides[0] + self.sides[1] + self.sides[2]) / 2)\n        else:\n            return 0"
    },
    {
        "instruction": "Program a function in JavaScript to remove adjacent duplicates from the given array. arr = [2, 3, 3, 3, 6, 9, 9]",
        "response": "function removeDuplicates(arr) {\n  let output = [];\n  arr.forEach(function(element, index) {\n    if (arr[index] != arr[index + 1]) {\n      output.push(element);\n    }\n  }); \n  return output;\n}\n\nconsole.log(removeDuplicates([2, 3, 3, 3, 6, 9, 9])); \n// Output: [2, 3, 6, 9]"
    },
    {
        "instruction": "Write a Python program to read two numbers and print their multiplication? Number1: 5\nNumber2: 10",
        "response": "#Take the two numbers from the user\nnumber1 = int(input('Number1:  '))\nnumber2 = int(input('Number2: '))\n\n#Multiply and print the result\nresult = number1 * number2\nprint('The result is:', result)\n\nOutput:\nThe result is: 50"
    },
    {
        "instruction": "Create a JavaScript code snippet to check if a given number is odd. Number = 21",
        "response": "function isOdd(num) { \n    if (num % 2 !== 0) {\n        return true;\n    }\n    return false;\n}\n\n// Output\nconsole.log(isOdd(21));\n// Output: true"
    },
    {
        "instruction": "Compute the maximum value of a List in Python. ",
        "response": "max_val = max(my_list)  # Computes the maximum of the list"
    },
    {
        "instruction": "Create a webhook in Python to listen to webhook requests. ",
        "response": "import time\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    data = request.get_json()\n    print(data)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
    },
    {
        "instruction": "Write code to implement the Binary Search algorithm in Python. ",
        "response": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1  # not found"
    },
    {
        "instruction": "You need to create a Python function to remove duplicate elements from a given list. [11,46,70,23, 11, 33, 46]",
        "response": "def remove_duplicates(numbers):\n    s = set()\n    for n in numbers:\n        if n not in s:\n            s.add(n)\n    return list(s)"
    },
    {
        "instruction": "You are provided with a list of integers and a given number. Generate Python code that detects if the given number is in the list or not. list = [11,22,33,44,77], number = 44",
        "response": "def check_number(list, number):\n    if number in list:\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Create a Python function to sort a list of strings based on a given alphabetical order. alphabet = 'bdhajfz', strings = ['bad', 'hfja', 'abd', 'zaj']",
        "response": "def sort_string_list(strings, alphabet):\n    sorted_list = sorted(strings, key=lambda x:(alphabet.index(x[0]),x))\n    return sorted_list"
    },
    {
        "instruction": "Create a Python code that takes in two strings and finds all common characters from the strings. string1 = 'abcd', string2 = 'acde'",
        "response": "def common_chars(string1, string2):\n    common = []\n    for char in string1:\n        if char in string2:\n            common.append(char)\n    return common"
    },
    {
        "instruction": "Generate a Python code to convert list of strings to list of integers. strings = ['23', '45', '7', '67']",
        "response": "def convert_to_ints(strings):\n    ints = []\n    for s in strings:\n        ints.append(int(s))\n    return ints"
    },
    {
        "instruction": "Create a Python code to find all uncommon characters between two strings. string1 = 'green', string2 = 'blue'",
        "response": "def uncommon_chars(string1, string2):\n    uncommon = []\n    for char in string1:\n        if char not in string2:\n            uncommon.append(char)\n    for char in string2:\n        if char not in string1:\n            uncommon.append(char)\n    return uncommon"
    },
    {
        "instruction": "You need to write a Python function to find all substrings of a given string in order. string = 'hello'",
        "response": "def find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(len(string)+1):\n            substrings.append(string[i:j])\n    return substrings"
    },
    {
        "instruction": "You need to create a Python function to detect if a given number is prime or not. ",
        "response": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "instruction": "You need to create a Python class to represent a 3-dimensional point. ",
        "response": "class Point3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return '({}, {}, {})'.format(self.x, self.y, self.z)"
    },
    {
        "instruction": "Write a python program to get all possible permutations of a given set of characters. ",
        "response": "def get_permutations(s):\n  \"\"\"Get all possible permutations of a given set of characters.\"\"\"\n  n = len(s)\n  result = []\n  def recurse(i):\n    if i == n:\n      result.append(''.join(s))\n      return\n    for j in range(i, n):\n      s[i], s[j] = s[j], s[i]\n      recurse(i+1) # recurse over each character\n      s[i], s[j] = s[j], s[i] # backtrack\n  recurse(0)\n  return result"
    },
    {
        "instruction": "Write a Python script to take two list and output the common elements of the given lists. list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]",
        "response": "def findCommon(list1,list2): \n    common = [] \n      \n    # traverse through elements of list1 \n    for x in list1: \n          \n        # traverse through elements of list2 \n        for y in list2: \n              \n            # if common element is found append to list \n            if x == y: \n                common.append(x) \n    return common"
    },
    {
        "instruction": "Generate HTML element using Javascript. Tag name: p",
        "response": "let p_element = document.createElement('p');"
    },
    {
        "instruction": "Convert this Ruby code to Python. def add_two_numbers(a, b)\n  a + b \nend",
        "response": "def add_two_numbers(a, b):\n  return a + b"
    },
    {
        "instruction": "Write an if-else statement in Python to print \"Grater than 10\" if a number is greater than 10, and \"Less than 10\" if a number is less than 10. Number: 8",
        "response": "if 8 > 10:\n  print(\"Grater than 10\")\nelse:\n  print(\"Less than 10\")"
    },
    {
        "instruction": "Preprocess this data using Python. Data:\n[\n  {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3\n  },\n  {\n    \"A\": 2,\n    \"B\": 3,\n    \"C\": 5\n  },\n  {\n    \"A\": 4,\n    \"B\": 1,\n    \"C\": 9\n  }\n]",
        "response": "import pandas as pd \n\ndata = [\n  {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3\n  },\n  {\n    \"A\": 2,\n    \"B\": 3,\n    \"C\": 5\n  },\n  {\n    \"A\": 4,\n    \"B\": 1,\n    \"C\": 9\n  }\n]\n\ndf = pd.DataFrame(data)\n\npreprocessed_data = df.apply(lambda x: (x - x.mean()) / x.std())"
    },
    {
        "instruction": "Create a python list with the following numbers: 27, 44, 28, 34 ",
        "response": "my_list = [27, 44, 28, 34]"
    },
    {
        "instruction": "Replace the following python code to print out the length of a given string. string = 'Hello world'\nprint(string)",
        "response": "string = 'Hello world'\nprint(len(string))"
    },
    {
        "instruction": "Design a loop in Python to find the maximum value from a given array. array = [50, 10, 8, 1000, 1024]",
        "response": "maxValue = array[0]\nfor i in range(1, len(array)): \n    if array[i] > maxValue: \n        maxValue = array[i] \nprint(maxValue)"
    },
    {
        "instruction": "List the books in alphabetical order using JavaScript. Books = [\"Alice in Wonderland\", \"To Kill a Mockingbird\", \"The Cat in the Hat\", \"Wuthering Heights\"];",
        "response": "Books.sort();\nconsole.log(Books);"
    },
    {
        "instruction": "Create a Python class to encode a string of characters using a Caesar cipher. ",
        "response": "class CaesarCipher:\n  \n    def __init__(self, shift):\n        self.shift = shift\n    \n    def encode(self, string):\n        cipher = ''\n        for char in string: \n            if char == ' ':\n                cipher = cipher + char\n            elif  char.isupper():\n                cipher = cipher + chr((ord(char) + self.shift - 65) % 26 + 65)\n            else:\n                cipher = cipher + chr((ord(char) + self.shift - 97) % 26 + 97)\n        return cipher\n\n# Test \ncipher = CaesarCipher(3)\nprint(cipher.encode(\"Hello, World!\"))\n\n# Output\nKhoor, Zruog!"
    },
    {
        "instruction": "Create a custom min-heap data structure in Python. ",
        "response": "class MinHeap:\n    def __init__(self):\n        self.heap = [] \n \n    def parent(self, i): \n        return (i-1)/2 \n \n    def insertKey(self, k): \n        self.heap.append(k) # Insert the new element at the end of the heap \n        i = len(self.heap)-1 \n        self.heapifyup(i) \n  \n    def heapifyup(self, i): \n        # If the current node is smaller than the parent node \n        # Swap the two nodes \n        if i != 0 and self.heap[int(self.parent(i))] > self.heap[i]: \n            self.heap[int(self.parent(i))], self.heap[i] = self.heap[i], self.heap[int(self.parent(i))]\n            self.heapifyup(self.parent(i))\n  \n    def remove(self):\n        # Get the value of the root node \n        root = self.heap[0] \n        # Move the last element of the heap to the top \n        self.heap[0] = self.heap[-1] \n        # Delete the last element of the heap \n        self.heap.pop()\n        if len(self.heap) > 0:\n            self.heapifydown(0)\n        return root\n  \n    def heapifydown(self, i):\n        # Get the left and right indices \n        left = 2*i+1\n        right = 2*i+2\n        small = i # Make the current node the small node \n  \n        # Compare the left child with the small node \n        if left < len(self.heap) and self.heap[left] < self.heap[small]:\n            small = left\n  \n        # Compare the right child with the small node \n        if right < len(self.heap) and self.heap[right] < self.heap[small]:\n            small = right\n \n        # If any of the children of the current node is smaller than \n        # the current node, then swap the current node with the small node \n        if small != i:\n            self.heap[small], self.heap[i] = self.heap[i], self.heap[small] \n            self.heapifydown(small)"
    },
    {
        "instruction": "Rewrite the following javascript code such that it prints the numbers 1 to 10. for(var i = 0; i > 10; i++) {\n    console.log(i);\n}",
        "response": "for(var i = 1; i <= 10; i++) {\n    console.log(i);\n}"
    },
    {
        "instruction": "Transform the following code into an array of objects in JavaScript. var data = [\n    [\"John\", 27], \n    [\"Mark\", 22],\n    [\"David\", 32]\n    ]",
        "response": "var data = [\n    {name: \"John\", age: 27},\n    {name: \"Mark\", age: 22},\n    {name: \"David\", age: 32}\n];"
    },
    {
        "instruction": "Create a JavaScript function which takes a string and returns the longest word in it. \"This is an example string\"",
        "response": "function longestWord(str) { \n    let words = str.split(' '); \n    let longestWord = words.reduce((longest, current) => { \n       if (current.length > longest.length) \n          return current; \n       else\n          return longest; \n    }, ''); \n    return longestWord; \n} \n\nconsole.log(longestWord(\"This is an example string\"));"
    },
    {
        "instruction": "Simulate a coin toss using Python. ",
        "response": "import random\n\ndef coin_toss():\n  result = random.choice([\"heads\", \"tails\"])\n  return result\n\nprint(coin_toss())"
    },
    {
        "instruction": "Replace all vowels with 'x' in a given string. myString = \"Python Programmer\"",
        "response": "def replace_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += \"x\"\n        else:\n            new_string += char\n    return new_string\n\nprint(replace_vowels(myString))\n\n# Output\n# Pxthxn Prxgrxmmxr"
    },
    {
        "instruction": "Measure the execution time of a given python script. ",
        "response": "import time\n \ndef measure_time():\n  # Start the timer\n  start = time.time()\n \n  # Execute the code\n  # ----- Code to be measured ------\n  # -------------------------------\n \n  # Stop the timer\n  end = time.time()\n  \n  # Return the difference\n  return end - start\n\nexecution_time = measure_time()\nprint(execution_time)"
    },
    {
        "instruction": "Write a JavaScript program to group an array of objects based on a property and sum up the values of the grouped objects. arr = [\n   {name: 'John', salary: 100},\n   {name: 'Heather', salary: 200},\n   {name: 'John', salary: 300},\n   {name: 'Heather', salary: 400}\n]",
        "response": "let groupedArray = arr.reduce((acc, cur) => {\n  let result = acc.find(item => item.name === cur.name);\n  if (!result) {\n    result = {name: cur.name, salary: 0};\n    acc.push(result);\n  }\n  result.salary += cur.salary;\n  return acc;\n}, []);\n\nconsole.log(groupedArray);"
    },
    {
        "instruction": "What is the difference between a static method and an instance method in Python? ",
        "response": "A static method is a method that does not have access to the instance of the class and so it can't be used to access instance variables. A static method is associated with the class itself, not with any particular instance. A static method is often used to create utility functions that don't need to be accessed from instance level. \n\nAn instance method requires an object or instance of a class to work. An instance method can access the instance variables of the class and has access to the self object which is an instance of the class. An instance method can also access static methods and static variables of the class."
    },
    {
        "instruction": "Given a Python dictionary, create a function to return the most common key in the dictionary. d = {\n  'a': 4,\n  'b': 3,\n  'c': 2,\n  'd': 2\n}",
        "response": "def most_common_key(d):\n  counts = [(key, value) for key, value in d.items()]\n  max_count = max(counts, key=lambda item: item[1])\n  return max_count[0]"
    },
    {
        "instruction": "Write a function in Javascript to return the second highest number in an array. Array: [1, 2, 3, 11, 4, 5]",
        "response": "function secondHighestNumber(arr) {\n  let sortedArr = arr.sort(function(a, b) {\n    return b - a;\n  });\n\n  return sortedArr[1];\n}"
    },
    {
        "instruction": "Rewrite the following selection sort algorithm in Python. def selectionSort(arr):\n  for i in range(len(arr)):\n    minIndex = i\n    for j in range(i + 1, len(arr)):\n      if arr[minIndex] > arr[j]:\n        minIndex = j\n    arr[i], arr[minIndex] = arr[minIndex], arr[i]",
        "response": "def selection_sort(arr):\n  for i in range(len(arr)):\n    min_index = i\n    for j in range(i + 1, len(arr)):\n      if arr[min_index] > arr[j]:\n        min_index = j\n    arr[i], arr[min_index] = arr[min_index], arr[i]"
    },
    {
        "instruction": "Explain the use of try-except statements in Python ",
        "response": "Try-except statements are used to handle errors and exceptions in Python. The general syntax for a try-except statement is try: ...except: ... The code that could potentially raise an exception is put inside the try block, while the code to handle the exception is put inside the except block. If an exception occurs, the code inside the except block is executed and the program execution continues normally afterwards. If no exception occurs, the code inside the except block is skipped."
    },
    {
        "instruction": "Write a JavaScript code that returns the current date in the format “Wednesday, November 20, 2019”. ",
        "response": "let today = new Date();\nlet day = today.getDay();\nlet daylist = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\nlet month = today.getMonth()+1;\nlet year = today.getFullYear();\n\nlet result = daylist[day]+\", \"+month+\" \"+today.getDate()+\", \"+year;"
    },
    {
        "instruction": "How would you create a function in JavaScript that returns a string that contains the word “Hello” 5 times? ",
        "response": "function helloFiveTimes() {\n return \"Hello \" + \"Hello \" + \"Hello \" + \"Hello \" + \"Hello \";\n}"
    },
    {
        "instruction": "Convert the following if-else statement written in JavaScript to a ternary operator. if (x > 0) {\n result = true;\n} else {\n result = false;\n}",
        "response": "let result = (x > 0) ? true : false;"
    },
    {
        "instruction": "Write a Python program that prints all numbers from 1 to 100 that are divisible by both 5 and 7. ",
        "response": "for num in range(1, 101):\n    if (num%5==0) and (num%7==0):\n        print(num)"
    },
    {
        "instruction": "Create a list comprehension statement in Python that prints all the even numbers from a list of numbers from 1 to 10. ",
        "response": "[n for n in range(1, 11) if n % 2 == 0]"
    },
    {
        "instruction": "Write a Python code snippet to prompt the user to enter their age and store that value in a variable called \"age\". ",
        "response": "age = int(input(\"Please enter your age: \"))"
    },
    {
        "instruction": "Create a function in Python that will take two parameters: a string and an integer, and return the string repeated the amount of times specified by the integer. ",
        "response": "def repeat(string, num_repetitions):\n    return string * num_repetitions"
    },
    {
        "instruction": "Write a Python script to create a webserver that can respond to \"GET\" requests from a web browser. ",
        "response": "import http.server\nimport socketserver\n\nPORT = 8080\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Serving at port\", PORT)\n    httpd.serve_forever()"
    },
    {
        "instruction": "Write a JavaScript code snippet to log the following string to the console: “Today is a great day!” ",
        "response": "console.log(\"Today is a great day!\");"
    },
    {
        "instruction": "Write Python code to extend a string to be twice as long as the original string Example string: \"Hello world\"",
        "response": "input = \"Hello world\"\noutput = input + input"
    },
    {
        "instruction": "Write JavaScript to print the following output 4 6 8",
        "response": "for(let i = 4; i <= 8; i += 2) {\n  console.log(i);\n}"
    },
    {
        "instruction": "Compose a JavaScript code to sum all odd numbers in the range From 1 to 10,",
        "response": "let sum = 0;\nfor (let i = 1; i <= 10; i++) {\n  if (i % 2 != 0) {\n      sum += i;\n  }\n}\nconsole.log(sum); //25"
    },
    {
        "instruction": "Write the most efficient JavaScript function to reverse a given array. const array = [1, 2, 3, 4, 5]",
        "response": "function reverseArray(array) {\n  let leftIndex = 0;\n  let rightIndex = array.length - 1;\n  while (leftIndex < rightIndex) {\n    const temp = array[leftIndex];\n    array[leftIndex] = array[rightIndex];\n    array[rightIndex] = temp;\n    leftIndex++;\n    rightIndex--;\n  }\n  return array;\n}"
    },
    {
        "instruction": "Implement a python class named 'Temperature' that ranks a temperature value as cold, warm, or hot given a threshold value of 30. ",
        "response": "class Temperature:\n  def __init__(self, value, threshold=30):\n    self.value = value\n    self.threshold = threshold\n\n  def rank(self):\n    if self.value < self.threshold:\n        return \"cold\"\n    elif self.value == self.threshold:\n        return \"warm\"\n    else:\n        return \"hot\""
    },
    {
        "instruction": "Implement a JavaScript ES6 class 'Rectangle' that has two properties length and breadth. ",
        "response": "class Rectangle {\n  constructor(length, breadth) {\n    this.length = length;\n    this.breadth = breadth;\n  }\n}"
    },
    {
        "instruction": "Write a Python function that finds and returns the number of occurrences of a particular character in a string. ",
        "response": "def countChar(string, char):\n  ctr = 0\n  for s in string:\n    if s == char:\n      ctr += 1\n  return ctr"
    },
    {
        "instruction": "Write a JavaScript function that takes a string and an array of strings. Return an array with elements from the string filtered by the array of strings provided. string = \"Apple, Banana, Orange, Kiwi\"; \narray = [\"Apple\", \"Orange\"]",
        "response": "function filterStrings(string, arr) {\n  let strings = string.split(', ');\n  let result = [];\n  for (let str of strings) {\n    if (arr.includes(str)) {\n      result.push(str);\n    }\n  }\n  return result;\n}"
    },
    {
        "instruction": "Create a program in Python that searches for a word in a string. This is a sample string\nword",
        "response": "def search(string, word):\n    if word in string:\n       return \"The word is present in the sentence\"\n    else: \n       return  \"The word is not present in the sentence\""
    },
    {
        "instruction": "Rewrite the following piece of code in Python. for (i = 0; i < 10; i++)\n    if (i % 2 == 0)\n        printf(\"%d\", i);",
        "response": "for i in range(10):\n    if i % 2 == 0:\n        print(i)"
    },
    {
        "instruction": "Translate the following sentence into its Python equivalent. \"If the number is greater than 10, print 'Success'.\"",
        "response": "if num > 10:\n    print('Success')"
    },
    {
        "instruction": "Construct an if-else statement in JavaScript to check if a number is even or odd. num = 5",
        "response": "if(num % 2 == 0){\n    console.log(\"Number is Even\");\n} else {\n    console.log(\"Number is Odd\");\n}"
    },
    {
        "instruction": "Write a Python code snippet to print the minimum value of a given list of numbers. list = [7, 8, 10, 4]",
        "response": "min_val = min(list)\nprint('Minimum Value:', min_val)"
    },
    {
        "instruction": "Write a Python function to find the largest prime factor of a given integer. ",
        "response": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n        else:\n            i += 1\n    return n"
    },
    {
        "instruction": "Explain how to make a Python script executable on Unix-like systems. ",
        "response": "To make a Python script executable on Unix-like systems, you must make the script file executable and specify the path to the Python interpreter. To do this, you need to add a \"shebang\" line at the beginning of the script, which should point to the path of the Python interpreter. This can be done by adding the following line to your script: #!/usr/bin/env python. Next, you must make the script file executable by running the chmod +x command. Finally, you need to specify the path of your script in the system's PATH environment variable so that it can be accessed from anywhere."
    },
    {
        "instruction": "Construct a regular expression to extract specific words from a sentence. Sentence: Python is an interpreted, high-level, general-purpose programming language.\nWords: interpreted, high-level",
        "response": "\"\"\"\nConstruct a regular expression to extract specific words from a sentence.\n\"\"\"\n\nimport re\n\nsentence = 'Python is an interpreted, high-level, general-purpose computing language.'\nwords = ['interpreted', 'high-level']\n\nregex = r'\\b(?:{})\\b'.format('|'.join(words))\nmatches = re.findall(regex, sentence)\n\nprint(matches)"
    },
    {
        "instruction": "How would you hash a string using the SHA-256 algorithm in JavaScript? ",
        "response": "const crypto = require('crypto');\n\nconst hashString = (string) => {\n  const hash = crypto.createHash('sha256');\n  hash.update(string);\n  return hash.digest('hex');\n};"
    },
    {
        "instruction": "Explain the difference between a local and a global variable in Python. ",
        "response": "In Python, a local variable is a variable that is only accessible within the scope of where it is defined, while a global variable is accessible throughout the program. All variables declared outside of a function are globally scoped, while variables declared inside a function are locally scoped. Global variables carry their value throughout the program, while a local variable will lose its value when the function containing it is exited."
    },
    {
        "instruction": "Write a JavaScript program to extract the domain name from a given URL. www.example.com/users",
        "response": "Domain name: example.com"
    },
    {
        "instruction": "Create a Python class \"Book\" with name and price properties. ",
        "response": "class Book:\n def __init__(self, name, price):\n  self.name = name\n  self.price = price"
    },
    {
        "instruction": "Using Python, create a loop that prints each element in a given list. List = [\"A\", \"B\", \"C\"]",
        "response": "for item in List:\n    print(item)"
    },
    {
        "instruction": "Design a JavaScript function that checks if a number is between 0 and 100. ",
        "response": "function isInRange(num) {\n    return num >= 0 && num <= 100;\n}"
    },
    {
        "instruction": "Convert the following array of strings to an array of integers using JavaScript. [\"12\", \"21\", \"24\", \"44\"]",
        "response": "let arr = [\"12\", \"21\", \"24\", \"44\"];\nlet intArr = arr.map(x => parseInt(x));\nconsole.log(intArr); // Output = [12, 21, 24, 44]"
    },
    {
        "instruction": "Create a Python program that takes as input an email address and validates it using a regex pattern. email = 'example@gmail.com'",
        "response": "import re\n\ndef validate_email(email):\n    \"\"\"Validates an email address using regex\"\"\"\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    match = re.search(pattern, email)\n    if match:\n        return True\n    else:\n        return False\n\nemail = 'example@gmail.com'\n\nis_valid_email = validate_email(email)\nprint(is_valid_email) # Output: True"
    },
    {
        "instruction": "Write a JavaScript function to check if a given key already exists in an object. myObj = {key1: 10, key2: 'John'}",
        "response": "function checkKeyExists(obj, key) {\n    return obj.hasOwnProperty(key); // Returns true or false\n}\n\nmyObj = {key1: 10, key2: 'John'}\nif (checkKeyExists(myObj, 'key1')) {\n    console.log('key1 exists');\n}"
    },
    {
        "instruction": "Create a list comprehension to generate a list of all the words in the sentence \"Python is amazing\". ",
        "response": "words = [word for word in \"Python is amazing\".split(' ')]"
    },
    {
        "instruction": "Find the product of the elements of a given array in Python. [1, 2, 3]",
        "response": "def product(arr): \n    product = 1\n  \n    # Iterate the array \n    for i in arr: \n        product = product * i \n  \n    return product \n  \n# Driver Code \narr = [1, 2, 3] \nprint(product(arr)) # 6"
    },
    {
        "instruction": "Create an algorithm in Python that converts a given number from base 10 to binary. 8",
        "response": "def base10_to_binary(n):\n\n    # Create an empty binary array\n    binary_arr = [0] * (int(math.log2(n)) + 1) \n  \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -1, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n  \n# Driver Code \nn = 8\nprint(base10_to_binary(n)) # [1, 0, 0, 0]"
    },
    {
        "instruction": "Create an HTML element that prints \"Hello, World!\" on the screen using JavaScript. ",
        "response": "<script> \n      document.write(\"Hello, World!\"); \n</script>"
    },
    {
        "instruction": "Create a JavaScript script to toggle a class on the page. <html>\n<body>\n   <div id=\"test\" class=\"test-class\">Hello World!</div>\n</body>\n</html>",
        "response": "<script>\n   //Toggle the class on click\n   document.getElementById(\"test\").addEventListener(\"click\", function(){\n      this.classList.toggle(\"test-class\");\n   });\n</script>"
    },
    {
        "instruction": "Design an API endpoint that takes two numbers and returns the sum of the two using JavaScript ",
        "response": "app.get(\"/sum/:num1/:num2\", (req, res) => {\n const num1 = req.params.num1;\n const num2 = req.params.num2;\n \n const result = parseInt(num1) + parseInt(num2);\n \n res.status(200).send({\n  result: result\n });\n});"
    },
    {
        "instruction": "Design a function in Python that takes a list of strings and returns a new list with words in reverse order. ",
        "response": "def reverse_words(words):\n    return [word[::-1] for word in words]"
    },
    {
        "instruction": "Generate a list comprehension in Python to generate a list of integers from 1 to 50. ",
        "response": "[x for x in range(1, 51)]"
    },
    {
        "instruction": "Write a JavaScript program to remove all characters from a string that appear more than once. string = \"abbccddee\"",
        "response": "let string = \"abbccddee\"; \nlet res = \"\";\nlet seen = {};\nfor (let letter of string) {\n  if (!seen[letter]) {\n    res += letter;\n    seen[letter] = true;\n  }\n}\nconsole.log(res);  //Output is: abcde"
    },
    {
        "instruction": "Create a Python script for creating a random string of given length. Length of 8",
        "response": "import random\nimport string\n\ndef random_string(length):\n    # Create a list of characters to be used in the random string\n    char_list = list(string.ascii_letters + string.digits)\n\n    # Create the random string with the given length\n    random_string = ''.join([random.choice(char_list) for i in range(length)])\n    \n    # Return the random string\n    return random_string\n\nif __name__ == '__main__':\n    # Define the length of the random string\n    length = 8\n    # Call the function to generate the random string\n    random_str = random_string(length)\n    # print the generated string\n    print('Random string:', random_str)\n\nOutput:\nRandom string: fdLbBi49"
    },
    {
        "instruction": "Edit the following Python code to combine two lists. list1 = [1, 2, 3]\nlist2 = [4, 5, 6]",
        "response": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Combine both the lists\ncombined_list = list1 + list2\n# Print the combined list\nprint(combined_list)\n\nOutput:\n[1, 2, 3, 4, 5, 6]"
    },
    {
        "instruction": "Develop a Python program that creates a random password of length 8 characters. ",
        "response": "import string\nimport random\n\nlength = 8\nall_characters = string.ascii_letters + string.digits + string.punctuation\n\npassword = \"\".join(random.choice(all_characters) for i in range(length))\n\nprint(password)"
    },
    {
        "instruction": "Write a JavaScript program to calculate the amount of money saved by an individual over 10 years given the annual deposits and annual interest rate. deposits = $1000 and rate = 5%",
        "response": "const deposits = 1000;\nconst rate = 0.05;\nlet totalSavings = 0; \n\nfor (let i = 1; i <= 10; i++) {\n    totalSavings += deposits * (1 + rate);\n}\nconsole.log(totalSavings); //outputs amount saved over 10 year period"
    },
    {
        "instruction": "Solve this math problem using Python code. Problem: Find the 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5.",
        "response": "#Find the first term\na = (42/3) - (2*5)\na = 10\n\n#Find the other two terms\nb = a + 5\nc = b + 5\n\n#Print the answer\nprint(\"The 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5 are:\", a, b, c)"
    },
    {
        "instruction": "Write Python code to generate a random integer between 1 and 10,000 (inclusive). ",
        "response": "import random\n\nnum = random.randint(1, 10000)\nprint(\"Random integer between 1 and 10,000:\", num)"
    },
    {
        "instruction": "Generate an object using JavaScript that contains the numbers from 1 to 10. ",
        "response": "const myObject = {\n \"1\": 1,\n \"2\": 2, \n \"3\": 3, \n \"4\": 4, \n \"5\": 5, \n \"6\": 6, \n \"7\": 7, \n \"8\": 8, \n \"9\": 9, \n \"10\": 10\n};"
    },
    {
        "instruction": "Convert the following JavaScript code to valid C++ code. let arr = [1, 2, 3];\nlet sum = 0;\nfor (let i = 0; i < arr.length; i++) {\n sum += arr[i];\n}",
        "response": "int arr[] = {1, 2, 3}; \nint sum=0; \nfor (int i=0; i<3; i++) \n{ \n sum += arr[i]; \n}"
    },
    {
        "instruction": "Create a JavaScript code snippet to get a list of all the elements in an array with even index. let arr = [1,2,3,4,5,6];",
        "response": "let evenIndexArr = arr.filter((elem, index) => index % 2 === 0);"
    },
    {
        "instruction": "Write a JavaScript code snippet to calculate the present value of a future one-time cash payment. let futureValue = 10000;\nlet rate = 0.06;\nlet periods = 10;",
        "response": "let presentValue  = futureValue / Math.pow(1 + rate, periods);"
    },
    {
        "instruction": "Create a JavaScript statement that generates a random number between 1 and 10. ",
        "response": "Math.floor(Math.random() * 10) + 1;"
    },
    {
        "instruction": "Construct an if statement for Python that checks if a given number is greater than 5. ",
        "response": "num = 7\nif num > 5:\n print(\"The number is greater than 5\")"
    },
    {
        "instruction": "Define a function in JavaScript that returns true if a given number is even. ",
        "response": "function isEven(num) {\n return num % 2 === 0;\n}"
    },
    {
        "instruction": "Calculate the number of days between two given dates in Python. date1 = '2020-09-13'\ndate2 = '2021-02-06'",
        "response": "122"
    },
    {
        "instruction": "Predict the output of this JavaScript function. function divideThree(x) {\n\treturn x / 3;\n}\n\nconsole.log(divideThree(9));",
        "response": "The output of this function is 3."
    },
    {
        "instruction": "Write a code snippet to convert a list in Python to a set. list1 = [1,2,3,4,5]",
        "response": "set1 = set(list1) # set1 will now contain [1,2,3,4,5]"
    },
    {
        "instruction": "Write a Python code snippet to sort a dictionary by its values in ascending order. dictionary = {'a': 5, 'b': 2, 'c': 4}",
        "response": "sorted_dictionary = dict(sorted(dictionary.items(), key=lambda item: item[1]))\nprint(sorted_dictionary) # result: {'b': 2, 'c': 4, 'a': 5}"
    },
    {
        "instruction": "Debug this Python code and explain why it was not running. def string_split(string, n):\nwords = string.split(\" \")\nfor x in words[:n]:\nprint(\" \".join(words[:x]))",
        "response": "def string_split(string, n):\n    words = string.split(\" \")\n    for x in range(n):\n        print(\" \".join(words[:x]))\n\nThe code was not running as initially written because the range used in the for loop was not provided. Inside the for loop, the variable x needed to be given a range (e.g. range(n)) so that it can iterate over each of the elements of the words list properly. The loop should have looked like this: for x in range(n):."
    },
    {
        "instruction": "Print the total number of characters in a given string using JavaScript. ",
        "response": "let str = \"Hello World!\";\nlet num_chars = str.length;\nconsole.log(`The string has ${num_chars} characters.`);"
    },
    {
        "instruction": "Provide an appropriate name for a Python module that contains a class for a user. ",
        "response": "The appropriate name for the module could be \"user_class.py\"."
    },
    {
        "instruction": "Suggest a JavaScript code to generate a random alphanumeric string of 8 characters. ",
        "response": "let randomString = Math.random().toString(36).substring(2, 10);\nconsole.log(randomString);"
    },
    {
        "instruction": "Write a JavaScript program that prints all the even numbers from 0 to a given number n. n = 10",
        "response": "for (var i = 0; i <= n; i++) {\n  if (i % 2 == 0) {\n    console.log(i);\n  }\n}"
    },
    {
        "instruction": "About a given number n, can you write a JavaScript program to find the sum of all the numbers that are greater than 0 and less than n? n = 5",
        "response": "var sum = 0; \n  \nfor (var i = 1; i < n; i++) { \n    sum = sum + i; \n} \n\nconsole.log(sum)"
    },
    {
        "instruction": "Write a JavaScript program to find the greatest common divisor (GCD) of two given positive numbers. x = 18\ny = 12",
        "response": "function gcd(x, y)  { \n\tif (y == 0)  \n\t\treturn x; \n\telse\n\t\treturn gcd(y, x % y); \n}\t \n\nconsole.log(gcd(18, 12));"
    },
    {
        "instruction": "Create an array in Python of size 10 filled with zeroes. ",
        "response": "arr = [0] * 10"
    },
    {
        "instruction": "Create a web application using Flask in Python that displays the current date and time. ",
        "response": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef current_datetime():\n    from datetime import datetime\n    now = datetime.now()\n    return render_template('template.html', current_datetime = now)\n\nif __name__ == \"__main__\":\n\tapp.run(debug = True)\n\ntemplate.html:\n<html>\n    <head>\n        <title> Current Date and Time</title>\n    </head>\n    <body>\n        <h1> Current Date and Time </h1>\n        <p> The current date and time is {{ current_datetime }}</p>\n    </body>\n</html>"
    },
    {
        "instruction": "Generate a random string in JavaScript of length 5 containing only characters from 'A' to 'Z'. ",
        "response": "let randomStr = '';\nconst possibleChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nfor (let i = 0; i < 5; i++ ){\n    let randomIndex = Math.floor(Math.random() * possibleChars.length);\n    let randomChar = possibleChars.charAt(randomIndex); \n    randomStr += randomChar\n}\nconsole.log(randomStr);"
    },
    {
        "instruction": "Write a function in Python to compress a given string. aabcccccaaa",
        "response": "def compression(string):\n    output = \"\"\n    count = 1\n    curr_char = string[0]\n    for char in string[1:]:\n        if char == curr_char:\n            count += 1\n        else:\n            output += curr_char + str(count)\n            curr_char = char\n            count = 1\n    output += curr_char + str(count)\n    return output\n\nprint(compression('aabcccccaaa'))\n# Output: a2b1c5a3"
    },
    {
        "instruction": "Generate an array in Python of size 10 filled with Random numbers between 1 to 100. ",
        "response": "import random\narr = [random.randint(1,100) for i in range(10)]"
    },
    {
        "instruction": "Design a JavaScript function named \"calculate\" that calculates the mean of a given array. Array: [1, 5, 8, 9, 10]",
        "response": "function calculate(array) {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  let mean = sum / array.length; \n  return mean;\n}"
    },
    {
        "instruction": "What is the syntax to return the total number of elements in an array using JavaScript? ",
        "response": "The syntax to return the total number of elements in an array using JavaScript is as follows:\n\narray.length;"
    },
    {
        "instruction": "Using Python, write a function to format a given date. Date: \"2021-02-14\"\nFormat: \"dd/mm/yyyy\"",
        "response": "def format_date(date, date_format):\n date = date.split('-') \n day = date[2]\n month = date[1]\n year = date[0]\n if date_format == \"dd/mm/yyyy\": \n  formatted_date = day + \"/\" + month + \"/\" + year\n return formatted_date"
    },
    {
        "instruction": "How can a string be converted to a list in Python? ",
        "response": "A string can be converted to a list in Python by using the list() function. The syntax for this is: \n\nlist(string);\n\nFor example, to convert the string \"apple\" to a list, you would use: \n\nlist(\"apple\");"
    },
    {
        "instruction": "Compile a piece of code written in Python language. ",
        "response": "python -c \"import py_compile; py_compile.compile('foo.py')\""
    },
    {
        "instruction": "Determine the output of the following JavaScript code when x = 2: x = 2\nif (x < 0) {\n    console.log('x is negative');\n} else if (x > 0) {\n    console.log('x is positive');\n} else {\n    console.log('x is zero');\n}",
        "response": "x is positive"
    },
    {
        "instruction": "Create a JavaScript function that takes three parameters: a number, a sign, and another number. The function should use the sign to determine which arithmetic operation it should perform and output the result. ",
        "response": "function calculate(num1, operator, num2) {\n    switch (operator) {\n        case '+':\n            return num1 + num2\n        case '-':\n            return num1 - num2\n        case '*':\n            return num1 * num2\n        case '/':\n            return num1 / num2\n        default:\n            return 'Operation invalid'\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript code snippet that will add two numbers. ",
        "response": "let num1 = 5;\nlet num2 = 8; \nlet sum = num1 + num2;\nconsole.log(sum);"
    },
    {
        "instruction": "Given 3 lists a, b, and c, write a Python code to calculate the dot product of a and b and store the result in c. a = [3, 4, 5] \nb = [6, 7, 8]\nc = []",
        "response": "def dot_product(a, b, c):\n    if len(a) != len(b):\n        raise ValueError(\"Length of Lists cannot differ\")\n    dp = 0\n    for i in range(len(a)):\n        dp += a[i]*b[i]\n    c.append(dp)"
    },
    {
        "instruction": "Given two strings, write a Python code to delete all occurrences of the second string from the first string. str1 = \"abcabcabcabcabcabcabcabcabcabc\"\nstr2 = \"abc\"",
        "response": "def delete_occurrences(str1, str2):\n    return str1.replace(str2, '')"
    },
    {
        "instruction": "Create a Python program to calculate the mean, median, and mode of a given set of data. data = [1, 4, 6, 3, 8, 9]",
        "response": "def calculate_mean(data):\n    '''Function to calculate mean of data'''\n    mean = sum(data) / len(data)\n    return mean\n\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\n    count_dict = {}\n    mode_list = []\n    # count the frequency of each element\n    for i in data:\n        count_dict[i] = data.count(i)\n    # find the maximum frequency\n    max_freq = max(count_dict.values())\n    # find all elements with maximum frequency\n    for k,v in count_dict.items():\n        if max_freq == v:\n            mode_list.append(k)\n    return mode_list\n\ndata = [1, 4, 6, 3, 8, 9]\nmean = calculate_mean(data)\nmedian = calculate_median(data)\nmode = calculate_mode(data)\n\nprint(f\"Mean of data is: {mean}\")\nprint(f\"Median of data is: {median}\")\nprint(f\"Mode of data is: {mode}\")"
    },
    {
        "instruction": "Write a JavaScript program to get the current user's timezone offset from UTC in minutes. ",
        "response": "let offset_minutes = new Date().getTimezoneOffset();\nconsole.log(offset_minutes);"
    },
    {
        "instruction": "Create a HTML email template with placeholder information from a JavaScript object. var data = {\n    firstname: 'John',\n    lastname: 'Doe',\n    email: 'johndoe@example.com'\n};",
        "response": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Email Template</title>\n</head>\n<body>\n    <h1>Hello, {{data.firstname}} {{data.lastname}}!</h1>\n    <p>This is an automated email sent to you at {{data.email}}.</p>\n    <p>Thank you!</p>\n</body>\n</html>"
    },
    {
        "instruction": "Design a class in Python to store a user profile information such as name, age, city, etc. ",
        "response": "class UserProfile:\n    def __init__(self, name, age, city):\n        self.name = name\n        self.age = age\n        self.city = city\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_city(self):\n        return self.city"
    },
    {
        "instruction": "Write a script in Python to find the longest word in a given string. sample_string = \"This is a sample string containing a few words\"",
        "response": "def longest_word(sample_string):\n    words_list = sample_string.split()\n    longest_word = \"\"\n    for word in words_list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word"
    },
    {
        "instruction": "Design a class in Python to store information about a car, such as its make, year, and mileage. ",
        "response": "class Car:\n    def __init__(self, make, year, mileage):\n        self.make = make\n        self.year = year\n        self.mileage = mileage\n\n    def get_make(self):\n        return self.make\n\n    def get_year(self):\n        return self.year\n\n    def get_mileage(self):\n        return self.mileage"
    },
    {
        "instruction": "Write a script in JavaScript to find the sum of all the numbers in an array. ",
        "response": "function arraySum(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}"
    },
    {
        "instruction": "Create a function in JavaScript to input two strings and output their combined length. ",
        "response": "function combinedLength(string1, string2) {\n  return string1.length + string2.length;\n}"
    },
    {
        "instruction": "Design a class in Python to store a book's title, author, and number of pages. ",
        "response": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_pages(self):\n        return self.pages"
    },
    {
        "instruction": "Console log \"Hello\" seven times in JavaScript. ",
        "response": "for (let i = 0; i < 7; i++) { \n  console.log('Hello'); \n}"
    },
    {
        "instruction": "Generate 5 random numbers between 0 and 9 using JavaScript. ",
        "response": "let randomNums = [];\n\nfor(let i = 0; i < 5; i++){\n  let num = Math.floor(Math.random() * 10);\n  randomNums.push(num);\n}\n\nconsole.log(randomNums);"
    },
    {
        "instruction": "How to find the number of elements within a list in Python? ",
        "response": "The number of elements in a list can be obtained using the len() method in Python.\nFor example, if the list is named my_list, the number of elements can be obtained as len(my_list)."
    },
    {
        "instruction": "How to remove duplicates from a list in Python? ",
        "response": "In Python, duplicates can be removed from a list by converting the list to a set. Sets are unordered collections of unique elements. They do not allow duplicate elements, thus when a list is converted to a set, all duplicates are removed.\n\nFor example, if the list is named my_list, then the set can be constructed as follows:\n\nmy_set = set(my_list)"
    },
    {
        "instruction": "Write a function in Python that takes a number and returns the square of the number. x = 15",
        "response": "def square(x):\n    \"\"\"This function takes an integer x and returns its square\"\"\"\n    return x * x\n    \nx = 15\nprint(square(x)) # prints 225"
    },
    {
        "instruction": "Create a loop in JavaScript that logs \"Hello, World!\" to the console 5 times. ",
        "response": "for (let i=0; i<5; i++){\n  console.log('Hello, World!');\n}"
    },
    {
        "instruction": "Create a for loop in JavaScript that iterates through a given array and prints each element. arr = [\"a\",\"b\",\"c\",\"d\"]",
        "response": "arr = [\"a\",\"b\",\"c\",\"d\"];\nfor (let i = 0; i < arr.length; i++){\n    console.log(arr[i]); \n}"
    },
    {
        "instruction": "Name four significant members of the Python community. ",
        "response": "Guido van Rossum, Kenneth Reitz, Monty Python, and Brett Cannon."
    },
    {
        "instruction": "Create a JavaScript to switch between two div components. ",
        "response": "function switchDiv(){ \n   if(document.getElementById(\"div1\").style.display == \"none\"){ \n      document.getElementById(\"div1\").style.display = \"block\"; \n      document.getElementById(\"div2\").style.display = \"none\"; \n   } else { \n      document.getElementById(\"div1\").style.display = \"none\"; \n      document.getElementById(\"div2\").style.display = \"block\"; \n   }\t\n}"
    },
    {
        "instruction": "Generate a Python script that implements a Linked List data structure. ",
        "response": "# define Node\nclass Node(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# define LinkedList\nclass LinkedList:\n\n    def __init__(self, head=None):\n        self.head = head\n    \n    def insert(self, node):\n        current = self.head\n        if not self.head:\n            self.head = node\n        else:\n            while current.next:\n                current = current.next\n            current.next = node\n\n     def delete_node(self, data):\n        current = self.head\n        while current.data != data and current.next is not None:\n            previous = current\n            current = current.next\n        if current.data == data:\n            if current == self.head:\n                self.head = current.next\n            else:\n                previous.next = current.next"
    },
    {
        "instruction": "Provide a Python function to calculate the number of times a word appears in a given string \"This is a sample string. There are some words in this string.\"",
        "response": "def count_words(s): \n    tokens = s.split() \n    word_freq = {} \n    for token in tokens: \n        if token in word_freq: \n            word_freq[token] += 1\n        else: \n            word_freq[token] = 1\n        \n    return word_freq"
    },
    {
        "instruction": "Implement a machine learning model in Python to predict customer churn. ",
        "response": "import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\ncustomers = pd.read_csv(\"customers.csv\")\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    customers.drop('Churn', axis=1), \n    customers.Churn,\n    test_size=0.2, \n    random_state=42)\n\n# Create model\nmodel = LogisticRegression()\n\n# Fit and make predictions\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))"
    },
    {
        "instruction": "Develop a JavaScript program to print the average of a given set of numbers. ",
        "response": "function findAverage(numbers) {\n\tlet sum = 0;\n\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsum += numbers[i];\n\t}\n\n\treturn sum / numbers.length;\n}"
    },
    {
        "instruction": "Generate a list of 1000 random numbers between 1 and 1000 using Python. ",
        "response": "import random\n\nrandom_list = [random.randint(1, 1000) for _ in range(1000)]"
    },
    {
        "instruction": "Convert a string representation of a JSON object to an actual JSON object in Python. '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'",
        "response": "import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\njson_object = json.loads(json_string)"
    },
    {
        "instruction": "Calculate the sine of a given angle using JavaScript. 45",
        "response": "let angle = 45;\nlet sine = Math.sin(angle * (Math.PI/180));\nconsole.log(sine);"
    },
    {
        "instruction": "Generate a random password of length 8 using Python. ",
        "response": "import random\n\ndef generate_password(length):\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\n    password = \"\"\n    for i in range(length):\n        index = random.randint(0, len(chars)-1)\n        password += chars[index]\n    return password\n\nlength = 8\npassword = generate_password(length)\nprint(\"Here's your random password:\", password)"
    },
    {
        "instruction": "Create a JavaScript object to store a user's information. ",
        "response": "let user = {\n  firstName : 'John',\n  lastName : 'Doe',\n  age : 30,\n  job : 'Software Engineer'\n};"
    },
    {
        "instruction": "Find the maximum and minimum number in the following array with JavaScript. [20, 40, 10, 30, 50]",
        "response": "let numbers = [20, 40, 10, 30, 50];\n\nlet minNumber = Math.min(...numbers);\nlet maxNumber = Math.max(...numbers);"
    },
    {
        "instruction": "Identify the key differences between a set and a dictionary in Python. ",
        "response": "The key difference between a set and a dictionary in Python is that a set stores unordered elements while a dictionary stores key-value pairs. Additionally, dictionaries have a set of keys that are unique and immutable, while sets are unordered collections of unique and immutable elements. Sets are more efficient for searching and testing for membership, while dictionaries are more efficient for retrieving specific values."
    },
    {
        "instruction": "Convert a given string to its lowercase version Python",
        "response": "lower_case = \"python\""
    },
    {
        "instruction": "Write a JavaScript code snippet to loop through an array and return the sum of all the elements. [1, 2, 3, 4]",
        "response": "let arr = [1, 2, 3, 4];\nlet sum = 0;\n \nfor (let i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\n\nconsole.log(sum);"
    },
    {
        "instruction": "Write a JavaScript program to classify a given array of strings into two groups- one which contains elements that can be parsed into numbers and one which can't. ",
        "response": "function classify(arr) {\n  let nums = [];\n  let strs = [];\n  arr.forEach(el => {\n    if (!isNaN(el)) nums.push(el);\n    else strs.push(el);\n  });\n  return [nums, strs];\n}"
    },
    {
        "instruction": "Use the following JSON data and write a JavaScript function to parse it. {\n \"employees\": [\n  {\n   \"firstName\": \"John\",\n   \"lastName\": \"Doe\"\n  },\n  {\n   \"firstName\": \"Anna\",\n   \"lastName\": \"Smith\"\n  },\n  {\n   \"firstName\": \"Peter\",\n   \"lastName\": \"Jones\"\n  }\n ]\n}",
        "response": "function parseJSON(jsonString) {\n let employeeData = JSON.parse(jsonString);\n let employees = employeeData.employees;\n let parsedData = [];\n for (let i = 0; i < employees.length; i++){\n  let employee = employees[i];\n  let parsedEmployee = {};\n  parsedEmployee.firstName = employee.firstName;\n  parsedEmployee.lastName = employee.lastName;\n  parsedData.push(parsedEmployee);\n }\n return parsedData;\n};"
    },
    {
        "instruction": "Use the following code and write a JavaScript function to reverse the order of the characters in a given string. ",
        "response": "function reverseString(str) {\n return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "Use the following function and SQL query and write a JavaScript program to insert data into a given table. function insertData(arr) {\n let sqlQuery = \"INSERT INTO <table_name> (NAME,AGE) VALUES ?\";\n}",
        "response": "function insertData(arr) {\n let sqlQuery = \"INSERT INTO <table_name> (NAME,AGE) VALUES ?\";\n let values = [];\n arr.forEach(item => {\n  values.push([item.name, item.age]);\n });\n executeQuery(sqlQuery, [values]);\n}\n\nfunction executeQuery(query, values) {\n connection.query(query, [values], function (err, result) {\n  if (err) {\n   console.log(err);\n  }\n });\n}"
    },
    {
        "instruction": "Write a JavaScript program to find the most commonly occurring item in a given object. ",
        "response": "function mostCommonlyOccuring(obj) {\n let count = {};\n let maxCount = 0;\n let mostCommon = null;\n \n for (const key in obj) {\n  if (obj.hasOwnProperty(key)) {\n   if (obj[key] in count) {\n    count[obj[key]]++;\n   } else {\n    count[obj[key]] = 1;\n   }\n   if (count[obj[key]] > maxCount) {\n    maxCount = count[obj[key]];\n    mostCommon = obj[key];\n   }\n  }\n }\n return mostCommon;\n}"
    },
    {
        "instruction": "Create a python function that takes a string of characters as an argument and returns a list of all unique combinations of characters possible. abc",
        "response": "def generate_unique_permutations(string):\n    output = []\n    for x in range(len(string)):\n        for y in range(x + 1,len(string)+1):\n            output.append(''.join(sorted(string[x:y])))  \n    return output\n\nprint(generate_unique_permutations(\"abc\")) #Output: ['a', 'ab', 'abc', 'ac', 'b', 'bc', 'c']"
    },
    {
        "instruction": "Construct a Python function to count the number of words in a given sentence This is a sentence",
        "response": "def word_count(sentence):\n    return len(sentence.split())\n\nprint(word_count('This is a sentence')) # Output: 5"
    },
    {
        "instruction": "How to check if a given year is a leap year in Python? ",
        "response": "def leap_year(year):\n    if (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0):\n        return True\n    return False"
    },
    {
        "instruction": "Write a Python function that takes an integer as an argument and returns the square of that number ",
        "response": "def square(n):\n    return n ** 2"
    },
    {
        "instruction": "Develop Python code to print out all the divisors of a given number 30",
        "response": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \n\nprint(get_divisors(30)) # output [1, 2, 3, 5, 6, 10, 15, 30]"
    },
    {
        "instruction": "Write a JavaScript program to generate random alphanumeric characters of length 10. ",
        "response": "function generateAlphaNum() {\n    let length = 10;\n    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n}"
    },
    {
        "instruction": "Create a JavaScript function to compare 2 strings to determine if they are anagrams (words with the same letters as each other). ",
        "response": "function anagramCheck(str1, str2) {\n  // Remove whitespace, convert strings to lowercase, and split into arrays\n  let arr1 = str1.replace(/\\s/g, '').toLowerCase().split('');\n  let arr2 = str2.replace(/\\s/g, '').toLowerCase().split('');\n  \n  // If the arrays are different lengths, they cannot be anagrams\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  \n  // Sort both arrays, and check if they are the same\n  let sortedArr1 = arr1.sort();\n  let sortedArr2 = arr2.sort();\n  \n  for (let i=0; i<sortedArr1.length; i++) {\n    if (sortedArr1[i] !== sortedArr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}"
    },
    {
        "instruction": "Write a JavaScript code to add the numbers 8 and 4. ",
        "response": "var num1 = 8;\nvar num2 = 4;\nvar sum = num1 + num2;\n \nconsole.log(sum);"
    },
    {
        "instruction": "Create a JavaScript object with two properties and their respective values. ",
        "response": "var myData = {\n  name: 'John',\n  age: 28\n};"
    },
    {
        "instruction": "Create a method to generate a random integer between 1 and 10 in Python. ",
        "response": "import random\n\ndef random_int():\n    return random.randint(1, 10)"
    },
    {
        "instruction": "Create a class in Python with a constructor and two methods. ",
        "response": "class MyClass:\n  def __init__(self):\n    self.x = 0\n\n  def method_1(self):\n    self.x +=1\n\n  def method_2(self, arg1):\n    self.x += arg1"
    },
    {
        "instruction": "Write a Python function to filter a given list of strings by the specified character? my_list = ['Hello', 'World', 'Hi', 'Python']\ncharacter = 'o'",
        "response": "def filter_list_by_character(my_list, character):\n  return [item for item in my_list if character in item]"
    },
    {
        "instruction": "Write a Python program to return a boolean indicating whether a substring is present within a given string. string = 'Hello world'\nsubstring = 'world'",
        "response": "def contains_substring(string, substring):\n  return substring in string"
    },
    {
        "instruction": "Write a Python program to find the minimum cost of a path from top left cell to bottom right cell of a matrix. matrix = [[2, 0, 3, 5],\n          [4, 5, 1, 2],\n          [3, 1, 2, 7]]",
        "response": "def min_path_sum(matrix):\n\n    # initialize the solution matrix\n    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    # copying the first row elements\n    res[0] = matrix[0]\n\n    # iterate over the remaining rows\n    for i in range(1, len(matrix)):\n        # copy the first element\n        res[i][0] = res[i-1][0] + matrix[i][0]\n\n        for j in range(1, len(matrix[0])):\n            # choose the smaller of the two\n            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]\n\n    # return the bottom-right element\n    return res[len(matrix)-1][len(matrix[0])-1]"
    },
    {
        "instruction": "How would you transform a JSON object into an XML document with JavaScript? ",
        "response": "function json2xml(json) {\n  // Create the return variable\n  let xml = '';\n\n  // Parse the input\n  if (typeof json == 'object') {\n    for (let key in json) {\n      // Add a start tag\n      xml += '<' + key + '>';\n\n      // Check for child elements\n      if (typeof json[key] == 'object') {\n        // Recursively traverse the child elements\n        xml += json2xml(json[key]);\n      } else if (typeof json[key] == 'string') {\n        // Add a value\n        xml += json[key];\n      } else {\n        // Add nothing\n      }\n\n      // Add an end tag\n      xml += '</' + key + '>';\n    }\n  } else if (typeof json == 'string') {\n    // Add the value\n    xml += json;\n  } else {\n    // Add nothing\n  }\n\n  // Return the XML\n  return xml;\n}"
    },
    {
        "instruction": "Create a Python program to replace all instances of a specific character in a string. string = \"Hello World!\"\ncharacter = \"o\"\nreplacement_character = \"_\"",
        "response": "def replace_character(string, character, replacement_character):\n    new_string = \"\"\n    for c in string:\n        if c == character:\n            new_string += replacement_character\n        else:\n            new_string += c\n    return new_string"
    },
    {
        "instruction": "Create a function to print a multiline message in Python message = \"This is a multiline \nmessage.\"",
        "response": "def print_multiline_message(message):\n    print(message)"
    },
    {
        "instruction": "Create a JavaScript program to print out the values of each key of an object myObj = {\n    \"name\": \"Bob\",\n    \"age\": 20,\n    \"city\": \"New York\"\n}",
        "response": "function printObject(myObj) {\n    for (let key in myObj) {\n        console.log(myObj[key]);\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript program to loop through an array in reverse order. var arr = [5, 2, 6, 9, 3];",
        "response": "var arr = [5, 2, 6, 9, 3];\n\nfor (var i = arr.length-1; i >= 0; i--) {\n    console.log(arr[i]);\n}"
    },
    {
        "instruction": "Add a function to the following JavaScript code to search a value in a given array const arr = [12, 5, 8, 130, 44];",
        "response": "const arr = [12, 5, 8, 130, 44];\n\nfunction searchValue(arr, value) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === value) {\n            return (i);\n        }\n    }\n    return -1;\n}"
    },
    {
        "instruction": "Design an approach in Python to retrieve a record from a database. ",
        "response": "import sqlite3\n\ndef retrieve_record(db_name, table_name, id):\n    try:  \n        con = sqlite3.connect(db_name)\n        cur = con.cursor()\n        cur.execute(\"SELECT * FROM {} where id={};\".format(table_name, id))\n        record = cur.fetchone()\n    except:\n        record = None\n    finally:    \n        cur.close()\n        con.close()\n    return record"
    },
    {
        "instruction": "Create an HTML page with an input field and a button, and write a JavaScript function that sets the font size of the entered text in the input field to 16pt when the button is clicked. ",
        "response": "<html>\n<head>\n    <title>Change Font Size</title>\n    <script type=\"text/javascript\">\n        function changeFontSize() {\n            var inputField = document.getElementById(\"inputField\");\n            inputField.style.fontSize = \"16pt\";\n        }\n    </script>\n</head>\n<body>\n    <input type=\"text\" id=\"inputField\" placeholder=\"Enter Text Here\">\n    <button type=\"button\" onclick=\"changeFontSize()\">Change Font Size</button>\n</body>\n</html>"
    },
    {
        "instruction": "Design a Python function to return the list of values in two separate lists for even and odd numbers in a given list. [1, 2, 3, 4, 5]",
        "response": "def separateEvenOdd(nums):\n    evenList = []\n    oddList = []\n\n    for n in nums:\n        if n % 2 == 0:\n            evenList.append(n)\n        else:\n            oddList.append(n)\n\n    return evenList, oddList\n\nprint(separateEvenOdd([1,2,3,4,5]))"
    },
    {
        "instruction": "Create a function in python that takes a string as an argument and prints out two copies of the string. string = \"Hello World!\"",
        "response": "def print_twice(string):\n    print(string)\n    print(string)\n    \nprint_twice(string)"
    },
    {
        "instruction": "Create a Python loop that will iterate through the following list and will print each item's value multiplied with 5. numbers = [5, 10, 15, 20, 25]",
        "response": "for number in numbers:\n    print(number*5)"
    },
    {
        "instruction": "Create a JavaScript code snippet that will sum all the numbers in the following array and will then print the result. numbers = [5, 10, 15, 20, 25]",
        "response": "let result = 0;\n\nfor (let number of numbers){\n result += number;\n}\n\nconsole.log(result);"
    },
    {
        "instruction": "Using the given array of numbers, write a JavaScript code to print the sum of all the numbers. numbers = [5, 10, 15, 20, 25]",
        "response": "let result = 0;\n\nfor (let number of numbers){\n result += number;\n}\n\nconsole.log(result);"
    },
    {
        "instruction": "Create a JavaScript object with two keys, \"firstName\" and \"lastName\". The values should be two strings, your first and last name. ",
        "response": "let user = {\n  firstName: 'Jane',\n  lastName: 'Doe'\n};"
    },
    {
        "instruction": "Write a JavaScript to read the following JSON object and print its \"name\" key value data = {\n  \"name\": \"John\",\n  \"age\": \"33\",\n  \"city\": \"New York\"\n}",
        "response": "console.log(data.name);"
    },
    {
        "instruction": "Using the given code, create a JavaScript to add an item to the data array. let data = [\n  {name:\"John\", age:20},\n  {name:\"Amy\", age:21}\n]",
        "response": "data.push({name: 'Bob', age: 25});"
    },
    {
        "instruction": "In JavaScript, write a function which can split a string into its constituent words. ",
        "response": "function split_string_to_words(string) {\n    return string.split(' ');\n}"
    },
    {
        "instruction": "Create a script in Python which can generate random numbers in a given range. ",
        "response": "import random\n\ndef generate_random_number_in_range(min_value, max_value):\n    return random.randint(min_value, max_value)"
    },
    {
        "instruction": "What is the syntax to create a list of numbers from 0 to n in Python? ",
        "response": "def create_list(n):\n    return [i for i in range(n+1)]"
    },
    {
        "instruction": "How can we trim a specified amount of characters from the beginning of a string in Python? ",
        "response": "def trim_string(string, n):\n    return string[n:]"
    },
    {
        "instruction": "Explain with a code snippet how to execute an AJAX request in JavaScript. ",
        "response": "const xhr = new XMLHttpRequest();\n\nxhr.open('GET', 'https://example.com/api');\nxhr.send();\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n        // Response is ready and request was successful \n        console.log(xhr.responseText);\n    }\n}"
    },
    {
        "instruction": "What is the Python built-in function to swap two values? ",
        "response": "The Python built-in function to swap two values is the \"tuple unpacking\" operator (x, y = y, x). This allows you to swap two variables without having to use a temporary variable."
    },
    {
        "instruction": "How to generate a random string of a given length in Python? Length: 10",
        "response": "import random\nimport string\n\nlength = 10\n\nx = ''.join(random.choices(string.ascii_letters + string.digits, k=length))\nprint(x) # 'sbMTWHmfrh'"
    },
    {
        "instruction": "Create a Python function that takes one argument as an array of integers and returns the sum of all the integers. [2, 3, 4, 5]",
        "response": "def sum_array(array):\n    res = 0\n    for i in array:\n        res += i\n    return res"
    },
    {
        "instruction": "Create an algorithm in Python that sorts an array of n numbers using insertion sort. [5, 3, 2, 4, 1]",
        "response": "def insert_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key"
    },
    {
        "instruction": "Create an algorithm in JavaScript to merge two sorted arrays into one. arr1 = [1, 3, 5, 7]\narr2 = [2, 4, 6, 8]",
        "response": "function mergeArrays(arr1, arr2) {\n    let result = [];\n    let index1 = 0;\n    let index2 = 0;\n\n    while (index1 < arr1.length && index2 < arr2.length) {\n        if (arr1[index1] < arr2[index2]) {\n            result.push(arr1[index1]);\n            index1++;\n        } else {\n            result.push(arr2[index2]);\n            index2++;\n        }\n    }\n\n    while (index1 < arr1.length) {\n        result.push(arr1[index1]);\n        index1++;\n    }\n\n    while (index2 < arr2.length) {\n        result.push(arr2[index2]);\n        index2++;\n    }\n\n    return result;\n}"
    },
    {
        "instruction": "Compute the median of an array of integers in Python. [1, 2, 3, 4, 5]",
        "response": "def median(arr): \n    arr.sort() \n    if (len(arr) % 2 != 0): \n        return arr[len(arr) // 2] \n    else: \n        return (arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 2.0"
    },
    {
        "instruction": "Generate a list of words that contain the substring \"al\" using Python. ",
        "response": "words = [\"arrival\", \"essential\", \"animal\", \"pascal\", \"medieval\", \"festival\", \"final\", \"spirited\", \"downfall\", \"functional\", \"locational\", \"fundamental\"]"
    },
    {
        "instruction": "Write a function in JavaScript for computing the average value of a given array. ",
        "response": "function calculateAverage(arr) {\n    let sum = 0;\n    arr.forEach(element => {\n        sum += element;\n    });\n    return sum / arr.length;\n}"
    },
    {
        "instruction": "Implement an efficient sorting algorithm in Python. ",
        "response": "def sort(arr): \n    if len(arr) == 0: \n        return [] \n    else: \n        pivot = arr[0] \n        lesser = sort([x for x in arr[1:] if x < pivot])\n        greater = sort([x for x in arr[1:] if x >= pivot])\n        return lesser + [pivot] + greater"
    },
    {
        "instruction": "Explain the differences between the list, set, and dictionary data structures in Python. ",
        "response": "List is an ordered sequence of data that can hold duplicate values. It is one of the most widely used data structures in Python, and is created by placing all the items in a square bracket and separating them by commas. Set is an unordered collection of data that cannot hold duplicate values. Set is created by enclosing all the items in a set() function. Dictionary is an unordered collection of key:value pairs. It is similar to real-life dictionaries in that it stores key-value pairs and retrieves values based on the associated key. It is created with curly brackets and key:value pairs, separated by commas."
    },
    {
        "instruction": "Write a Python program to generate a dictionary that contains a number (x) of random numbers. x = 10",
        "response": "import random\n\nrandom_numbers = {} \n  \nfor i in range(x + 1): \n    n = random.randint(1, 50) \n      \n    random_numbers[i+1] = n\n      \nprint(random_numbers)"
    },
    {
        "instruction": "Reverse the order of words in a given sentence. sentence = \"This is Python Language\"",
        "response": "words = sentence.split(\" \") \n   \nreverse_sentence = ' '.join(reversed(words)) \n   \nprint(reverse_sentence)"
    },
    {
        "instruction": "Using the provided data structure, create a class in Python to represent a car. car = { \n    \"make\": \"Honda\", \n    \"model\": \"Civic\", \n    \"year\": 2011\n}",
        "response": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    \n    def __str__(self):\n        return f\"{self.make} {self.model} ({self.year})\""
    },
    {
        "instruction": "Using the provided objects and classes, write a code snippet in Python to implement polymorphism. class Animal:\n  def sound(self):\n    pass\n\nclass Cat(Animal):\n  def sound(self):\n    print(\"Meow\")\n\nclass Dog(Animal):\n  def sound(self):\n    print(\"Bark\")",
        "response": "def make_sound(animal):\n  animal.sound()\n  \nmake_sound(Cat())  #Prints \"Meow\"\nmake_sound(Dog())  #Prints \"Bark\""
    },
    {
        "instruction": "Create a JavaScript function that takes an array of objects and returns an array of objects with unique values by a specified key. var input = [\n { id: 1, name: 'John' }, \n { id: 2, name: 'John' },\n { id: 3, name: 'Alice'},\n]",
        "response": "function getUniqueValuesByKey(arr, key) {\n const set = new Set();\n return arr.filter((el) => {\n const valueToCheck = el[key];\n const isUnique = !set.has(valueToCheck);\n if (isUnique) set.add(valueToCheck);\n return isUnique;\n });\n}"
    },
    {
        "instruction": "Create a Python class for a student that holds their name, age and grade. ",
        "response": "class Student:\n def __init__(self, name, age, grade):\n  self.name = name\n  self.age = age\n  self.grade = grade\n\ndef get_student_info(self):\n  return (f\"{self.name}, {self.age}, {self.grade}\")"
    },
    {
        "instruction": "Write a python code to concatenate two strings and reverse the result. string1 = \"Hello\"\nstring2 = \"World\"",
        "response": "res = string1+string2\nres = res[::-1] \nprint(res)"
    },
    {
        "instruction": "Write a JavaScript code to detect whether a webpage contains a specific text or not. Page content: \"This is the awesome page.\"\nText to be searched: \"awesome\"",
        "response": "if(document.body.innerHTML.indexOf('awesome') > -1){\n    console.log('Text found!');\n} else {\n    console.log('Text not found!');\n}"
    },
    {
        "instruction": "Define a class in Python that takes a string and returns the length of the string. ",
        "response": "class StringLength:\n  def __init__(self, string):\n    self.string = string\n\n  def getLength(self):\n    return len(self.string)"
    },
    {
        "instruction": "Write a basic python program to accept a string input, use it to create a dictionary and sort it by alphabetical order ToBeOrNotToBe",
        "response": "inp =raw_input(\"Enter String:\")\nmy_dict = {}\nfor character in inp:\n     if character not in my_dict:\n         my_dict[character] = 1\n     else:\n         my_dict[character] += 1\n\nsorted_order = sorted(my_dict.items(), key=lambda x: x[0])\n\nprint(\"Sorted Dictionary\")\nfor character in sorted_order:\n    print(\"{} : {}\".format(character[0], character[1]))"
    },
    {
        "instruction": "Create a basic JavaScript program to accept user input and print out the result ",
        "response": "let userInput = prompt('Please enter some input.');\nalert(`The input entered was ${userInput}`);"
    },
    {
        "instruction": "Remove all duplicates from this list using Python list=[5,5,5,7,8,8,9]",
        "response": "list=[5,7,8,9]\n\nlist = list(dict.fromkeys(list))"
    },
    {
        "instruction": "Print the following statements in a sorted order I am learning Python\nI am learning Java",
        "response": "I am learning Java\nI am learning Python"
    },
    {
        "instruction": "Write a Python program to generate a 3x3 Identity matrix ",
        "response": "def generate_identity_matrix():\n    matrix = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i == j:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    \n    return matrix"
    },
    {
        "instruction": "Create a function in Python that takes in a string and returns a list of all unique characters in it. string = \"banana\"",
        "response": "def unique_chars(string): \n    char_list = [] \n    for char in string: \n        if(char not in char_list): \n            char_list.append(char) \n    return char_list"
    },
    {
        "instruction": "Create a JavaScript class that takes in two strings and returns the longer string. string1 = \"Hello\"\nstring2 = \"World\"",
        "response": "class LongerString {\n    constructor(str1, str2) {\n        this.string1 = str1;\n        this.string2 = str2;\n    }\n    \n    getLongerString() {\n        return (this.string1.length > this.string2.length) ? this.string1 : this.string2;\n    }\n}"
    },
    {
        "instruction": "Modify the program to take input from the user and create a two-dimensional array in Python. ",
        "response": "rows, cols = (int(x) for x in input(\"Enter size of 2D array: \").split())\narr = [[None for x in range(cols)] for y in range(rows)]\nfor i in range(rows):\n    for j in range(cols):\n        arr[i][j] = int(input(\"Enter element: \"))"
    },
    {
        "instruction": "Explain how to use functions in Python to perform operations on dictionaries. ",
        "response": "Python dictionaries are mappings between keys and values, allowing for efficient retrieval of values using its associated key. Various functions can be used to manipulate the data in the dictionaries, such as the get() function to retrieve the value for a given key, the clear() function to delete all values, the keys() and values() functions to retrieve all keys and values respectively, and the items() function to retrieve a list of key-value pairs."
    },
    {
        "instruction": "Describe the difference between the 'break' and 'continue' keywords in Python. ",
        "response": "The 'break' keyword is used to end a loop and exit the loop, whereas the 'continue' keyword is used to skip the current iteration and continue with the next iteration."
    },
    {
        "instruction": "Write a JavaScript function to filter out all falsy values from an array. [NaN, 0, false, \"\", undefined]",
        "response": "function filterFalsy(arr) {\n  return arr.filter(el => Boolean(el));\n}"
    },
    {
        "instruction": "Write a JavaScript program to convert an array of objects into a comma-separated values (CSV) string with column headers. [\n {name: 'John', age: 28, city: 'New York'}, \n {name: 'Mary', age: 34, city: 'London'}, \n {name: 'Bob', age: 23, city: 'Los Angeles'}\n]",
        "response": "function arrayToCSV(data) {\n  let csv = '';\n  const headers = Object.keys(data[0]);\n  csv += headers.join(',') + '\\n';\n  data.forEach((item) => {\n    let row = '';\n    Object.values(item).forEach((value) => {\n      row += `\"${value}\",`;\n    });\n    row = row.slice(0, -1);\n    csv += `${row}\\n`;\n  });\n  return csv;\n}"
    },
    {
        "instruction": "Suggest a way to extract all the words from an HTML page using Python. ",
        "response": "Using the BeautifulSoup library, you can parse the HTML page and extract all the words using the \"get_text()\" method."
    },
    {
        "instruction": "Generate a correct Python code to turn a list of strings into a list of their lengths. mylist = [\"hello\", \"world\", \"fire\", \"feline\"]",
        "response": "length_list = [len(x) for x in mylist]\n\n#Output:\nlength_list = [5, 5, 4, 6]"
    },
    {
        "instruction": "Create a for loop in JavaScript to iterate over the following array. [\"apple\", \"banana\", \"mango\", \"pear\"];",
        "response": "for(let i=0; i<arr.length; i++){\n    let item = arr[i];\n    console.log(item);\n}"
    },
    {
        "instruction": "Create an object in JavaScript named 'user' with the following attributes: name, age, and gender. ",
        "response": "let user = {\n    name: \"\",\n    age: 0,\n    gender: \"\"\n};"
    },
    {
        "instruction": "Create a method in Python to generate all the prime numbers between 1 and 100. ",
        "response": "def prime_generator(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\nprint(prime_generator(100))"
    },
    {
        "instruction": "Rewrite this code in JavaScript. def find_max(nums):\n    maximum = 0\n\n    for num in nums:\n        if num > maximum:\n            maximum = num\n\n    return maximum",
        "response": "function find_max(nums) {\n    let maximum = 0;\n\n    for (let num of nums) {\n        if (num > maximum) {\n            maximum = num;\n        }\n    }\n\n    return maximum;\n}"
    },
    {
        "instruction": "Write a Python script to display the number of days between two given dates. Date 1: 21 May 2020\nDate 2: 13 June 2020",
        "response": "import datetime \nstart_date = datetime.date(2020, 5, 21)\nend_date = datetime.date(2020, 6, 13)\ndelta = end_date - start_date\nprint(\"Number of days between two dates:\", delta.days)"
    },
    {
        "instruction": "Write a JavaScript program to compare two given strings, and count the number of common characters between them. str1 = “Apple”, str2 = “Banana”",
        "response": "function countCommon(str1, str2) {\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str2.includes(str1[i])) {\n            count++;\n        }\n    }\n    return count;\n}"
    },
    {
        "instruction": "Generate a Python program to extract the digits of a given number and print the extracted digits in descending order. num = 318",
        "response": "def extractDigits(num):\n    extracted_list = []\n    while num > 0:\n        extracted_list.append(num%10)\n        num //= 10\n    extracted_list.sort(reverse=True)\n    return extracted_list"
    },
    {
        "instruction": "Implement a sorting algorithm in Python for the given data. Data: [4, 2, 3, 8, 1]",
        "response": "def sort_data(data):\n    for i in range(len(data)):\n        min_index = i\n        for j in range(i+1, len(data)):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]\n       \n    return data"
    },
    {
        "instruction": "Given the following Python code, generate a function that will print the first 5 elements of a list. my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def print_first_five(my_list):\n    \"\"\"This function prints the first five elements of a list.\"\"\"\n    print(my_list[:5])"
    },
    {
        "instruction": "Create a Python class to represent a 3 x 3 matrix with variable values. ",
        "response": "class Matrix:\n    def __init__(self, a00=0, a01=0, a02=0, a10=0, a11=0, a12=0, a20=0, a21=0, a22=0):\n        self.matrix = [[a00, a01, a02],\n                        [a10, a11, a12],\n                        [a20, a21, a22]]\n    \n    def __str__(self):\n        return str(self.matrix)"
    },
    {
        "instruction": "Design a Python class to represent a rectangle with a length and width attribute. ",
        "response": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length*self.width"
    },
    {
        "instruction": "Create a JavaScript function to take a string of numbers and convert it to an array of integers. const inputString = '1 2 3 4 5'",
        "response": "function stringToArray(str) {\n    return str.split(' ').map(item => parseInt(item)); \n}\n\nstringToArray(inputString);"
    },
    {
        "instruction": "Generate a two-dimensional array of random integers in JavaScript. ",
        "response": "function generateRandomArray(rows, cols) {\n    let array = []; \n    for (let i=0; i < rows; i++) {\n        array.push(Array.from({length: cols}, () => Math.floor(Math.random() * 10)));\n    }\n    return array; \n}"
    },
    {
        "instruction": "Create a Python class to represent an employee record with fields name and salary. ",
        "response": "class Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary"
    },
    {
        "instruction": "Design a Python class to represent a 3 x 3 chess board. ",
        "response": "class ChessBoard:\n    def __init__(self):\n        self.board = [\n            [\"a1\",\"b1\",\"c1\"],\n            [\"a2\",\"b2\",\"c2\"],\n            [\"a3\",\"b3\",\"c3\"]\n        ]\n\n    def __str__(self):\n        board_string = \"\"\n        for row in self.board:\n            for col in row:\n                board_string += col + \" \"\n            board_string += \"\\n\"\n        return board_string"
    },
    {
        "instruction": "Create a JavaScript function to log a friendly message when the page is loaded. ",
        "response": "window.onload = function () {\n    console.log('Welcome to my website!');\n}"
    },
    {
        "instruction": "Design a Python class to represent a user with fields name and age. ",
        "response": "class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age"
    },
    {
        "instruction": "Build a neural network using Python import numpy as np\n\n# Sample data\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([[0, 1, 1, 0]]).T",
        "response": "import keras\n\n# Create a neural network\nmodel = keras.Sequential([\n    keras.layers.Dense(2, activation='sigmoid'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Train the model\nmodel.fit(X, y, epochs=1000)"
    },
    {
        "instruction": "Develop a function in Python to convert a temperature in Celsius to Fahrenheit. Temperature in Celsius: 30",
        "response": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 1.8) + 32\n\nprint(celsius_to_fahrenheit(30))"
    },
    {
        "instruction": "Create a program in Python to generate a random number in the range from 0 to 10. ",
        "response": "import random \n\nprint(random.randint(0, 10))"
    },
    {
        "instruction": "Develop a function in JavaScript to get the maximum and minimum values from an array. Array elements: 10, 5, 8, 12, 9",
        "response": "function getMaxMin(arr) {\n    let max = -Infinity;\n    let min = Infinity;\n \n    arr.forEach(function (item) {\n        if (item > max) {\n            max = item;\n        }\n        if (item < min) {\n            min = item;\n        }\n    });\n    return {\n        \"max\": max,\n        \"min\": min\n    };\n} \n \nlet arr = [10, 5, 8, 12, 9];\nlet result = getMaxMin(arr);\n \nconsole.log(result);"
    },
    {
        "instruction": "Create a function in Python that will print out a random word from a given list. words_list = ['cat', 'dog', 'ball', 'toy']",
        "response": "import random\n\ndef random_word(words_list):\n    word = random.choice(words_list)\n    print(word)\n\nrandom_word(words_list)"
    },
    {
        "instruction": "Construct a list in Python that contains the names of the months in order, starting with January. ",
        "response": "months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]"
    },
    {
        "instruction": "Write a JavaScript code for setting a different background color for every odd table row. <table>\n<tr>\n  <td>row1 cell1</td>\n  <td>row1 cell2</td>\n</tr>\n<tr>\n  <td>row2 cell1</td>\n  <td>row2 cell2</td>\n</tr>\n<tr>\n  <td>row3 cell1</td>\n  <td>row3 cell2</td>\n</tr>\n</table>",
        "response": "function setBackgroundColor(){\n    var table = document.getElementsByTagName(\"table\")[0]; \n    for (var i = 0, row; row = table.rows[i]; i++) {\n       (i%2 == 0) ? (row.style.backgroundColor = \"#F2F2F2\") : (row.style.backgroundColor = \"#FFFFFF\");\n    }\n}\nsetBackgroundColor();"
    },
    {
        "instruction": "Create a JavaScript expression that will iterate over an array of numbers and print out the square root of each number. num_array = [1, 4, 9, 16]",
        "response": "num_array.forEach(num => {\n    console.log(Math.sqrt(num));\n});"
    },
    {
        "instruction": "Using a JavaScript array of strings, write code to remove all strings that start with \"a\". arr = [\"apple\", \"banana\", \"apricot\", \"guava\"]",
        "response": "let newArr = arr.filter(word => !word.startsWith('a'));\nconsole.log(newArr); // Output: [\"banana\", \"guava\"]"
    },
    {
        "instruction": "Write a JavaScript program to check whether two or more arrays have the same elements. array1 = [1, 2, 3, 4];\narray2 = [3, 4, 5, 6];",
        "response": "function sameElementCheck(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    let flag = true;\n    arr1.forEach((elem) => {\n        if (!arr2.includes(elem)) {\n            flag = false;\n        }\n    })\n\n    return flag;\n}"
    },
    {
        "instruction": "Create a function in Python to generate all possible strings of length k from given lowercase characters. set = {'a', 'b', 'c'}\nk = 3",
        "response": "def generate_strings(set, k): \n\tstrings = [] \n\tn = len(set) \n\t\n\tdef generate_strings_recur(sub, count): \n\t\t\n\t\t# Base cases \n\t\tif count == 0 : \n\t\t\tstrings.append(sub) \n\t\t\treturn\n\t\t\n\t\tfor i in range(n): \n\t\t\t\n\t\t\t# Next character of string to be \n\t\t\t# formed \n\t\t\tnew_sub = sub + set[i] \n\t\t\t\n\t\t\t# Recursion call \n\t\t\tgenerate_strings_recur(new_sub, \n\t\t\t\t\t\t\t\tcount-1) \n\t\n\tcount = k \n\tsub = \"\" \n\t\n\t# Call to generate all strings of length k \n\tgenerate_strings_recur(sub, count) \n\t\n\treturn strings"
    },
    {
        "instruction": "You need to write an API request in Python to return JSON data from an API endpoint. ",
        "response": "import requests\n\nAPI_ENDPOINT = 'api.example.com/data'\n\nresponse = requests.get(API_ENDPOINT)\n\nif response.status_code == 200:\n    data = response.json()"
    },
    {
        "instruction": "Create a Python script that shows the frequency of words in a given text. text = \"Hello, this is a sentence.\"",
        "response": "def calc_word_freq(text):\n    '''This function calculates word frequency in a given text'''\n    word_freq = {}\n    for word in text.split():\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    for word,freq in word_freq.items():\n        print(f'{word} - {freq}')"
    },
    {
        "instruction": "Create a Python program that compares two given lists to check if they have any common element. list1 = [1,2,3]\nlist2 = [4,5,6]",
        "response": "def compare_lists(list1, list2):\n    '''This function checks if two lists have any common element'''\n    found_common = False\n    \n    for x in list1:\n        if x in list2:\n            found_common = True\n            break\n    return found_common"
    },
    {
        "instruction": "Create a Python class that encodes a given number using the Base58 algorithm. number = 123456789",
        "response": "class Base58Encoder:\n    '''This class encodes numbers using the Base58 algorithm'''\n    def __init__(self,number):\n        self.number = number\n\n    def encode(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n        return encoded"
    },
    {
        "instruction": "Write a Python script that reads in a string and checks if it is a palindrome. \"Radar\"",
        "response": "The given string is a palindrome."
    },
    {
        "instruction": "Write a JavaScript code snippet to remove all children that are of the class 'myclass' in a div with id 'myDiv'. ",
        "response": "document.getElementById(\"myDiv\").querySelectorAll(\".myclass\").forEach(el => el.remove());"
    },
    {
        "instruction": "Create a JavaScript object that stores the properties name, age and favorite color. ",
        "response": "let person = {\n  name: \"John Smith\",\n  age: 30,\n  favoriteColor: \"blue\"\n};"
    },
    {
        "instruction": "Create a Python program that prints out a given list of numbers in reverse order. [1, 2, 3, 4, 5]",
        "response": "for i in range(len(list) - 1, -1, -1):\n    print(list[i])"
    },
    {
        "instruction": "Using the given JSON data, create a JavaScript object and output its first element. {\"people\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 25}]}",
        "response": "let jsonData = {\n  \"people\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 25}]\n};\nlet firstElement = jsonData.people[0];\nconsole.log(firstElement);"
    },
    {
        "instruction": "Create a function in JavaScript to show a message. ",
        "response": "function showMessage() {\n  console.log('This is a message');\n}"
    },
    {
        "instruction": "Write a code snippet to get the first element of an array in JavaScript. let myArray = [1,2,3];",
        "response": "let firstElement = myArray[0];"
    },
    {
        "instruction": "Create a class in Python called 'Rectangle' to store the coordinates of a rectangle. ",
        "response": "class Rectangle: \n    def __init__(self, x1, y1, x2, y2): \n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n  \n    def get_coordinates(self): \n        return (self.x1, self.y1, self.x2, self.y2)"
    },
    {
        "instruction": "Create an algorithm in JavaScript that calculates the average of a series of numbers. Series of numbers: [2, 3, 7, 8]",
        "response": "function calculateAverage(arr) {\n    let sum = 0;\n    arr.forEach(num => sum += num);\n    return sum/arr.length;\n}\n\nconsole.log(calculateAverage([2, 3, 7, 8]))"
    },
    {
        "instruction": "Retrieve the public IP address of your machine using Python. ",
        "response": "import requests\n\ndef get_public_ip():\n response = requests.get('https://api.ipify.org')\n return response.text"
    },
    {
        "instruction": "Given a sorted list of integers, write a Python function to search for a specific target element. ",
        "response": "def binary_search(list, target):\n low = 0\n high = len(list) - 1\n\n while low <= high:\n  mid = (low + high) // 2\n  if list[mid] < target:\n   low = mid + 1\n  elif list[mid] > target:\n   high = mid - 1\n  else:\n   return mid\n return False"
    },
    {
        "instruction": "Create a Python class called Dog that contains the following attributes: breed, name, and age. ",
        "response": "class Dog:\n    def __init__(self, breed, name, age):\n        self.breed = breed\n        self.name = name\n        self.age = age"
    },
    {
        "instruction": "Identify the largest element of an array with python. [9, 4, 2, 8, 7]",
        "response": "def find_largest_num(a): \n  if len(a) == 0: \n    return\n  max = a[0] \n  for num in a: \n    if num > max: \n      max = num \n  return max"
    },
    {
        "instruction": "Generate a python script that concatenates two strings. String 1: \"foo\" \nString 2: \"bar\"",
        "response": "str1 = \"foo\" \nstr2 = \"bar\"\nconcatenated_str = str1 + str2\nprint(concatenated_str)"
    },
    {
        "instruction": "Write a JavaScript statement to check if a given number is greater than 5. ",
        "response": "// given number\nlet number = 5;\n\nif (number > 5) {\n    console.log('Number is greater than 5');\n}"
    },
    {
        "instruction": "Convert a given JSON string to a JavaScript object. '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'",
        "response": "# Convert given JSON string to JavaScript object\nlet obj = JSON.parse('{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}');\n\nconsole.log(obj);\n// Output: {name: \"John\", age: 30, city: \"New York\"}"
    },
    {
        "instruction": "Write a JavaScript statement to determine whether a given string is empty or not. ",
        "response": "// given string\nlet str = \"\";\n\nif (str == \"\") {\n    console.log('String is empty');\n}"
    },
    {
        "instruction": "Write a Python function to normalize a given list of numbers so that they sum up to 1. arr = [2, 4, 6, 8]",
        "response": "def normalize(arr):\n    # calculate the sum of the given numbers\n    total = sum(arr)\n\n    # normalize each number in the array\n    normalized_arr = [number / total for number in arr]\n    \n    return normalized_arr\n\n# print the normalized array\nprint(normalize(arr)) # prints [0.1, 0.2, 0.3, 0.4]"
    },
    {
        "instruction": "Create a class in Python to represent a book with the title, author and year of publication as attributes. ",
        "response": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year"
    },
    {
        "instruction": "Create a class in JavaScript to represent a person with properties like name, age, and gender. ",
        "response": "class Person {\n    constructor(name, age, gender) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n    }\n}"
    },
    {
        "instruction": "Create a JavaScript loop that counts from 1 to 10. ",
        "response": "for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}"
    },
    {
        "instruction": "Write a JavaScript program to create a class 'Shape' and create an object 'circle' of this class. ",
        "response": "class Shape {\n    constructor() {\n        this.type = \"Shape\";\n    }\n}\n\nlet circle = new Shape();\ncircle.type = \"Circle\";\nconsole.log(circle.type);"
    },
    {
        "instruction": "Create a Python function that will take two lists as inputs, and return a list that contains all the common items between the lists. list1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]",
        "response": "def common_elements(list1, list2):\n    return [item for item in list1 if item in list2] \n\nlist1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]\n\ncommon_items_list = common_elements(list1, list2)\nprint(common_items_list)"
    },
    {
        "instruction": "Create a Python code snippet to create a line chart with three different categories. category1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]",
        "response": "import matplotlib.pyplot as plt\n\n# Data to plot\ncategory1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]\n\n# Create the line plot\nplt.plot(category1, label='Category 1')\nplt.plot(category2, label='Category 2')\nplt.plot(category3, label='Category 3')\n\n# change font type and size\nplt.rc('font', size=16)\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()"
    },
    {
        "instruction": "Write a JavaScript code snippet that returns a random element from a given array. array = [1,2,3,4,5,6]",
        "response": "function getRandomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n\narray = [1,2,3,4,5,6];\n\nconsole.log(getRandomElement(array));"
    },
    {
        "instruction": "Create a JavaScript program to provide real-time search results for a given list of elements. list = [“Apple”, “Banana”, “Orange”]",
        "response": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<title>Real-time Search Results</title>\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n\t<script>\n\t\tfunction search() {\n\t\t  var input = document.getElementById('search_box').value;\n\t\t  var list = [\"Apple\",\"Banana\",\"Orange\"];\n\t\t  var output = \"\";\n\t\t  \n\t\t  for (i=0; i<list.length; i++) {\n\t\t    if (list[i].includes(input)) {\n\t\t      output+=\"<li>\" +  list[i] + \"</li>\";\n\t\t    }\n\t\t  }\n\t\t  if (output == \"\") {\n\t\t    document.getElementById(\"search_results\").innerHTML = \"No results found\";\n\t\t  } else {\n\t\t    document.getElementById(\"search_results\").innerHTML = output;\n\t\t  }\n\t\t}\n\t</script>\n</head>\n<body>\n\t<input type=\"text\" id=\"search_box\" onkeyup=\"search()\" />\n\t<ul id=\"search_results\" > </ul>\n</body>\n</html>"
    },
    {
        "instruction": "Create a Python program to sort a dictionary by value. my_dict = {“One”:1, “Two”:2, “Three”:3}",
        "response": "my_dict = {'One': 1, 'Two': 2, 'Three': 3}\n\n#sort dictionary by value\nsorted_dict = sorted(my_dict.items(), key=lambda kv: kv[1])\n\nprint(sorted_dict)"
    },
    {
        "instruction": "List 5 elements of the Python standard library. ",
        "response": "sys, os, logging, string, collections"
    },
    {
        "instruction": "Write a Python code snippet to iterate over a list of strings and print the length of each string. List: [\"Hello\", \"World\", \"!\"]",
        "response": "for string in list:\n    print(len(string))\n    \n# Output: 5, 5, 1"
    },
    {
        "instruction": "Create a variable in Python and assign it the value 15. ",
        "response": "num = 15"
    },
    {
        "instruction": "How can we convert strings to float in Python? ",
        "response": "We can convert strings to float in Python by using the float() function. This takes a string argument and returns a floating-point number. For example, float(\"10.5\") would return 10.5 as a float."
    },
    {
        "instruction": "What is the most efficient way to find the index of a given element in an unsorted array using JavaScript? ",
        "response": "The most efficient way to find the index of a given element in an unsorted array using JavaScript is by using the indexOf() method. This method returns the index of the first occurrence of a given element in the array, or -1 if it is not present."
    },
    {
        "instruction": "How can we debug our JavaScript code? ",
        "response": "We can debug our JavaScript code by using the console.log() method to log values and events to the console. We can also use the JavaScript debugger statement to pause the execution at a particular point in the code, and step through the code line by line. We can also add breakpoints and inspect variables at different stages of the program."
    },
    {
        "instruction": "Update this JavaScript code to use the new ES6 syntax. var myArray = [3, 4, 5];\nfor (var i = 0; i < myArray.length; i++) {\n  console.log(myArray[i]);\n}",
        "response": "const myArray = [3, 4, 5];\nfor (let i = 0; i < myArray.length; i++) {\n  console.log(myArray[i]);\n}"
    },
    {
        "instruction": "Write a JavaScript program to accept a string and check if it is a palindrome or not. ",
        "response": "function isPalindrome(str) { \n    var len = str.length; \n    for ( var i = 0; i < Math.floor(len/2); i++ ) { \n        if (str[i] !== str[len - 1 - i]) { \n            return false; \n        } \n    } \n\n    return true; \n}"
    },
    {
        "instruction": "Update this JavaScript code to use modern coding practices. var x = 10;\nif(x == 10){\n  alert(\"x is equal to 10\");\n}",
        "response": "const x = 10;\nif (x === 10) {\n  console.log(\"x is equal to 10\");\n}"
    },
    {
        "instruction": "Write a for loop to output all the odd numbers from 1 to 10 in Python. ",
        "response": "for i in range(1,11):\n   if (i % 2 != 0):\n       print(i)"
    },
    {
        "instruction": "Given an integer array, output the largest sum of all the possible subarray sums, use Python for the solution. Example array: [-2,1,-3,4,-1,2,1,-5,4]",
        "response": "def largest_sum(arr):\n    cur_sum = 0\n    max_sum = float(\"-inf\")\n    for i in range(len(arr)):\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum"
    },
    {
        "instruction": "Write a Python function to compare two strings and return all the common elements. s1='python'\ns2='programming'",
        "response": "def find_common_elements(s1, s2):\n res = []\n for i in s1:\n if i in s2:\n res.append(i)\n return res\n\nfind_common_elements(s1,s2)\n#Output: ['n']"
    },
    {
        "instruction": "Create a Python function to generate the first n prime numers. ",
        "response": "def generate_prime_numbers(n):\n prime_nums = []\n i = 2\n while len(prime_nums) < n:\n if is_prime(i):\n prime_nums.append(i)\n i += 1\n return prime_nums\n\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True"
    },
    {
        "instruction": "Create a Python script to separate a given string into words and count the number of times the each word is used in the string. ",
        "response": "def count_words(string):\n counts = {}\n words = string.split()\n for word in words:\n if word in counts:\n counts[word] += 1\n else:\n counts[word] = 1\n return counts"
    },
    {
        "instruction": "Create a Python code to reverse the given string. ",
        "response": "def reverse_string(string):\n return string[::-1]"
    },
    {
        "instruction": "Write a function in Python to select all the elements from a list whose index is a multiple of 3. test_list = [2, 5, 8, 12, 9, 82, 3]",
        "response": "def select_multiples_of_3(input_list):\n    result = []\n    for index, num in enumerate(input_list):\n        if index % 3 == 0:\n            result.append(num)\n    return result\n\n# test\ntest_list = [2, 5, 8, 12, 9, 82, 3]\nprint(select_multiples_of_3(test_list)) # [2, 12, 3]"
    },
    {
        "instruction": "Write a Python script to validate the following input Validate a Date type field with the following format: YYYY/MM/DD",
        "response": "# Import the required datetime module\nimport datetime\n\ndef validate_date(date):\n    # Check if the date matches with the given format\n    try:\n       datetime.datetime.strptime(date, '%Y/%m/%d')\n       return True\n    except ValueError:\n        return False"
    },
    {
        "instruction": "Transform the following code snippet from ES6 to older version of JavaScript let numbers = [1, 2, 3, 4, 5];\nlet multipliedNumbers = numbers.map(number => number * 2);",
        "response": "var numbers = [1, 2, 3, 4, 5];\nvar multipliedNumbers = numbers.map(function(number) { \n    return number * 2;\n});"
    },
    {
        "instruction": "Modify the following Python code to make it run faster def roll_dice(n):\n    values = []\n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values",
        "response": "import random\n    \ndef roll_dice(n):\n    values = []\n    random.seed() \n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values"
    },
    {
        "instruction": "Demonstrate how to use the following JavaScript function Math.max(arg1, arg2)",
        "response": "// To get the maximum number from the two input numbers \nlet x = 15;\nlet y = 25;\nlet maxNum = Math.max(x, y);\nconsole.log(maxNum); // Output: 25"
    },
    {
        "instruction": "Where does a Python interpreter look for modules? ",
        "response": "The Python interpreter looks for modules in the following locations: the home directory, the built-in modules, the PYTHONPATH environment variable, and the standard Python library path."
    },
    {
        "instruction": "Explain the purpose of the new operator in JavaScript. ",
        "response": "The new operator in JavaScript is used to create an instance of an object. It allocates memory for the object and calls the object's constructor to initialize the object. It also sets the object's [[Prototype]] property to the constructor function's prototype object."
    },
    {
        "instruction": "Explain the uses of the `in` operator in Python. ",
        "response": "The in operator in Python is used to determine whether an item is present in a sequence. It checks for the presence of an item in lists, sets, tuples, dictionaries, and strings. It is also used to iterate over the items of a sequence in a for loop."
    },
    {
        "instruction": "Compare functions and classes in Python. ",
        "response": "Functions in Python are blocks of reusable code that are used to perform a single, specific action. Classes, on the other hand, are a way of grouping related data and functions together. Classes allow objects to be grouped and given common properties and behaviors."
    },
    {
        "instruction": "Create a function in JavaScript that takes two temperatures and returns their average. ",
        "response": "function average_temperature(temp1, temp2) {\n  return (temp1 + temp2) / 2;\n}"
    },
    {
        "instruction": "Write a Python function to input a number and print if it is positive, negative, or zero ",
        "response": "def check_sign(num):\n  if num > 0:\n    print(\"Positive\")\n  elif num < 0:\n    print(\"Negative\")\n  else:\n    print(\"Zero\")"
    },
    {
        "instruction": "What are the characteristics of a Function in JavaScript? ",
        "response": "A function in JavaScript is a block of code that is delimited by curly brackets and is designed to perform a specific task. It consists of a function declaration, which includes the function name and its parameters, and a function body containing the code that is to be executed when the function is called. The function can return a value and can be either named or anonymous. Functions can also accept arguments and can be used to create objects and closures."
    },
    {
        "instruction": "Write a JavaScript command to check if an object is empty. ",
        "response": "function isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n}"
    },
    {
        "instruction": "What is the use of tuple in python? ",
        "response": "Tuple is an immutable collection of objects in Python. It is sequence of values which are immutable, meaning that the values can't be modified. Tuple is useful in data integrity because it ensures that the values in the tuple will remain consistent when passed to a function or used in an expression. It is also used to store related data that must not be changed throughout a program. Some common operations on tuple include indexing, iteration, membership testing. Tuples are also useful in multiple function argument packing and unpacking. Tuples are also commonly used in dictionary as keys."
    },
    {
        "instruction": "How can you create a class in python? ",
        "response": "A class can be created in Python by using the keyword class followed by the name of the class. The class should include a constructor method __init__() that specifies the attributes and behaviors of the class and it should also end with a colon. Inside the class body, methods and attributes can be defined as required."
    },
    {
        "instruction": "Create a function in JavaScript to replace the spaces in a given string with underscores. ",
        "response": "function replaceSpacesWithUnderscores(string) {\n  return string.replace(/\\s+/g, '_');\n}"
    },
    {
        "instruction": "Write a function in JavaScript to extract the Kth highest digit from a given number. Number = 192\nK = 2",
        "response": "function extractKthHighestDigit(num, k) {\n  let numStr = num.toString();\n  let numArr = numStr.split(\"\");\n  numArr.sort((a, b) => b - a);\n  return +numArr[k-1];\n}"
    },
    {
        "instruction": "Change the following JavaScript code so that it prints out the square root of a given number. function sqr(x) {\n  return x*x;\n}",
        "response": "function sqr(x) {\n  return Math.sqrt(x);\n}"
    },
    {
        "instruction": "Create a Python script that calculates the sum of two given numbers. ",
        "response": "def sum(x, y):\n  return x + y;"
    },
    {
        "instruction": "Compute the minimum of 3 given numbers using a JavaScript function. ",
        "response": "function minNum(a, b, c) {\n  let min = a;\n  if (b < min) {\n    min = b;\n  }\n  if (c < min) {\n    min = c;\n  }\n  return min;\n}"
    },
    {
        "instruction": "Correct the following JavaScript code to print the first letter of the given string. let str = \"Hello World\";\nconsole.log(str[0]);",
        "response": "let str = \"Hello World\";\nconsole.log(str.charAt(0));"
    },
    {
        "instruction": "Generate a 10 digit random number using a JavaScript function ",
        "response": "Math.floor(Math.random()*10000000000);"
    },
    {
        "instruction": "Write a function in JavaScript to delete duplicate characters from a string. String: \"google\"",
        "response": "function deleteDuplicates(str) {  \n  let result = \"\"; \n  let frequency = {}; \n  \n  // creating a map of all characters with their frequency in the string \n  for (let i = 0; i < str.length; i++) { \n    let currentChar = str.charAt(i); \n    if (frequency[currentChar]) { \n      frequency[currentChar]++; \n    } else { \n      frequency[currentChar] = 1; \n    } \n  } \n  \n  // adding only those characters which have frequency greater than one \n  for (let i = 0; i < str.length; i++) { \n    let currentChar = str.charAt(i); \n    if (frequency[currentChar] == 1) { \n      result += str.charAt(i); \n    } \n  } \n  \n  return result; \n}"
    },
    {
        "instruction": "Debug the given Python code and make sure that it runs without errors. def add_two_numbers(a, b):\n  return a b",
        "response": "def add_two_numbers(a, b):\n  return a + b"
    },
    {
        "instruction": "Create a JavaScript function to get the highest value from a given array. ",
        "response": "function getMax(arr) { \n    let max = 0; \n    for(let i = 0; i < arr.length; i++) { \n        if(arr[i] > max) \n            max = arr[i]; \n    } \n    return max; \n}"
    },
    {
        "instruction": "Replace the following placeholder with an appropriate variable in the following JavaScript code. const user_name = __PLACEHOLDER__;\nconsole.log('Hello, ' + user_name + '!');",
        "response": "const user_name = 'John';\nconsole.log('Hello, ' + user_name + '!');"
    },
    {
        "instruction": "Create a recursive function in Python which returns the sum of the elements in a given list. ",
        "response": "def recursive_sum(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + recursive_sum(arr[1:])"
    },
    {
        "instruction": "Name the grammar that is used to identify data in a Javascript string. ",
        "response": "The grammar used to identify data in a JavaScript string is JSON (JavaScript Object Notation)."
    },
    {
        "instruction": "Describe the purpose of the ``await`` operator in an asynchronous JavaScript function. ",
        "response": "The purpose of the \"await\" operator in an asynchronous JavaScript function is to pause the execution of the function until a Promise is resolved and to return the resolved value from the Promise."
    },
    {
        "instruction": "Write a function in JavaScript which takes an array of numbers and returns the average of all the numbers. ",
        "response": "function getAverage(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum / arr.length;\n}"
    },
    {
        "instruction": "Modify the Python code below to solve the following error: \"TypeError: 'str' object is not callable\". \"\"\"\ndef greet(name):\n    print('Hello', name())\ngreet('John')\n\"\"\"",
        "response": "def greet(name):\n    print('Hello', name)\ngreet('John')"
    },
    {
        "instruction": "Create a method in JavaScript to convert a string to camel case. ",
        "response": "function toCamelCase(input){\n  let result = \"\";\n  let words = input.split(\" \");\n  for( let i=0; i < words.length; i++){\n    let word = words[i];\n    result += word.charAt(0).toUpperCase() + word.slice(1);\n  }\n  return result;\n}"
    },
    {
        "instruction": "Write a JavaScript code to print the total number of items in an array. arr = [1, 10, 20, 30, 40]",
        "response": "console.log(arr.length)"
    },
    {
        "instruction": "Write a JavaScript program to detect if a given element exists in an array or not. Array: [1,2,3,4,5]\nSearch element: 3",
        "response": "function findElement(arr, element){\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      return true\n    }\n  }\n  return false;\n}"
    },
    {
        "instruction": "Create a Python class for Animal ",
        "response": "class Animal:\n    def __init__(self, name, type):\n        self.name = name\n        self.type = type"
    },
    {
        "instruction": "Generate a Python program that creates a list of numbers from 1 to 10. ",
        "response": "# Create a list of numbers from 1 to 10\nnumbers = list(range(1, 11))\nprint(numbers)"
    },
    {
        "instruction": "Write a function in JavaScript to validate a credit card number. ",
        "response": "function validateCreditCardNumber(number) {\n    // remove any spaces or dashes\n    number = number.replace(/\\s/g, \"\"); // remove any spaces\n    number = number.replace(/-/g, \"\"); // remove any dashes\n    // check for valid credit card length\n    if (number.length != 16) {\n        return false;\n    }\n    // check that each number is a valid number\n    for (let i = 0; i < 15; i++) {\n        let n = parseInt(number[i]);\n        if (isNaN(n)) {\n            return false;\n        }\n    }\n    // validate the credit card\n    let sum = 0;\n    for (let i = 0; i < 15; i++) {\n        let n = parseInt(number[i]);\n        if (i % 2 == 0) {\n            n *= 2;\n            if (n > 9) { \n                n = (n % 10) + 1;\n            }\n        }\n        sum += n;\n    }\n    let last = parseInt(number[15]);\n    let check = 10 - (sum % 10);\n    return last == check;\n}"
    },
    {
        "instruction": "Change the given Python script to not assign any variables x = 10\ny = \"Some Text\"",
        "response": "# no variables are assigned"
    },
    {
        "instruction": "Create a Python function to generate all prime numbers less than a given number. ",
        "response": "def generate_prime_numbers(n): \n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes"
    },
    {
        "instruction": "Create an iterator in Python that yields only even numbers. ",
        "response": "def even_numbers():\n    i = 0\n    while True:\n        if i % 2 == 0:\n            yield i\n        i += 1"
    },
    {
        "instruction": "Write a code snippet in Javascript to print out the alphabetical characters in a string. var myString = \"Taichi Tamura\"",
        "response": "var myString = \"Taichi Tamura\";\n\nvar letters = \"\";\nfor (var i=0; i < myString.length; i++) {\n  var currentLetter = myString[i];\n  if (currentLetter.match(/[a-zA-Z]/)) {\n    letters += currentLetter;\n  }\n}\n\nconsole.log(letters); // Outputs \"TaichiTamura\""
    },
    {
        "instruction": "Create a program in JavaScript that can detect a palindrome. var str = \"racecar\"",
        "response": "var str = \"racecar\";\n\nfunction isPalindrome(str) {\n  return str == str.split('').reverse().join('');\n}\n\nconsole.log(isPalindrome(str)); // Outputs true"
    },
    {
        "instruction": "Generate an HTML list from a given array in JavaScript. var days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]",
        "response": "var days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nvar html = \"<ul>\";\nfor(var i = 0; i < days.length; i++) {\n  html += \"<li>\" + days[i] + \"</li>\";\n}\nhtml += \"</ul>\";\n\ndocument.write(html);"
    },
    {
        "instruction": "Print all the odd numbers between a given range in Python. start = 5 \nend = 20",
        "response": "start = 5\nend = 20\n\nfor num in range(start, end+1): \n    if num % 2 != 0: \n        print(num, end = ' ')\n\n# Outputs 5 7 9 11 13 15 17 19"
    },
    {
        "instruction": "What is the output from this snippet of JavaScript code? var a = 5;\nvar b = 10;\na = b;\nconsole.log(a, b);",
        "response": "The output of this code is 10 10 as 'a' is set to the value of 'b'."
    },
    {
        "instruction": "Create an array variable in JavaScript for storing song names. ",
        "response": "let songNames = [];"
    },
    {
        "instruction": "What is the correct code for looping through a list of elements in Python? ",
        "response": "for element in list:\n    print(element)"
    },
    {
        "instruction": "What is the JavaScript command to place the cursor at the end of a text field? ",
        "response": "element.focus();\nelement.setSelectionRange(element.value.length, element.value.length);"
    },
    {
        "instruction": "Find all vowels in a sentence using Python. sentence = \"This is a sample sentence.\"",
        "response": "vowels = []\nfor c in sentence:\n    if c in ('a', 'e', 'i', 'o', 'u'):\n        vowels.append(c)\n\nprint(vowels)"
    },
    {
        "instruction": "Create an object in JavaScript representing a pet dog. ",
        "response": "let pet = {\n    name: 'Max',\n    species: 'Dog',\n    age: '3',\n    healthStatus: 'healthy'\n};"
    },
    {
        "instruction": "Write a function in JavaScript to perform the following operation: Add two numbers a and b",
        "response": "function sum(a, b) {\n return a + b;\n}"
    },
    {
        "instruction": "Create a Javascript function that will add two strings",
        "response": "function addStrings(str1,str2) { \n    return str1 + str2; \n} \n\naddStrings(\"hello\", \"world\") // \"helloworld\""
    },
    {
        "instruction": "Write a Python program to select all rows from a table named 'products' that have a price less than 10 ",
        "response": "SELECT * FROM products WHERE price < 10;"
    },
    {
        "instruction": "Write an if-else condition to check for vowel or consonants in a character in Python. ",
        "response": "\"\"\"\nWrite an if-else condition to check for vowel or consonants in a character in Python.\n\"\"\"\n\ndef is_vowel_or_consonant(letter):\n    vowels = \"aeiouAEIOU\"\n    if letter in vowels:\n        return \"Vowel\"\n    else:\n        return \"Consonant\"\n\nif __name__ == '__main__':\n    print(is_vowel_or_consonant(\"a\"))  # Vowel"
    },
    {
        "instruction": "Create a function that takes two numbers and returns their greatest common divisor in Python. ",
        "response": "\"\"\"\nCreate a function that takes two numbers and returns their greatest common divisor in Python.\n\"\"\"\n\ndef greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n\nif __name__ == '__main__':\n    print(greatest_common_divisor(20, 25))  # 5"
    },
    {
        "instruction": "Create a recursive Python function to generate the Fibonacci series up to n-th terms. ",
        "response": "\"\"\"\nCreate a recursive Python function to generate the Fibonacci series up to n-th terms.\n\"\"\"\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n    print(fibonacci(5))  # 5"
    },
    {
        "instruction": "Combine the following two lists into a dictionary in Python. list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]",
        "response": "dict1 = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n}"
    },
    {
        "instruction": "write a piece of code to print out the first n Fibonacci numbers in Python. n = 8",
        "response": "def Fibonacci(n): \n    fibList = [0, 1] \n    \n    if n <= 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        print(fibList[0]) \n    elif n == 2: \n        print(fibList) \n    else: \n        temp = fibList[0] + fibList[1] \n        while len(fibList) < n: \n            fibList.append(temp) \n            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] \n      \n    return fibList \n  \n\nprint(Fibonacci(8))"
    },
    {
        "instruction": "Develop a python program to sort a list of strings alphabetically from a-z. list1 = [\"cat\", \"apple\", \"banana\", \"dog\"]",
        "response": "def sort_alphabetically(list1):\n    list1.sort()\n    return list1\n\nprint(sort_alphabetically(list1))"
    },
    {
        "instruction": "code a Python script that converts temperatures in celsius to fahrenheit. ",
        "response": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32"
    },
    {
        "instruction": "Generate a Python program to calculate the total number of vowels in a given string. string = \"Today is a beautiful day\"",
        "response": "def calculate_vowels(string):\n    vowels = 'aeiou'\n    count = 0\n    \n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(calculate_vowels(\"Today is a beautiful day\"))"
    },
    {
        "instruction": "Suggest an appropriate way to select the last element of a given list in Python. ",
        "response": "list[-1]"
    },
    {
        "instruction": "Create a class in Python to represent a bank account and add methods to display, withdraw, deposit and transfer money. The bank account has the following details:\n- Customer Name: John Doe\n- Account Number: 12345\n- Balance: $1000",
        "response": "class BankAccount:\n    def __init__(self, customer_name, account_number, balance):\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.balance = balance\n\n    def display_balance(self):\n        print('Your balance is', self.balance)\n\n    def withdraw_amount(self, amount):\n        self.balance -= amount\n        print('You withdrew', amount, 'from your account.')\n\n    def deposit_amount(self, amount):\n        self.balance += amount\n        print('You deposited', amount, 'into your account.')\n\n    def transfer_amount(self, target_account, amount):\n        self.balance -= amount\n        target_account.balance += amount\n        print('You transferred', amount, 'to the account', target_account.account_number)"
    },
    {
        "instruction": "Create a class in Python to represent a car and include methods to set and get the car's color, model, and year. ",
        "response": "class Car:\n    def __init__(self, model, year, color):\n        self.model = model\n        self.year = year\n        self.color = color\n\n    def set_color(self, color):\n        self.color = color\n\n    def get_color(self):\n        return self.color\n\n    def set_model(self, model):\n        self.model = model\n\n    def get_model(self):\n        return self.model\n\n    def set_year(self, year):\n        self.year = year\n\n    def get_year(self):\n        return self.year"
    },
    {
        "instruction": "Write a code snippet to remove all white spaces from a given string in JavaScript. \" Hello World! \"",
        "response": "let outputString = \"Hello World!\";\noutputString = outputString.replace(/\\s/g, '');  // removes white spaces\nconsole.log(outputString);"
    },
    {
        "instruction": "Sort a given list of numbers from smallest to largest with Python. [12,3,7,9,1]",
        "response": "myList = [12,3,7,9,1] \nmyList.sort() \nprint(myList) \n# Prints [1,3,7,9,12]"
    },
    {
        "instruction": "Use a regular expression to replace URLs with \"URL\" in a given text in Python. This is a text with a link http://example.com",
        "response": "import re\n\ntext = \"This is a text with a link http://example.com\"\ntext = re.sub(r'http\\S+', 'URL', text)\nprint(text)\n# Prints: This is a text with a link URL"
    },
    {
        "instruction": "Generate 10 random strings of 5 characters in length with JavaScript. ",
        "response": "let randomString = [];\n \nfor (let i = 0; i < 10; i++) {\n    let randomChars = Math.random().toString(36).slice(-5);\n    randomString.push(randomChars);\n}\n\nconsole.log(randomString);"
    },
    {
        "instruction": "Select all elements with the class “active” in JavaScript. ",
        "response": "const activeElements = document.querySelectorAll(\".active\");\nconsole.log(activeElements);"
    },
    {
        "instruction": "Implement a Search algorithm in Python with a space complexity of O(n). ",
        "response": "def search(list, target): \n    for i in range(len(list)): \n        if list[i] == target: \n            return i \n    return -1"
    },
    {
        "instruction": "Transform a given Python list of integers into a dictionary that contains the numbers as keys and its squares as values. [1,2,3]",
        "response": "my_list = [1,2,3]\ndict_squares = {x:x**2 for x in my_list}"
    },
    {
        "instruction": "Generate a random sphere with radius 1 in JavaScript. ",
        "response": "const radius = 1;\nlet x = (Math.random() * 2 - 1) * radius;\nlet y = (Math.random() * 2 - 1) * radius;\nlet z = (Math.random() * 2 - 1) * radius;\n\nconst spherePosition = new THREE.Vector3(x, y, z);"
    },
    {
        "instruction": "Create a JavaScript object representing a student. {\n name: \"John Smith\",\n age: 15\n}",
        "response": "let student = {\n name: \"John Smith\",\n age: 15\n};"
    },
    {
        "instruction": "Write a Python program that finds the most common word in a given string. This is the first sentence of a sample text.",
        "response": "def get_most_common_word(text):\n words = text.split()\n common_words = {}\n for word in words:\n if word in common_words:\n common_words[word] += 1\n else:\n common_words[word] = 1\n\n max_word = \"\"\n max_count = 0\n for word, count in common_words.items():\n if count > max_count:\n max_word = word\n max_count = count\n return max_word"
    },
    {
        "instruction": "Write a Python program that takes a string entered by the user, reverses it and displays the reversed version of the string. ",
        "response": "def reverse_string(s): \n    return s[::-1]\n  \ninput_string = input(\"Enter a string: \")\n  \nreversed_string = reverse_string(input_string) \n  \nprint(\"The reversed string is:\", reversed_string)"
    },
    {
        "instruction": "Write a function in JavaScript that takes a sentence as input and returns the number of words in the sentence. ",
        "response": "function countWords(str) {\n  return str.split(\" \").length;\n}"
    },
    {
        "instruction": "Create a Python program that sorts an array of integers using the insertion sort algorithm. [4, 2, 6, 8, 1]",
        "response": "def insertionSort(arr): \n  \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (arr[i])"
    },
    {
        "instruction": "Create a Python program that generates a random number between 0 and 10 and checks if the generated number is even. ",
        "response": "import random\n\nnum = random.randint(0, 10)\n\nif (num % 2 == 0):\n    print(str(num) + \" is even.\")\nelse:\n    print(str(num) + \" is odd.\")"
    },
    {
        "instruction": "Write a JavaScript program that takes an array of strings as an argument and then prints those strings in alphabetical order. ",
        "response": "function alphabeticalOrder(arr) {\n  // Sort items in the array\n  arr.sort(function(a, b) {\n    return a.localeCompare(b);\n  });\n  \n  // Print out the sorted array\n  console.log(arr);\n}"
    },
    {
        "instruction": "Create a JavaScript program that takes a string as an argument and then prints out the characters in reverse order. ",
        "response": "function reverse(str) { \n  \n    // Create an empty string for storing reversed string \n    var reversedString = \"\"; \n  \n    // Loop through the string and concatenate it to \n    // the new string \n    for (var i = str.length - 1; i >= 0; i--) { \n        reversedString += str[i]; \n    } \n  \n    // Return the reversed string \n    return reversedString; \n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and a function as arguments and returns an array with the same numbers as the input, but sorted in ascending order. [2, 4, 3, 1]",
        "response": "function sortArrayAsc(arr, func) { \n    return arr.sort(func); \n} \n\nfunction compareNumbers(a, b) { \n    return a - b; \n}"
    },
    {
        "instruction": "Given an integer n, write a Python program to print a pattern. n = 5",
        "response": "for i in range(1, n+1): \n  for j in range(1,i+1): \n    print(\"* \", end=\"\")  \n  print(\"\\r\")"
    },
    {
        "instruction": "Create a list in Python using list comprehension to obtain a new list which contains only the even numbers from the given list. originalList = [1, 3, 4, 17, 19, 6, 2]",
        "response": "evenlist = [i for i in originalList if i%2==0]"
    },
    {
        "instruction": "Write a code in Python to find the subsequence of a given sequence. sequence = [1, 6, 2, 4, 3, 7]",
        "response": "def findSubsequence(sequence): \n    subSeq = [] \n    maxLen = 1\n  \n    # looping through the sequence \n    for i in range(len(sequence)): \n        j = i + 1\n        while j < len(sequence): \n            # checking for non decreasing sequence \n            if sequence[j] >= sequence[i]: \n                subSeq.append(sequence[j]) \n                i = j \n                j += 1\n  \n            # checking for the subsequence with the max length \n            if len(subSeq) > maxLen: \n                maxLen = len(subSeq) \n  \n            # reset subSeq for the next subsequence if current element is starting of new subsequence \n            else: \n                subSeq = [] \n  \n    # return-1 when there is no subsequence  \n    if maxLen == 1: \n        return -1\n    else: \n        return maxLen \n  \n# Driver Code \nsequence = [1, 6, 2, 4, 3, 7] \nprint(\"LCS is \", findSubsequence(sequence))"
    },
    {
        "instruction": "Write a Python program to filter out all the elements greater than 5 in the given list. [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n result = list(filter(lambda x: x <= 5, myList))\n print(result)"
    },
    {
        "instruction": "Write a regular expression in JavaScript to find all hyperlinks in a piece of text. ",
        "response": "/http[s]?:\\/\\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+/"
    },
    {
        "instruction": "Write a JavaScript code to copy an array including its elements. arr1 = [1, 2, 3]",
        "response": "function copyArray(arr) {\n  let arr2 = arr.slice();\n  return arr2;\n}\n\nlet arr1 = [1, 2, 3];\nlet arr2 = copyArray(arr1);\nconsole.log(arr2); // output: [1, 2, 3]"
    },
    {
        "instruction": "Generate a JSON string from a given Python dictionary my_dict = {\n    \"title\": \"GPT Model Evaluation\",\n    \"category\": \"Natural Language Processing\",\n    \"score\": 8\n}",
        "response": "json.dumps(my_dict)"
    },
    {
        "instruction": "Write a JavaScript class that generates a random integer between 1 and 100 ",
        "response": "class RandomInt {\n  constructor() {\n    this.min = 1;\n    this.max = 100;\n  }\n  \n  generateInt() {\n    return Math.floor(Math.random() * (this.max - this.min + 1)) + this.min;\n  }\n}"
    },
    {
        "instruction": "Write a Python function to find all pairs in a given list of numbers whose sum equals a given target number Given List: [1, 4, 2, 9, 5]\nTarget number: 7",
        "response": "def find_pairs_sum(numbers, target):\n    res = [] \n    for i in range(len(numbers)): \n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target: \n                res.append([numbers[i], numbers[j]]) \n  \n    return res"
    },
    {
        "instruction": "What are the main data types in Python? ",
        "response": "The main data types in Python are numbers, strings, lists, tuples, dictionaries, and sets."
    },
    {
        "instruction": "Given two strings, write a Python function that finds the common letters between them. String 1: apple\nString 2: oranges",
        "response": "def find_common_letters(s1, s2):\n    letters = set()\n\n    for letter in s1:\n        if letter in s2:\n            letters.add(letter)\n    return letters\n\n# Example\ns1 = 'apple'\ns2 = 'oranges'\nprint(find_common_letters(s1, s2))\n# Output: {'a', 'e'}"
    },
    {
        "instruction": "Write a Python program to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys. ",
        "response": "dct = {}\nfor i in range(1, 16):\n dct[i] = i**2\n\nprint(dct)"
    },
    {
        "instruction": "Write a JavaScript program to extract the first word of a given string. str = \"Hello World!\"",
        "response": "function firstWord(str) {\n return str.split(\" \")[0]\n}\n \nstr = \"Hello World!\"\nconsole.log(firstWord(str)) // \"Hello\""
    },
    {
        "instruction": "Write a JavaScript program to get the number of days in a given month of the current year. ",
        "response": "function getDaysInMonth(month) {\n  return new Date(2020, month + 1, 0).getDate();\n}\n\nif (typeof module != 'undefined') {\n  module.exports = getDaysInMonth;\n}"
    },
    {
        "instruction": "Create a single line program in Python to check if a number is divisible by 5. ",
        "response": "print(lambda x: x%5 == 0, \"is divisible by 5.\")"
    },
    {
        "instruction": "Create a JavaScript program to capitalize each word in a given string. ",
        "response": "function capitalize(str) {\n    let words = str.split(' ');\n    let capitalizedWords = words.map(word => word.charAt(0).toUpperCase() + word.slice(1));\n    let result = capitalizedWords.join(' ');\n    return result; \n}"
    },
    {
        "instruction": "In Python, create a function that takes 2 integers and returns the maximum number. ",
        "response": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "instruction": "Give an example input to the following instruction. Write a JavaScript code snippet that calculates the sum of the squares of two numbers.",
        "response": "let x = 3;\nlet y = 2;\n\nlet sum = x * x + y * y;\n\nconsole.log(sum); // prints 13"
    },
    {
        "instruction": "Generate a valid Python expression that multiplies the given numbers. 3 and 4",
        "response": "3 * 4"
    },
    {
        "instruction": "Edit the given Python program to print the sum of two given numbers firstNumber = 5\nsecondNumber = 10\n\nprint(\"The difference is: \", firstNumber - secondNumber)",
        "response": "firstNumber = 5\nsecondNumber = 10\n\nprint(\"The sum is: \", firstNumber + secondNumber)"
    },
    {
        "instruction": "Design a JavaScript function that can convert any string into a camel case version. ",
        "response": "function camelCase(str){\n  const modifiedString = str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n    if (+match === 0) return \"\"; // or if (/\\s+/.test(match)) for white spaces\n    return index === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n  return modifiedString;\n}"
    },
    {
        "instruction": "Create a Javascript object that can generate a random list of numbers between 1 and 10. ",
        "response": "let randomGenerator = {\n    getRandomList : function(length) {\n        let randomList = [];\n        for (let i = 0; i < length; i++) {\n            randomList.push(Math.floor(Math.random() * 10) + 1);\n        }\n        return randomList;\n    }\n};"
    },
    {
        "instruction": "Design a JavaScript function to convert a given time in 24-hour notation to 12-hour notation. ",
        "response": "function convertTime(time) {\n  const [ hours, minutes ] = time.split(':');\n  const convertedTime = hours <= 12 ? \n  `${ hours }:${ minutes } AM` : \n  `${ hours - 12 }:${ minutes } PM`;\n  return convertedTime;\n}"
    },
    {
        "instruction": "Create a Python function to generate a Fibonacci sequence of a given length. ",
        "response": "def generate_fibonacci(length): \n    result = [0, 1] \n    for i in range(2,length): \n        result.append(result[i-2] + result[i-1]) \n    return result"
    },
    {
        "instruction": "Write a JavaScript snippet to detect whether or not the current browser is Internet Explorer. ",
        "response": "if (navigator.userAgent.indexOf('MSIE') !== -1 ||\n    navigator.appVersion.indexOf('Trident/') > -1) {\n    console.log('Browser is Internet Explorer.');\n} else {\n    console.log('Browser is not Internet Explorer.');\n}"
    },
    {
        "instruction": "Create a JavaScript code snippet to get the current date. ",
        "response": "let currentDate = new Date(); \nconsole.log(currentDate);"
    },
    {
        "instruction": "Implement a heuristic algorithm in Python to find an approximate solution to the traveling salesman problem. ",
        "response": "def traveling_salesman_heuristic(distance_matrix):\n    # Create a list of cities\n    num_cities = len(distance_matrix)\n    cities = range(num_cities)\n    \n    # Create a list of visited cities and an empty list for the route\n    visited = [False for _ in range(num_cities)]\n    route = []\n    \n    # Start from the first city\n    current_city = 0\n    visited[current_city] = True\n    route.append(current_city)\n \n    # Find the total distance of the route so far\n    total_distance = 0\n    \n    # Keep looping until all cities are visited\n    while False in visited:\n        # Find the nearest unvisited city\n        best_city = 0\n        best_distance = float('inf')\n        for i in range(1, num_cities):\n            if not visited[i] and distance_matrix[current_city][i] < best_distance:\n                best_city = i\n                best_distance = distance_matrix[current_city][i]\n                \n        # Mark the best city as visited\n        visited[best_city] = True\n        \n        # Add the best city to the route\n        route.append(best_city)\n        \n        # Accumulate the total distance\n        total_distance += best_distance\n        \n        # Change the current city to the best city\n        current_city = best_city\n        \n    # Add the distance from the last city to the first\n    total_distance += distance_matrix[route[-1]][route[0]]\n    \n    return route, total_distance"
    },
    {
        "instruction": "Compare two Python objects to check if they have the same values. obj1 = {'a':1,'b':2}\nobj2 = {'b':2, 'a':1}",
        "response": "def compareObjects(obj1, obj2):\n    '''\n    Checks if two Python objects have the same value\n    '''\n    if obj1 == obj2:\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Create a Python class that accepts a name and an age to create a person instance. ",
        "response": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def __str__(self):\n        return f'Name: {self.name}, Age: {self.age}'"
    },
    {
        "instruction": "Generate a random 10 character alphanumeric string in Python. ",
        "response": "import random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))"
    },
    {
        "instruction": "Given a String and a list of words, write a Python program to determine if the String is a sequence of any of the words in the list. string = \"thequickbrownfox\" \nwords_list = [\"the\", \"quick\", \"brown\", \"fox\"]",
        "response": "def is_valid_sequence(string, words_list):\n    str_index = 0\n    for word in words_list:\n        if len(string[str_index:]) < len(word):\n            return False\n        if string[str_index:str_index+len(word)] != word:\n            return False\n        str_index += len(word)\n    return True"
    },
    {
        "instruction": "Write a Python function to print out the squares of the numbers between 1 and 10. ",
        "response": "def print_squares():\n    for i in range(1, 11):\n        print(i**2)"
    },
    {
        "instruction": "Create a Python class for a thread-safe queue. ",
        "response": "import threading\n\nclass ThreadSafeQueue():\n    def __init__(self):\n        self.queue = []\n        self.lock = threading.Lock()\n\n    def push(self, item):\n        with self.lock:\n            self.queue.append(item)\n\n    def pop(self):\n        with self.lock:\n            item = self.queue.pop(0)\n        return item"
    },
    {
        "instruction": "Write a JavaScript program to check if a given string is a palindrome (i.e. reads the same left-to-right as right-to-left). madam",
        "response": "function isPalindrome(str) {\n  return str == str.split('').reverse().join('');\n}\n\nconsole.log(isPalindrome('madam'));\n// output: true"
    },
    {
        "instruction": "Write a JavaScript code to compare two arrays and check whether they are exactly same or not. array1 = [3, 8, 4];\narray2 = [3, 8, 4];",
        "response": "function arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length)\n    return false;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i])\n      return false;\n  }\n  return true;\n}\n\nconsole.log(arraysEqual([3, 8, 4], [3, 8, 4]));\n// output: true"
    },
    {
        "instruction": "Given a sorted array and a target value, write a function in JavaScript to search for the target value. arr = [1, 3, 5, 6, 8, 9, 10]\ntarget = 6",
        "response": "function search(arr, target) {\n    let left = 0;\n    let right = arr.length - 1;\n  \n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (arr[mid] === target) {\n            return mid;\n        } else if (arr[mid] > target) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return -1;\n}\n\nindex = search(arr, target);\nconsole.log(index);\n# Output: 3"
    },
    {
        "instruction": "Create a function in JavaScript that reverses the given list of strings. list = [\"stack\", \"overflow\", \"hello\"]",
        "response": "function reverseStringList(list) {\n    return list.reverse();\n}\n\nrev_list = reverseStringList(list);\nconsole.log(rev_list);\n# Output: [\"hello\", \"overflow\", \"stack\"]"
    },
    {
        "instruction": "You are given a 2-dimensional array. Write a function in Python to find the sum of each row. arr = [[1, 3, 2],\n       [4, 6, 5],\n       [7, 9, 8]]",
        "response": "def row_sum(arr):\n    row_sum_arr = []\n    for row in arr:\n        row_sum_arr.append(sum(row))\n    return row_sum_arr\n\nrow_sum_arr = row_sum(arr)\nprint(row_sum_arr)\n# Output: [6, 15, 24]"
    },
    {
        "instruction": "Concatenate two lists in Python (using an appropriate method). list1 = [1,2,3,4]\nlist2 = [5,6,7,8]",
        "response": "list3 = list1 + list2"
    },
    {
        "instruction": "Define a function in Python that takes an integer and returns \"positive\" if it is positive, \"zero\" if the integer is 0, and \"negative\" if the integer is negative. ",
        "response": "def pos_neg_zero(num):\n  if num > 0:\n    return \"positive\"\n  elif num < 0:\n    return \"negative\"\n  else:\n    return \"zero\""
    },
    {
        "instruction": "Create a JavaScript code snippet to get the last three characters from a given string. str = 'Hello World'",
        "response": "var last3Char = str.substring(str.length - 3);\nconsole.log(last3Char);"
    },
    {
        "instruction": "Calculate the sum of the following 2-dimensional array in Python. arr = [[1, 2], [3, 4], [5, 6]]",
        "response": "def sum_2d_array(arr):\n result = 0\n for row in arr:\n  for num in row:\n   result += num\n return result\n \nprint(sum_2d_array([[1, 2], [3, 4], [5, 6]]))"
    },
    {
        "instruction": "Write a class in JavaScript that validates a given email address. ",
        "response": "class EmailValidator {\n    constructor() {}\n\n    isValidEmail(email) {\n        var re = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n        return re.test(email);\n    }\n}"
    },
    {
        "instruction": "Write a Python script to find the prime factors of a number. Number: 24",
        "response": "\"\"\"\nWrite a Python script to find the prime factors of a number\n\"\"\"\n\ndef find_prime_factors(num):\n    prime_factors = []\n    for i in range(2, num+1):\n        count = 0\n        while num % i == 0:\n            count += 1\n            num //= i\n        if count > 0:\n            prime_factors.append((i, count))\n \n    return prime_factors\n\nif __name__ == '__main__':\n    n = 24\n    prime_factors = find_prime_factors(n)\n    print(prime_factors)"
    },
    {
        "instruction": "Write a Python function to remove all elements from a set in another set Set A = {1, 2, 3, 4} \nSet B = {2, 3}",
        "response": "def remove_from_set(A, B):\n  for element in B:\n    A.discard(element)\n  return A\n\nA = {1, 2, 3, 4} \nB = {2, 3}\n\nprint(remove_from_set(A,B)) \n# Output: {1, 4}"
    },
    {
        "instruction": "Create a fizz-buzz Python program to print numbers from 1 to 50 but for multiple of 3 print “Fizz” and for the multiple of 5 print “Buzz” and for numbers which are multiple of both 3 and 5 print “FizzBuzz”. ",
        "response": "for num in range(1,51): \n    if num % 3 == 0 and num % 5 == 0: \n        print(\"FizzBuzz\") \n    elif num % 3 == 0: \n        print(\"Fizz\") \n    elif num % 5 == 0: \n        print(\"Buzz\") \n    else: \n        print(num)"
    },
    {
        "instruction": "How would you write a function in Python for generating a Fibonacci sequence? ",
        "response": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b"
    },
    {
        "instruction": "Create an array in JavaScript containing the numbers one to ten. ",
        "response": "let numbers = [1,2,3,4,5,6,7,8,9,10];"
    },
    {
        "instruction": "How would you search for an element in an array using a linear search algorithm in Python? ",
        "response": "def linearSearch(arr, x): \n \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n \n    return -1"
    },
    {
        "instruction": "Create a list comprehension in Python to extract all the even numbers from a given list. list = [3,4,5,6,7,8]",
        "response": "evens_list = [num for num in list if num % 2 == 0]"
    },
    {
        "instruction": "Extract the next 5 worksdays in JavaScript. ",
        "response": "let nextFiveWorkingDays = [];\n\nlet today = new Date();\nfor (let i = 1; i <= 5; i++) {\n    today.setDate(today.getDate() + 1);\n    if (today.getDay() > 0 && today.getDay() < 6) \n        nextFiveWorkingDays.push(today);\n}\n\nconsole.log(nextFiveWorkingDays);"
    },
    {
        "instruction": "How would you convert the following JSON string to a JavaScript object? \"{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}\"",
        "response": "let obj = JSON.parse('{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}');\nconsole.log(obj);"
    },
    {
        "instruction": "Compute the GCD of two numbers in Python. a = 10, b = 15",
        "response": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b) \na = 10\nb = 15\ngcd = gcd(a,b) \nprint(gcd)"
    },
    {
        "instruction": "Write a JavaScript code snippet that splits a string into an array of words. string = \"Hello World\"",
        "response": "let string = \"Hello World\";\nlet words = string.split(\" \"); \nconsole.log(words);"
    },
    {
        "instruction": "Develop an algorithm in Python to reverse a given string. string = \"Hello\"",
        "response": "def reverse(string):\n    str = \"\" \n    for i in string: \n        str = i + str \n    return str\n  \nstring = \"Hello\"\n\nprint(reverse(string))"
    },
    {
        "instruction": "Create an in-place version of selection sort in Python. arr = [5, 2, 4, 6, 8, 1]",
        "response": "def selection_sort(arr): \n\n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]"
    },
    {
        "instruction": "Implement the bubble sort algorithm in JavaScript. ",
        "response": "function bubbleSort(arr) {\n  let swapped;\n  do {\n    swapped = false;\n    for (let i=0; i < arr.length; i++) {\n      if (arr[i] > arr[i+1]) {\n        let temp = arr[i];\n        arr[i] = arr[i+1];\n        arr[i+1] = temp;\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  return arr;\n}"
    },
    {
        "instruction": "Write the equivalent Java code for the following Python code. x = [1, 2, 3, 4]\nfor x in x:\n   print(x)",
        "response": "int[] x = {1, 2, 3, 4}; \nfor (int i = 0; i < x.length; i++) {\n    System.out.println(x[i]);\n}"
    },
    {
        "instruction": "Construct a python program to determine if a number is prime or composite. ",
        "response": "# Program to determine whether a number is prime or composite\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnumber = int(input(\"Enter a number: \"))\nif is_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is a composite number.\")"
    },
    {
        "instruction": "Write a JavaScript statement to create a pop-up window. ",
        "response": "alert(\"This is a pop-up window\");"
    },
    {
        "instruction": "How do you install a Python package on Windows? ",
        "response": "The easiest way to install a Python package on Windows is to open the Command Prompt and type the command 'pip install <package name>'. This will install the package using pip, the Python package manager. Alternatively, Python packages can be installed using the Windows Subsystem for Linux (WSL). To do this, open a bash shell using the Windows Key + x and typing 'bash'. Then, type 'sudo apt install <package name>'. This will install the package from the Ubuntu repositories."
    },
    {
        "instruction": "Create an object-oriented Python program to simulate a simple calculator with a add, subtract and \\multiply\" function ",
        "response": "\"\"\"Object-oriented Python program to simulate a simple calculator with add, subtract and multiply function\"\"\"\n\n# create a class Calculator\nclass Calculator:\n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n# create an instance of class Calculator\ncalc = Calculator()\n\n# call the add, subtract and multiply functions \nprint(calc.add(5,5))\nprint(calc.subtract(5,5))\nprint(calc.multiply(5,5))"
    },
    {
        "instruction": "Generate a random number between 0 and 1 using the random module in Python. ",
        "response": "import random\n\nrandom_number = random.random()\nprint(random_number) # Output: 0.00549342319234"
    },
    {
        "instruction": "Using the given array, write a Javascript program to sort the elements in descending order. let numbers = [2, 10, 5, 4, 3];",
        "response": "let numbers = [2, 10, 5, 4, 3];\nnumbers.sort((a,b) => b - a);\nconsole.log(numbers); //output: [10, 5, 4, 3, 2]"
    },
    {
        "instruction": "Write a Python program to find all pairs of numbers in the given list whose sum is equal to the given number. nums = [1, 2, 3, 4, 5], sum = 8",
        "response": "def find_pairs(nums, sum):\n  result = []\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[i] + nums[j] == sum:\n        result.append((nums[i], nums[j]))\n  return result\n\nres = find_pairs(nums, sum)\nprint(res)\n# Output: [(2, 6), (3, 5)]"
    },
    {
        "instruction": "Store the given data in a dictionary structure in python. key: name \nvalue: John",
        "response": "mydict = {\n    \"name\": \"John\"\n}"
    },
    {
        "instruction": "Load the given JSON data using Javascript. {\n  \"name\": \"John\",\n  \"age\": 30\n}",
        "response": "var data = {\n  \"name\": \"John\",\n  \"age\": 30\n};\n \nvar jsonData = JSON.parse(data);\n \nconsole.log(jsonData);"
    },
    {
        "instruction": "Write a Python script to find all the numbers which are divisible by 7, but are not multiples of 5; between 2000 and 3200 (both included). ",
        "response": "res = []\nfor i in range(2000, 3200):\n    if (i%7 == 0) and (i%5 != 0):\n        res.append(str(i))\n\nprint(','.join(res))"
    },
    {
        "instruction": "Generate a 5 rows by 4 columns matrix of random numbers between 0 and 10 in Python ",
        "response": "import random \n\nmatrix = [] \nfor i in range(5): \n    matrix.append([random.randint(0, 10) for j in range(4)]) \n\nprint(matrix)"
    },
    {
        "instruction": "Create a JavaScript object to contain employee data. ",
        "response": "let employee = {\n    name: \"John\",\n    age: 25,\n    job: \"developer\",\n    address: {\n        city: \"Berlin\",\n        street: \"Main Street\"\n    }\n}"
    },
    {
        "instruction": "What needs to be done to use the random module in Python? ",
        "response": "The random module needs to be imported in order to use it in Python. To do this, you can use the following line of code: \"import random\". Once the module has been imported, you can use the functions provided by the module in your code."
    },
    {
        "instruction": "Write a JavaScript program to display \"Welcome to Javascript\" in the console. ",
        "response": "console.log(\"Welcome to Javascript\");"
    },
    {
        "instruction": "How can a JavaScript function return multiple values? ",
        "response": "A JavaScript function can return multiple values by using an array or an object. For example, the following example returns two values in an array: return [value1, value2];. Similarly, an object can be used to return multiple values, for example: return { value1: val1, value2: val2 };."
    },
    {
        "instruction": "Write a JavaScript code to split an array into two equal parts. let arr = [5,6,7,8,9]",
        "response": "let mid = Math.floor(arr.length/2);\nlet arr1 = arr.slice(0, mid);\nlet arr2 = arr.slice(mid);"
    },
    {
        "instruction": "Write a JavaScript program to count the occurrences of each element in an array. ",
        "response": "function countOccurrences(arr) {\n  const counter = {};\n\n  arr.forEach(item => {\n    if (!counter[item]) {\n      counter[item] = 0;\n    }\n\n    counter[item]++;\n  });\n\n  return counter;\n}"
    },
    {
        "instruction": "Summarize the key concepts in this Python code snippet. import random\n\nfor x in range(0, 10):\n  print(\"Random number generated: \", random.randrange(1, 10))",
        "response": "This Python code snippet generates and prints out 10 random numbers between 1 and 10 using the \"random.randrange()\" function."
    },
    {
        "instruction": "Write a function in Python to calculate the number of minutes a user has been logged in. log_in_time = '11:30:00', log_out_time = '13:30:00'",
        "response": "def calculate_time_difference(log_in_time, log_out_time) :\n  time_in = datetime.strptime(log_in_time, '%H:%M:%S')\n  time_out = datetime.strptime(log_out_time, '%H:%M:%S')\n  diff = time_out - time_in\n  minute_difference = diff.seconds // 60\n  return minute_difference\n\nprint(calculate_time_difference('11:30:00', '13:30:00'))\n# Output: 120"
    },
    {
        "instruction": "Given the following list, create a Python dictionary having the ID as the key and the full name as the value. my_list = [('John', '1'), ('Alice', '2'), ('Bob', '3')]",
        "response": "my_dict = dict(my_list)\nprint(my_dict)\n# Output: {'John': '1', 'Alice': '2', 'Bob': '3'}"
    },
    {
        "instruction": "Create a new virtual environment for Python. ",
        "response": "Convert your current directory to a virtual environment:\n\npython3 -m venv <name of virtual environment>\n\nActivate the virtual environment:\n\nsource <name of virtual environment>/bin/activate\n    \nDeactivate the virtual environment:\n\ndeactivate"
    },
    {
        "instruction": "Write a JavaScript program to make an AJAX request. ",
        "response": "const request = new XMLHttpRequest(); \nrequest.open('GET', 'https://example.com/data.json'); \nrequest.onload = () => {\n    const data = JSON.parse(request.responseText); \n    // Handle response data \n};\nrequest.send();"
    },
    {
        "instruction": "Develop a Python script to print out a given string 5 times. str = \"Hello World!\"",
        "response": "for i in range(5):\n  print(str)"
    },
    {
        "instruction": "How do you export a JavaScript variable as a global variable? ",
        "response": "To export a JavaScript variable as a global variable, use the \"window\" object and set the variable to a property of the window object. For example, to export the variable \"myVar\", use window.myVar = myVar;."
    },
    {
        "instruction": "Write a Python class for a Person with attributes name, age, and address. ",
        "response": "class Person:\n  def __init__(self, name, age, address):\n    self.name = name\n    self.age = age\n    self.address = address\n    \n  def setName(self, name):\n    self.name = name\n  \n  def getName(self):\n    return self.name\n  \n  def setAge(self, age):\n    self.age = age\n  \n  def getAge(self):\n    return self.age\n  \n  def setAddress(self, address):\n    self.address = address\n  \n  def getAddress(self):\n    return self.address"
    },
    {
        "instruction": "Edit the following JavaScript to add validation to an input field. <input type=\"text\" id=\"name\" name=\"name\" />",
        "response": "<input type=\"text\" id=\"name\" name=\"name\" onChange=\"validateName()\" />\n\n<script>\nfunction validateName() {\n  var name = document.getElementById(\"name\").value;\n  if (name.length < 5) {\n    alert(\"Name should contain at least 5 characters!\");\n  }\n}\n</script>"
    },
    {
        "instruction": "How do you add an element to the end of an array in Python? ",
        "response": "To add an element to the end of an array in Python, use the append() method. For example, to add the element \"apple\" to the end of the array [\"orange\", \"banana\"], use the following code:\n\nmy_array = [\"orange\", \"banana\"]\nmy_array.append(\"apple\")"
    },
    {
        "instruction": "Write a JavaScript code that multiplies two numbers and returns the result. 2 and 3",
        "response": "function multiply_two_numbers(num1, num2) {\n    return num1 * num2;\n}"
    },
    {
        "instruction": "Write a Python code that checks if a given string only contains alphabets. ",
        "response": "import re \n  \ndef is_alphabetic(string):  \n    Pattern = re.compile(\"^[a-zA-Z]*$\")\n    return bool(Pattern.match(string))"
    },
    {
        "instruction": "Create a JavaScript code that checks if an array contains a given element. Array: [2, 5, 9]\nElement: 5",
        "response": "function contains(arr, ele) {\n  for (let i = 0; i < arr.length; i++) {\n    if(arr[i] === ele) {\n      return true;\n    }\n  }\nreturn false;\n}"
    },
    {
        "instruction": "Write a Python code to compute the dot product of two given vectors. [1, 2, 3] and [4, 5, 6]",
        "response": "def dot_product(v1, v2):\n    product = 0\n    for i in range(len(v1)):\n        product += v1[i] * v2[i]\n    return product"
    },
    {
        "instruction": "Convert this function written in Python to JavaScript code. def divide_two_numbers(a, b):\n    if b == 0: \n        return \"Division by 0 not allowed!\"\n    return a / b",
        "response": "function divide_two_numbers(a, b) {\n    if(b == 0) {\n        return \"Division by 0 not allowed!\";\n    }\n    return a / b;\n}"
    },
    {
        "instruction": "Create a for loop in Python to find the combined length of all the strings in a list. list = ['Data', 'Science', 'AI']",
        "response": "total_length = 0\n\nfor s in list:\n   total_length += len(s)\n\nprint(total_length)"
    },
    {
        "instruction": "Implement a function in Python to reverse the contents of a given dictionary. dictionary = {\n    \"name\": \"John Doe\", \n    \"age\": 30,\n    \"city\": \"New York\"\n    }",
        "response": "def reverse_dictionary(d): \n    return dict(zip(d.values(), d.keys())) \n\nprint(reverse_dictionary(dictionary))"
    },
    {
        "instruction": "Write a Python script to Iterate over a given list and print the square of the numbers in the list. list = [3, 4, 5]",
        "response": "for num in list:\n  print(num*num)"
    },
    {
        "instruction": "Create a script in Python for printing the Fibonacci series for a given range of numbers. start = 1\nend = 10",
        "response": "a,b = 0,1\nfor i in range(start, end+1):\n    print(a)\n    a,b = b,a+b"
    },
    {
        "instruction": "Write a python program to remove all the elements from a list that are less than 10. mylist = [4, 7, 21, 24, 88, 12]",
        "response": "def remove_less_than_10(mylist):\n    return [n for n in mylist if n >= 10]"
    },
    {
        "instruction": "Define a function in JavaScript that takes 3 numbers as arguments and returns the smallest one. ",
        "response": "function findSmallest(x, y, z) {\n    smallest = x;\n    if(y < smallest) {\n        smallest = y;\n    }\n    if(z < smallest) {\n        smallest = z;\n    }\n    return smallest;\n}"
    },
    {
        "instruction": "Create a class in Python named 'Bar' that has an attribute named 'fname' and a single method named 'sayHello'. ",
        "response": "class Bar:\n  def __init__(self, fname):\n    self.fname = fname\n  \n  def sayHello(self):\n    print \"Hello, \" + self.fname + \"!\""
    },
    {
        "instruction": "Translate a given string of comma-separated words into a list of words in Python. \"apple, orange, grape\"",
        "response": "words = \"apple, orange, grape\".split(\", \")\nprint(words) # ['apple', 'orange', 'grape']"
    },
    {
        "instruction": "Write a JavaScript function that takes a string argument and returns a count of all the times the letter 'a' appears in the string. ",
        "response": "function countA(str) {\n  let count = 0;\n  for (let i=0; i<str.length; i++) {\n    if (str[i] === 'a') {\n      count += 1;\n    }\n  }\n  return count;\n}"
    },
    {
        "instruction": "Create a class in Python named 'Foo' that has two methods named 'add' and 'subtract' to add and subtract two given numbers respectively. ",
        "response": "class Foo:\n  def add(self, num1, num2):\n    return num1 + num2\n\n  def subtract(self, num1, num2):\n    return num1 - num2"
    },
    {
        "instruction": "What is the algorithm used in the following python snippet? defbinarySearch( arr, low, high, x): \n   \n    if high >= low: \n  \n        mid = (high + low) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif arr[mid] < x: \n            return binarySearch(arr, mid + 1, high, x) \n  \n        # If x is smaller, ignore right half \n        else: \n            return binarySearch(arr, low, mid - 1, x)",
        "response": "The algorithm used in this python snippet is a binary search algorithm. Binary search is an efficient search algorithm that searches a sorted array for a specified element in O(log n) time complexity. The algorithm works by first determining the median of the array, and then comparing the value at the median to the value being searched for. If the value at the median is the same as the value being searched for, the algorithm returns the index at which it found the element. Otherwise, it will either ignore the left or right half of the array depending on whether the value at the median is larger or smaller than the value being searched for. The algorithm then repeats this step on the narrowed down subarray until the element is found."
    },
    {
        "instruction": "Suggest a way to gracefully handle errors in Python code. ",
        "response": "In Python, errors can be handled gracefully using try and except blocks. The try block contains the code that might throw an exception and the except block is used to handle the exception. In addition, the finally block is used to perform any clean up after the code is executed. Additionally, custom exception classes can be implemented and used to handle errors more granularly."
    },
    {
        "instruction": "How can you sort a list of integers by their absolute value in Python? ",
        "response": "You can sort a list of integers by their absolute value using the sort() method. For example: \n \nnumbers = [2, -1, 5, 0, -4] \nnumbers.sort(key = lambda x: abs(x)) \nprint(numbers)\n# Output: [0, -1, 2, -4, 5]"
    },
    {
        "instruction": "How can you remove the duplicate items from a list of integers in Python? ",
        "response": "You can remove the duplicate items from a list of integers in Python by using the set() function. For example:\n\na = [1, 2, 3, 3, 4]\nb = list(set(a))\nprint(b)\n# Output: [1, 2, 3, 4]"
    },
    {
        "instruction": "Write code to construct an object Given a class Patient with the following constructor:\n```python\nclass Patient:\n    def __init__(self, name, age, illness, medical_record):\n\t\tself.name = name\n\t\tself.age = age\n\t\tself.illness = illness\n\t\tself.medical_record = medical_record\n```",
        "response": "p1 = Patient(\"John\", 45, \"Diabetes\", \"1234567890\")"
    },
    {
        "instruction": "Convert the following pseudocode into a JavaScript program. Input: A, B\n\nOutput: maximum of A and B",
        "response": "function max(A, B) {\n    if (A > B) {\n        return A;\n    }\n    else {\n        return B;\n    }\n};"
    },
    {
        "instruction": "Write Python code to find the nth element of a Fibonacci sequence. ",
        "response": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    {
        "instruction": "Create an object to represent a user in JavaScript. ",
        "response": "const user = {\n    name: 'John',\n    age: 35,\n    email: 'john@example.com',\n    roles: ['user', 'admin']\n};"
    },
    {
        "instruction": "Write JavaScript code to output a square pattern of 5 stars. ",
        "response": "for (let i = 0; i < 5; i++) { \n  let line = ''; \n  \n  for (let j = 0; j < 5; j++) { \n    line += '*'; \n  } \n  \n  console.log(line); \n}"
    },
    {
        "instruction": "How can we sort a dictionary by value in Python? ",
        "response": "We can use the sorted() function in combination with the operator.itemgetter() operator to sort the dictionary by value in Python. The syntax is as follows:\n\nsorted(dictionary.items(), key=operator.itemgetter(1))"
    },
    {
        "instruction": "Construct an object in JavaScript to model a car with make, model, year, color, and price as attributes. ",
        "response": "let car = { \n    make:'', \n    model:'', \n    year:'', \n    color:'', \n    price:0 \n};"
    },
    {
        "instruction": "Answer the following question: What is the difference between a keyword and an identifier in Python? ",
        "response": "In Python, a keyword is a reserved word that has a specific pre-defined meaning and purpose in the language, while an identifier is any name that you assign to a variable, function, class, module or any other object. Keywords are words that are reserved for specific functions and operations, while identifiers are used to name user-defined objects."
    },
    {
        "instruction": "Process the given HTML code to get the output as shown. <div>\n    An article about \n    <a href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\">Python Programming Language</a> \n    <br/>\n    <b>Last updated: 2019/05/09 </b>\n</div>",
        "response": "response = {\n  'title': 'Python Programming Language',\n  'last_updated': '2019/05/09'\n}"
    },
    {
        "instruction": "Using JavaScript, write an algorithm to print all the Fibonnaci numbers up to a given number n. n = 10",
        "response": "function printFibonacci(n) {\n       let fibo = [0, 1];\n \n       if (n <= 2) {\n           return 1;\n       }\n \n       for (let i = 2; i <=n; i++ ){\n           fibo[i] = fibo[i-1]+fibo[i-2];\n       }\n \n      return fibo;\n } \n \n console.log(printFibonacci(n));"
    },
    {
        "instruction": "Create an array of objects in JavaScript and log them in the console. [\n  {name: 'John', age: 25},\n  {name: 'Jack', age: 28}\n]",
        "response": "let people = [ \n  {name: 'John', age: 25},\n  {name: 'Jack', age: 28}\n]\n\nconsole.log(people)"
    },
    {
        "instruction": "Define a class in Python to represent a rectangle and add a method to calculate its area. ",
        "response": "class Rectangle:\n    def __init__(self, length, width):\n         self.length = length\n         self.width = width\n\n    def area(self):\n        return self.length * self.width"
    },
    {
        "instruction": "Design a function in Python that takes two parameters, a list and a number, and returns a list where all elements are multiplied by the number. [1,2,3], 4",
        "response": "def mul_list(input_list, number): \n    return [x*number for x in input_list]"
    },
    {
        "instruction": "Write a function in JavaScript to filter out all the strings from a list. [1, \"Hi\", 55, false, \"Bye\"]",
        "response": "const filterStrings = arr => arr.filter(el => typeof el !== \"string\");"
    },
    {
        "instruction": "Write the following pseudocode in python \"for each element in the list, check if the number is even\"",
        "response": "for element in some_list:\n    if element % 2 == 0:\n        # do something"
    },
    {
        "instruction": "Given a list of numbers, create a function in JavaScript to return the sum of all its elements. [1,2,3,4]",
        "response": "const sumArray = arr => arr.reduce((acc,cur) => acc + cur, 0);"
    },
    {
        "instruction": "Design a function in Python to split a sentence into words ",
        "response": "def split_sentence(sentence):\n    return sentence.split(' ')"
    },
    {
        "instruction": "Create a function in JavaScript to remove all occurrences of a specified value from an array. [1, 2, 3, 2, 4], 2",
        "response": "function removeElement(arr, val) {\n    return arr.filter(x => x !== val);\n}"
    },
    {
        "instruction": "Create a JavaScript statement to output the prompt \"Please enter your name:\". ",
        "response": "prompt(\"Please enter your name:\");"
    },
    {
        "instruction": "Create a JavaScript constant to define a tax rate. ",
        "response": "const TAX_RATE = 0.2;"
    },
    {
        "instruction": "Create a JavaScript object to store information about an employee. ",
        "response": "const employee = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  job: \"Engineer\",\n  salary: 5000\n};"
    },
    {
        "instruction": "What is the syntax to declare a class in JavaScript? ",
        "response": "class MyClassName {\n   constructor(data) {\n      // some code\n   }\n   // other methods\n}"
    },
    {
        "instruction": "Write a Python script to generate random passwords with a combinations of 6 letters and numbers. ",
        "response": "import random\n\ndef generate_password(): \n    chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    password = ''\n    for i in range(6):\n        password += random.choice(chars)\n    return password\n\nprint(generate_password())"
    },
    {
        "instruction": "Create a Python class to represent a Person object. The class should contain the person's name, age, and occupation. ",
        "response": "class Person:\n  def __init__(self, name, age, occupation):\n    self.name = name\n    self.age = age\n    self.occupation = occupation"
    },
    {
        "instruction": "Write a function in Python to generate all permutations of the given list of letters. ['a','b','c','d']",
        "response": "def permutations(letters):\n permutations = []\n for a in letters:\n for b in letters:\n for c in letters:\n for d in letters:\n permutations.append(''.join(sorted([a, b, c, d])))\n return permutations"
    },
    {
        "instruction": "Create a Python Search Algorithm to search for a given number in a given sorted array. data = [1, 7, 11, 14, 16]\nsearch_num = 14",
        "response": "def search(data, search_num):\n for i in range(len(data)):\n  if data[i] == search_num:\n   return i\n return -1"
    },
    {
        "instruction": "Write a function in Python to print a diamond pattern of stars. ",
        "response": "def diamond_pattern():\n row = 5\n for i in range(1, row + 1):\n  print(\" \"*(row-i)+\"*\"*(2*i-1))\n if row > 1:\n  for i in range(row-1, 0, -1):\n   print(\" \"*(row-i)+\"*\"*(2*i-1))"
    },
    {
        "instruction": "Write a function in Python to implement a linear search algorithm. The algorithm should return the index of the number in the array if found, otherwise -1. data = [7, 13, 11, 9, 12]\nsearch_num = 9",
        "response": "def linear_search(data, search_num):\n for index, num in enumerate(data):\n  if num == search_num:\n   return index\n return -1"
    },
    {
        "instruction": "Rewrite the above function in Python to use binary search algorithm instead of linear search. data = [7, 13, 11, 9, 12]\nsearch_num = 9",
        "response": "def binary_search(data, search_num):\n low = 0\n high = len(data) - 1\n while low <= high:\n  mid = (low + high)//2\n  if data[mid] == search_num:\n   return mid\n  elif data[mid] < search_num:\n   low = mid + 1\n  else:\n   high = mid - 1\n return -1"
    },
    {
        "instruction": "Write a Python function to calculate the sum of the series 1^2 + 2^2 + 3^2 + ... + n^2. n = 8",
        "response": "def sum_series(n):\n sum = 0 \n for num in range(1, n + 1):\n sum += num**2\n return sum"
    },
    {
        "instruction": "Provide a return statement for the following JavaScript function. function getAge(dob) {\n let age = 2020 - dob.split('-')[2]\n}",
        "response": "function getAge(dob) {\n let age = 2020 - dob.split('-')[2]\n return age;\n}"
    },
    {
        "instruction": "Create an array in JavaScript to store the coordinates of a rectangle. ",
        "response": "const coordinates = [\n    {x: 10, y: 10},\n    {x: 20, y: 20},\n    {x: 10, y: 20},\n    {x: 20, y: 10}\n];"
    },
    {
        "instruction": "Find the sum of all numbers in the following array of objects in JavaScript. [{ num: 10 }, { num: 10 }, { num: 20 }, { num: 30 }]",
        "response": "let sum = 0;\narr.forEach(function(el){\n    sum += el.num;\n});\nconsole.log(sum); // 70"
    },
    {
        "instruction": "Create a looping statement in Python to print the alphabet in lowercase. ",
        "response": "for letter in \"abcdefghijklmnopqrstuvwxyz\":\n    print(letter)"
    },
    {
        "instruction": "Write a JavaScript function to convert an object into a list of keys and values. ",
        "response": "function objectToList(obj) {\n    let keys = Object.keys(obj);\n    let values = Object.values(obj);\n    return keys.map((key, index) => [key, values[index]]);\n}"
    },
    {
        "instruction": "Define a variable in JavaScript to store a user's email address. ",
        "response": "let userEmail = 'user@example.com';"
    },
    {
        "instruction": "Write a JavaScript code that creates a new array populated with the elements that exist in both of the given arrays. arr1 = [1, 2, 3, 4, 5];\narr2 = [4, 5, 6, 7, 8];",
        "response": "let arr1 = [1, 2, 3, 4, 5];\nlet arr2 = [4, 5, 6, 7, 8];\n\nlet newArr = arr1.filter(num => arr2.includes(num));\nconsole.log(newArr);"
    },
    {
        "instruction": "Create a Python class to store attributes of a student ",
        "response": "class Student:\n    def __init__(self, name, grade, age):\n        self.name = name\n        self.grade = grade\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_grade(self):\n        return self.grade\n\n    def get_age(self):\n        return self.age"
    },
    {
        "instruction": "Explain the use of semicolon in the following python code. a = 5; b = 6; c = 7;",
        "response": "The semicolon is used here to separate multiple statements on the same line. In this case, the code is assigning values to variables; by separating these assignments with semicolons, they are all evaluated in a single statement as opposed to writing three separate statements."
    },
    {
        "instruction": "Explain the purpose of a static method in a Python class ",
        "response": "A static method is a method that is bound to a class rather than an object. It does not require an instance of the class to be created in order to be called, and it does not have access to the attributes or methods of an instance of that class. Static methods are usually used to provide methods for manipulation of class attributes and/or to provide utility methods for the class."
    },
    {
        "instruction": "Create a function in python to find the minimum value in an array. arr = [3,6,2,7,1]",
        "response": "def find_min(arr): \n    min = arr[0] \n    for x in arr: \n        if x < min: \n            min = x \n    return min\n\nresult = find_min(arr)\nprint(result) # prints 1, which is the minimum in the array."
    },
    {
        "instruction": "Using Python, make a function that takes a list of strings as an argument and returns a new list of all the strings in uppercase. listOfStrings = [\"apple\", \"banana\", \"mango\"]",
        "response": "def convertStringsToUppercase(listOfStrings):\n  return [string.upper() for string in listOfStrings]"
    },
    {
        "instruction": "What is the best way to check whether a JavaScript string ends with a given substring? ",
        "response": "The best way to check if a JavaScript string ends with a given substring is to use the endsWith() method. This method will return a boolean value indicating whether the string ends with the given substring or not."
    },
    {
        "instruction": "Write a function in Python which takes a list of integers as an argument and returns a new list which contains the maximum value of each unique number in the input list. intList = [1, 4, 2, 9, 3, 5, 1, 9]",
        "response": "def maxValuesInList(intList):\n  uniqueValues = set(intList)\n  maxValuesList = []\n  for value in uniqueValues:\n    maxValue = max([item for item in intList if item == value])\n    maxValuesList.append(maxValue)\n  return maxValuesList"
    },
    {
        "instruction": "Write a JavaScript function to greet a user, given the user's name. name = 'John'",
        "response": "function greetUser(name){\n  return \"Hello, \" + name + \"!\";\n}"
    },
    {
        "instruction": "Using Python, create a function that takes a string as an argument and returns a updated string where each character is repeated twice. inputValue = \"Hello\"",
        "response": "def repeatCharacters(inputValue):\n  outputValue = \"\"\n  for char in inputValue: \n    outputValue += char * 2 \n  return outputValue"
    },
    {
        "instruction": "What is the most efficient way to delete a key from a Python dictionary? ",
        "response": "The most efficient way to delete a key from a Python dictionary is to use the del keyword. This will delete the specified key and its associated value from the dictionary."
    },
    {
        "instruction": "Create a class in Python called \"Person\" and define two methods - one for getting a name, and one for saying hello. ",
        "response": "class Person(object):\n    def __init__(self, name):\n        self.name = name\n    \n    def getName(self):\n        return self.name\n    \n    def say_hello(self):\n        print(\"Hello, my name is %s\" % self.name)"
    },
    {
        "instruction": "Given two integers, how to find the GCD of them in Python? ",
        "response": "def gcd(a, b): \n  if(b == 0): \n    return a \n  else: \n    return gcd(b, a % b)"
    },
    {
        "instruction": "How to check if a string contains a specific character in Python? ",
        "response": "You can check if a string contains a specific character in Python by using the in operator. For example:\n\nmy_string = \"Hello World!\"\n\nif 'W' in my_string:\n    print(\"The string contains the character W\")"
    },
    {
        "instruction": "Write a function in Python to find the sum of all even numbers between 0 and a given number. ",
        "response": "def sum_of_even_numbers(n):\n    result = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            result += i\n    \n    return result"
    },
    {
        "instruction": "How to sort a list of tuples in Python? ",
        "response": "You can sort a list of tuples in Python by using the sorted() function. For example:\n\ntuple_list = [('John', 18), ('Jane', 20), ('Bob', 16)]\n\nsorted_list = sorted(tuple_list, key=lambda tup: tup[1])\n\nprint(sorted_list)\n\n# Output: [('Bob', 16), ('John', 18), ('Jane', 20)]"
    },
    {
        "instruction": "Write a Python script to remove duplicates from the list. my_list = [1,2,4,4,1,2]",
        "response": "def remove_duplicates(my_list): \n    new_list = [] \n    for item in my_list: \n        if item not in new_list: \n            new_list.append(item) \n    return new_list"
    },
    {
        "instruction": "Write Python code to print the most frequent characters in a given string. String: I love apples",
        "response": "def most_frequent_char(s):\n    count = [0] * 256\n    max_count = 0\n    max_id = 0\n    for i in range(len(s)):\n        count[ord(s[i])] += 1\n        if count[ord(s[i])] > max_count:\n            max_count = count[ord(s[i])]\n            max_id = i\n    \n    return s[max_id]"
    },
    {
        "instruction": "Create a JSON string from the following Javascript object. Object:{ \n  \"name\": \"john\",\n  \"age\": 25,\n  \"address\": {\n    \"city\": \"National City\",\n    \"state\": \"CA\"\n  }\n}",
        "response": "'{\"name\": \"john\", \"age\": 25, \"address\": {\"city\": \"National City\", \"state\": \"CA\"}}'"
    },
    {
        "instruction": "Create a Python script to fetch the weather data of a given city Bangalore",
        "response": "import requests\n\ncity = \"Bangalore\"\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid=your_api_key\"\n\n# Fetching the JSON data\nresponse = requests.get(url)\ndata = response.json()\n \n# Get the main weather data\nweather_data = data[\"main\"]\n \n# Obtain the current temperature \ntemp = weather_data[\"temp\"]\n \nprint(f\"The current temperature in {city} is {temp} degrees Celsius.\")"
    },
    {
        "instruction": "Create a Python program to calculate prime numbers between 0 to 50. ",
        "response": "# Program to calculate prime numbers between 0 to 50\n\n# list of prime numbers\nprime_list = []\nfor num in range(0,51):  \n   # prime numbers are greater than 1  \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_list.append(num)\n\nprint(prime_list)"
    },
    {
        "instruction": "Create a JavaScript program that reverses a given string. Hello",
        "response": "// function to reverse a given string\nfunction reverseString(str) {\n return str.split('').reverse().join('');\n}\n\n// Output\nreverseString('Hello') \n// Output\nolleH"
    },
    {
        "instruction": "Using Python, create a function to return the number of days in a particular month. September",
        "response": "def days_in_month(month):\n if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':\n  return 31\n elif month == 'February':\n  return 28\n else:\n  return 30\n  \n# Output\ndays_in_month('September') \n# Output \n30"
    },
    {
        "instruction": "How would you reverse a string in Python? ",
        "response": "my_string = \"Hello World!\"\nmy_string = my_string[::-1]  # slice the string from start to finish in reverse order"
    },
    {
        "instruction": "Write a script in JavaScript to print the first 20 Fibonacci numbers. ",
        "response": "let n1 = 0;\nlet n2 = 1;\nlet n3;\n\nconsole.log(n1 + \" \" + n2);\n\nfor(let i = 2; i < 20; ++i)\n{\n    n3 = n1 + n2; \n    console.log(n3);\n    n1 = n2;\n    n2 = n3;\n}"
    },
    {
        "instruction": "Generate a Hash Table in Python with given length and values. size = 10\nvalues = [20, 12, 45, 89, 78, 90]",
        "response": "hash_table = [None]*size\n\nfor value in values:\n    hash_value = value % size\n    hash_table[hash_value] = value\n \nprint(hash_table)"
    },
    {
        "instruction": "Convert the following SQL query into a Python pandas DataFrame. SELECT product.name, store.location, store.country\nFROM product\nINNER JOIN store\nON product.store_id = store.store_id",
        "response": "import pandas as pd\n\ndf = pd.read_sql_query(\n'SELECT product.name, store.location, store.country'\n'FROM product'\n'INNER JOIN store'\n'ON product.store_id = store.store_id',\nconn\n )"
    },
    {
        "instruction": "In Python, write a function that takes two integers a, b and returns a*b. ",
        "response": "def multiply(a, b):\n  return a * b"
    },
    {
        "instruction": "Create a python script that connects to a database and outputs the average age of users. ",
        "response": "import pandas as pd \nimport sqlite3\n\n# Connect to database\nconn = sqlite3.connect(\"myDB.db\")\n\n# Read Data \ndf = pd.read_sql(\"SELECT age FROM Users\", conn)\n\n# Calculate average \navg_age = df.mean()\n\n# Output the average age of users \nprint(\"Average age of users: \", avg_age)"
    },
    {
        "instruction": "List all properties of a JavaScript object called ``person``. ",
        "response": "The properties of the person object include name, age, height, weight, gender, race, and occupation."
    },
    {
        "instruction": "Create a class called Vehicle in Python with attributes for type (car, truck, motorcycle etc.), make, model, year, and speed. ",
        "response": "class Vehicle:\n    def __init__(self, type, make, model, year, speed):\n        self.type = type\n        self.make = make\n        self.model = model\n        self.year = year\n        self.speed = speed"
    },
    {
        "instruction": "How do you create a new list in Python from a given list that contains the square of each element? ",
        "response": "The following code creates a new list from the given list by squaring each element using a list comprehension: new_list = [el**2 for el in original_list]"
    },
    {
        "instruction": "Create a class in python with three functions, two of which must be called `add` and `subtract`. ",
        "response": "class MathOperations:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b"
    },
    {
        "instruction": "Assign ``num = 5`` to the ``num`` variable using the Python assignment operator. ",
        "response": "num = 5"
    },
    {
        "instruction": "Rearrange the given fragments of code in order to build an ``if ... else ...`` statement in Python. print('Success!')\nelse:\nif a > b",
        "response": "if a > b:\n    print('Success!')\nelse:"
    },
    {
        "instruction": "How would you extract emails from a given string using regex in Python? ",
        "response": "import re\n\ns = 'This string contains an email address: email@example.com'\n\nemails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', s)"
    },
    {
        "instruction": "How do you debug an application in Python? ",
        "response": "Debugging an application in Python can be done using a variety of methods such as using a debugger like pdb, setting breakpoints, using logging, using the assert statement, etc. Additionally, tools like PyCharm and Visual Studio Code come with built-in debugging capabilities."
    },
    {
        "instruction": "Enter the variables from the equation below into Python code. 2x + 5y - 7z = 9",
        "response": "x = 2\ny = 5\nz = -7"
    },
    {
        "instruction": "Create a python script that takes three required parameters 'x', 'y' and 'z' and prints the result of x * y * z x=4\ny=3\nz=2",
        "response": "def multiply(x, y, z):\n  return x * y * z\n  \nprint(multiply(4, 3, 2)) //output 24"
    },
    {
        "instruction": "Suggest a Python code for sorting a list of dictionaries based on ascending order of a given key. original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 18}, {'name':'Lisa', 'age': 20}]",
        "response": "def sort_by_age(original_list):\n    Return sorted(original_list, key = lambda i: i['age'])"
    },
    {
        "instruction": "Write a Python function that takes a list of strings as parameter and returns a dictionary with the strings as keys and the length of each string as value. words = ['apple', 'banana', 'cat']",
        "response": "def string_lengths(words):\n    return {word:len(word) for word in words}"
    },
    {
        "instruction": "Write a Python program to remove duplicates from a list of dictionaries based on their values for a given key. original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 25}, {'name':'Lisa', 'age': 20}]",
        "response": "def remove_duplicates(original_list, key):\n    seen = set()\n    new_list = [item for item in original_list if key not in seen and (seen.add(item[key]) if item[key] is not None else True)]\n    return new_list"
    },
    {
        "instruction": "Suggest a Python program to execute a given block of code a specified number of times. execute_n_times(5, print(\"Hello World!\"))",
        "response": "def execute_n_times(n, code):\n    for _ in range(n):\n        exec(code)"
    },
    {
        "instruction": "Write a Python program to create a function that takes two numbers as arguments and returns a list of all odd numbers between them. start_range = 2\nend_range = 10",
        "response": "def get_odds(start_range, end_range):\n    return [num for num in range(start_range, end_range+1) if num % 2 != 0]"
    },
    {
        "instruction": "Write a Python program to convert an integer to a Roman numeral. number = 2019",
        "response": "def to_roman(num):\n    thousands = [\"\", \"M\", \"MM\", \"MMM\"]\n    hundreds = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"]\n    tens = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n    ones = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n    \n    return thousands[num//1000] + hundreds[(num%1000)//100] + tens[(num%100)//10] + ones[num%10]"
    },
    {
        "instruction": "Write a Python program to compare two given lists and return True if their contents are the same. list1 = [1, 3, 8, 9]\nlist2 = [1, 3, 8, 9]",
        "response": "def compare_lists(list1, list2):\n    return list1 == list2"
    },
    {
        "instruction": "Suggest a Python code for printing the sum, minimum and maximum of a given list. list_elements = [1, 2, 4, 6, 8, 9]",
        "response": "def list_calculations(list_elements):\n    print('sum:', sum(list_elements))\n    print('min:', min(list_elements))\n    print('max:', max(list_elements))"
    },
    {
        "instruction": "Write a Python program to shuffle the items of a given list in random order. list_elements = [1, 2, 3, 4, 5]",
        "response": "from random import shuffle\n\ndef shuffle_list(list_elements):\n    shuffle(list_elements)\n    return list_elements"
    },
    {
        "instruction": "Without using any built-in functions, generate a Python code to remove the duplicated elements in a list ",
        "response": "def remove_duplicates(l): \n    res = [] \n    for i in l: \n        if i not in res: \n            res.append(i) \n    return res"
    },
    {
        "instruction": "Generate a complete javascript code that calls the fetch() API with a certain url https://www.example.com",
        "response": "fetch('https://www.example.com')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.log(error));"
    },
    {
        "instruction": "Write a python script to print out a list comprehension that prints out all the integers in a given range 1-10",
        "response": "my_list = [x for x in range(1, 11)]  \nprint(my_list)"
    },
    {
        "instruction": "Integrate the plotting library Matplotlib into this Python script. import pandas as pd\ndata = pd.read_csv('data.csv')",
        "response": "import pandas as pd\nimport matplotlib.pyplot as plt \n\n# Read csv file \ndata = pd.read_csv('data.csv')  \n\n# Data visualization \nplt.plot(data) \nplt.xlabel('x-axis') \nplt.ylabel('y-axis')  \nplt.title('Plot of data')  \nplt.show()"
    },
    {
        "instruction": "Manipulate a given array in JavaScript to remove all duplicate items var array = [20, 30, 20, 15, 30, 45]",
        "response": "var array = [20, 30, 20, 15, 30, 45];\nvar uniqueArray = array.filter((item, index) => array.indexOf(item) === index);\nconsole.log(uniqueArray);"
    },
    {
        "instruction": "Design a function in JavaScript that takes two parameters and performs a multiplication between them. Number 1: 11\nNumber 2: 10",
        "response": "function multiply(num1, num2) {\n    return num1 * num2;\n}"
    },
    {
        "instruction": "Create a python program to determine the comprehesive count of words in a given string Given the string s =\"python programming is fun\"",
        "response": "def count_words(s):\n    words = s.split(' ')\n    count = len(words)\n    return count"
    },
    {
        "instruction": "Write a Python program to find the four letter words from a given list. [\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"].",
        "response": "\"\"\"\nA Python program to find the four letter words from a given list\n\"\"\"\n\n# Initializing the list \nwords = [\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"] \n\n# Using list comprehension to extract four letter words \nfour_letter_words = [word for word in words if len(word) == 4] \n\n# Printing the four letter words \nprint(\"Four letter words:\", four_letter_words)"
    },
    {
        "instruction": "Create a variable to store the text \"Python is a programming language\" and then print it. ",
        "response": "text = \"Python is a programming language\"\nprint(text)"
    },
    {
        "instruction": "Use .split() in Python to break the following text into a list of sentences. text = \"Hello! My name is John. What is your name?\"",
        "response": "text = \"Hello! My name is John. What is your name?\"\n\nsentences = text.split(\". \")\nprint(sentences) # ['Hello! My name is John', 'What is your name?']"
    },
    {
        "instruction": "How would you implement a simple object oriented Programming concept in Python? ",
        "response": "In Python, object-oriented programming is supported by classes which contain attributes that represent the characteristics of an object, and methods which represent the actions that an object can take. To implement a simple object-oriented concept in Python, we would first define a class that represents the type of object we wish to create. This class will contain attributes (i.e. data fields) that define the state of the object, as well as methods that define the behaviors of the object. Finally, we can create objects using the class definition, providing an initial state and access to the methods."
    },
    {
        "instruction": "Write a JavaScript function to perform a binary search. let array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet x = 5;",
        "response": "let binarySearch = (array, x) => {\n  let start = 0;\n  let end = array.length - 1;\n  \n  while (start <= end) {\n    let middle = Math.floor((start + end) / 2);\n    if (array[middle] === x) {\n      return middle;\n    } else if (x < array[middle]) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }  \n  }\n  return -1;\n}"
    },
    {
        "instruction": "Write a function to check whether a number is a prime number in JavaScript. let num = 7;",
        "response": "function isPrime(num) { \n  \n    // Edge cases:\n    if (num <= 1)  return false; \n    if (num === 2)  return true; \n    if (num % 2 === 0) return false; \n\n    for (let i=3; i<=Math.sqrt(num); i+=2) { \n        if (num % i === 0) \n            return false; \n    } \n    return true; \n}"
    },
    {
        "instruction": "Using the given Python code, format the number 7.321 to contain two decimal points. n=7.321",
        "response": "'{:.2f}'.format(n)"
    },
    {
        "instruction": "Create a function in Python that takes a sentence as an argument and returns the formatted sentence with the first letter of each word capitalized. sentence = \"this is a sentence\"",
        "response": "def capitalize_sentence(sentence):\n  words = sentence.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return \" \".join(capitalized_words)"
    },
    {
        "instruction": "Create a script in Python that plots a bar chart showing the count of beers sold in a bar in a particular week. beer_sales = [200, 500, 600, 100, 800]",
        "response": "import matplotlib.pyplot as plt\n\nweek = [1, 2, 3, 4, 5]\nplt.bar(week,beer_sales)\nplt.xlabel('Week')\nplt.ylabel('Number of beers sold')\nplt.show()"
    },
    {
        "instruction": "Modify the following python code to calculate the average of a list of numbers. def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''",
        "response": "def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''\n    return sum(numbers) / len(numbers)"
    },
    {
        "instruction": "Come up with a Python generator expression to iterate over a given list and return only even elements. [1, 2, 3, 4, 5, 6, 7, 8]",
        "response": "even_list = (x for x in [1, 2, 3, 4, 5, 6, 7, 8] if x%2 == 0)"
    },
    {
        "instruction": "Design a function in JavaScript to return the index of the last element in an array. [4, 5, 6, 7]",
        "response": "function lastIndex(arr) {\n    return arr.length - 1;\n}\n\nconsole.log(lastIndex([4, 5, 6, 7])); //3"
    },
    {
        "instruction": "How can you make a dictionary key iterable in Python? ",
        "response": "A dictionary in Python can be made iterable using a for loop. To iterate over the keys of a dictionary, we can use the ``dict.keys()`` method which returns an iterable object of the keys in the dictionary. This iterable can then be used to iterate over the keys of the dictionary."
    },
    {
        "instruction": "Change the following code from Python to JavaScript def add_numbers(a, b):\n    return a + b",
        "response": "function addNumbers(a, b) {\n    return a + b; \n}"
    },
    {
        "instruction": "Create a python program that takes a keyword as an input and prints the top 10 relevant Wikipedia articles for that keyword ",
        "response": "import wikipedia\n\ndef get_top_ten_results(keyword):\n    results = wikipedia.search(keyword, results=10)\n    for result in results:\n        print(result)"
    },
    {
        "instruction": "How to debug a program in Python? ",
        "response": "In Python, debugging a program can be done by using a debugger to step through code line by line and checking the current state of the values, variables, objects, and functions. Using a debugger is useful for understanding the exact flow of code and finding errors or unexpected behavior. Python also provides a number of built-in debugging tools such as the ``pdb`` module which can be used to debug a program."
    },
    {
        "instruction": "How would you solve this leetcode problem in Python? Problem: Implement the following function\n\n```def majorityElement(self, nums: List[int]) -> int:```\n\nGiven an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.",
        "response": "def majorityElement(self, nums: List[int]):\n    majority_count = len(nums)//2\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for key, value in num_count.items():\n        if value > majority_count:\n            return key"
    },
    {
        "instruction": "Generate a 10x10 multiplication table in Python. ",
        "response": "for i in range(1,11): \n   for j in range(1,11): \n        print(i*j, end = \"\\t\") \n   print()"
    },
    {
        "instruction": "Write a function in JavaScript to reorder the given list in ascending order. [3, 1, 2]",
        "response": "function sortAscending(list) {\n    list.sort(function (a, b) {\n        return a - b;\n    });\n    return list;\n}"
    },
    {
        "instruction": "Write a Python program to divide the numbers in the list by a given number [2, 4, 10], 2",
        "response": "def divide_list(list, n):\n    return [x/n for x in list]"
    },
    {
        "instruction": "Generate a Delete API endpoint in Python Flask for a user to delete their data from a database. ",
        "response": "@app.route('/delete/<int:user_id>', methods=['DELETE'])\ndef delete(user_id):\n   user = db.query.get(user_id)\n   db.session.delete(user)\n   db.session.commit()\n   return jsonify({'message':'User deleted successfully'})"
    },
    {
        "instruction": "Design a JavaScript class for a bank account with one private variable, account_balance. The class should have one public function, deposit(amount) that adds the given amount to the account_balance variable and prints the balance. ",
        "response": "class BankAccount {\n  constructor() {\n    this.account_balance = 0;\n  }\n  deposit(amount){\n    this.account_balance += amount;\n    console.log(\"Account Balance:$\" + this.account_balance);\n  }\n}"
    },
    {
        "instruction": "Create a loop in Python that prints the integers between 1 and 10 (including 1 and 10). ",
        "response": "for i in range(1, 11):\n  print(i)"
    },
    {
        "instruction": "Write a Python snippet to print from 1 to 10 (inclusive) using a for loop ",
        "response": "for i in range(1, 11):\n  print(i)"
    },
    {
        "instruction": "Create a while loop in JavaScript that reverses an array and prints each element to the console. [1, 2, 3, 4, 5]",
        "response": "let arr = [1, 2, 3, 4, 5];\nlet i = arr.length-1;\nwhile(i >= 0){\n  console.log(arr[i]);\n  i--;\n}"
    },
    {
        "instruction": "Write a Python snippet to print the same message 10 times. ",
        "response": "for _ in range(10):\n  print(\"Hello World!\")"
    },
    {
        "instruction": "Write a JavaScript function that takes an input string and replaces all occurrences of the letter 'e' with an asterisk. input_string = \"Hello World!\"",
        "response": "function replace_with_asterisk(string) {\n    return string.replace(/e/g, '*');\n}"
    },
    {
        "instruction": "Write a function in Python to move the last element of a given list to the beginning of the list. ",
        "response": "def move_last_to_front(list):\n  list[0], list[-1] = list[-1], list[0]\n  return list"
    },
    {
        "instruction": "Reverse the order of the values in the input list using Python. list = [1, 4, 5, 6, 7]",
        "response": "list = [7, 6, 5, 4, 1]\n\ndef reverse_list(input_list):\n    \"\"\"Reverse the order of the values in the input list.\"\"\"\n    return input_list[::-1]\n\nif __name__ == '__main__':\n    list = [1, 4, 5, 6, 7]\n    print(reverse_list(list))"
    },
    {
        "instruction": "Write a function in JavaScript to get the first 10 prime numbers. ",
        "response": "function getFirstTenPrimeNumbers() {\n  let primeNumbers = [];\n  let num = 2;\n  while (primeNumbers.length < 10) {\n    if (isPrime(num)) {\n      primeNumbers.push(num);\n    }\n    num++;\n  }\n  return primeNumbers;\n}\n\nfunction isPrime(num) {\n  for(let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"
    },
    {
        "instruction": "Create a function in Python to generate a list of consecutive natural numbers starting from 1 up to a given number. n = 8",
        "response": "def gen_list_of_consecutive_numbers(n):\n    \"\"\"Generate a list of consecutive natural numbers up to a given number n\"\"\"\n    return list(range(1, n + 1))\n\nif __name__ == '__main__':\n    n = 8\n    print(gen_list_of_consecutive_numbers(n))"
    },
    {
        "instruction": "Create a web page with a JavaScript function to search for a product in a product inventory using user input. const products = [\n  {name: \"iPhone\", price: 499},\n  {name: \"MacBook Pro\", price: 1499},\n  {name: \"iPad Pro\", price: 799},\n];",
        "response": "<html>\n  <head>\n    <title>Product Search</title>\n  </head>\n  <body>\n    <h1>Product Search</h1>\n    <div>\n      <input type=\"text\" id=\"search\" />\n      <button type=\"button\" onclick=\"searchProducts()\">Search</button>\n    </div>\n    <ul id=\"products\"></ul>\n    <script>\n      const products = [\n        {name: \"iPhone\", price: 499},\n        {name: \"MacBook Pro\", price: 1499},\n        {name: \"iPad Pro\", price: 799},\n      ];\n\n      function searchProducts() {\n        let query = document.getElementById('search').value;\n\n        let filteredProducts = products.filter(\n          product => product.name.includes(query)\n        );\n\n        let productsList = document.getElementById('products');\n        productsList.innerHTML = '';\n\n        for (let product of filteredProducts) {\n          let newElement = document.createElement('li');\n          newElement.innerHTML = `${product.name} - ${product.price}$`;\n          productsList.appendChild(newElement);\n        }\n      }\n    </script>\n  </body>\n</html>"
    },
    {
        "instruction": "Create a Python script to combine two lists into a dictionary list1 = [1, 2, 3]\nlist2 = [\"a\", \"b\", \"c\"]",
        "response": "list1 = [1, 2, 3]\nlist2 = [\"a\", \"b\", \"c\"]\n\ndef combine_lists(list1, list2):\n    \"\"\"Combine two lists into a dictionary\"\"\"\n    return {key: value for key, value in zip(list1, list2)}\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [\"a\", \"b\", \"c\"]\n    print(combine_lists(list1, list2))"
    },
    {
        "instruction": "Add a new key-value pair (\"year\": 2020) to the given dictionary using Python. dictionary = {\"name\": \"John\", \"age\": 30}",
        "response": "dictionary = {\"name\": \"John\", \"age\": 30}\n\ndef add_year(dictionary):\n    \"\"\"Add a new key-value pair (\"year\": 2020) to the dictionary\"\"\"\n    dictionary[\"year\"] = 2020\n    return dictionary\n\nif __name__ == '__main__':\n    dictionary = {\"name\": \"John\", \"age\": 30}\n    print(add_year(dictionary))"
    },
    {
        "instruction": "Create a function to calculate the sum of the first n natural numbers using JavaScript. ",
        "response": "function sumOfFirstNNaturalNumbers(n) {\n  let sum = 0;\n  for (let i = 0; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nconst n = 5;\nconsole.log(sumOfFirstNNaturalNumbers(n)); // 15"
    },
    {
        "instruction": "Using the function you wrote in 4.\nWrite a Python program to convert a binary list to an integer binary_list = [1, 0, 1, 0]",
        "response": "def binary_list_to_int(binary_list):\n    return int(''.join(str(x) for x in binary_list), 2)"
    },
    {
        "instruction": "Create a Python program that takes two lists as arguments, and returns a list that contains the elements present in both lists. list1 = [2, 3, 4, 5] \nlist2 = [1, 4, 6]",
        "response": "def common_elements_of_two_lists(list1, list2): \n    result = [] \n    for element in list1: \n        if element in list2: \n            result.append(element) \n    return result"
    },
    {
        "instruction": "Construct an array in Python of size 10 and fill it with random integers from 0 to 5. ",
        "response": "import random\n\narray = []\nfor i in range(10):\n  array.append(random.randint(0,5))\n  \nprint(array)"
    },
    {
        "instruction": "Create a JavaScript object with a number and a string property. ",
        "response": "let obj = {\n  num: 10,\n  str: \"hello\"\n};"
    },
    {
        "instruction": "Add comments to the following JavaScript code that explains what it does. let result = 0;\nfor (let i = 0; i < 10; i++) {\n  result += i;\n}",
        "response": "// This code loop through the numbers from 0 to 9 and add them to the variable result.\nlet result = 0; \nfor (let i = 0; i < 10; i++) { \n  // Add the current number to the value of result\n  result += i;\n}"
    },
    {
        "instruction": "Given a binary search tree and a target value, write a python function to search for the closest node value to the target. ",
        "response": "def closestInBST(root, target):\n  res = root.val\n  while root:\n    if root.val == target:\n      return root.val\n    if abs(root.val-target) < abs(res-target):\n      res = root.val\n    if target < root.val:\n      root = root.left\n    else:\n      root = root.right\n  return res"
    },
    {
        "instruction": "Write a JavaScript function that takes in an array and a number as arguments and returns the array sorted in ascending order with the number inserted in the right position. [1, 5, 6], 4",
        "response": "function insertSort(arr, num) {\n  arr.push(num);\n  arr.sort((a, b) => a - b);\n  return arr;\n}\n// Output: [1, 4, 5, 6]"
    },
    {
        "instruction": "Create a new JavaScript object using the given constructor. Person Constructor: \nfunction Person(name, age){\n   this.name = name;\n   this.age = age;\n}",
        "response": "const newPerson = new Person('John', 23);"
    },
    {
        "instruction": "Write a Python code to find all the prime numbers below a given number. ",
        "response": "def get_primes(n): \n  primes = [] \n  for num in range(2, n+1): \n    is_prime = True     \n    for div in range(2, n): \n      if (num % div == 0): \n        is_prime = False      \n    if is_prime: \n      primes.append(num) \n  return primes"
    },
    {
        "instruction": "Write a Python code that reverses the order of words in a sentence. \"This is a sentence\"",
        "response": "def reverseWords(sentence): \n  return ' '.join(sentence.split()[::-1])\n\n# Output: \"sentence a is This\""
    },
    {
        "instruction": "Write a JavaScript code that takes in an array and returns an array of objects containing the original array elements and their frequency. [3, 4, 3, 4, 5, 3]",
        "response": "function toObject(arr) {\n  let counts = {};\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    counts[num] = (counts[num] || 0) + 1;\n  }\n  for (let num in counts) {\n    res.push({\n      num: parseInt(num),\n      count: counts[num]\n    });\n  }\n  return res;\n}\n// Output: [{ num: 3, count: 3 }, { num: 4, count: 2 }, { num: 5, count: 1 }]"
    },
    {
        "instruction": "Explain what the following python code prints out. for i in range(10):\n    print(i**2)",
        "response": "The code prints out the squares of the numbers 0 to 9, i.e., 0, 1, 4, 9, 16, 25, 36, 49, 64 and 81."
    },
    {
        "instruction": "Write a JavaScript program to display the current day and time ",
        "response": "var d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toString();"
    },
    {
        "instruction": "Write a Python program to sort the dictionary by key. myDict = {'a': 1, 'c': 3, 'b': 2}",
        "response": "sortedDict = sorted(myDict)\nfor key in sortedDict:\n    print(key, ':', myDict[key])"
    },
    {
        "instruction": "Write a JavaScript expression to check whether the string \"Hello World\" is present in another string. var test_str = \"Hello World is a popular phrase\";",
        "response": "test_str.includes(\"Hello World\");"
    },
    {
        "instruction": "Create a Python dictionary with key-values pairs (fruit-quantity) as listed below. apple = 5, banana = 10, orange = 15",
        "response": "fruit_dict = {\n    \"apple\":5,\n    \"banana\":10,\n    \"orange\":15\n    }"
    },
    {
        "instruction": "Create a loop in Python to find the sum of all integers from 1 to 100. ",
        "response": "total = 0\nfor num in range(1, 101): \n    total+= num \n\nprint(\"Sum of all integers from 1 to 100 is\", total)"
    },
    {
        "instruction": "Create an array of four different colors in JavaScript. ",
        "response": "let colors = [\"red\", \"green\", \"blue\", \"yellow\"];"
    },
    {
        "instruction": "Create a function in JavaScript that takes in two arrays and returns an object. The object should contain elements where the two arrays have coinciding elements. [1,3,5], [2,4,1]",
        "response": "function findCommon(arr1, arr2) {\n    let result = {};\n    for (let i = 0; i < arr1.length; i++) {\n        for (let j = 0; j< arr2.length; j++) {\n            if(arr1[i] === arr2[j]) {\n                result[arr1[i]] = arr2[j];\n            }\n        }\n    }\n    return result;\n}\n\n\nconsole.log(findCommon([1,3,5], [2,4,1]));\n// Output: {1: 1}"
    },
    {
        "instruction": "Create a function in Javascript that validates a user input as a valid email address. ",
        "response": "function validateEmail(email) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}"
    },
    {
        "instruction": "Alter the following python code such that it prints \"Hello, world!\" for x in range(1,10):\n    print(x)",
        "response": "for x in range(1,10):\n    if x == 5:\n        print('Hello, world!')\n    else:\n        print(x)"
    },
    {
        "instruction": "Construct a switch-case statement in JavaScript to print the day of the week. var day_index = 5;",
        "response": "switch (day_index) {\n  case 0:\n    console.log('Monday');\n    break;\n  case 1:\n    console.log('Tuesday');\n    break;\n  case 2:\n    console.log('Wednesday');\n    break;\n  case 3:\n    console.log('Thursday');\n    break;\n  case 4:\n    console.log('Friday');\n    break;\n  case 5:\n    console.log('Saturday');\n    break;\n  case 6:\n    console.log('Sunday');\n    break;\n}"
    },
    {
        "instruction": "Create a boolean expression in JavaScript, which returns false if a variable named \"result\" is an empty string. var result = '';",
        "response": "if (result === '') {\n  var result = false;\n}"
    },
    {
        "instruction": "Generate a properly formatted JSON object in Python to represent the following details: name = John, age = 34 ",
        "response": "{\n  \"name\": \"John\",\n  \"age\": 34\n}"
    },
    {
        "instruction": "Create a function in Python to take two numbers as input and return their sum. ",
        "response": "def add_nums(num1, num2):\n    return num1 + num2"
    },
    {
        "instruction": "Construct a \"try catch\" statement in JavaScript which prints \"Value must be an integer\" if a variable x is not an integer. let x = \"string\";",
        "response": "try {\n  if (typeof( x ) !== 'number') {\n    throw \"Value must be an integer\";\n  }\n}\ncatch(err) {\n  console.log(err);\n}"
    },
    {
        "instruction": "Create an array in JavaScript to store the elements \"apple\", \"orange\", \"banana\", \"mango\". ",
        "response": "var fruits = [\"apple\", \"orange\", \"banana\", \"mango\"];"
    },
    {
        "instruction": "Construct a class in Python named \"Person\" which stores first name and last name in instance variables ",
        "response": "class Person:\n  def __init__(self, first_name, last_name):\n    self.first_name = first_name\n    self.last_name = last_name"
    },
    {
        "instruction": "Generate an \"if else\" statement in JavaScript to check if a variable x is greater than 10. var x = 20;",
        "response": "if (x > 10) {\n  console.log('x is greater than 10');\n} else {\n  console.log('x is not greater than 10');\n}"
    },
    {
        "instruction": "Write a filter function in JavaScript to return elements from an array of strings which start with the letter \"a\". var words = [\"apple\", \"ball\", \"cat\", \"almond\"]",
        "response": "function filterByLetter(arr, letter) {\n  return arr.filter(word => word.startsWith(letter));\n}\n\nconsole.log(filterByLetter(words, 'a')); // [\"apple\", \"almond\"]"
    },
    {
        "instruction": "Write a Python program to convert a string to a list. The string is \"This is a test\". \"This is a test\"",
        "response": "\"\"\"\nWrite a Python program to convert a string to a list.\n\"\"\"\ndef string_to_list(str):\n    return str.split()\n\nif __name__ == '__main__':\n    str = \"This is a test\"\n    print(string_to_list(str))"
    },
    {
        "instruction": "Sort all strings in a list alphabetically, using Python. [\"apple\", \"dog\", \"cat\", \"banana\"]",
        "response": "\"\"\"\nSort all strings in a list alphabetically, using Python.\n\"\"\"\n\n# Initialize the list of strings\nlist_of_strings = [\"apple\", \"dog\", \"cat\", \"banana\"]\n\n# Sort the list alphabetically\nlist_of_strings.sort()\n\n# Print the sorted list\nprint(list_of_strings)"
    },
    {
        "instruction": "From a list of numbers, find the smallest number using Python. [21, 9, 67, 34]",
        "response": "\"\"\"\nFrom a list of numbers, find the smallest number using Python.\n\"\"\"\n\n# Initialize the list of numbers\nlist_of_nums = [21, 9, 67, 34]\n\n# Sort the list in order\nlist_of_nums.sort()\n\n# Print the first element of the sorted list\nprint(list_of_nums[0])"
    },
    {
        "instruction": "Write a JavaScript code snippet to highlight the text 'Welcome' in the following string. const string = \"Welcome to my website!\"",
        "response": "const string = \"Welcome to my website!\";\n\nconst highlightString = (str, highlight) => {\n  const startStringIndex = str.indexOf(highlight);\n  return (\n    str.slice(0, startStringIndex) +\n    \"<span class='highlight'>\" +\n    str.slice(startStringIndex, startStringIndex + highlight.length) +\n    \"</span>\" +\n    str.slice(startStringIndex + highlight.length)\n  );\n};\n\ndocument.body.innerHTML = highlightString(string, \"Welcome\");"
    },
    {
        "instruction": "Write a JavaScript code for the following action: When the user types \"I'm hungry!\" in the text box, the system will show an alert saying \"Go make some food then!\". ",
        "response": "document.getElementById(\"textbox\").addEventListener(\"input\", function(){\n  if (this.value == \"I'm hungry!\") {\n    alert(\"Go make some food then!\");\n  }\n});"
    },
    {
        "instruction": "Given a list of strings, write a Python program to print each individual string in uppercase. string_list = [\"apple\",\"banana\",\"oranges\"]",
        "response": "def print_uppercase(string_list):\n  for string in string_list:\n    print(string.upper())"
    },
    {
        "instruction": "Write code to check if the word 'python' is present in a given string. string = 'I love the programming language Python'",
        "response": "def string_has_python(string):\n  return 'python' in string"
    },
    {
        "instruction": "Change the following variable declaration into Python. int num = 10;",
        "response": "num = 10"
    },
    {
        "instruction": "Use JavaScript to check if a number is an odd number. ",
        "response": "function isOdd(num){\n return num % 2 != 0;\n}"
    },
    {
        "instruction": "Utilizing the regular expression [a-zA-Z0-9]+ construct a javascript script to find all matching patterns from the given string. exampleString",
        "response": "let regex = /[a-zA-Z0-9]+/;\nlet matches = exampleString.match(regex);\nconsole.log(matches);"
    },
    {
        "instruction": "Syntax to declare an array in JavaScript. ",
        "response": "const arrayName = [];"
    },
    {
        "instruction": "Write a JavaScript statement to create a Timer set to 2 minutes. ",
        "response": "let timer = setInterval(function(){}, 120000);"
    },
    {
        "instruction": "Construct a while loop statement to print only even numbers between 0 to 10 in Python. ",
        "response": "i = 0\n\nwhile i <= 10: \n if i % 2 == 0:\n print(i)\n i = i + 1"
    },
    {
        "instruction": "Write a Python script to convert the given list of strings into a comma separated string. [ 'John', 'Julia', 'JeY', 'Jill' ]",
        "response": "list = [ 'John', 'Julia', 'JeY', 'Jill' ]\nprint( ', '.join(list) )"
    },
    {
        "instruction": "Construct a While Loop in JavaScript. ",
        "response": "let i = 0; \nwhile (i < 10) { \n   console.log(i); \n   i++; \n}"
    },
    {
        "instruction": "Write a python program to extract the substring from a string after a specific character string = \"Hello,World!\"\ncharacter = \",\"",
        "response": "string = \"Hello,World!\"\ncharacter = \",\"\nresult = string[string.find(character)+1:]\nprint(result) # World!"
    },
    {
        "instruction": "Generate a JavaScript code snippet to check if a certain element exists in an array arr = [1,2,3,4,5]\nelement = 3",
        "response": "let arr = [1,2,3,4,5];\nlet element = 3;\nlet result = arr.indexOf(element) !== -1;\nconsole.log(result); //true"
    },
    {
        "instruction": "Create a python program to implement a Binary Search in an array arr = [2, 3, 4, 10, 40]\nx = 10",
        "response": "def binarySearch(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = int((low + high)/2)\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binarySearch(arr, x)\nif result != -1:\n    print(\"Element is present at index\",result) \nelse:\n    print(\"Element is not present in array\")"
    },
    {
        "instruction": "Create a JavaScript function to find the second smallest number in an array [5, 10, 15, 20]",
        "response": "const array = [5, 10, 15, 20];\nconst secondSmallest = Math.min(...array.filter(x => x > Math.min(...array))) \n\n// Will return 10"
    },
    {
        "instruction": "Write a Python script to merge two given dictionaries into one dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}",
        "response": "dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}\n\ndict3 = {**dict1, **dict2}\nprint(dict3) # {'a': 6, 'c': 4, 'd': 4, 'b': 2}"
    },
    {
        "instruction": "Write a JavaScript program to create an array of the first 100 Fibonacci numbers. ",
        "response": "let fibonacci_array = [0, 1];\n\nfor (let i = 2; i <= 100; i++) {\n  let next_number = fibonacci_array[i-1] + fibonacci_array[i-2];\n  fibonacci_array.push(next_number);\n}\n\nconsole.log(fibonacci_array);"
    },
    {
        "instruction": "Suggest a way of preserving the order of elements in a JavaScript array using a set data structure. ",
        "response": "A Set data structure can be used for preserving the order of elements in a JavaScript array. To achieve this, the Set can be initialized with an array which contains the elements in the desired order. When adding elements to the Set, they will be added in the same order as they appear in the original array. This ensures the order of elements is preserved."
    },
    {
        "instruction": "Write a JavaScript code snippet that prints the content of a cookie. ",
        "response": "let cookieName = \"cookie\";\nconsole.log(document.cookie.split(';').filter(item => item.trim().startsWith(`${cookieName}=`))[0].split('=')[1]);"
    },
    {
        "instruction": "How can you concatenate two strings in Python? ",
        "response": "# Using the + operator \nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = str1 + str2 \nprint(str3)\n\n# Output: Hi there!\n\n# Using the join() method\nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = \"\".join([str1, str2]) \nprint(str3)\n\n# Output: Hi there!"
    },
    {
        "instruction": "How can you sort a list in decending order in Python? ",
        "response": "my_list = [4, 8, 19, 6, 17, 11]\n\nsorted_list = sorted(my_list, reverse=True)"
    },
    {
        "instruction": "Use JavaScript to generate a random number between 1-100. ",
        "response": "Math.floor(Math.random() * (100 - 1 + 1)) + 1"
    },
    {
        "instruction": "List the primitive data types of the language Python. ",
        "response": "Python data types include integers, floating-point numbers, strings, Booleans, lists, sets, dictionaries, tuples, and None."
    },
    {
        "instruction": "Convert the following code snippet from Python 2 code to Python 3 code. x = raw_input(\"What is your name? \")",
        "response": "x = input(\"What is your name? \")"
    },
    {
        "instruction": "Using JavaScript, create a function to find the longest word in a string. ",
        "response": "function longestWord(str) {\n    let words = str.split(\" \");\n    let longestWordLength = 0;\n    let longestWord = \"\";\n \n    for (let i=0; i < words.length; i++) {\n        if (words[i].length > longestWordLength) {\n            longestWordLength = words[i].length;\n            longestWord = words[i];\n        }\n    }\n    return longestWord;\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array and returns its first item. ",
        "response": "function getFirst(arr) {\n return arr[0];\n}"
    },
    {
        "instruction": "Using Python, write a code snippet to identify the capital of a given country. Country: India",
        "response": "if country == 'India':\n  capital = 'New Delhi'\nprint(capital)"
    },
    {
        "instruction": "Compose a Python code for computing the factorial of a given number. ",
        "response": "def factorial(n): \n\tif n <= 1 : \n\t\treturn 1 \n\telse : \n\t\treturn n * factorial(n-1)"
    },
    {
        "instruction": "Create a script in Python to search a given string for a substring string = \"Hello World!\"\nsubstring = \"llo\"",
        "response": "def searchSubstring(string, substring): \n    results = [] \n    n = len(string) \n    m = len(substring) \n\n    for i in range(n - m + 1): \n        j = 0\n\n        while(j < m): \n            if(string[i + j] != substring[j]): \n                break\n            j += 1\n\n        if j == m: \n            results.append(i)\n  \n    print(results) \n\nstring = \"Hello World!\" \nsubstring = \"llo\"\nsearchSubstring(string, substring)"
    },
    {
        "instruction": "Write a JavaScript to create a new array containing the squared values of all odd numbers in the range (1, 10)? ",
        "response": "let newArray = [];\nfor (let i=1; i<=10; i++) {\n    if (i % 2 !== 0) {\n        newArray.push(i * i);\n    }\n}"
    },
    {
        "instruction": "Write a Python code snippet to display the multiplication table of 5. ",
        "response": "for i in range(1, 11):\n    print(f\"5 * {i} = {5 * i}\")"
    },
    {
        "instruction": "Formulate a loop in Python that prints 7 to 18. ",
        "response": "for i in range(7, 19):\n    print(i)"
    },
    {
        "instruction": "Using a while loop in Python, print numbers from 5 to 19. ",
        "response": "i = 5\nwhile i < 20:\n    print(i)\n    i += 1"
    },
    {
        "instruction": "Construct an if-else statement in Python that swaps the values of two variables. a = 2\nb = 5",
        "response": "if a > b:\n    temp = a\n    a = b\n    b = temp\nelse:\n    temp = a\n    a = b\n    b = temp"
    },
    {
        "instruction": "Compose an if-else block in Python for checking if a string is empty. str1 = \"My String\"\nstr2 = \"\"",
        "response": "if len(str1) > 0:\n    print(\"Not empty\")\nelse:\n    print(\"Empty\")"
    },
    {
        "instruction": "Use Python to print a multiplication table for the numbers from 1 to 10. ",
        "response": "# Print multiplication table\nfor i in range(1, 11):\n    for j in range(1, 11):\n        print('{0} x {1} = {2}'.format(i, j, i*j))\n    print('\\n')"
    },
    {
        "instruction": "Using the given JavaScript object, access the property oldest_child. family = {\n    mother: 'Sabina',\n    father: 'Nasir',\n    children: [\n        {\n        name: 'Ben',\n        age: 12\n        },\n        {\n        name: 'Amy',\n        age: 14\n        }\n    ]\n}",
        "response": "family.children[1].name;"
    },
    {
        "instruction": "Write a Python script to display the numbers from 1 to 10 in ascending order. ",
        "response": "for num in range(1, 11):\n    print(num)"
    },
    {
        "instruction": "Given the following array, write a JavaScript code to filter out the elements which are greater than 10. arr = [2, 3, 5, 8, 10, 12, 15, 18];",
        "response": "var filteredArray = arr.filter(function(num) {\n  return num > 10;\n});\n\nconsole.log(filteredArray); // [12, 15, 18]"
    },
    {
        "instruction": "Create an object in JavaScript that simulates a bank account. ",
        "response": "class BankAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n\n  withdraw(amount) {\n    if(amount > this.balance) {\n      console.log('Insufficient funds');\n    } else {\n      this.balance -= amount;\n    }\n  }\n}"
    },
    {
        "instruction": "Create a Javascript function that will loop through an array and push each item into a new array. ",
        "response": "function loopThroughArray(arr) {\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++) {\n        newArr.push(arr[i]);\n    }\n    return newArr;\n}"
    },
    {
        "instruction": "How can one parse a JSON string in JavaScript? ",
        "response": "The JSON.parse() method can be used to parse a JSON string in JavaScript. The JSON.parse() method takes a JSON string and parses it into an object. For example, the following code parses the string “{ “name”: “John” }” into an object:\n\nlet jsonString = '{ \"name\": \"John\" }';\nlet parsedObject = JSON.parse(jsonString);\nconsole.log(parsedObject.name); // outputs \"John\""
    },
    {
        "instruction": "Write a script in JavaScript to perform a bank transaction. ",
        "response": "function performTransaction(accountNum, amount) {\n    // Perform validation\n    if (amount < 0) {\n        console.log('Invalid amount');\n        return;\n    }\n    \n    // Retrieve account information\n    let accountInfo = getAccountInfo(accountNum);\n    if (!accountInfo) {\n        console.log('Account not found');\n        return;\n    }\n  \n    // Perform transaction\n    let newBalance = accountInfo.balance + amount;\n    if (newBalance < 0) {\n        console.log('Insufficient funds');\n        return;\n    }\n  \n    // Update account\n    accountInfo.balance = newBalance;\n    updateAccountInfo(accountNum, accountInfo);\n  \n    console.log('Transaction successful');\n}"
    },
    {
        "instruction": "Create a function in Python that takes two list of strings as parameters and returns a third list of strings which are the elements common in both lists. list1 = [\"apple\", \"orange\", \"banana\", \"cherry\"] \nlist2 = [\"apple\", \"grapes\", \"banana\", \"watermelon\"]",
        "response": "def common(list1, list2): \n    ans_list = [] \n    \n    for i in list1: \n        for j in list2: \n            if i == j: \n                ans_list.append(i) \n    return ans_list \n  \nif __name__ == \"__main__\": \n    list1 = [\"apple\", \"orange\", \"banana\", \"cherry\"] \n    list2 = [\"apple\", \"grapes\", \"banana\", \"watermelon\"]\n    print(common(list1, list2)) # ['apple', 'banana']"
    },
    {
        "instruction": "Write a Python program that takes two numbers as input and outputs the greatest common divisor (GCD) between them. 18 9",
        "response": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nx = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\n\nprint(\"The GCD of {} and {} is {}\".format(x, y, gcd(x, y)))"
    },
    {
        "instruction": "Write a JavaScript function to check if all elements of an array of numbers are distinct. [1,2,3,4,5]",
        "response": "function areDistinct(arr){\n    for(let i=0; i<arr.length-1; i++){\n        for(let j=i+1; j<arr.length; j++){\n            if(arr[i]===arr[j])\n                return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Create a JavaScript function to format a date object into day, month, and year. ",
        "response": "function formatDate(dateObj) {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  const monthName = ['January','February','March','April','May','June','July','August','September','October','November','December']\n  const day = days[dateObj.getDay()]\n  const date = dateObj.getDate()\n  const month = monthName[dateObj.getMonth()]\n  const year = dateObj.getFullYear()\n  return `${day}, ${date} ${month} ${year}`\n}"
    },
    {
        "instruction": "Create a JavaScript program that formats currency values. ",
        "response": "function formatCurrency(value) {\n  return '$' + value.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}"
    },
    {
        "instruction": "Implement a Python function to check if an integer is even or odd. ",
        "response": "def is_even(num):\n  return num % 2 == 0"
    },
    {
        "instruction": "Create a JavaScript program that takes two numbers and returns the sum of their squares. ",
        "response": "function sumOfSquares(a, b) {\n  return a*a + b*b;\n}"
    },
    {
        "instruction": "Implement a function in Python that takes two parameters, an array and a number, and sorts the array in ascending order by the number. [5, 29, 4, 7, 28], 3",
        "response": "def sort_array_by_nth_parameter(arr, n):\n  return sorted(arr, key=lambda x: x[n])\n\nnumbers = [5, 29, 4, 7, 28]\nsorted_numbers = sort_array_by_nth_parameter(numbers, 3)\nprint(sorted_numbers)"
    },
    {
        "instruction": "Rewrite the following function in JavaScript. def sum_of_two_numbers(a, b):\n  return a + b",
        "response": "function sumOfTwoNumbers(a, b) {\n  return a + b;\n}"
    },
    {
        "instruction": "Create a class in Python which contains three attributes and a method. ",
        "response": "class MyClass:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def get_values(self):\n        return self.x, self.y, self.z"
    },
    {
        "instruction": "Define a tuple in Python. ",
        "response": "my_tuple = (1, 2, 3)  # Output: (1, 2, 3)"
    },
    {
        "instruction": "Suggest a JavaScript code to show all the console logs from line 8 to 16. ",
        "response": "for (var i = 8; i <= 16; i++) {\n    console.log(i);\n}"
    },
    {
        "instruction": "Design a JavaScript class to perform a specific operation on a given matrix. A matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "response": "class MatrixOperation {\n  constructor(matrix) {\n    this.matrix = matrix;\n  }\n\n  // Implement the operation here\n  // e.g. Matrix multiplication\n}\n\nconst matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst mOp = new MatrixOperation(matrix);"
    },
    {
        "instruction": "Create a script in Python to sort a given array. [1, 5, 4, 3, 6, 2]",
        "response": "sorted_array = [1, 2, 3, 4, 5, 6]"
    },
    {
        "instruction": "Write JavaScript code to print the Fibonacci sequence. ",
        "response": "function printFibonacci(num) {\n    let a = 0;\n    let b = 1;\n    console.log(a);\n    console.log(b);\n  \n    for (let i = 3; i <= num; i++) {\n      const c = a + b;\n      a = b;\n      b = c;\n      console.log(c);\n    }\n}\n\nprintFibonacci(10);"
    },
    {
        "instruction": "Write a code to create Fibonacci sequence in Python ",
        "response": "def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2)"
    },
    {
        "instruction": "Convert the following Java code into JavaScript. public static int max(int[] array){\n    int max = array[0];\n    for(int i=1; i<array.length; i++){\n        if(array[i] > max){\n            max = array[i];\n        }\n    }\n    return max;\n}",
        "response": "function max(arr) {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}"
    },
    {
        "instruction": "Develop a Python program to calculate the area of a triangle given its three sides. ",
        "response": "# Function to calculate area of triangle  \ndef calculateArea(a, b, c): \n     \n    # Calculating the semi-perimeter of triangle  \n    s = (a + b + c) / 2\n  \n    # Calculate the area  \n    area = (s*(s - a)*(s - b)*(s - c)) ** 0.5    \n    \n    return area \n\n# Driver code  \na = 5\nb = 6\nc = 7\nprint(\"Area of triangle is %0.2f\" %calculateArea(a, b, c))"
    },
    {
        "instruction": "Develop JavaScript code to find the nth Fibonacci number. ",
        "response": "function fibonacci(n) {\n  if (n <= 1) return n;\n\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nlet result = fibonacci(10);\nconsole.log(result);"
    },
    {
        "instruction": "Write a Lambda function in Python to generate random numbers in the range of 10 to 50. ",
        "response": "import random\ndef random_num():\n    return random.randint(10,50)"
    },
    {
        "instruction": "Write a script in JavaScript to calculate the average temperature from a given array of temperatures. ",
        "response": "function calculateAverage(temps) {\n    let total = 0;\n    temps.forEach(temp => {\n        total += temp;\n    });\n    return total / temps.length;\n}"
    },
    {
        "instruction": "Construct an object in JavaScript to hold employee data with the fields `name` and `position`. John, Manager",
        "response": "var employee = {\n  name: 'John',\n  position: 'Manager'\n};"
    },
    {
        "instruction": "Create a Python program to generate a random 8-character alphanumeric string. The string should contain at least one lowercase letter, one uppercase letter, one digit and one special character. ",
        "response": "import string\nimport random\n\ndef generate_random_string():\n chars = string.ascii_letters + string.digits + string.punctuation\n string_length = 8\n random_string = ''.join(random.choice(chars) for _ in range(string_length))\n return random_string"
    },
    {
        "instruction": "Given a list of strings, write a Python program to remove all duplicates from the list. [“cat”, “dog”, “cat”, “parrot”, “goat”, “dog”]",
        "response": "def remove_duplicates(list):\n res = [] \n for str in list:\n if str not in res:\n res.append(str)\n return res"
    },
    {
        "instruction": "Write a Python program to create a list containing the squares of numbers between 1 and 50. ",
        "response": "def squares_list():\n squares = []\n for i in range(1, 51):\n squares.append(i**2)\n return squares"
    },
    {
        "instruction": "Given an array of numbers, write a Python program to find the second highest element in the array. [1, 3, 5, 4, 7, 9]",
        "response": "def second_highest(arr):\n arr.sort()\n return arr[-2]"
    },
    {
        "instruction": "Create a Python program to convert an input string to Morse code. ",
        "response": "def string_to_morse(user_string):\n morse_code = \"\"\n for ch in user_string:\n if ch.lower() in Morse.alpha:\n morse_code += Morse.alpha[ch.lower()] + \" \"\n return morse_code"
    },
    {
        "instruction": "Create an array with 5 elements in Python. ",
        "response": "arr = [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Construct correctly a for-loop in Python that iterates 6 times from 0 to 5 ",
        "response": "for i in range(6):\n    print(i)"
    },
    {
        "instruction": "Write a Python expression to compute the GCD (Greatest Common Divisor) of two numbers. a = 10, b = 15",
        "response": "def compute_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    \n    return a"
    },
    {
        "instruction": "Write a Python expression to generate a list containing numbers from 0 to 12 (not including 12). ",
        "response": "[x for x in range(0, 12)]"
    },
    {
        "instruction": "Write a Python expression to compute the exponential of a given number. x = 3",
        "response": "import math\nmath.exp(x)"
    },
    {
        "instruction": "Write a Python program to truncate a string after a given number of characters. string = \"Hello World!\", limit = 6",
        "response": "def truncate_string(string, limit):\n    return string[:limit]"
    },
    {
        "instruction": "Write a Python program to compute the summation of a list of numbers. list = [1, 2, 3, 4, 5]",
        "response": "def compute_summation(list):\n    result = 0\n    for i in list:\n        result += i\n    return result"
    },
    {
        "instruction": "Give an example of inheritance in Python ",
        "response": "class Animal:\n  def __init__(self, name):\n    self.name = name\n   \n  def eat(self):\n    print(f\"{self.name} is eating\")\n\nclass Dog(Animal):\n  def bark(self):\n    print(f\"{self.name} is barking\")\n\ndog = Dog(\"Fido\")\ndog.eat()\ndog.bark()\n\n# Output:\n# Fido is eating\n# Fido is barking"
    },
    {
        "instruction": "Construct a Python dictionary with the countries and their total population. countries = [\"USA\", \"Canada\", \"India\", \"China\", \"Japan\"]",
        "response": "population = {\"USA\": 331, \n              \"Canada\": 37, \n              \"India\": 1351, \n              \"China\": 1414, \n              \"Japan\": 126}"
    },
    {
        "instruction": "Write a Python program to collect the data from the form below. Name: John \nEmail: john@email.com \nPhone: (999)-999-9999",
        "response": "name = input(\"Name: \")\nemail = input(\"Email: \")\nphone = input(\"Phone: \")\n\ndata = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone\n}"
    },
    {
        "instruction": "Write a piece of code in Python that prints a multiplication table ",
        "response": "def multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(\"{}x{}={}\".format(i, j, i*j))\n        print(\"\")"
    },
    {
        "instruction": "Create a JavaScript array and add the following items: \"dog\", \"cat\", \"mouse\", \"bird\". ",
        "response": "let animals = [\"dog\", \"cat\", \"mouse\", \"bird\"];"
    },
    {
        "instruction": "Design a GUI using JavaScript for a calculator application. ",
        "response": "<div class=\"calculator\"> \n  <input type=\"text\" placeholder=\"0\" readonly>\n  \n  <div class=\"buttons\">\n    <button>1</button>\n    <button>2</button>\n    <button>3</button>\n    <button>4</button>\n    <button>5</button>\n    <button>6</button>\n    <button>7</button>\n    <button>8</button>\n    <button>9</button>\n    <button>0</button>\n    <button>+</button>\n    <button>-</button>\n    <button>*</button>\n    <button>/</button>\n    <button>C</button>\n    <button>=</button>\n  </div>\n</div>"
    },
    {
        "instruction": "How can you detect the version of Python installed? ",
        "response": "You can detect the version of Python installed by running `python -V` in the command line. This will print the version of Python installed. Alternatively, you can execute `import sys; print(sys.version)` in the Python shell."
    },
    {
        "instruction": "How can you delete an element from a tuple in Python? ",
        "response": "You cannot delete an element from a tuple in Python because tuples are immutable. However, you can create a new tuple with all elements except the one you want to delete. For example, if you want to delete the element at index 3, you can create a new tuple by slicing the tuple from 0 to 3 and then adding the remaining elements after index 3. For example:\n\ntup = (1, 2, 3, 4, 5)\ntup = tup[:3] + tup[3+1:]  # Output -> (1, 2, 3, 5)"
    },
    {
        "instruction": "How can you find all the subsets of a set in Python? ",
        "response": "In Python, you can use the itertools.combinations module to find all the subsets of a set. The syntax is as follows: \n\nimport itertools\nlist(itertools.combinations(<list or set>, <length of subset>)) \n\nFor example, to find all the subsets of a set [1,2,3] of length 2, you can run: list(itertools.combinations([1,2,3], 2)) // Output -> [(1,2), (1,3), (2,3)]"
    },
    {
        "instruction": "Write a Python function to remove the whitespace from the beginning and end of a string myStr = \"   hello   \"",
        "response": "def trim_whitespace(myStr):\n  myStr = myStr.strip()\n  return myStr\n\nprint(trim_whitespace(myStr))"
    },
    {
        "instruction": "Write a Python program to make a dictionary that contains a number as a key, and its cube as the corresponding value. ",
        "response": "def cube_dictionary(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i**3\n    return d"
    },
    {
        "instruction": "Design a function in JavaScript to find the sum of the first n numbers. ",
        "response": "function sum(n) \n{ \n    s = 0; \n  \n    // Iterate though natural \n    // numbers using loop \n    for (i = 1; i <= n; i++) \n        s += i; \n  \n    return s; \n}"
    },
    {
        "instruction": "Using the given array, create a JavaScript function that returns the sum of all element in the array. [3, 5, 2, 6, 4, 4]",
        "response": "// Function to find the sum of all elements in an array\n\nfunction sumElements(arr){\n  let sum = 0;\n  arr.forEach(element => {\n    sum += element;\n  });\n  return sum;\n}\n\nlet arr = [3, 5, 2, 6, 4, 4];\nconsole.log(sumElements(arr)); // Output: 24"
    },
    {
        "instruction": "Create a function in JavaScript that takes in two numbers and returns the difference between them. ",
        "response": "function diff(a, b) {\n  return Math.abs(a - b);\n}"
    },
    {
        "instruction": "Write a Python code that prints the longest continuous increasing sequence of integers within a given list. [1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9]",
        "response": "def longest_continuous_increasing(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\n  for i in range(1, n): \n    if arr[i] > arr[i-1]: \n      curr_len += 1\n    else: \n      # update current length of the increasing sequence\n      max_len = max(curr_len, max_len) \n      curr_len = 1\n  return max(max_len, curr_len) \n \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9] \nprint(longest_continuous_increasing(arr)) # Output: 9"
    },
    {
        "instruction": "Create a validation function in Python 3 that checks if the value is an integer ",
        "response": "def validate_integer(val):\n    if isinstance(val, int):\n        return True\n    else: \n        return False"
    },
    {
        "instruction": "Using the Python 3 language, access the second character of the string. string = \"Hello!\"",
        "response": "print(string[1])"
    },
    {
        "instruction": "Using the Python language, sort the following list in ascending order. mylist = [5, 2, 3, 1, 4]",
        "response": "mylist.sort() \n# mylist is now [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Using list comprehension, write a Python code to get a list of all possible subsets of the list [1, 2, 3] [1, 2, 3]",
        "response": "subsets = [[x for x in [1, 2, 3]] for y in range(0, 2**len([1, 2, 3]))]"
    },
    {
        "instruction": "Filter the following list of integer using python, so that only the numbers divisible by 2 are left [1, 2, 3, 4, 5, 6, 7, 8]",
        "response": "def filter_list(list): \n    new_list = []\n    for item in list:\n        if item % 2 == 0:\n            new_list.append(item)\n    return new_list \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(filter_list(list))\n\n# Output: [2, 4, 6, 8]"
    },
    {
        "instruction": "Create a JavaScript function that takes two strings as parameters and checks if the first one contains the second one. \"this string has many letters\", \"many\"",
        "response": "function containsSubstring(str1, str2) {\n    if (str1.indexOf(str2) !== -1) {\n        return true;\n    }\n    return false;\n}"
    },
    {
        "instruction": "Write a JavaScript code to read the content of a given URL. ",
        "response": "function readURL(url) {\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n        if (this.readyState == 4 && this.status == 200) {\n            document.getElementById(\"urlcontent\").innerHTML = this.responseText;\n        }\n    };\n    xhttp.open(\"GET\", url, true);\n    xhttp.send();\n}"
    },
    {
        "instruction": "Create a dictionary in Python to store the frequency of characters in a string. string = \"Hello World!\"",
        "response": "# Empty dictionary\nfrequencies = {}\n\n# Iterate over each character in the string\nfor char in string:\n    # Check if the character exists as a key in the dictionary\n    if char in frequencies:\n        # Increase the count by 1 if it exists\n        frequencies[char] += 1\n    else:\n        # Set the count to 1 for a new character\n        frequencies[char] = 1"
    },
    {
        "instruction": "Write a JavaScript program to sort an array of strings according to the length of each string. words = ['Quick', 'Brown', 'Fox', 'Jumps']",
        "response": "words.sort((a,b) => a.length - b.length);\n\nconsole.log(words);"
    },
    {
        "instruction": "Develop a logistic regression model using Python to predict the outcome of a binary classification dataset. ",
        "response": "import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n \n# Load the dataset\ndf = pd.read_csv(\"data.csv\")\n \n# Split the data into features (X) and targets (y)\nX= df.drop(\"target\",axis=1)\ny = df[\"target\"]\n \n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\n \n# Initialize and fit the logistic regression model\nclf = LogisticRegression().fit(X_train, y_train)\n \n# Make predictions on the test set\npredictions = clf.predict(X_test)"
    },
    {
        "instruction": "Given an array of numbers, write a Python function to remove even numbers from the array. [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def remove_even_numbers(arr):\n    return [x for x in arr if x % 2 != 0]"
    },
    {
        "instruction": "Write a JavaScript statement to create a new object, Person, with the fields \"name\", \"age\" and \"city\". ",
        "response": "let Person = {\n  name: '',\n  age: 0,\n  city: ''\n };"
    },
    {
        "instruction": "Write a Python function to create an empty dictionary. ",
        "response": "def create_empty_dict():\n  return {}"
    },
    {
        "instruction": "Write a script to filter out strings with more than five characters from a list of strings. arr = [\"code\",\"programming\",\"language\",\"Python\",\"Loops\",\"Conditions\"]",
        "response": "def filter_strings(arr):\n filtered_arr = [s for s in arr if len(s) <= 5]\n return filtered_arr\n  \nprint(filter_strings(arr)) # Prints [\"code\", \"Loops\"]"
    },
    {
        "instruction": "Suggest a method in Python to remove any whitespaces from a given string. ",
        "response": "The easiest way to remove whitespaces from a string in Python is to use the replace() method. This method takes two arguments, the string to be replaced and the string to replace it with. To remove all existing whitespace, use the string ' ' as the replace argument. For example, given the string \"This is my string\", the following code would remove all whitespace from the string:\n\nstring = \"This is my string\"\nstring = string.replace(' ', '')"
    },
    {
        "instruction": "Explain the basic syntax for a for loop in JavaScript. ",
        "response": "The basic syntax for a for loop in JavaScript is as follows: for (initialization; condition; iteration). The initialization statement is run once at the beginning of the loop, and typically initializes one or more loop variables, which are used to track the progress of the loop. The condition statement is used to check the result of the initialization statement; if the result is true, the loop will execute. The iteration statement is run each time the loop runs; it modifies the loop variable(s) so that the loop can terminate when the specified condition is met. Once the loop has finished executing, program execution continues after the for loop statement."
    },
    {
        "instruction": "How can we remove duplicates from an array in JavaScript? ",
        "response": "One of the ways to remove duplicates from an array in JavaScript is to use the Set object. The Set object stores only unique values, so by converting the array to a Set and then back to an array, any duplicates will have been removed. We can use the built-in Array.from() method to convert the Set back to an array. For example, given the array [1, 2, 3, 2], the following code will create a new array with all duplicates removed:\n\narr = [1, 2, 3, 2]\narr = Array.from(new Set(arr)) // [1, 2, 3]"
    },
    {
        "instruction": "Use JavaScript to find the area of a circle with a radius of 7. ",
        "response": "const r = 7;\nconst area = Math.PI * r ^ 2;\nconsole.log(area); // 153.93804002589985"
    },
    {
        "instruction": "How do you extract all the unique words from a string in Python? ",
        "response": "def get_unique_words(input_string):\n    words = input_string.split()\n    unique_words = set(words)\n    return list(unique_words) # Retruns a list of all unique words present in the string."
    },
    {
        "instruction": "What is a lambda expression in Python? ",
        "response": "A lambda expression is an anonymous function in Python, which can take any number of arguments and return any type of expression or value. Lambda functions are mainly used for functional programming and can be used wherever normal functions can be used, such as in the filter, map, and reduce functions."
    },
    {
        "instruction": "How do you implement depth-first search in Python? ",
        "response": "def depth_first_search(graph, start):\n    explored = [] # List of already explored nodes\n    stack = [start] # Stack of nodes to explore\n\n    while stack:\n        node = stack.pop() # Pop the next node from stack\n        if node not in explored:\n            explored.append(node) # Add the node to explored\n            neighbors = graph[node] # List of neighbors of node\n            for neighbor in neighbors:\n                stack.append(neighbor) # Add neighbors to stack\n    \n    return explored"
    },
    {
        "instruction": "Write a sliding window algorithm in JavaScript to collect all the subarrays with size k from an array of size n. let input =[1, 2, 3, 4, 5, 6, 7, 8];\nlet K=3",
        "response": "function slideWindow(input, k){\n  let subArrays=[]; \n  let start=0, end=k-1; \n  while(end<input.length){\n\n    // Slice an array of size k from input  \n    let subArr=input.slice(start, end+1); \n    subArrays.push(subArr);\n    start++; \n    end++; \n  }\n  return subArrays; \n} \nlet res = slideWindow(input, k); \nconsole.log(res);\n// Output: [ [ 1, 2, 3 ], [ 2, 3, 4 ], [ 3, 4, 5 ], [ 4, 5, 6 ], [ 5, 6, 7 ], [ 6, 7, 8 ] ]"
    },
    {
        "instruction": "Write a Python program to create a dictionary with values being doubled for every key. {'a':4, 'b':7}",
        "response": "my_dict = {'a': 4, 'b': 7} \ndouble_dict = {k : 2*v for (k,v) in my_dict.items()} \nprint(double_dict)"
    },
    {
        "instruction": "Given an array of numbers, write a prototype JavaScript function to find the average value of all numbers in the array [6, 5, 8, 10]",
        "response": "function findAverage(numbers) {\n  let sum = 0;\n  for (number of numbers) {\n    sum += number;\n  }\n  return sum / numbers.length;\n}"
    },
    {
        "instruction": "Write a JavaScript function to modify given list and convert all elements to lowercase. ['Hello', 'WoRld', '!']",
        "response": "function toLowerCase(list) {\n  return list.map(el => el.toLowerCase());\n}\n\ntoLowerCase(['Hello', 'WoRld', '!']); // => [\"hello\", \"world\", \"!\"]"
    },
    {
        "instruction": "Using the Python requests library, implement a call to the given URL and print the response. URL: http://example.com",
        "response": "import requests\n\nresp = requests.get('http://example.com')\nprint(resp.text)"
    },
    {
        "instruction": "Sum the numbers from 1 to 10 using a for loop in Python. ",
        "response": "total = 0\nfor i in range(1, 11):\n  total += i\n\nprint(total)"
    },
    {
        "instruction": "Write a function in Python that accepts a list of numbers and returns a list of the squares of the numbers. ",
        "response": "def power_list(numbers):\n  return [num**2 for num in numbers]"
    },
    {
        "instruction": "Calculate the number of minutes in 3 hours using Python. ",
        "response": "minutes = 3 * 60\nprint(minutes)"
    },
    {
        "instruction": "Create a JavaScript object called 'person' that contains the following properties: name, age, gender, and address. ",
        "response": "let person = {\nname: \"John Doe\",\nage: 32, \ngender: \"Male\", \naddress: \"123 Street Street, City, State\" \n};"
    },
    {
        "instruction": "Write a function in Python to print out the most common words in a given text. This is a test text. It can be used to test a function for the most common words.",
        "response": "def most_common(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\n    sorted_words = sorted(results.items(), key=lambda kv: kv[1], reverse=True)\n    for word, count in sorted_words[:10]:\n        print(word, count)"
    },
    {
        "instruction": "Convert the given JavaScript object to an array. { \"name\": \"John\", \"age\": 30, \"city\": \"New York\" }",
        "response": "let obj = { \"name\": \"John\", \"age\": 30, \"city\": \"New York\" };\nlet arr = Object.entries(obj);  // [ ['name','John'], ['age',30], ['city','New York'] ]"
    },
    {
        "instruction": "Find the difference between the objects in the following JavaScript code. ",
        "response": "The difference between the objects in the JavaScript code is that the first object is created using the object literal syntax where key-value pairs are declared directly, while the second object is created using the new keyword which calls a constructor to create an object and assign key-value pairs to it."
    },
    {
        "instruction": "Create a program in python that takes a number as input and checks if it is a prime number 5",
        "response": "def is_prime(num):\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if (num % i == 0):\n                return False\n    return True\n\nis_prime(5)\n# output: True"
    },
    {
        "instruction": "Use the regex module in python to remove all punctuation in a given string. \"Hello, world!\"",
        "response": "import re\n\ndef remove_punc(string):\n    punc_pattern = re.compile('[^\\w\\s]')\n    return punc_pattern.sub('', string)\n\nremove_punc(\"Hello, world!\")\n# output: 'Hello world'"
    },
    {
        "instruction": "Use the collections module in python to return the most common phrase from a list of strings. [ \"hello world\", \"hello\", \"hello world again\" ]",
        "response": "from collections import Counter\n\ndef most_common_phrase(string_list):\n    c = Counter(string_list)\n    return c.most_common(1)[0][0]\n\nmost_common_phrase([\"hello world\", \"hello\", \"hello world again\"])\n# output: 'hello world'"
    },
    {
        "instruction": "Create a program in python to simulate a game of rock, paper, scissors. ",
        "response": "from random import randint \n\ndef rock_paper_scissors():\n    print(\"rock, paper, scissors!\")\n    player = input(\"Your input: \")\n    rand_num = randint(0,2)\n    if rand_num == 0:\n        computer = \"rock\"\n    elif rand_num == 1:\n        computer = \"paper\"\n    else:\n        computer = \"scissors\" \n\n    print(\"The computer plays: \" + computer)\n    if player == computer:\n        print(\"It's a tie!\")\n    elif player == \"rock\":\n        if computer == \"paper\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"paper\":\n        if computer == \"scissors\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"scissors\":\n        if computer == \"rock\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    else:\n        print(\"Invalid input! You have to choose between rock, paper or scissors\")\n\nrock_paper_scissors()"
    },
    {
        "instruction": "Edit the existing JavaScript code to make it pass Eslint. var foo = \"foo\"\nif (foo) {\n    console.log(\"foo is true\")\n}",
        "response": "var foo = \"foo\";\nif (foo) {\n    console.log(\"foo is true\");\n}"
    },
    {
        "instruction": "Create a 3D scatterplot in Python to visualize 3 different datasets. ",
        "response": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nx1 = np.array([1,2,3,4,5])\ny1 = np.array([2,3,4,5,6])\nz1 = np.array([3,4,5,6,7])\n\nx2 = np.array([10,11,12,13,14])\ny2 = np.array([20,21,22,23,24])\nz2 = np.array([40,41,42,43,44])\n\nx3 = np.array([100,200,300,400,500])\ny3 = np.array([200,400,600,800,1000])\nz3 = np.array([1,2,3,4,5])\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x1, y1, z1, c='r', marker='o', label='dataset1')\nax.scatter(x2, y2, z2, c='y', marker='^', label='dataset2')\nax.scatter(x3, y3, z3, c='g', marker='d', label='dataset3')\nax.legend()\n\nplt.show()"
    },
    {
        "instruction": "Create generic functions for a for-each loop in JavaScript. ",
        "response": "// Declare a function that accepts 2 arguments \nfunction forEach(arr,func) {\n    // Check to see if input is valid\n    if(!Array.isArray(arr)) \n        return console.log('Not a valid array')\n    \n    // Iterate through array and apply callback func\n    for(let i =0; i < arr.length; i++) {\n        func.call(null,arr[i],i,arr)\n    }\n}\n       \n// Call the function to check\nlet arr = [1,2,3,4,5]\n\nforEach(arr, (val, index, array) => {\n    console.log(val)\n    console.log(index)\n    console.log(array)\n})"
    },
    {
        "instruction": "Construct a loop in Python to invert the order of a string. string = \"Hello World!\"",
        "response": "string = \"Hello World!\"\ninverted_string = \"\"\nfor char in string:\n    inverted_string = char + inverted_string\n\nprint(inverted_string) # Output: \"!dlroW olleH\""
    },
    {
        "instruction": "Find the volume of a 3D cube in JavaScript. length = 10",
        "response": "let length = 10;\nlet volume = length * length * length;\nconsole.log(volume); // Output: 1000"
    },
    {
        "instruction": "Write a function in Python to generate a list containing the sum of corresponding elements given two lists. list1 = [9, 4, 8]\nlist2 = [1, 8, 5]",
        "response": "list1 = [9, 4, 8]\nlist2 = [1, 8, 5]\ndef add_corresponding_elements(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\nprint(add_corresponding_elements(list1, list2)) # Output: [10, 12, 13]"
    },
    {
        "instruction": "Create a function in Python that shuffles the elements of an input list. arr = [1, 4, 5, 8, 9, 2]",
        "response": "import random \n\narr = [1, 4, 5, 8, 9, 2]\n\ndef randomize_list(arr): \n    random.shuffle(arr) \n    return arr \n\nprint(randomize_list(arr)) # Output: [9, 1, 2, 4, 5, 8]"
    },
    {
        "instruction": "Construct a regular expression in JavaScript to check if a given string starts with A and ends with Z. ",
        "response": "let regex = /^A.*Z$/;\nconsole.log(regex.test(\"ABDZ\")); // Output: true"
    },
    {
        "instruction": "Design a function in Python to find all the elements in an array that are divisible by 3. arr = [3, 8, 15, 20, 7]",
        "response": "arr = [3, 8, 15, 20, 7]\n\ndef divisible_by_3(arr):\n    result = []\n    for element in arr:\n        if element % 3 == 0:\n            result.append(element)\n    return result\n\nprint(divisible_by_3(arr)) # Output: [3, 15, 20]"
    },
    {
        "instruction": "Generate a regular expression in JavaScript to check if a string contains only alphabets. ",
        "response": "let regex = /^[a-zA-Z]+$/;\nconsole.log(regex.test(\"hello\")); // Output: true"
    },
    {
        "instruction": "Write Python code to replace all the vowels with underscore. string = \"Hello World!\"",
        "response": "string = \"Hello World!\"\n\nvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\ndef replace_vowels_with_underscore(string):\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"_\"\n        else:\n            result += char\n    return result\n\nprint(replace_vowels_with_underscore(string)) # Output: \"H_ll_ W_rld!\""
    },
    {
        "instruction": "Write a function in JavaScript that takes a string as a parameter and reverses it. ",
        "response": "function reverseString(str) {\n  let reversedStr = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedStr += str.charAt(i);\n  }\n  return reversedStr;\n}"
    },
    {
        "instruction": "Given a list of numbers, write a Python code to replace negative numbers with 0 in the list. data = [-4, -2, 5, 8, -1, 0]",
        "response": "data = [0, 0, 5, 8, 0, 0]\n\nresult = [0 if ele < 0 else ele for ele in data] # List comprehension"
    },
    {
        "instruction": "Create a simple Python program that prints the characters of a string in reverse order. String to be printed: \"Hello\"",
        "response": "string = \"Hello\" \n\nrevString = \"\" \nfor i in range(len(string)-1,-1,-1): \n\trevString = revString + string[i] \n  \nprint(revString)"
    },
    {
        "instruction": "Create an array of 10 people in Python. ",
        "response": "people = [\"John\", \"Mia\", \"Nick\", \"Sarah\", \"Emma\", \"Alex\", \"Jayden\", \"Olivia\", \"Lucas\", \"Ava\"]"
    },
    {
        "instruction": "Rewrite the following code snippet to an equivalent code in Python. int i = 0;\nwhile (i < 10)\n{\n   System.out.println(i);\n   i++;\n}",
        "response": "i = 0\nwhile i < 10:\n    print(i)\n    i += 1"
    },
    {
        "instruction": "Create a JSON object in JavaScript. ",
        "response": "const myObject = { \n  \"name\": \"John Doe\", \n  \"age\": 25, \n  \"languages\": [\"English\",\"Spanish\"]\n}"
    },
    {
        "instruction": "Write a JavaScript code snippet to calculate percentage of an input number. number = 50",
        "response": "number = 50\npercentage = (number/100)*100;\nconsole.log(percentage + '%');"
    },
    {
        "instruction": "Format the following list of strings according to the desired output. input_strings = [\"Hello\", \"world\", \"in\", \"Python\"]",
        "response": "input_strings = [\"Hello\", \"world\", \"in\", \"Python\"]\n\noutput_string = ' '.join(input_strings)\noutput_string = output_string.capitalize() + '!'\nprint(output_string) \n# Output: Hello world in python!"
    },
    {
        "instruction": "Write a Python for loop to produces the following output: ",
        "response": "for i in range(1, 11):\n    print(f\"{i}x{i} = {i*i}\")\n\n// Output:\n1x1 = 1\n2x2 = 4\n3x3 = 9\n4x4 = 16\n5x5 = 25\n6x6 = 36\n7x7 = 49\n8x8 = 64\n9x9 = 81\n10x10 = 100"
    },
    {
        "instruction": "Write a Python program to find the number of days in a month specified by the user. Month: February",
        "response": "days = 28\n\nif month == 'February':\n    print(days)\nelse:\n    print('Invalid Month')"
    },
    {
        "instruction": "Write a Python script to return the index of a specific value from a given list. List: [1,2,3,4,5]\nValue: 4",
        "response": "list = [1,2,3,4,5]\nvalue = 4\n\nindex_value = list.index(value)\nprint(index_value) # 3"
    },
    {
        "instruction": "Write an API call in JavaScript to post a comment to a blog post. var url = 'https://example.com/api/comments';",
        "response": "fetch(url, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n        postId: '123',\n        author: 'John Doe',\n        comment: 'This is a comment!'\n    })\n});"
    },
    {
        "instruction": "Create a for-loop in Python that iterates through a list of numbers and prints out only the numbers in the list that are divisible by 5. myList = [10,11,20,21,30,31,40]",
        "response": "for i in myList:\n    if i % 5 == 0:\n        print(i)"
    },
    {
        "instruction": "Write an HTML page that displays a Javascript alert when a button is clicked. ",
        "response": "<html>\n  <head>\n    <!-- Include the script -->\n    <script src=\"alert.js\"></script>\n  </head>\n  <body>\n    <button id=\"btnAlert\" onclick=\"alertFunction()\">Alert</button>\n  </body>\n</html>\n\n// alert.js\n\nfunction alertFunction() {\n  alert(\"This is an alert!\");\n}"
    },
    {
        "instruction": "Write a Python program to display even numbers between two intervals. ",
        "response": "def print_even_numbers_in_range(start, end):\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            print(i)\n\nprint_even_numbers_in_range(2, 10)"
    },
    {
        "instruction": "Given a list of words, write a Python program to find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome. words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]",
        "response": "def find_palindrome_pairs(words): \n    res = [] \n    for i in range(len(words)): \n  \n        for j in range(len(words)): \n            if i != j: \n                word = words[i] + words[j] \n                if word == word[::-1]: \n                    res.append((i, j)) \n    return res \nprint(find_palindrome_pairs(words))"
    },
    {
        "instruction": "Write a JavaScript function to test if two given arrays are equal. ",
        "response": "function equalArrays(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n \n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n \n  return true;\n}"
    },
    {
        "instruction": "Write a for loop in python for printing the square of numbers from 0 to 4. ",
        "response": "for num in range(5):\n    print(num**2)"
    },
    {
        "instruction": "Create a request handler for a POST request in Python Flask. ",
        "response": "# Import the necessary libraries\nfrom flask import Flask, request\n\n# Initialize the app\napp = Flask(__name__) \n  \n@app.route('/post_request_handler', methods = ['POST']) \ndef post_request_handler(): \n\n    # Extract the data from POST request \n    data = request.get_json()  \n\n    # Do something with the data\n\n    # Return a response\n    return \"Post request handled\", 200"
    },
    {
        "instruction": "Generate a custom URL for a Google search. Search: Python Programming",
        "response": "https://www.google.com/search?q=python+programming"
    },
    {
        "instruction": "Create a for loop for iterating over the elements of an array in JavaScript. Array: [1, 2, 3, 4]",
        "response": "for(let i=0; i < [1,2,3,4].length; i++){\n    console.log([1,2,3,4][i]);\n}"
    },
    {
        "instruction": "Write a JavaScript snippet to show a prompt with the text \"Please enter your name\". ",
        "response": "const name = prompt(\"Please enter your name\");"
    },
    {
        "instruction": "Write a Python function for transforming all characters of a string to upper case. string: 'Hello World!'",
        "response": "def toUpperCase(string):\n    return string.upper()\n\n# Output: HELLO WORLD!"
    },
    {
        "instruction": "Write a JavaScript snippet to make all the <div> elements in a webpage pink in color. ",
        "response": "const divs = document.querySelectorAll('div');\ndivs.forEach(div => {\n    div.style.backgroundColor = 'pink';\n})"
    },
    {
        "instruction": "Rewrite the following code snippet in Python to multiply an array of two numbers with each element in the array. var numbers = [3, 5];\n\nfor (var i = 0; i < numbers.length; i++) {\n  numbers[i] = numbers[i] * 2;\n}",
        "response": "numbers = [3, 5]\n\nfor i in range(len(numbers)):\n  numbers[i] *= 2"
    },
    {
        "instruction": "Modify the following JavaScript code to make it return the absolute value of a given number. function myFunc(n) {\n  return n;\n}",
        "response": "function myFunc(n) {\n  return Math.abs(n);\n}"
    },
    {
        "instruction": "Write a Python program to check if a string starts with a letter 'A'. str = \"I love apples\"",
        "response": "if str.startswith(\"A\"):\n  print(\"The string starts with 'A'.\")\nelse:\n  print(\"The string does not start with 'A'.\")"
    },
    {
        "instruction": "Construct an array of 10 random numbers using JavaScript. ",
        "response": "let randomArray = [];\n\nfor (let i = 0; i < 10; i++) {\n  randomArray.push(Math.floor(Math.random() * 100));\n}"
    },
    {
        "instruction": "Explain the following piece of JavaScript code. let arr1 = [1,2,3,4];\nlet arr2 = [...arr1];",
        "response": "This code creates a new array, arr2, which contains the same elements as the original array, arr1. The spread operator (...) is used to unpack the elements of arr1, and copy them into the newly created arr2."
    },
    {
        "instruction": "Use Python to design a function that concatenates two given strings. \"Hello\" and \"World\"",
        "response": "def concatStrings(a, b): \n\treturn a + \" \" + b \n \nstring1 = \"Hello\"\nstring2 = \"World\"\n \nprint(concatStrings(string1, string2)) # Output: Hello World"
    },
    {
        "instruction": "Is it possible to create a copy of a multi-dimensional array in Python? ",
        "response": "Yes, it is possible to create a copy of a multi-dimensional array in Python using the copy or deepcopy methods from the copy module. These methods return a new object that is a shallow or deep copy of an array respectively."
    },
    {
        "instruction": "How can you add a comment in your JavaScript code that only displays when debug mode is on? ",
        "response": "// Add this comment for debug mode\nif (debugMode === true) {\n   console.log('This comment will only display in debug mode.');\n}"
    },
    {
        "instruction": "Develop a python program to search for a substring in a string. String = \"This is a sample string\"\nSubstring = \"sample\"",
        "response": "def search_substring(string, substring):\n    start = 0\n    index = -1\n\n    while start < len(string):\n        i = string.find(substring, start)\n        if i == -1:\n            break\n        else:\n            index = i\n            start = i + 1\n\n    return index"
    },
    {
        "instruction": "Generate a program in JavaScript to find the longest common substring of two strings. str1 = \"abcd\"\nstr2 = \"cdefg\"",
        "response": "function longestCommonSubstring(str1, str2) {\n    let max = 0;\n    let curr = 0;\n    let start = -1;\n    let ans = null;\n  \n    let m = str1.length;\n    let n = str2.length;\n\n    /* Build an array to search */\n    let arr = new Array(m);\n    for(let i = 0; i < m; i++) {\n      arr[i] = new Array(n);\n      arr[i].fill(0);\n    }\n  \n    /* Traverse the array and check if the two chars match */\n    for(let i = 0; i < m; i++) {\n      for(let j = 0; j < n; j++) {\n        if(str1[i] === str2[j]) {\n            arr[i][j] = (i === 0 || j === 0) ? 1 : (arr[i-1][j-1] + 1);\n\n            curr = arr[i][j];\n            if(curr > max) {\n              max = curr;\n              start = i - max + 1;\n            }\n        }\n      }\n    }\n  \n    return str1.substring(start, start + max);\n}\n\nans = longestCommonSubstring(str1, str2);\nconsole.log(ans); // ans will be \"cd\""
    },
    {
        "instruction": "Write a Python script that takes in a string and prints out the frequency distribution of the letters in the string. apple",
        "response": "def frequency_distribution(string):\n    \n    # create a dictionary of frequencies    \n    freq_dict = {}\n    for i in string:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    # print the result\n    for key, value in freq_dict.items():\n        print (key + ': ' + str(value))"
    },
    {
        "instruction": "Write a Python program to count the number of upper and lower case letters in a given string. s = “Hello World”",
        "response": "def count_letters(s):\n    upper_count = 0\n    lower_count = 0\n    for c in s:\n        if c.isupper():\n            upper_count += 1 \n        elif c.islower():\n            lower_count += 1 \n    return upper_count, lower_count"
    },
    {
        "instruction": "Write Javascript code to create a timeout to set a message after 5 seconds. ",
        "response": "setTimeout(() => {\n    console.log('This is the message after 5 seconds');\n  }, 5000);"
    },
    {
        "instruction": "Write a Python while loop that iterates through the list `my_list` and prints each item. my_list = [1, 2, 3, 4, 5]",
        "response": "i = 0\nwhile i < len(my_list):\n    print(my_list[i])\n    i += 1"
    },
    {
        "instruction": "Construct a class in Python that describes a car ",
        "response": "class Car:\n    def __init__(self, brand, color):\n        self.brand = brand\n        self.color = color\n    def describe(self):\n        return “This car is a {} and it is {}.”.format(self.brand, self.color)"
    },
    {
        "instruction": "Write code to print the following data structure in an easily readable format. data = {\n  \"name\": \"John Smith\",\n  \"age\": 35,\n  \"languages\": [\"Python\", \"JavaScript\", \"SQL\"]\n}",
        "response": "print('Name: {}'.format(data['name']))\nprint('Age: {}'.format(data['age']))\nprint('Languages: {}'.format(', '.join(data['languages'])))"
    },
    {
        "instruction": "What is the Pythonic way to combine two dictionaries key-value pairs and store it in a new dictionary? ",
        "response": "combined_dict = {**dict_1, **dict_2}"
    },
    {
        "instruction": "Add the two given integer variables using a Python script. a = 5\nb = 10",
        "response": "sum = a + b\nprint(sum)"
    },
    {
        "instruction": "What are the different ways to loop through a list in Python? ",
        "response": "The different ways of looping through a list in Python are the for loop, the while loop, the list comprehension, and the map() function."
    },
    {
        "instruction": "Describe the different data types available in Python. ",
        "response": "The different data types available in Python include strings, integers, floats, tuples, lists, dictionaries, sets, booleans, and None."
    },
    {
        "instruction": "Define a callback in JavaScript to be used with the onclick event. ",
        "response": "function callbackFunction() {\n    // logic to be implemented when the button is clicked\n}\n\n// Set the callback function\nbutton.onclick = callbackFunction;"
    },
    {
        "instruction": "Output the command line argument received by a Python function. ",
        "response": "import sys\n\ndef get_command_line_arg():\n    print(sys.argv[1])"
    },
    {
        "instruction": "Using the list of numbers, create a filter in Python that removes all odd numbers from the list. numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "filtered_list = list(filter(lambda x: x % 2 == 0, numbers))"
    },
    {
        "instruction": "Using JavaScript create an object named \"person\", and add a property named \"name\" with the string value of \"John\". ",
        "response": "let person = {\n  name: \"John\"\n};"
    },
    {
        "instruction": "Write a JavaScript function that converts a string to title case. string = \"This is a sample sentence.\"",
        "response": "function titleCase(string) {\n return string\n  .toLowerCase()\n  .split(' ')\n  .map(word => word.replace(word[0], word[0].toUpperCase()))\n  .join(' ');\n}"
    },
    {
        "instruction": "Develop a formula in JavaScript to calculate the area of a circle. radius  = 10",
        "response": "const pi = 3.14;\n\nconst areaCircle = (radius) => {\n  return pi * (radius * radius);\n}\n\nconsole.log(areaCircle(radius));"
    },
    {
        "instruction": "Compute the sum of an array using a JavaScript loop. array = [7, 2, 5, 9]",
        "response": "let sum = 0;\n\nfor (let i = 0; i < array.length; i++) {\n  sum += array[i];\n}\n\nconsole.log(sum);"
    },
    {
        "instruction": "Create a Python script for removing all whitespace from a given string. string = \" Hi There \"",
        "response": "no_whitespace = string.replace(\" \", \"\")\nprint(no_whitespace)"
    },
    {
        "instruction": "Create a function in Python that prints out the numbers from 0 to the given parameter. 10",
        "response": "def printnumbers(n):\n    for i in range(n+1):\n        print(i)\n\nprintnumbers(10)"
    },
    {
        "instruction": "What are lambda expressions in Python? ",
        "response": "Lambda expressions in Python are anonymous functions that can take in arguments and return a value. They are commonly used for performing operations on collections of data, or for making code more concise."
    },
    {
        "instruction": "Write a JavaScript program to compute the sum of all the given values. values = [1, 2, 3, 4, 5]",
        "response": "function sumValues(values) {\n    let sum = 0;\n    for (let i = 0; i < values.length; i++) {\n        sum += values[i] \n    }\n    return sum;\n}\n\nconsole.log(sumValues([1, 2, 3, 4, 5]));"
    },
    {
        "instruction": "Write a Python Class to store a telephone directory's details. ",
        "response": "class TelephoneDirectory:\n def __init__(self):\n self.contacts = {}\n\n def add(self, name, number):\n self.contacts[name] = number\n\n def find(self, name):\n return self.contacts[name]"
    },
    {
        "instruction": "Write a JavaScript function to validate the syntax of an IP address. ",
        "response": "function validateIP(ip) {\n const splitIP = ip.split('.');\n if (splitIP.length !== 4) {\n return false;\n }\n \n for (let i = 0; i < 4; i++) {\n let num = Number(splitIP[i]);\n if(num < 0 || num > 255 || isNaN(num)) {\n return false;\n }\n }\n \n return true;\n}"
    },
    {
        "instruction": "Design a Python script to extract the name, date of birth, and address from a given string. John Smith; 10/03/1994; 9 Hall Street, Anytown",
        "response": "import re \n\npattern = re.compile(r'(?P<name>[\\w ]+); (?P<dob>[\\d/]+); (?P<addr>[\\w ]+[,][\\w ]+)')\nmatch = pattern.search('John Smith; 10/03/1994; 9 Hall Street, Anytown') \nname = match.group('name') \ndob = match.group('dob') \naddr = match.group('addr')"
    },
    {
        "instruction": "Write a function in Python that takes two strings as input and returns a sorted version of the first string with all occurrences of the letters in the second string removed. firstString = 'hello world'\nsecondString = 'lo'",
        "response": "def remove_occurrences(first_string, second_string):\n  original_string_list = list(first_string)\n  for char in second_string:\n    if char in original_string_list:\n      original_string_list.remove(char)\n  return ''.join(sorted(original_string_list))\n\n# Usage\nprint(remove_occurrences('hello world', 'lo')) # Output: dehwr"
    },
    {
        "instruction": "Create a Python class with two methods; one to add two numbers, and another to subtract two numbers. ",
        "response": "class Calculator:\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y"
    },
    {
        "instruction": "Convert this Python statement into a list comprehension. for item1 in list1:\n    for item2 in list2:\n        if item1 == item2:\n            result_list.append(item1)",
        "response": "result_list = [item1 for item1 in list1 for item2 in list2 if item1 == item2]"
    },
    {
        "instruction": "Write a Python program to remove an empty tuple from a list of tuples. list1 = [ (), ('a',), ('b', 'c'), ('d', 'e', 'f')]",
        "response": "list2 = [ t for t in list1 if t ]\nprint(list2)"
    },
    {
        "instruction": "Write a function in Python to calculate the sum of all even integers in a list. [1, 2, 3, 4, 5]",
        "response": "def sum_even_ints(list_nums):\n    total_sum = 0\n    for num in list_nums:\n        if num % 2 == 0:\n            total_sum += num\n    return total_sum\n\nsum_even_ints([1, 2, 3, 4, 5])"
    },
    {
        "instruction": "We have a list of integers, write a function in Python to find the second smallest element in the list. [2, 4, 7, 10, 8]",
        "response": "def find_second_smallest(list_nums):\n    sorted_list = sorted(list_nums)\n    return sorted_list[1]\n\nfind_second_smallest([2, 4, 7, 10, 8])"
    },
    {
        "instruction": "Make a for loop in JavaScript that prints \"Hello\" 5 times. ",
        "response": "for (let i = 0; i < 5; i++) {\n    console.log('Hello');\n}"
    },
    {
        "instruction": "Create a class in Python to represent a book and include a method for getting the name of the book. ",
        "response": "class Book:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name"
    },
    {
        "instruction": "Create a switch statement in JavaScript to print different messages based on a given condition. condition = \"Monday\"",
        "response": "switch (condition) {\n    case \"Monday\":\n        console.log(\"It's Monday, be ready for the work week!\");\n        break;\n    case \"Thursday\":\n        console.log(\"It's Thursday, only a few days left!\");\n        break;\n    case \"Friday\":\n        console.log(\"It's Friday, the weekend is here!\");\n        break;\n    default:\n        console.log(\"Enjoy your day!\");\n        break;\n}"
    },
    {
        "instruction": "Edit the following Python code to add a loop to generate a list of numbers from 1 to 10. numbers = []",
        "response": "numbers = []\n\nfor i in range(1, 11):\n numbers.append(i)"
    },
    {
        "instruction": "Add proper type annotations to the following Python function. def get_favorite_number(name):\n  return name + 10",
        "response": "def get_favorite_number(name: str) -> int:\n  return name + 10"
    },
    {
        "instruction": "Create a JavaScript program to find the minimum of two numbers. ",
        "response": "function min(num1, num2) {\n  if (num1 < num2) {\n    return num1;\n  }\n  else {\n    return num2;\n  }\n}"
    },
    {
        "instruction": "Write a JavaScript code snippet to open a new window with some given URL. URL: https://www.test.com",
        "response": "window.open('https://www.test.com', '_blank');"
    },
    {
        "instruction": "Create a Python script to find the greatest common divisor (GCD) of a pair of integers. Number 1: 10\nNumber 2: 12",
        "response": "def findGCD(x, y): \n  \n    # This function implements the Euclidian algorithm \n    # to find GCD of two numbers \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver program \ngcd = findGCD(10, 12) \nprint(gcd)"
    },
    {
        "instruction": "Write the code to create a class in Python named \"Person\". ",
        "response": "class Person:\n    def __init__(self, name, age=None):\n        self.name = name\n        self.age = age"
    },
    {
        "instruction": "In Python, write a program to remove all duplicates from a given list of integers. ",
        "response": "def remove_duplicates(arr):\n    result = [] \n    seen = set() \n    for item in arr:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result"
    },
    {
        "instruction": "Update the following code to be Python 3 compatible. print \"Welcome to the Program.\"",
        "response": "print(\"Welcome to the Program.\")"
    },
    {
        "instruction": "Sort the following list using Python's built-in sorting functions. unsorted_list = [5, 1, 6, 8, 2, 4]",
        "response": "unsorted_list.sort()\n# unsorted_list is now [1, 2, 4, 5, 6, 8]"
    },
    {
        "instruction": "Make a JavaScript fibonacci sequence generator that takes a given number from the user and prints out the first n elements of the fibonacci sequence. ",
        "response": "function fibonacci(n){\n  let arr = [0, 1];\n  for (let i = 2; i < n + 1; i++){\n    arr.push(arr[i - 2] + arr[i -1])\n  }\n  return arr.slice(0, n);\n}"
    },
    {
        "instruction": "Create a Python function which takes a given string and replaces all its characters with the next consecutive character. ",
        "response": "def shift_string(string):\n  result = \"\"\n  for ch in string:\n    result += chr(ord(ch) + 1)\n  return result"
    },
    {
        "instruction": "Create a function in JavaScript which prints all prime numbers up to a given number. ",
        "response": "function isPrime(num) {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction printPrimes(num) {\n    console.log(\"The prime numbers are:\");\n    for (let i = 2; i <= num; i++) {\n        if (isPrime(i)) {\n            console.log(i);\n        }\n    }\n}"
    },
    {
        "instruction": "Implement an algorithm in Python to find the GCD (Greatest Common Divisor) of two numbers ",
        "response": "def gcd(a, b): \n  \n   if (a == 0): \n       return b \n       \n   if (b == 0): \n       return a \n       \n   if (a == b): \n       return a \n       \n   if (a > b): \n       return gcd(a-b, b) \n      \n   return gcd(a, b-a)"
    },
    {
        "instruction": "Write a script in Python to sort a list of words alphabetically. ",
        "response": "words = ['Apple','Banana','Cherry','Orange']\n\nwords.sort()\n\nprint(words)"
    },
    {
        "instruction": "Create a JavaScript function that takes a string as an argument and reverses it. ",
        "response": "function reverseString(str) {\n  return str.split('').reverse().join(''); \n}"
    },
    {
        "instruction": "Create a Python function which takes a dictionary and prints the contents of the dictionary in a human readable format. ",
        "response": "def printDictionary(dictionary):\n    for key in dictionary.keys():\n        print(key, \":\", dictionary[key])"
    },
    {
        "instruction": "Write a function in Python that will take two integers as inputs and compute their average. int1 = 10\nint2 = 15",
        "response": "def calculate_average(int1, int2):\n    return (int1 + int2) / 2\n\nprint(calculate_average(int1, int2))"
    },
    {
        "instruction": "Create a function in Python that takes a string as an input and returns a new string that is the reverse of the input string. string = \"Reverse Me\"",
        "response": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string(string))"
    },
    {
        "instruction": "Create a function in Python to remove all characters other than letters and numbers from a string. string = \"This#%&string c&$o#th=esa#@ll cha*%$racter\"",
        "response": "import re\n\ndef remove_characters(string):\n    return re.sub('[^A-Za-z0-9]+', '', string)\n\nprint(remove_characters(string))"
    },
    {
        "instruction": "Create a function in Python to split a given string into a list of strings using a space as a delimiter. string = \"This is a string to split\"",
        "response": "def split_string(string):\n    return string.split(\" \")\n\nprint(split_string(string))"
    },
    {
        "instruction": "Write a function in Python to take a string as input and return a dictionary with the count of each letter in the string. string = \"This is a string of characters\"",
        "response": "def count_letters(string):\n    letter_count = {}\n    for char in string:\n        if char not in letter_count:\n            letter_count[char] = 1\n        else:\n            letter_count[char] += 1;\n    return letter_count\n\nprint(count_letters(string))"
    },
    {
        "instruction": "Determine the syntax for a function call in Python. ",
        "response": "Function calls in Python must include the name of the function followed by parentheses and the arguments inside the parentheses. If you do not include any arguments, the parentheses should still be included. An example would be:\n\n  my_function()"
    },
    {
        "instruction": "Build a program in Python to check if a number is Odd or Even. ",
        "response": "def odd_even(n):\n\tif (n % 2 == 0):\n\t\tprint(\"Even\")\n\telse:\n\t\tprint(\"Odd\")"
    },
    {
        "instruction": "Write a JavaScript code snippet to set a value for a cookie. ",
        "response": "document.cookie=\"mycookie=myvalue\";"
    },
    {
        "instruction": "Suggest a solution to print the third character from a string in Python. String = \"Hello, world!\"",
        "response": "print(string[2]) # Output: l"
    },
    {
        "instruction": "Write a Python program to find the closest number in a given array to a given number. Array: [3, 6, 9, 12, 15], Number: 10",
        "response": "def closest_number(nums, number): \n  min_diff = abs(nums[0] - number) \n  min_num = nums[0] \n  for num in nums:\n    min_diff_temp = abs(num - number) \n    if min_diff_temp < min_diff:\n    \tmin_diff = min_diff_temp\n    \tmin_num = num\n  return min_num"
    },
    {
        "instruction": "Create a for loop structure in JavaScript to iterate through the numbers from 0 to 10 and display them on the console. ",
        "response": "for (var i=0; i<=10; i++){\n    console.log(i);\n}"
    },
    {
        "instruction": "Create an array in Python containing five strings. ",
        "response": "my_words = [\"Hello\", \"World\", \"Python\", \"Programming\", \"Code\"]"
    },
    {
        "instruction": "Create a class in Python called Cat with constructor that takes three arguments i.e. name, color and age. The class should have three methods called meow, purr and display_info. ",
        "response": "class Cat:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def meow(self):\n        print('%s the %s cat meows!' % (self.name, self.color))\n    \n    def purr(self):\n        print('%s the %s cat purrs contentedly.' % (self.name, self.color))\n    \n    def display_info(self):\n        print('%s is a %s cat and is %d years old.' % (self.name, self.color, self.age))"
    },
    {
        "instruction": "Sort the following array of numbers [7,2,4,1,9] in descending order using JavaScript. [7,2,4,1,9]",
        "response": "[9,7,4,2,1].sort(function(a,b){return b-a;});"
    },
    {
        "instruction": "Show an example of a while loop in Python. ",
        "response": "i = 0\n\nwhile i < 10:\n    print(i)\n    i += 1"
    },
    {
        "instruction": "How to delete a specific item from a Python dictionary? ",
        "response": "dictionary_name.pop(\"item_name\", None)"
    },
    {
        "instruction": "How do you check if a character is a digit in Python? ",
        "response": "if c.isdigit():\n   # character is a digit"
    },
    {
        "instruction": "Write a method to remove the trailing spaces from a string in Python. ",
        "response": "def remove_trailing_spaces(s): \n    return s.rstrip()"
    },
    {
        "instruction": "How to generate a random number between two given numbers in Python? ",
        "response": "import random \n\ndef random_number(minimum, maximum): \n    return random.randint(minimum, maximum)"
    },
    {
        "instruction": "How do you format a number to two decimal points in JavaScript? ",
        "response": "number.toFixed(2)"
    },
    {
        "instruction": "How do you sort a dictionary by values in Python? ",
        "response": "sorted_dict = dict(sorted(mydict.items(), key=lambda x: x[1]))"
    },
    {
        "instruction": "How to calculate the length of a string in JavaScript? ",
        "response": "str.length"
    },
    {
        "instruction": "Given a list of strings, create a Python function that sorts them in alphabetical order. example_list = [\"Apple\", \"Banana\", \"Cherry\"]",
        "response": "def sort_list(l):\n    l.sort()\n    return l"
    },
    {
        "instruction": "Create a function in Python that takes a sentence as input and returns a dictionary of each word and its frequency in the sentence. example_sentence = \"The quick brown fox jumps over the lazy dog.\"",
        "response": "def word_frequency(sentence):\n    words = sentence.split()\n    freq_dict = {}\n    for word in words:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict"
    },
    {
        "instruction": "Given a list of strings, create a Python3 program that counts the number of strings that start with the letter 'a'. example_list = [\"Apple\", \"Cat\", \"Ant\", \"Table\"]",
        "response": "def count_str_starts_a(l):\n    count = 0\n    for word in l:\n        if word[0].lower() == 'a':\n            count += 1\n    return count"
    },
    {
        "instruction": "Construct a function in Python that takes a list and returns the mean of the elements in the list. [30, 10, 40, 20]",
        "response": "def mean(list): \n    # Finding total of the list elements \n    total = 0\n    for num in list: \n        total += num \n\n    # Calculate mean of the list \n   mean = total / len(list) \n\n    # Return the mean \n    return mean"
    },
    {
        "instruction": "Edit the following code to make it an infinite loop. # Python 3\n# Print numbers from 0 to 10 \ni = 0\nwhile i <= 10: \n    print(i) \n    i += 1",
        "response": "# Python 3\n# Print numbers from 0 to 10 \nwhile True: \n    print(i) \n    i += 1"
    },
    {
        "instruction": "Write a function in JavaScript to set the background color of a web page to a randomly generated color. ",
        "response": "const random_bg_color = () => {\n    // Generate three random numbers for RGB to create random color\n    let r = Math.floor(Math.random() * 256); \n    let g = Math.floor(Math.random() * 256); \n    let b = Math.floor(Math.random() * 256); \n  \n    // Set the random color for the page's background\n    document.body.style.backgroundColor = \"rgb(\" + r + \",\" + g + \",\" + b + \")\"; \n}"
    },
    {
        "instruction": "Provide the JavaScript code required to navigate to a page when the page is loaded. ",
        "response": "window.onload = function() { \n    window.location.href = \"http://www.example.com\";\n }"
    },
    {
        "instruction": "Create a JavaScript object for a student and include properties such as first name, last name, and grades for all courses taken. ",
        "response": "let student = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    grades: {\n        math: 89,\n        science: 80,\n        english: 92,\n        history: 94\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript program to find all the words in a string which start with a specific letter. string: “The quick brown fox jumps over the lazy dog”\nletter: ‘j’",
        "response": "function findWords(string, letter){\n let words = string.split(\" \");\n let result = [];\n for(let word of words){\n if(word.charAt(0) == letter){\n result.push(word);\n }\n }\n return result;\n}\n \nconsole.log(findWords(\"The quick brown fox jumps over the lazy dog\", \"j\"));\n# Output: [\"jumps\"]"
    },
    {
        "instruction": "Write a JavaScript program to make a shallow clone of an object. ",
        "response": "function clone(obj) {\n let cloneObj = {};\n for (let i in obj) {\n if (obj.hasOwnProperty(i)) {\n cloneObj[i] = obj[i];\n }\n }\n return cloneObj;\n}\n\nlet obj = {name: 'John', age: 30};\nlet cloneObj = clone(obj);\n\nconsole.log(cloneObj);\n# Output: {name: \"John\", age: 30}"
    },
    {
        "instruction": "Reverse the words in a sentence stored as a list in Python. ['word', 'one', 'is', 'this']",
        "response": "def reverse_words(words):\n    # Get the length of the words\n    n = len(words)\n\n    # Reverse the list words\n    for i in range(n // 2):\n        words[i], words[n - 1 - i] = words[n - 1 - i], words[i]\n\n    return words\n\nif __name__ == \"__main__\":\n    words = ['word', 'one', 'is', 'this']\n    print(reverse_words(words))"
    },
    {
        "instruction": "Design a Python class that allows a user to set and get the name of an object. ",
        "response": "class User:\n    def __init__(self, name):\n        self.name = name\n\n    def getName(self):\n        return self.name\n\n    def setName(self, name):\n        self.name = name"
    },
    {
        "instruction": "Write a loop in Python to find the summation of the square of the first 10 natural numbers. ",
        "response": "sum = 0\nfor i in range(1, 11): \n    sum += i**2 \n \nprint(\"The sum of the square of the first 10 natural numbers is\", sum)"
    },
    {
        "instruction": "Write a search engine using an index in JavaScript. ",
        "response": "// create an index\nlet index = {};\n\n// add a document to the index\nlet addDocument = (document, content) => {\n  let words = content.split(' ');\n  words.forEach((word) => {\n    if (index.hasOwnProperty(word)) {\n      //if the word is already in the index, add the document to its list\n      index[word].push(document);\n    } else {\n      //add the word to the index\n      index[word] = [document];\n    }\n  });\n};\n\n// perform a search\nlet search = (query) => {\n  //array to hold the found documents\n  let found = [];\n\n  query.split(' ').forEach((word) => {\n    //check if word is in index\n    if (index.hasOwnProperty(word)) {\n      index[word].forEach((doc) => {\n        //make sure document isn't already in the list\n        if (found.indexOf(doc) == -1) {\n          found.push(doc);\n        }\n      });\n    }\n  });\n\n  //return the found documents\n  return found;\n};"
    },
    {
        "instruction": "Create a method in JavaScript that will return the area of a triangle. ",
        "response": "// Calculating area of triangle in JavaScript\nfunction areaOfTriangle(a, b, c) {\n    // Calculate the semi-perimeter of the triangle\n    var s = (a + b + c) / 2;\n    \n    // Calculate the area of triangle using Heron's Formula\n    var area =  Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Return the area of triangle\n    return area;\n}"
    },
    {
        "instruction": "Create a function in JavaScript to generate an array containing 5 random numbers between 0 and 9 (inclusive). ",
        "response": "function generateRandomNumbers() {\n\n    // Declaring array to hold 5 random numbers between 0 and 9\n    let randArray = [];\n\n    // Generate 5 random numbers\n    while(randArray.length < 5) {\n        // Generate a random number between 0 and 9\n        let randNum = Math.floor(Math.random() * 10);\n        // Add to array if not already present in the array\n        if(randArray.indexOf(randNum) < 0){\n            randArray.push(randNum);\n        }\n    }\n\n    // Return array\n    return randArray;\n\n}"
    },
    {
        "instruction": "Create a for loop in Python that will iterate through a given list and add the square of each element to a new list. nums = [2, 3, 4]",
        "response": "# Create an empty list\nsquared_nums = []\n\n# Iterate through the given list \nfor num in nums:\n  # Calculate the square of the element\n  squared_num = num * num\n  # Append it to the new list\n  squared_nums.append(squared_num)\n\n# Print the new list\nprint(squared_nums) \n# Output: [4, 9, 16]"
    },
    {
        "instruction": "Create a JavaScript object that contains a student's name, age, and courses. ",
        "response": "let student = { \n    name: \"John Doe\", \n    age: 20, \n    courses: [\"Math\", \"Physics\", \"English\"] \n};"
    },
    {
        "instruction": "What is the Python function for swapping two variables' values? ",
        "response": "The Python function for swapping two variables' values is \"*a, b = b, a*\". This is a simple one-line expression that swaps the values of the two variables."
    },
    {
        "instruction": "Write a Python program that takes two lists, adds their items and returns a new list. list_a = [1, 2, 3]\nlist_b = [4, 5, 6]",
        "response": "def add_list_items(list_a, list_b):\n    output = []\n    for item_a, item_b in zip(list_a, list_b):\n        output.append(item_a + item_b)\n    return output"
    },
    {
        "instruction": "Write a JavaScript function that generates the Fibonacci sequence up to a given number. ",
        "response": "function fibonacci (num) {\n    let result = [];\n    let a = 1;\n    let b = 0;\n    let temp;\n\n    while (num >= 0) {\n      result.push(b);\n  \n      temp = a;\n      a = a + b;\n      b = temp;\n  \n      num--;\n    }\n  \n    return result;\n  }"
    },
    {
        "instruction": "Use the information provided to create a class in Python which represent a Rectangle. The Rectangle class should have: \n- Attributes of length and width\n- A method to compute the area of the rectangle",
        "response": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n   \n    def get_area(self):\n        return self.length * self.width"
    },
    {
        "instruction": "Create an object sorting function using bubble sort in JavaScript. const arr = [10, 4, 7, 8, 1, 6]",
        "response": "function bubbleSort(arr) {\n  for (let i = arr.length-1; i > 0; i--) {\n    for (let j = 0; j < i; j++) {\n      if (arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n  return arr;\n}"
    },
    {
        "instruction": "Write a JavaScript code to create a function that checks if a given number is divisible by 2. ",
        "response": "function isDivisibleBy2(num) {\n  return num % 2 === 0;\n}"
    },
    {
        "instruction": "Given a list of numbers, write a Python program to find the maximum and minimum number. [4, 7, -2, 11, 9]",
        "response": "Maximum Number = 11\nMinimum Number = -2"
    },
    {
        "instruction": "Formulate a statement using Python that will return the value 'True' when the user's age is equal to 21. userage = 21",
        "response": "if userage == 21:\n    print(True)"
    },
    {
        "instruction": "Create a for loop in Python that traverse a list and prints out every second element lst = [1,2,3,4,5]",
        "response": "for i in range(0, len(lst), 2):\n    print(lst[i])"
    },
    {
        "instruction": "Create an array of 10 numbers in Python with values from 0 to 9. ",
        "response": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "instruction": "Create a class in Python with the attributes name and age. ",
        "response": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"
    },
    {
        "instruction": "Find the 2 smallest elements in a Python list of integers. [2, 3, 5, 8, 4, 9, 11]",
        "response": "min1, min2 = list[0], list[1]\nfor num in list:\n    if num < min1:\n        min2 = min1\n        min1 = num\n    elif num < min2:\n        min2 = num"
    },
    {
        "instruction": "Add an 'except' statement to the following python code to prevent a ValueError. a = 5\nb = 0\n\ntry:\n    c = a / b",
        "response": "a = 5\nb = 0\n\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    print(\"b cannot be zero\")"
    },
    {
        "instruction": "Use a built-in Python method to print the contents of a list in reverse order. arr = [1, 2, 3, 4]",
        "response": "# use a built-in python method to print the list in reverse order\narr.reverse() # using the list reverse method\nprint(arr)"
    },
    {
        "instruction": "Write a Python code to search for a given keyword in a dictionary. dictionary = {\n    “Car”: “A vehicle with four wheels”,\n    “Laptop”: “A computer for personal use”,\n    “Game”: “An activity for entertainment”\n    }",
        "response": "def search(dic, keyword):\n    for key, value in dic.items():\n        if keyword in key:\n            return value\n    return \"No matching keyword found!\"\nsearch(dictionary, 'Laptop')"
    },
    {
        "instruction": "Using the code provided, write a JavaScript function to compare two numbers and return the larger one. ",
        "response": "const compareNumbers = (num1, num2) => {\n    if (num1 > num2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}"
    },
    {
        "instruction": "Using the code provided, write a JavaScript function that checks if a given number is prime or not. ",
        "response": "const isPrime = (number) => {\n  if (number <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= (number / 2); i++){\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"
    },
    {
        "instruction": "Write a python to convert an IP address from dot-decimal notation to binary notation. 192.168.1.1",
        "response": "def convert_ip_address(ip_address):\n    \"\"\"\n    Convert IP address from dot-decimal notation (e.g. 192.168.1.1) to binary.\n    \"\"\"\n    # Split the IP address in octets\n    octets = ip_address.split('.')\n    \n    # Convert each octet to binary\n    binary_octets = [bin(int(numeric_octet))[2:].zfill(8) for numeric_octet in octets]\n    \n    # Join the binary octets and return the IP address in binary notation\n    return ''.join(binary_octets)\n\nif __name__ == '__main__':\n    ip_address = '192.168.1.1'\n    print(convert_ip_address(ip_address))"
    },
    {
        "instruction": "Parse a given input of timestamp and convert it to a datetime object in python. 1552520802",
        "response": "datetime.datetime(2019, 3, 12, 17, 33, 22)"
    },
    {
        "instruction": "Take in a JSON string and convert it into a valid Python 3 dictionary. '{\"name\": \"john\", \"age\": 32}'",
        "response": "{'name': 'john', 'age': 32}"
    },
    {
        "instruction": "Implement quicksort algorithm in Python for a list of integers. [4, 2, 5, 3, 1]",
        "response": "def quicksort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tmiddle = [x for x in arr if x == pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quicksort(left) + middle + quicksort(right)"
    },
    {
        "instruction": "How can you print “Hello World” to your console using JavaScript? ",
        "response": "console.log(\"Hello World\");"
    },
    {
        "instruction": "Edit the following array in JavaScript so that all the strings are in uppercase. let array = ['cat', 'dog', 'fish'];",
        "response": "let array = ['CAT', 'DOG', 'FISH'];"
    },
    {
        "instruction": "Write a JavaScript function that takes two parameters and compares them. ",
        "response": "function compareValues (parameter1, parameter2) {\n    if (parameter1 > parameter2) {\n       return 1;\n    }\n    else if (parameter1 < parameter2) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}"
    },
    {
        "instruction": "Generate the Fibonacci sequence using a for loop in Python. ",
        "response": "def generateFibonacciSequence(n):\n    fib_sequence = [0,1]\n    for i in range(2,n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        \n    return fib_sequence"
    },
    {
        "instruction": "Using PHP, how can you print the JavaScript code that displays an alert message with the text “Hello World”? ",
        "response": "echo \"<script>alert('Hello World');</script>\";"
    },
    {
        "instruction": "Create a JavaScript function to generate a random number between a user-entered minimum and maximum values. ",
        "response": "function getRandomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n}"
    },
    {
        "instruction": "Write a python program that takes in two input strings and checks if the second string is an anagram of the first one. silent, listen",
        "response": "def anagram_check (str1, str2): \n    if(sorted(str1)== sorted(str2)): \n        print(\"The strings are anagrams.\")  \n    else: \n        print(\"The strings aren't anagrams.\")         \n\n# Driver code \nstr1 = \"silent\"\nstr2 = \"listen\"\nanagram_check(str1, str2)"
    },
    {
        "instruction": "Write a JavaScript program to simulate a rock, paper, scissors between 2 players. ",
        "response": "let player1 = Math.floor(Math.random() * 3) + 1;\nlet player2 = Math.floor(Math.random() * 3) + 1;\n\nif (player1 === player2) {\n  console.log('Draw!');\n} else if (player1 === 1 && player2 === 3) {\n  console.log('Player 1 wins!');\n} else if (player1 === 2 && player2 === 1) {\n  console.log('Player 1 wins!');\n} else if (player1 === 3 && player2 === 2) {\n  console.log('Player 1 wins!');\n} else {\n  console.log('Player 2 wins!');\n}"
    },
    {
        "instruction": "Suppose you have an array of numbers like [2,5,3,7] and you have to find the sum of the elements of the array. Write a JavaScript program for this. ",
        "response": "function sumArray(arr) {\n  let sum = 0;\n  arr.forEach(element => {\n    sum += element;\n  });\n  return sum;\n}"
    },
    {
        "instruction": "Parse the following JSON string in Python. {\"name\":\"John\",\"age\":30,\"city\":\"New York\"}",
        "response": "import json\n\ndata = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n# parse the JSON string\nparsed_string = json.loads(data) \n\n# print the individual elements\nname = parsed_string[\"name\"]\nage = parsed_string[\"age\"]\ncity = parsed_string[\"city\"]\n\nprint(name)\nprint(age)\nprint(city)"
    },
    {
        "instruction": "Inject a variable in a Python script, named \"greeting_message\" with the value \"hello world\" ",
        "response": "greeting_message = \"hello world\""
    },
    {
        "instruction": "Create a program in JavaScript that calendarizes the upcoming week based on the current date. ",
        "response": "const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nlet currentDate = new Date();\n\n// Get the day of the week and month corresponding to current date\nlet dayOfWeek = days[currentDate.getDay()];\nlet month = months[currentDate.getMonth()];\nlet dayOfMonth = currentDate.getDate();\n\nlet calendar = [dayOfWeek + \" - \" + month + \" \" + dayOfMonth]\n\n// Generate the dates for the upcoming 6 days\nfor (let dayOffset = 0; dayOffset < 6; dayOffset++) {\n  let nextDate = new Date(currentDate.getTime() + 86400000 * (dayOffset + 1));\n  let nextDayOfWeek = days[nextDate.getDay()];\n  let nextMonth = months[nextDate.getMonth()];\n  let nextDayOfMonth = nextDate.getDate();\n  calendar.push(nextDayOfWeek + \" - \" + nextMonth + \" \" + nextDayOfMonth);\n}\n\nconsole.log(calendar);"
    },
    {
        "instruction": "Construct an array of integers from 1 to 10 in Javascript ",
        "response": "let myArray = [1,2,3,4,5,6,7,8,9,10];"
    },
    {
        "instruction": "Create a Python script to generate a random password of 8 characters that contains an uppercase letter, a special symbol and a number. ",
        "response": "import random\nimport string\n\ndef generate_random_password():\n  password = \"\"\n  character_types = string.ascii_letters + string.digits + string.punctuation\n  length = 8\n  for _ in range(length):\n    password += random.choice(character_types)\n  return password\n\nprint(generate_random_password())"
    },
    {
        "instruction": "Write recursive function in JavaScript which reverses a given string. My name is John",
        "response": "function reverseString(str) {\n        if (str.length === 0) {\n            return \"\";\n        }\n        return reverseString(str.slice(1)) + str[0];\n    }\n\n    console.log(reverseString(\"My name is John\"));"
    },
    {
        "instruction": "Write a function to reverse a given sentence in Python. Given sentence: \"The quick brown fox jumps over the lazy dog.\"",
        "response": "def reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = words[::-1]\n    reversed_sentence = ' '.join(reversed_words)\n    return reversed_sentence\n\nif __name__ == '__main__': \n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    print(reverse_sentence(sentence))"
    },
    {
        "instruction": "How do you connect to a MySQL database in Python? ",
        "response": "You can connect to a MySQL database in Python using the mysql.connect() method. The syntax of this method is as follows:\n\nmysql.connect(host=\"localhost\", user=\"username\", password=\"password\", database=\"database_name\")\n\nOnce you have successfully connected to the MySQL database, you can run SQL queries or perform other operations."
    },
    {
        "instruction": "How would you access the last element of an array in JavaScript? ",
        "response": "You can access the last element of an array in JavaScript by using the array's length property as follows:\n\narr[arr.length - 1]"
    },
    {
        "instruction": "Given a string, write code to reverse it in JavaScript. String: programming",
        "response": "function reverseString(str) {\n  let revStr = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    revStr += str[i];\n  }\n  return revStr;\n}\n\nconsole.log(reverseString('programming'));"
    },
    {
        "instruction": "Design a class in Python to model a hospital. ",
        "response": "class Hospital:\n    def __init__(self, location, name, rooms, staff):\n        self.location = location\n        self.name = name\n        self.rooms = rooms\n        self.staff = staff\n    \n    def get_location(self):\n        return self.location\n    \n    def get_name(self):\n        return self.name\n    \n    def get_rooms(self):\n        return self.rooms\n    \n    def get_staff(self):\n        return self.staff\n    \n    def set_location(self, location):\n        self.location = location\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_rooms(self, rooms):\n        self.rooms = rooms\n    \n    def set_staff(self, staff):\n        self.staff = staff"
    },
    {
        "instruction": "Convert this temperature from Kelvin to Celsius in JavaScript. Temperature (K): 298",
        "response": "let tempKelvin = 298;\nlet convertedTemp = tempKelvin - 273.15;\nconsole.log(convertedTemp + ' degrees Celsius');"
    },
    {
        "instruction": "Write a JavaScript function that returns the name of the user. let user = { \n name: \"Tom\", \n age: 28 \n};",
        "response": "function getUserName(user){\n return user.name;\n}"
    },
    {
        "instruction": "Write a regex (in Python) to match the following pattern: \"an apple a day keeps the doctor away\" ",
        "response": "import re\n\nregex = r\"\\ban\\sapple\\s\\ba\\sday\\skeeps\\sthe\\sdoctor\\saway\\b\""
    },
    {
        "instruction": "Find the average value of the following array in Python. arr = [1,2,3,4,5]",
        "response": "import numpy as np\n\narr = [1,2,3,4,5]\naverage = np.mean(arr)\nprint(f\"The average of the array is: {average}\")"
    },
    {
        "instruction": "Given the following text, create a Python function that finds the number of unique words in the text. This is a sample text to find the number of unique words.",
        "response": "def find_unique_words(text):\n    words = set(text.split(\" \"))\n    return len(words)\n\nunique_words = find_unique_words(\"This is a sample text to find the number of unique words.\")\nprint(unique_words)"
    },
    {
        "instruction": "Write a Python program to print the numbers of a specified list after removing even numbers from it. ",
        "response": "def print_odd(numbers):\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(print_odd(numbers))"
    },
    {
        "instruction": "Edit the given code snippet to reverse the elements of a list in Python. ",
        "response": "def reverseList(list): \n    list.reverse() \n    return list"
    },
    {
        "instruction": "Convert the following JavaScript code to a for loop: let num = 0;\nwhile (num < 5) {\n  console.log(num);\n  num++;\n}",
        "response": "for (let num = 0; num < 5; num++) {\n    console.log(num);\n}"
    },
    {
        "instruction": "Use dictionaries in Python to merge the data from two given dictionaries. dictA = {\n  'keyA': 1,\n  'keyB': 2\n}\ndictB = {\n  'keyC': 3,\n  'keyD': 4\n}",
        "response": "dictC = {**dictA, **dictB}"
    },
    {
        "instruction": "Implement quicksort in Python ",
        "response": "def quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)"
    },
    {
        "instruction": "Create a JavaScript object for a square with sides 8, 10 and 12. ",
        "response": "let objSquare = {\n  side1: 8,\n  side2: 10,\n  side3: 12\n}"
    },
    {
        "instruction": "How can we obfuscate a JavaScript code to make it harder for hackers to reverse engineer it? ",
        "response": "There are several tools and techniques that can be used to obfuscate JavaScript code. These include minifying the code so that it is difficult for humans to read, encrypting the code, scrambling variables, encrypting strings, and using code evaluation techniques to avoid running malicious code."
    },
    {
        "instruction": "Write a Micropython program to turn on an LED. ",
        "response": "from machine import Pin\nled = Pin(0, Pin.OUT)\nled.on()"
    },
    {
        "instruction": "Write a JavaScript program to find the sum of all numbers the user has entered in to the input box. ",
        "response": "function calculateSum() { \n  let sum = 0; \n  // Iterate over all the input boxes \n  document.querySelectorAll(\"input[type=number]\").forEach((element) => { \n    // current value of the element \n    let elementValue = Number(element.value); \n    \n    // Sum of all elements \n    sum = sum + elementValue; \n  }); \n  console.log(\"The Sum of All the Numbers is: \"+ sum); \n}"
    },
    {
        "instruction": "Create a new dictionary in Python with the given keys and values. Keys: A, B\nValues: 1, 2",
        "response": "d = {'A': 1, 'B': 2}"
    },
    {
        "instruction": "Implement a class in Python which implements the given method. class Test:\n    def print_name(name):\n        print(name)",
        "response": "class Test:\n    def print_name(self, name):\n        print(name)"
    },
    {
        "instruction": "Write a JavaScript function to get the current date and time in DD/MM/YYYY hh:mm:ss format. ",
        "response": "function getCurrentDateTime() { \n    var date = new Date(); \n    var dd = date.getDate(); \n    var mm = date.getMonth() + 1; \n    var yyyy = date.getFullYear(); \n    var hh = date.getHours(); \n    var min = date.getMinutes(); \n    var sec = date.getSeconds(); \n  \n    if (dd < 10) { \n        dd = '0' + dd; \n    } \n  \n    if (mm < 10) { \n        mm = '0' + mm; \n    } \n  \n    if (min < 10) { \n        min = '0' + min; \n    } \n  \n    if (sec < 10) { \n        sec = '0' + sec; \n    } \n  \n    return dd + '/' + mm + '/' + yyyy + ' ' + hh + ':' + min + ':' + sec; \n} \n\ndocument.write(\"Current Date and Time: \" + getCurrentDateTime());"
    },
    {
        "instruction": "Design a method in JavaScript to validate a password according to certain criteria. ",
        "response": "function validatePassword(password) {\n  const regx = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,20}$/;\n  if (password.match(regx)) {\n    return true;\n  } else {\n    return false;\n  };\n}"
    },
    {
        "instruction": "What is the basic syntax to define a function in Python 3? ",
        "response": "def function_name(parameters):\n    \"\"\" function docstring \"\"\"\n    statement(s)"
    },
    {
        "instruction": "Write a JavaScript code snippet to create and display a dynamic table of products and their prices. var products = [\n    {name: 'Apple', price: 1.50},\n    {name: 'Orange', price: 2.00},\n    {name: 'Banana', price: 1.80},\n];",
        "response": "let table = document.createElement(\"table\");\ndocument.body.appendChild(table);\n\nproducts.forEach(product => {\n    let row = table.insertRow();\n    let nameCell = row.insertCell();\n    let priceCell = row.insertCell();\n\n    nameCell.innerHTML = product.name;\n    priceCell.innerHTML = product.price;\n});"
    },
    {
        "instruction": "Find the maximum number from an array of numbers using JavaScript. let array = [7, 9, 4, 1, 8]",
        "response": "const getMax = arr => Math.max(...arr);\nconsole.log(getMax(array)); // 9"
    },
    {
        "instruction": "Using JavaScript, print the name of sites visited today on the web console. ",
        "response": "var visitedSites = [\"www.facebook.com\", \"www.google.com\", \"www.yahoo.com\"];\nconsole.log(\"Visited sites today: \" +visitedSites);"
    },
    {
        "instruction": "Edit the following JavaScript code to make it able to log even numbers. const myArray = [1, 2, 3, 4, 5]\nfor (let i = 0; i < myArray.length; i++) {\n  console.log(myArray[i])\n}",
        "response": "const myArray = [1, 2, 3, 4, 5]\nfor (let i = 0; i < myArray.length; i++) {\n  if (myArray[i] % 2 == 0) {\n    console.log(myArray[i])\n  }\n}"
    },
    {
        "instruction": "Create a JavaScript class called Point with an X and a Y coordinate. ",
        "response": "class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}"
    },
    {
        "instruction": "Write a JavaScript function to find the maximum value from an array of numbers [10,20,30,40,50]",
        "response": "function maxValue(arr){\n    let max = arr[0];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return max;\n}"
    },
    {
        "instruction": "Build a Python function that normalizes a given array. array = [4, 8, 15, 23, 42]",
        "response": "def normalize(array):\n    min_val = min(array)\n    max_val = max(array)\n    normalized = [ (x-min_val) / (max_val-min_val) for x in array]\n  return normalized"
    },
    {
        "instruction": "Construct a JavaScript algorithm to determine whether a number is even or odd. noinput",
        "response": "function isOdd(number) {\n  let mod = number % 2; // Check modulus (i.e. remainder)\n  if (mod === 0) {\n    return false; \n  }\n  else {\n    return true;\n  }\n}"
    },
    {
        "instruction": "Build a Python dictionary that contains five elements. ",
        "response": "myDictionary = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\",\n  \"key4\": \"value4\",\n  \"key5\": \"value5\"\n}"
    },
    {
        "instruction": "Design an object-oriented class in Python that stores a book's title, author, and publisher. ",
        "response": "class Book:\n  \n  def __init__(self, title, author, publisher):\n    self._title = title\n    self._author = author\n    self._publisher = publisher\n\n  def get_title(self):\n    return self._title\n\n  def set_title(self, title):\n    self._title = title\n\n  def get_author(self):\n    return self._author\n  \n  def set_author(self, author):\n    self._author = author\n\n  def get_publisher(self):\n    return self._publisher\n  \n  def set_publisher(self, publisher):\n    self._publisher = publisher"
    },
    {
        "instruction": "Suppose we have a list of numbers, write a Python code to compute the average of the list. list = [1, 5, 8, 9, 10]",
        "response": "def find_average(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum/len(list)"
    },
    {
        "instruction": "How would you check an integer is divisible by 7 or not in Python? ",
        "response": "We can use the modulo operator (%) to check if an integer is divisible by another number in Python.\n\nThe modulo operator (%) returns the remainder of the division. If the remainder is zero then the two numbers are divisible.\n\nFor example, to check if an integer is divisible by 7, we can use:\n\nif (x % 7) == 0:\n    # x is divisible by 7\nelse:\n    # x is not divisible by 7"
    },
    {
        "instruction": "Find the average of all the elements in an array using JavaScript. [1,2, 3, 4]",
        "response": "let average = array.reduce((acc, curr) => acc + curr, 0) / array.length;\nconsole.log(average);\n\n// Output: 2.5"
    },
    {
        "instruction": "alter this code so that it can run on python3, def say_message(message, times=1):\n    print message * times\n\nsay_message(\"Hello world!\")",
        "response": "\"\"\"\nAlter this code so that it can run on Python 3\n\"\"\"\n\ndef say_message(message, times=1):\n    print(message * times)\n\nsay_message(\"Hello world!\")"
    },
    {
        "instruction": "Create a graphical user interface using Python to perform the following function Take two inputs from the user: a name and an age",
        "response": "import tkinter \n  \n# Create an instance of tkinter \nroot = tkinter.Tk()  \n  \n# Create two lables and two input boxes \nname_label = tkinter.Label(root, text ='Name: ')   \nage_label = tkinter.Label(root, text ='Age: ') \nname_entry = tkinter.Entry(root) \nage_entry = tkinter.Entry(root) \n  \n# Place the labels,entry boxes in the desired layout \nname_label.grid(row = 0, column = 0)   \nname_entry.grid(row = 0, column = 1)  \nage_label.grid(row = 1, column = 0)   \nage_entry.grid(row = 1, column = 1) \n  \nroot.mainloop()"
    },
    {
        "instruction": "Fill in the blanks of the following Python code to implement a Selection Sort algorithm. def selection_sort(arr):\n    for [i] in [range](len(arr),1,-1):\n        max_element=arr[0]\n        for [j] in [range]([i]):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        [temp] = arr[i]\n        arr[i] = max_element\n        arr[arr.index(max_element)] = [temp]",
        "response": "def selection_sort(arr):\n    for i in range(len(arr),1,-1):\n        max_element=arr[0]\n        for j in range(i):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        temp = arr[i-1]\n        arr[i-1] = max_element\n        arr[arr.index(max_element)] = temp"
    },
    {
        "instruction": "Write a function in Python that takes a list and returns the one with all negative numbers sorted in ascending order. [3, -4, 1, -2]",
        "response": "def remove_negative_numbers(lst):\n  negative = []\n  for x in lst:\n    if x < 0:\n      negative.append(x)\n  return sorted(negative)"
    },
    {
        "instruction": "How would you insert an element into a pre-existing array using JavaScript? ",
        "response": "An element can be inserted into a pre-existing array using the JavaScript Array.prototype.push() method. The push() method takes a single element as an argument and appends it to the end of the array. For example, to insert the value 7 into an array, you could use the following syntax: array.push(7);"
    },
    {
        "instruction": "Write a python regex pattern to filter the following list of strings. string_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']",
        "response": "import re \n  \nstring_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']\nfiltered_list = list(filter(lambda x: re.search('^[A-Z]{3}[0-9]$',x), string_list)) \n\nprint(filtered_list) \n \n# Output: ['ABC1', 'DEF2', 'GHI3']"
    },
    {
        "instruction": "Write a Python function that takes two strings and returns the longest common subsequence. str1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"",
        "response": "def LongestCommonSubsequence(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    t = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    for i in range(1, n+1): \n        for j in range(1, m+1):  \n            if str1[i-1] == str2[j-1]: \n                t[i][j] = 1 + t[i-1][j-1] \n            else: \n                t[i][j] = max(t[i-1][j], t[i][j-1])   \n    return t[n][m]"
    },
    {
        "instruction": "Deconstruct this line of Python code and explain what it does y = [x**2 for x in range(10)]",
        "response": "This line of code is a Python List Comprehension, it will iterate through the range of 0 to 9 and square each of those numbers and add them to a new list 'y'. The list will contain the squares of the numbers 0 to 9, i.e. [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]."
    },
    {
        "instruction": "Create a function in Python which takes a list and finds the second highest number in it. arr = [2, 3, 1, 5, 4]",
        "response": "def second_highest_num(arr):\n  arr.sort()\n  return arr[-2]"
    },
    {
        "instruction": "Write a function in Python that takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise. ",
        "response": "def is_vowel(char):\n    vowels = 'aeiou'\n    return char in vowels"
    },
    {
        "instruction": "Create a Python function to print a Fibonacci sequence up to n number of digits. ",
        "response": "def fib(n):\n a,b = 0,1\n while a<n:\n  print(a, end=' ')\n  a,b = b,a+b\n print()"
    },
    {
        "instruction": "Write a function in Python that takes a number, x, and returns True if the number is even or False if the number is odd. ",
        "response": "def is_even(x):\n   return x%2 == 0"
    },
    {
        "instruction": "Create a Python program which takes a sentence and prints back the words in reverse order ",
        "response": "def reverse_words(sentence):\n  words = sentence.split()\n  words.reverse()\n  return ' '.join(words)"
    },
    {
        "instruction": "Generate a function in Python which takes a list and sorts the list elements in ascending order ",
        "response": "def sort_ascending(nums):\n  return sorted(nums)"
    },
    {
        "instruction": "Write a Python program to print the calendar of a given month and year ",
        "response": "import calendar\n\ndef get_calendar(month, year):\n  return calendar.month(year, month)"
    },
    {
        "instruction": "Write a Python code snippet that checks if all elements in the input list are equal. [10, 10, 10]",
        "response": "all_equal = all(x == 10 for x in [10, 10, 10])"
    },
    {
        "instruction": "Identify the correct code to execute an API call with the python requests library. ",
        "response": "import requests\n \nresponse = requests.get('http://example.com/api')"
    },
    {
        "instruction": "Write a Python program to calculate the frequency of each element in a given list. mylist = [2, 3, 4, 2, 3, 5, 6, 7]",
        "response": "def frequency_count(mylist):\n    freq = {}\n    for element in mylist:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n    \nprint(frequency_count(mylist)) # output {2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1}"
    },
    {
        "instruction": "Create a module in Python to read webpages into the program ",
        "response": "import urllib\n\ndef read_webpage(url):\n    with urllib.request.urlopen(url) as response:\n        return response.read()"
    },
    {
        "instruction": "Write a JavaScript statement to delete all cookies ",
        "response": "document.cookie = \"\";"
    },
    {
        "instruction": "Write a python code snippet to square the number 12. ",
        "response": "x = 12\ny = x**2\nprint(y)"
    },
    {
        "instruction": "Write a python code to check for a number being prime or not. num = 11",
        "response": "# Initialize a boolean no_prime\nno_prime = False\n\n# Check all numbers lower than num\nfor i in range(2, num):\n    if num % i == 0: \n        no_prime = True\n        break \n\n# Print the appropriate output\nif no_prime:\n    print(num, 'is not prime')\nelse:\n    print(num, 'is prime')"
    },
    {
        "instruction": "Write a Python code to find the number of vowels in a provided string. string = \"Hello, World!\"",
        "response": "# Count the number of vowels in the string\nnum_vowels = 0\nfor char in string:\n    if char in 'aeiouAEIOU':\n        num_vowels += 1\n\nprint(\"Number of vowels:\", num_vowels)"
    },
    {
        "instruction": "Write a Javascript code to remove all duplicate values from an array, arr. let arr = [1,2,2,3,4,4,5];",
        "response": "let uniqueValues = [...new Set(arr)];\n\nconsole.log(uniqueValues);"
    },
    {
        "instruction": "How do I create a function that sums two integers in Python? ",
        "response": "def add_two_ints(a, b):\n    return a + b"
    },
    {
        "instruction": "Identify and delete duplicate elements from an array in JavaScript. [1, 2, 3, 4, 4, 5]",
        "response": "function removeDuplicates(arr) {\n  let unique = arr.filter((v, i, a) => a.indexOf(v) === i);\n  return unique;\n}\n\nlet arr = [1, 2, 3, 4, 4, 5];\nlet result = removeDuplicates(arr);\nconsole.log(result); // [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Create a class in Python to represent a rectangle with the attributes width, height, and area. ",
        "response": "class Rectangle:\n  def __init__(self, width, height):\n    self.width = width\n    self.height = height\n    self.area = width * height"
    },
    {
        "instruction": "How to create a new array from an existing array in JavaScript? ",
        "response": "const newArray = oldArray.slice(); // creates a shallow copy of the array\n\n// OR\n\nconst newArray = [...oldArray]; // creates a shallow copy of the array"
    },
    {
        "instruction": "Create a browser application in JavaScript that toggles a dark-mode. ",
        "response": "const toggleMode = () => {\n  let mode = localStorage.getItem(\"mode\"); \n  if (mode) {\n    document.body.className = mode;\n    mode === \"dark-mode\" ? mode = \"light-mode\" : mode = \"dark-mode\";\n    localStorage.setItem(\"mode\", mode);\n  } else {\n    localStorage.setItem(\"mode\", \"dark-mode\");\n    document.body.className = \"dark-mode\";\n  }\n}\n\ntoggleMode()"
    },
    {
        "instruction": "Write a Python function to print a multiplication table of size 10. ",
        "response": "def print_multiplication_table(size):\n    for i in range(1, size+1):\n        for j in range(1, size+1):\n            print(i*j, end=\"\\t\")\n        print(\"\\r\")\n \nprint_multiplication_table(10)"
    },
    {
        "instruction": "Create a python class with a method to generate the following table format ",
        "response": "class Table_Generator:\n    def generate_table(self):\n        print('+---------+--------+--------+')\n        print('|   S.No  |  Name  |  Age   |')\n        print('+---------+--------+--------+')"
    },
    {
        "instruction": "Name one benefit of using a function in Python. ",
        "response": "One of the key benefits of using functions in Python is code reusability. Functions help reduce the code duplication and promote code readability by allowing us to store and reuse code in a single place. This makes it easier for us to debug and modify existing code. Furthermore, functions can help reduce the cognitive load and effort required to understand the code. As functions encapsulate related code blocks, we can focus on the logic contained within the function instead of worrying about unrelated code."
    },
    {
        "instruction": "How could you execute a JavaScript code snippet named 'my_script.js' after the page has been loaded? ",
        "response": "We can use the 'onload' event to execute our JavaScript code snippet after the page has been loaded. For example, we can use the following code to execute the 'my_script.js' file once the page has been loaded: \n\nwindow.onload = function() {\n    let script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = \"my_script.js\";\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n};"
    },
    {
        "instruction": "What is the purpose of the keyword `break` in a JavaScript loop? ",
        "response": "The keyword 'break' is used in a loop to stop the execution of the loop and exit the loop. It can be used to terminate an infinite loop and to force an immediate exit from a loop even if the looping condition has not been met."
    },
    {
        "instruction": "What could be a use case of a 'while' loop in Python? ",
        "response": "A while loop can be used to iterate over a sequence or perform a computation until a specific condition is met. For example, it can be used to generate a list of prime numbers, where it would check if the current number is a prime number by checking if its divisible by any of the already discovered primes before it."
    },
    {
        "instruction": "Suggest a data structure in Python to store a list of countries and their capitals. ",
        "response": "A dictionary can be used to store a list of countries and their respective capitals. The key for each country should be the name of the country and the value should be its capital city. For example: \n\ndict = {\n    'India': 'New Delhi',\n    'China': 'Beijing', \n    'UK': 'London'\n}"
    },
    {
        "instruction": "Write a Python program to create a nested dictionary from two lists. l1 = ['a', 'b', 'c'] \nl2 = [1, 2, 3]",
        "response": "{'a': 1, 'b': 2, 'c': 3}"
    },
    {
        "instruction": "Write a JavaScript function to determine if an array is sorted or not. ",
        "response": "function isSorted(arr) {\n  for (let i=1; i<arr.length; i++) {\n    if (arr[i] < arr[i-1]) return false;\n  }\n  return true;\n}"
    },
    {
        "instruction": "Analyze the given JavaScript code, and identify the logical operator being used. if (age <= 18 || age >= 65)",
        "response": "The logical operator being used is the \"or\" operator (||)."
    },
    {
        "instruction": "Create a function in Python that takes two parameters, x and y, and prints out all numbers between x and y. ",
        "response": "def display_numbers(x, y):\n  for i in range(x,y+1):\n    print(i)"
    },
    {
        "instruction": "Create a Python module for extracting the sum of all digits of an integer. ",
        "response": "def digit_sum(number):\n    if number == 0:\n        return 0\n    return (number % 10) + digit_sum(number // 10)"
    },
    {
        "instruction": "Write a Python program to get the volume of a sphere with a given radius. ",
        "response": "import math\n\ndef sphere_volume(radius):\n    return (4*math.pi*radius*radius*radius)/3"
    },
    {
        "instruction": "What is dependency injection and how can it be implemented with JavaScript? ",
        "response": "Dependency injection is a technique for separating the creation of an object’s dependencies from its own behavior. With JavaScript, it can be implemented with the use of ES2015 modules, which allow functions and objects from other modules to be imported. Then, instead of directly creating an object’s dependencies, they can be passed in upon creation. This makes the code more modular and easily testable."
    },
    {
        "instruction": "Are ternary operators fast in Python? ",
        "response": "Ternary operators are often faster than if/else statements in Python, as they can reduce the amount of code and conditionals needed. However, there are some cases where an if/else statement may be faster, such as when there are multiple conditions that need to be checked."
    },
    {
        "instruction": "Create a class in Python named 'Car' and implement a method that shows the current speed of the car. ",
        "response": "class Car():\n    def __init__(self, speed):\n        self.speed = speed\n\n    def show_speed(self):\n        print(\"The current speed is:\", self.speed)"
    },
    {
        "instruction": "Modify a given JavaScript code snippet to add a random background color to all elements with the class name 'box'. document.querySelectorAll('.box').forEach(function(el) {\n  el.style.backgroundColor = \"red\";\n});",
        "response": "document.querySelectorAll('.box').forEach(function(el) {\n  const randomHex = Math.floor(Math.random()*16777215).toString(16);\n  el.style.backgroundColor = `#${randomHex}`;\n});"
    },
    {
        "instruction": "Create a UUID in Python. ",
        "response": "import uuid\n\nprint(uuid.uuid4())"
    },
    {
        "instruction": "Design a python class for a dog to print its name and age when given. Ginger, 3",
        "response": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\ndog = Dog('Ginger', 3)\nprint(dog.get_name())\nprint(dog.get_age())"
    },
    {
        "instruction": "Suggest an alternate solution to the following JavaScript code. var names = [\"Jon\", \"Bob\", \"Mike\"];\n\nfor (var i=0; i<names.length; i++) {\n    console.log(names[i]);\n}",
        "response": "var names = [\"Jon\", \"Bob\", \"Mike\"];\n\nnames.forEach(name => console.log(name));"
    },
    {
        "instruction": "Transform an input string to its uppercase equivalent with JavaScript. inputString=\"This sentence should be in uppercase\"",
        "response": "let inputString = \"This sentence should be in uppercase\";\nlet outputString = inputString.toUpperCase();\nconsole.log(outputString);"
    },
    {
        "instruction": "Convert the following JavaScript switch statement into an if/else statement. let letterGrade;\nswitch (percentage) {\n  case 97:\n  case 96:\n    letterGrade = \"A+\";\n    break;\n  case 95:\n    letterGrade = \"A\";\n    break;\n  default:\n    letterGrade = \"Unknown Grade\";\n    break;\n}",
        "response": "let letterGrade; \nif (percentage === 97 || percentage === 96) {\n  letterGrade = \"A+\";\n} else if (percentage === 95) {\n  letterGrade = \"A\";  \n} else {\n  letterGrade= \"Unknown Grade\";\n}"
    },
    {
        "instruction": "Create a JavaScript object to store three birds names and their corresponding scientific names. Owl - Strigidae\nDove - Columbidae\nEagle - Accipitridae",
        "response": "let birds = {\n    \"Owl\": \"Strigidae\",\n    \"Dove\": \"Columbidae\",\n    \"Eagle\": \"Accipitridae\"\n};"
    },
    {
        "instruction": "How can you access elements in a multi-dimensional array in JavaScript? ",
        "response": "Accesing elements of the array can be done by using the index of the array. For example, for a two-dimensional array, the elements can be accessed using the following syntax: array[i][j], where i is the index of the outer array, and j is the index of the inner array. For a three-dimensional array, the syntax would be array[i][j][k]."
    },
    {
        "instruction": "Create a function which takes a string and invokes all the print statements within the string. string = \"Hello, World!\nHello, Python!\"",
        "response": "def invoke_print_statements(string):\n    exec(string) \n    \n# Driver Code \nif __name__ == '__main__': \n    string = \"print('Hello, World!')\\nprint('Hello, Python!')\"\n    invoke_print_statements(string)"
    },
    {
        "instruction": "Split the sentence into individual words using Python. sentence = \"This sentence needs to be split.\"",
        "response": "words = sentence.split(' ')\nprint(words)\n# Output: ['This', 'sentence', 'needs', 'to', 'be', 'split.']"
    },
    {
        "instruction": "Use the function \"randint()\" to generate a random number between 1 and 10 in Python. ",
        "response": "from random import randint\nrandom_num = randint(1,10)\nprint(random_num)"
    },
    {
        "instruction": "Debug this JavaScript code. function mysteryFunction(x) {\n    let result = 0;\n    for (let i = 1; i <= x; i++) {\n        result = result * i;\n    }\n    return result;\n}",
        "response": "function mysteryFunction(x) {\n    let result = 1;\n    for (let i = 1; i <= x; i++) {\n        result = result * i;\n    }\n    return result;\n}"
    },
    {
        "instruction": "Create a neural network in Python using the given input and output. Input a set of 3 input values (x1, x2, x3) and two output values (y1, y2).",
        "response": "import numpy as np \nimport tensorflow as tf\n\n# Create the model \nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(3,))\n]) \n\n# Compile the model \nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy']) \n\n# Create the input and output data \ninput_data = np.array([[x1, x2, x3]])\noutput_data = np.array([[y1, y2]])\n\n# Train the model \nmodel.fit(input_data, output_data, epochs=100)"
    },
    {
        "instruction": "Design an algorithm in Python to detect anomalies in the given data. Input a dataset containing two columns, temperature and pressure.",
        "response": "def detect_anomaly(data): \n    # Step 1: Calculate mean \n    mean_1 = np.mean(data['temperature']) \n    mean_2 = np.mean(data['pressure']) \n  \n    # Step 2: Calculate the standard deviation \n    sd_1 = np.std(data['temperature']) \n    sd_2 = np.std(data['pressure']) \n  \n    # Step 3: Calculate the threshold\n    cutoff = sd_1 * 3\n  \n    # Step 4: Apply threshold and mark anomalies \n    lower_limit_temperature = mean_1 - cutoff \n    upper_limit_temperature = mean_1 + cutoff \n  \n    lower_limit_pressure = mean_2 - cutoff \n    upper_limit_pressure = mean_2 + cutoff \n  \n    # Mark the anomalies by setting the value as 1 \n    data['anomaly'] = 0 \n    data.loc[data['temperature'] < lower_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['temperature'] > upper_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['pressure'] < lower_limit_pressure, 'anomaly'] = 1  \n    data.loc[data['pressure'] > upper_limit_pressure, 'anomaly'] = 1  \n  \n    # Return the dataframe \n    return data"
    },
    {
        "instruction": "Write a factorial program without using the inbuilt factorial function in Python. ",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "instruction": "Given a list of numbers and a target sum, write a Python program to determine whether there is a set of three numbers in the list that add up to the target sum. [2, 7, 5, 1, 8]",
        "response": "def find_target_sum(nums, target_sum):\n    for i in range(0, len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False"
    },
    {
        "instruction": "Generate a list of 10 random numbers between 0 and 500 in Python. ",
        "response": "import random\nnumbers = [random.randint(0,500) for i in range(10)]\nprint(numbers)"
    },
    {
        "instruction": "Create a Python function to remove duplicates in a given list. list_of_numbers = [2, 3, 3, 5, 5]",
        "response": "def remove_duplicates(list_of_numbers):\n  result = []\n  for number in list_of_numbers:\n    if number not in result:\n      result.append(number)\n  return result"
    },
    {
        "instruction": "Print the results of the following arithmetic expression using python. 6/3+3*2",
        "response": "15.0"
    },
    {
        "instruction": "Generate Python code to retrieve a list of tuples in the given string. String: \"[('test1',1), ('test2',2)]\"",
        "response": "list_items = [item.replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\").split(\",\") for item in s[1:-1].split(\"), (\")]\nlist_of_tuples = [(item[0], int(item[1])) for item in list_items]"
    },
    {
        "instruction": "Generate Python code to extract only the keys from the given dictionary. d = {'name': 'John', 'age': 24, 'city': 'New York'}",
        "response": "keys = list(d.keys())"
    },
    {
        "instruction": "Using the below Python code, Write a code snippet to index all the values of an array. arr = [3, 8, 2, 5, 1]",
        "response": "for i, val in enumerate(arr):\n    print(f\"arr[{i}] = {val}\")"
    },
    {
        "instruction": "Write a Python program to create a numerical addition table ",
        "response": "def addition_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i + j, end= \" \")\n        print()\n\naddition_table(10)"
    },
    {
        "instruction": "Implement a function in JavaScript which checks whether a number is prime or not. ",
        "response": "function isPrime(num) {\n    if (num <= 1) { \n        return false; \n    }\n    \n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Create an API using Python which returns the number of words in a given string. ",
        "response": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/get_words_count\", methods=[\"GET\"])\ndef get_words_count():\n    sentence = request.args.get(\"sentence\")\n    words = sentence.split(\" \")\n    return jsonify({\"words_count\": len(words)})\n\nif __name__ == \"__main__\":\n    app.run()"
    },
    {
        "instruction": "Utilize Python to implement an algorithm which finds the largest number in an array. ",
        "response": "def largestNumber(arr): \n    max = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > max: \n            max = arr[i] \n    return max"
    },
    {
        "instruction": "Write a JavaScript code snippet to create an object with two properties, 'name' and 'age'. ",
        "response": "let person = {\n    name: 'John',\n    age: 25\n}"
    },
    {
        "instruction": "Given a stream of blog posts from a certain website, how would you filter out posts with more than 50 comments in Python? stream_of_blog_posts = [{'title': 'post1', 'comments': 35}, {'title': 'post2', 'comments': 52}, {'title': 'post3', 'comments': 19}]",
        "response": "posts_with_more_than_50_comments = [post for post in stream_of_blog_posts if post['comments'] > 50]"
    },
    {
        "instruction": "In Python, how can we calculate the mean of a numerical data set? ",
        "response": "def mean(data):\n    return sum(data) / len(data)"
    },
    {
        "instruction": "How can we use the reduce() function in JavaScript to find the sum of an array of numbers? ",
        "response": "const numbers = [10, 20, 30]\nconst sum = numbers.reduce((acc, val) => acc + val, 0)\nconsole.log(sum)"
    },
    {
        "instruction": "How can we generate a new HTML page with a given title tag in JavaScript? title = \"My Page\"",
        "response": "const title = \"My Page\"\nconst newPage = `<html><head><title>${title}</title><head></html>`;"
    },
    {
        "instruction": "How can we use the list comprehension method in Python to reverse a given list of string? list_of_strings = [\"cat\", \"dog\", \"rabbit\"]",
        "response": "reversed_list_of_strings = [string[::-1] for string in list_of_strings]"
    },
    {
        "instruction": "How can we replace a substring in a given string with another substring in JavaScript? string = \"Hello World\"\nsubstr1 = \"Hello\"\nsubstr2 = \"Hi\"",
        "response": "finalString = string.replace(substr1, substr2)"
    },
    {
        "instruction": "Modify the following JavaScript for loop so it will loop through the array in reverse order. for (let i = 0; i < array.length; i++) { \n    console.log(array[i]); \n}",
        "response": "for (let i = array.length - 1; i >= 0; i--) { \n    console.log(array[i]); \n}"
    },
    {
        "instruction": "Implement a function in Python to find the maximum number from a list of integers. [3, 5, 1, 6, 10]",
        "response": "def findMax(list): \n    max = list[0] \n  \n    for i in list: \n        if i > max: \n            max = i \n  \n    return max"
    },
    {
        "instruction": "Create a JavaScript function which takes two arguments and returns the larger number. ",
        "response": "function findMax(num1, num2) {\n        if (num1 > num2) {\n            return num1;\n        } else {\n            return num2;\n        }\n    }"
    },
    {
        "instruction": "Rewrite the following Python program to sort the numbers in an array in ascending order. list = [5, 1, 0, 4, 7]",
        "response": "def sort(list): \n    for i in range(len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n                \nlist = [5, 1, 0, 4, 7]\nsort(list) \n\nprint (\"Sorted list is:\") \nprint(list)"
    },
    {
        "instruction": "Create a JavaScript class to find the difference of two given dates. ",
        "response": "class DateCalculator {\n    static daysDifference(date1,date2) {\n        let diffTime = Math.abs(date2.getTime() - date1.getTime());\n        let diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        return diffDays;\n    }\n}"
    },
    {
        "instruction": "Write a Python program to fill a dictionary with key as a number and value as a string for square with {1: \"1\", 2: \"4\", 3: \"9\", ...}. ",
        "response": "dic = {}\nfor i in range (1,11):\n    dic[i] = str(i ** 2)\nprint(dic)"
    },
    {
        "instruction": "Write a JavaScript program to filter out even numbers from an array [1,2,3,4,5,6]. [1,2,3,4,5,6]",
        "response": "const array = [1,2,3,4,5,6];\n \nconst evenNumbers = array.filter(num => num % 2 !== 0);\n \nconsole.log(evenNumbers); // output: [1,3,5]"
    },
    {
        "instruction": "EDIT this JavaScript function to return a list of the square roots of all numbers in a given input array. function squareRoots(arr) {\n  // EDIT THIS\n}",
        "response": "function squareRoots(arr) {\n  const result = [];\n  for (let ele of arr) {\n    result.push(Math.sqrt(ele));\n  }\n  return result;\n}"
    },
    {
        "instruction": "Sort this array of integers in ascending order using JavaScript. const array = [26, 4, 11, 56, 23, 39]",
        "response": "const array = [26, 4, 11, 56, 23, 39];\n\nlet sortedArray = array.sort(function(a,b){\n return a-b;\n});\n\nconsole.log(sortedArray);"
    },
    {
        "instruction": "Create a Python program to find all the perfect squares between 1 and n. ",
        "response": "def perfect_squares(n):\n    result = []\n    for i in range(1, n+1):\n        if is_perfect_square(i):\n            result.append(i)\n    return result\n\ndef is_perfect_square(n):\n    sqrt = int(n**.5)\n    return sqrt**2 == n\n\nif __name__ == '__main__':\n    n = 25\n    result = perfect_squares(n)\n    print(result)"
    },
    {
        "instruction": "Implement a logic to separate even and odd numbers from an array in JavaScript. const numbers = [1,2,3,4,5,6,7];",
        "response": "const evenNumbers = numbers.filter(number => number % 2 == 0);\nconst oddNumbers = numbers.filter(number => number % 2 != 0);"
    },
    {
        "instruction": "Suggest a JavaScript statement to log “Hello World” in the console. ",
        "response": "console.log('Hello World');"
    },
    {
        "instruction": "Write a python script to print 'Hello World' in HTML format ",
        "response": "print(\"<p>Hello World</p>\")"
    },
    {
        "instruction": "Write a python program to convert a number from base 10 to base 8. ",
        "response": "def convert_base_10_to_base_8(number):\n   binary_number = bin(number)[2:]\n   octal_number = oct(int(binary_number, 2))[2:]\n   return octal_number"
    },
    {
        "instruction": "Reformat the following function from JavaScript to Java. function subtract(x, y) {\n  return x - y;\n}",
        "response": "public int subtract(int x, int y) {\n  return x - y;\n}"
    },
    {
        "instruction": "Rewrite the following JavaScript code to jQuery. document.querySelector('#main').addEventListener('click', event => {\n    console.log('The element was clicked!')\n})",
        "response": "$('#main').click(function(event) {\n    console.log('The element was clicked!');\n});"
    },
    {
        "instruction": "Write a JavaScript program to replace a specific word in a string. The given string is: \"Welcome to my website!\"\n\nTo replace the word “website” with “blog”",
        "response": "var str = \"Welcome to my website!\"; \nvar newStr = str.replace(\"website\", \"blog\"); \nconsole.log(newStr);"
    },
    {
        "instruction": "Create a Python class for circles with radius and color as its properties. ",
        "response": "class Circle:\n \n    # Constructor\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n \n    # To get radius\n    def getRadius(self):\n        return self.radius\n \n    # To get color\n    def getColor(self):\n        return self.color"
    },
    {
        "instruction": "Create a JavaScript program to check if a string has at least one alphabet. ",
        "response": "function hasAlphabet(str) {\n  let hasAlphabet = false;\n  for (let char of str) {\n    if (char >= 'A' && char <= 'Z' || char >= 'a' && char <= 'z') {\n      hasAlphabet = true;\n      break;\n    }\n  }\n  return hasAlphabet;\n}"
    },
    {
        "instruction": "Generate a JavaScript function to perform binary search for a given array. ",
        "response": "function binarySearch(array, target) {\n  // Initialize variables\n  let left = 0;\n  let right = array.length - 1;\n\n  // Iterate while left <= right \n  while (left <= right) {\n    // Get middle index\n    let mid = left + Math.floor((right - left) / 2);\n\n    // Match found\n    if (array[mid] === target) {\n      return mid;\n    }\n\n    // If target is smaller than the array element at mid\n    if (target < array[mid]) {\n      right = mid - 1;\n    }\n    // Target is greater than the element at mid\n    else {\n      left = mid + 1; \n    }\n  }\n\n  // We reach here when target is not found\n  return -1;\n}"
    },
    {
        "instruction": "Write a Python script to print the current day, month and year. ",
        "response": "from datetime import datetime\n\nnow = datetime.now()\n\nprint(\"Today is\", now.day, now.month, now.year)"
    },
    {
        "instruction": "Create a JavaScript function to return the sum of the digits in a given number. ",
        "response": "function sumDigits(num) {\n  return [...String(num)].reduce((acc, cur) => acc + Number(cur), 0);\n}"
    },
    {
        "instruction": "Create a JavaScript class to initialize the canvas width and height. ",
        "response": "class Canvas {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n \n  init() {\n    const canvas = document.createElement('canvas');\n    canvas.width = this.width;\n    canvas.height = this.height;\n    return canvas;\n  }\n}"
    },
    {
        "instruction": "Create a Python program to return the longest word in a sentence \"The dog likes to run around the yard\"",
        "response": "def longest_word(sentence):\n    words = sentence.split()\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n            longest_word = word\n\n    return longest_word\n\nprint(longest_word(\"The dog likes to run around the yard\"))"
    },
    {
        "instruction": "Write a JavaScript code snippet to declare a variable and assign it the value 12. ",
        "response": "let myVar = 12;"
    },
    {
        "instruction": "Create a Python function to print out a string in reverse order. \"This is a string\"",
        "response": "def reverse_string(input_str):\n    return input_str[::-1]\n \nprint(reverse_string(\"This is a string\"))"
    },
    {
        "instruction": "Write a JavaScript code snippet to print out the value of a variable named \"myVar\". let myVar = 10;",
        "response": "console.log(myVar);"
    },
    {
        "instruction": "How can you call a function named \"myFunction\" in both JavaScript and Python? ",
        "response": "In JavaScript: myFunction();\nIn Python: myFunction()"
    },
    {
        "instruction": "What is the most efficient way to find the maximum value in a Python list? ",
        "response": "The most efficient way to find the maximum value in a Python list is to use the built-in max() function. For example: max(list)."
    },
    {
        "instruction": "In JavaScript, develop a function to be able to determine if an object has a specific property or not. obj = {\n    name: 'Bob',\n    age: 25\n }",
        "response": "function hasProperty(obj, key) {\n  return obj.hasOwnProperty(key);\n}"
    },
    {
        "instruction": "Implement a JavaScript for creating alert message when a page loads. ",
        "response": "window.onload = function(){\n    alert(\"Welcome to this page!\");\n}"
    },
    {
        "instruction": "Write a JavaScript program to log the numbers from 1 to 100 in the console. ",
        "response": "for (let i = 1; i <= 100; i++) {\n console.log(i);\n}"
    },
    {
        "instruction": "Write a JavaScript code snippet to validate a string for a US phone number. ",
        "response": "function validatePhoneNumber(phoneNumber) {\n    const regExNumeric = /^[0-9]{10}$/;\n    const regExFormatted = /^\\d{3}-\\d{3}-\\d{4}$/;\n    \n    return (regExNumeric.test(phoneNumber) || regExFormatted.test(phoneNumber));\n}"
    },
    {
        "instruction": "Create a function in Python to delete an element from a given list at a specified index. list = [1, 2, 3, 4, 5]\nindex = 2",
        "response": "def deleteElement(list, index): \n   del list[index] \n   return list\n  \nlist = [1, 2, 3, 4, 5] \nindex = 2\n  \nprint(deleteElement(list, index))"
    },
    {
        "instruction": "Write a Python code that detects if a given character is uppercase, lowercase, or something else. ",
        "response": "def is_type(character):\n  if ord(character) >= 65 and ord(character) <= 90:\n    return \"uppercase\"\n  elif ord(character) >= 97 and ord(character) <= 122:\n    return \"lowercase\"\n  else:\n    return \"something else\""
    },
    {
        "instruction": "How could you loop through the elements of a list in Python? ",
        "response": "for element in my_list:\n    # do something with the element"
    },
    {
        "instruction": "Write a JavaScript code to print all substrings of a given string. ",
        "response": "function getSubstrings(str) {\n const substrings = [];\n let i, j, substring;\n\n for (i = 0; i < str.length; i++) {\n   for (j = i + 1; j < str.length + 1; j++) {\n     substring = str.slice(i, j);\n     substrings.push(substring);\n   }\n }\n\n return substrings;\n}\n\nconsole.log(getSubstrings(\"abc\"));"
    },
    {
        "instruction": "Implement a vector class in Python that allows for basic vector operations such as vector addition, subtraction and scalar multiplication. ",
        "response": "class Vector(object):\n \n  def __init__(self, components):\n    self.components = components\n \n  def add(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x + y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def sub(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x - y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def scalar_mul(self, scalar):\n    components = [x * scalar for x in self.components]\n    return Vector(components)"
    },
    {
        "instruction": "Suggest a way to identify similar strings in JavaScript. ",
        "response": "One way to identify similar strings in JavaScript is to use the Levenshtein distance. The Levenshtein distance measures the minimum number of single-character edits (i.e. insertions, deletions, or substitutions) required to change one word into the other. The distance is the number of changes needed to transform one string into another. This technique can be used to compare strings and identify similar strings."
    },
    {
        "instruction": "How would you perform a two-way pivot table in Python using Pandas? ",
        "response": "Pandas can be used to perform a two-way pivot table in Python using the pivot_table() method. The pivot_table() method takes a data frame as an argument and can be used to reshape the data frame into a two-way pivot table. It takes several parameters, including values, index, columns, aggfunc, and fill_value. For example, if we want to calculate the total sales for each customer for each product, we can use the following statement: \n\npd.pivot_table(data, values=\"sales\", columns=\"product\", index=\"customer\", aggfunc=\"sum\", fill_value=0)"
    },
    {
        "instruction": "Suggest a way to sort a list of strings alphabetically in JavaScript. ",
        "response": "A way to sort a list of strings alphabetically in JavaScript is to use the ``Array.sort()`` method. The ``Array.sort()`` method takes a comparison function as an optional argument. The comparison function takes two arguments (``a`` and ``b``) and must return a value less than or equal to 0 if ``a`` should come before ``b`` and a value greater than 0 if ``a`` should come after ``b``. In this case, we can use a comparison function that compares the Unicode codes of each character, returning the difference between the codes of the characters at the first position at which they differ:\n\nfunction alphabeticalSort(a, b) {\n    return a.charCodeAt(0) - b.charCodeAt(0);\n}\n\nlistOfStrings.sort(alphabeticalSort);"
    },
    {
        "instruction": "Suggest a way to check if a given number is a palindrome number in JavaScript. ",
        "response": "A way to check if a given number is a palindrome number in JavaScript is to convert the number to a string and check if the reversed string is the same as the original one. We can use the ``String.prototype.split()`` and ``Array.prototype.reverse()`` methods to reverse the string and compare it with the original string. If the two strings are the same, the number is a palindrome. For example, the following code snippet checks if the number 121 is a palindrome:\n\nvar num = 121;\nvar reversedNumStr = num.toString().split('').reverse().join('');\nvar isPalindrome = reversedNumStr == num.toString(); // Output: true"
    },
    {
        "instruction": "Write a Python class that implements a sorted list. No input.",
        "response": "class SortedList:\n    def __init__(self):\n        self.items = []\n\n    def add(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] < item:\n            i += 1\n        self.items.insert(i, item)\n\n    def remove(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] != item:\n            i += 1\n        if i < len(self.items):\n            del self.items[i]\n\n    def remove_at(self, index):\n        del self.items[index]"
    },
    {
        "instruction": "Extract a portion of a string. String: Python is a great programming language\nSubstring: 'programming'",
        "response": "programming_str = 'Python is a great programming language'[17:]"
    },
    {
        "instruction": "Create a JavaScript function to return the greatest value from the following array of numbers. [2, 4, 8, 10, 15]",
        "response": "function getGreatestValue(arr) {\n  let greatest = arr[0];\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] > greatest) {\n      greatest = arr[i];\n    }\n  }\n  return greatest;\n}"
    },
    {
        "instruction": "Using the given list and dictionary, write the Python code to remove duplicate objects from the list. list_one = [{\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"Janet\", \"Lastname\": \"Wise\"}]\ndict_one = {\"John\": \"Smith\", \"Janet\": \"Wise\"}",
        "response": "new_list = []\n\nfor item in list_one: \n    if item['Name'] + item['Lastname'] not in new_list: \n        new_list.append(item['Name'] + item['Lastname']) \n    if item['Name'] + dict_one[item['Name']] not in new_list: \n        new_list.append(item['Name'] + dict_one[item['Name']])\n\nfinal_list = [item for item in list_one if item['Name'] + item['Lastname'] in new_list]"
    },
    {
        "instruction": "Write a Python script to check if an email address is valid depending on the given conditions. Email address: johnsmith@example.com\nCheck the following conditions:\n1. Must contain an \"@\" symbol\n2. Must contain a \".\"\n3. Must have at least 6 characters",
        "response": "import re\n\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,6}$\"\n    if re.search(regex, email) is not None:\n        return True\n    else:\n        return False\n\nemail = 'johnsmith@example.com'\nif is_valid_email(email):\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")"
    },
    {
        "instruction": "Implement a reverse for loop in Python. ",
        "response": "for i in reversed(range(0, 10)):\n   print(i)"
    },
    {
        "instruction": "Create a Python program to take a float input and output its binary equivalent. 25.68",
        "response": "def floatToBin(num):\n    whole, decimal = str(num).split(\".\")   \n    whole = int(whole)\n    decimal = int (decimal) \n    res = bin(whole).lstrip(\"0b\")+\".\"\n    for x in range(10):\n        decimal *= 2\n        res += str(decimal//1)\n        decimal %= 1\n    return res \n \n# Driver code  \nnumber = 25.68\nprint(floatToBin(number)) # returns '11001.1011'"
    },
    {
        "instruction": "Describe what a condition in a while loop does in Python. ",
        "response": "A condition in a while loop in Python allows code to be executed repeatedly until a certain condition is met. While the condition is true, the code inside the loop is executed and if the condition is false, the loop is exited. This allows for a loop to continue running until a certain condition is met."
    },
    {
        "instruction": "Create an object that uses constructor overloading in Python. ",
        "response": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __init__(self, name, age, job):\n        self.name = name\n        self.age = age\n        self.job = job\n\np1 = Person('John Doe', 25)\np2 = Person('Jane Doe', 30, 'Software Engineer')"
    },
    {
        "instruction": "Write a function in JavaScript that will find the index of an element in an array. ",
        "response": "function findIndex(arr, el) {\n  for (var i=0; i < arr.length; i++) {\n    if (arr[i] === el) return i; \n  }\n  return -1; \n}"
    },
    {
        "instruction": "Angular 5 is a popular JavaScript framework used for front-end web development. What is the command to create a new project in Angular 5? ",
        "response": "ng new <project-name>"
    },
    {
        "instruction": "Create a Javascript class called \"Car\" that takes an argument called \"year\" and prints the value of \"year\". ",
        "response": "class Car{\n    constructor(year){\n        this.year = year;\n    }\n    printYear(){\n        console.log(this.year);\n    }\n}"
    },
    {
        "instruction": "Design a class for representing a person in Python. ",
        "response": "class Person:\n    \"\"\"\n    Class to represent a person\n    \"\"\"\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n    \n    def birthday(self):\n        \"\"\"\n        Increments the age of the person\n        \"\"\"\n        self.age += 1"
    },
    {
        "instruction": "Create a function in JavaScript which takes two parameters x and y and returns the multiplication of the two ",
        "response": "function multiply(x, y) {\n    return x * y;\n}"
    },
    {
        "instruction": "Create a program in python that sorts a given list. ",
        "response": "def bubbleSort(arr):\n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"
    },
    {
        "instruction": "Create a JSON object from a dictionary in Python. {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"Main Street\",\n        \"city\": \"New York City\"\n    }\n}",
        "response": "import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"Main Street\",\n        \"city\": \"New York City\"\n    }\n}\n\njson_data = json.dumps(data)\nprint(json_data)\n# Output: {\"name\": \"John Doe\", \"age\": 30, \"address\": {\"street\": \"Main Street\", \"city\": \"New York City\"}}"
    },
    {
        "instruction": "Parse the following JSON using JavaScript. {\"courseName\":\"Python\"}",
        "response": "const jsonData = JSON.parse('{\"courseName\":\"Python\"}');\nconst courseName = jsonData.courseName;"
    },
    {
        "instruction": "Given an array of integers, write a JavaScript function to remove all duplicate elements. ",
        "response": "function removeDuplicates(arr) {\n    const uniqueElements = [...new Set(arr)];\n    return uniqueElements;\n}"
    },
    {
        "instruction": "Parse the following XML data using Python. <students>\n    <student>\n        <name>John</name>\n        <age>24</age>\n    </student>\n    <student>\n        <name>Jack</name>\n        <age>22</age>\n    </student>\n    <student>\n        <name>Sam</name>\n        <age>25</age>\n    </student>\n</students>",
        "response": "import xml.etree.ElementTree as ET\n\nroot = ET.fromstring('<students>  <student>    <name>John</name>    <age>24</age>  </student>  <student>    <name>Jack</name>    <age>22</age>  </student>  <student>    <name>Sam</name>    <age>25</age>  </student></students>')\n\nstudents = root.findall('student')\nfor student in students:\n    name = student.find('name').text\n    age = student.find('age').text\n    print(name, age)"
    },
    {
        "instruction": "Create a JavaScript timer that runs every two seconds and displays a countdown in the console. ",
        "response": "let count = 10;\n\nlet timerId = setInterval(function() {\n console.log(count);\n \n if (count === 0) {\n  clearInterval(timerId);\n }\n \n count--;\n}, 2000);"
    },
    {
        "instruction": "Given a matrix of X, Y coordinates, write a Python function that returns the angle between the two points. X1 = 2\nY1 = 3\nX2 = 7\nY2 = 10",
        "response": "import math\n\ndef calculate_angle(X1, Y1, X2, Y2):\n    deltaY = Y2 - Y1\n    deltaX = X2 - X1\n    angleInDegrees = (math.atan2(deltaY, deltaX)) * 180 / math.pi\n    return angleInDegrees"
    },
    {
        "instruction": "Create a Python function that takes an array of numbers and returns a string that represent the mean and median of the numbers. [1, 2, 3, 4, 5]",
        "response": "def get_mean_and_median(numbers):\n    mean = sum(numbers)/len(numbers)\n    sorted_numbers = sorted(numbers)\n    index = int(len(sorted_numbers) / 2)\n    median = sorted_numbers[index]\n    return \"Mean: {}, Median: {}\".format(mean, median)"
    },
    {
        "instruction": "Design a Python program to find the longest increasing subsequence in a given array. ",
        "response": "def long_increasing_subsequence(arr):\n    # Number of items in given array\n    n = len(arr)\n \n    # Initialize 'lengths' values for all indices\n    lengths = [1]*n\n \n    # Find the longest increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:\n                lengths[i] = lengths[j] + 1\n \n    return lengths"
    },
    {
        "instruction": "Write a JavaScript code snippet to find the sum of the even numbers in a given range using the reduce() method. let arr = [1,2,3,4,5,6,7,8,9,10];",
        "response": "const sumOfEvenNumbers = arr.reduce((acc, curr) => {\n    if (curr % 2 === 0) {\n        return acc + curr;\n    } \n    return acc;\n}, 0);\nconsole.log(sumOfEvenNumbers);"
    },
    {
        "instruction": "Create a Python code snippet to identify the root cause of a Software Bug. ",
        "response": "def find_causes(data):\n    # identify the root cause of the bug\n\n    causes = set()\n    for line in data:\n        for cause in line.get('causes', []):\n            causes.add(cause)\n\n    # filter insignificant causes\n    causes = [cause for cause in causes if cause not in insignificant_causes]\n\n    return causes"
    },
    {
        "instruction": "Write a Python program to insert a given string into another string at a certain index. Variable String = \"The quick brown fox\" \nString To Insert = \"jumps over\"\nIndex = 16",
        "response": "The quick brown jumps over fox"
    },
    {
        "instruction": "Find the length of a Python list. List = [1,2,3]",
        "response": "List = [1,2,3]\n\nlength = len(List)\nprint(length)\n\n# Output\n3"
    },
    {
        "instruction": "Use the input to write a loop in Python to print each product details. products = [\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n]",
        "response": "for product in products:\n    print(\"Product name: \" + product['name'] + \", Price: \" + str(product['price']))\n\n# Output\n# Product name: iPhone XS, Price: 1000\n# Product name: iPhone XR, Price: 800\n# Product name: iPad Air, Price: 600"
    },
    {
        "instruction": "Write a function in Python to remove the element with the value of ‘apple’ from the list. fruits =[\"banana\", \"apple\", \"mango\", \"orange\"]",
        "response": "def removeValue(fruits, elem):\n    for e in fruits:\n        if e == elem:\n            fruits.remove(e)\n            break\n\nremoveValue(fruits, \"apple\")\n\nprint(fruits) # ['banana', 'mango', 'orange']"
    },
    {
        "instruction": "Write a function in Python to generate a list with the numbers from 0 to the provided number. num = 10",
        "response": "def generateList(n):\n    list = []\n    for i in range(n+1):\n        list.append(i)\n    return list\n\nprint(generateList(num)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "instruction": "Use the input to generate a loop in JavaScript to print an increasing count starting from the given number. num = 5",
        "response": "for (let i = num; i < num + 10; i++) {\n    console.log(i);\n}\n\n# Output\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n# 13\n# 14"
    },
    {
        "instruction": "Write a JavaScript code that creates an array of objects having keys \"name\", \"age\" and \"city\". ",
        "response": "const users = [\n {name: 'John', age: 30, city: 'New York'}, \n {name: 'Lisa', age: 25, city: 'Sydney'},\n {name: 'Alex', age: 27, city: 'London'},\n {name: 'Cathy', age: 28, city: 'Tokyo'},\n {name: 'David', age: 32, city: 'Berlin'} \n];"
    },
    {
        "instruction": "Implement a function in JavaScript that takes an array and returns an object with the count of each element value. array = [true, false, false, true, false, true]",
        "response": "function countElements(arr) {\n const obj = {};\n \n arr.forEach(element => {\n  if (obj.hasOwnProperty(element)) {\n   obj[element] += 1;\n  } else {\n   obj[element] = 1;\n  }\n });\n \n return obj;\n}\n\nconst array = [true, false, false, true, false, true];\nconst countedElements = countElements(array);\nconsole.log(countedElements); // { true: 3, false: 3 }"
    },
    {
        "instruction": "Why is JavaScript called a multi-paradigm language? ",
        "response": "JavaScript is called a multi-paradigm language because it allows developers to use multiple different programming paradimms such as object-oriented programming, functional programming, event-driven programming, and procedural programming. This flexibility allows developers to have more control over the structure of their code and enables them to write programs in whatever style they desire. It also makes JavaScript more versatile, allowing developers to find the best approach for any given problem."
    },
    {
        "instruction": "Design a Python program to read string inputs and print out the reverse of the same ",
        "response": "def reverse_string(string):\n  string = string[::-1]\n  return string"
    },
    {
        "instruction": "Generate a valid python loop to print out the elements of a list. List = [1,2,3,4,5]",
        "response": "for element in List:\n    print(element)"
    },
    {
        "instruction": "Find the most suitable 10-lines python code to generate all permutations of a 3 letters word ",
        "response": "from itertools import permutations \ndef all_permutations(str): \n    permList = permutations(str) \n  \n    for perm in list(permList): \n        print(''.join(perm)) \n  \nif __name__ == \"__main__\": \n    string = \"ABC\"\n    all_permutations(string)"
    },
    {
        "instruction": "Using this list, write a Python program to print out all the duplicate elements my_list = [1, 2, 3, 2, 4, 3]",
        "response": "duplicate = []\n\nfor value in my_list:\n    if my_list.count(value) > 1:\n        if value not in duplicate:\n            duplicate.append(value)\n\nprint(duplicate)"
    },
    {
        "instruction": "Create a program in Python which takes any string as an input and prints the number of each of its characters hello",
        "response": "character_count = {'h':1, 'e':1, 'l':2, 'o':1}"
    },
    {
        "instruction": "Design a Python program which prints the elements in reverse order my_list = [1,2,3,4,5]",
        "response": "def print_reverse(my_list):\n    for i in range(len(my_list)-1, -1, -1):\n        print(my_list[i])\n\nprint_reverse(my_list)"
    },
    {
        "instruction": "Input a sentence with repeated words and write a Python code to remove all the repeated words. sentence = 'The the cat cat sat sat on on the the mat'",
        "response": "def remove_repeated_words(sentence):\n    words = sentence.split(\" \")\n    result = []\n\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return \" \".join(result)\n\nprint(remove_repeated_words(sentence))\n# Output: The cat sat on the mat"
    },
    {
        "instruction": "Format the following array of numbers using Python. arr = [3, 1, 4, 5, 9, 8]",
        "response": "arr = [3, 1, 4, 5, 9, 8]\n\n# sorting the array\narr.sort()\n\n# print the array\nprint(arr)\n\n# Output:\n[1, 3, 4, 5, 8, 9]"
    },
    {
        "instruction": "Reverse an array of integers using Python. arr = [1, 2, 3, 4, 5]",
        "response": "arr = [1, 2, 3, 4, 5]\n \n# reversing the array\narr.reverse()\n \n# print the reversed array\nprint(arr)\n \n# Output:\n[5, 4, 3, 2, 1]"
    },
    {
        "instruction": "Rewrite the following Python function so it returns the opposite of the original output. def returnsThree() :\n return 3",
        "response": "def returnsThree():\n    return -3"
    },
    {
        "instruction": "Write a code for a Javascript program to return the nth Fibonacci number. 8",
        "response": "// returns the nth Fibonacci number\nfunction nthFibonacciNumber(n) {\n    let fib = [0, 1];\n    for (i=2; i<=n; i++)\n    {\n      fib[i] = fib[i-2] + fib[i-1];\n    }\n    return fib[n];\n}\n\nconsole.log(nthFibonacciNumber(8));"
    },
    {
        "instruction": "How can you create a for loop in Python to loop through a list? ",
        "response": "# loop through a list\nlist = [1, 2, 3, 4, 5]\nfor item in list:\n    print(item)"
    },
    {
        "instruction": "Find the 5th element of the list in Python. list = [12, 34, 87, 90, 80, 21]",
        "response": "element = list[4]\nprint(element) # 80"
    },
    {
        "instruction": "Extract a numeric value from the following string in Python. myString = \"The length of the tree is 25 meters\"",
        "response": "import re\n\nnewString = re.findall(r\"[\\d.]+\", myString)\nprint(newString[0]) # 25"
    },
    {
        "instruction": "Develop a machine learning model in Python to predict the credit risk of a customer based on their bank transaction data. <100 rows of bank transaction data>",
        "response": "#import necessary models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#split data into train and test sets\nx_train, x_test, y_train, y_test = train_test_split(bank_data, credit_risk, test_size = 0.3)\n\n#create the machine learning model\nlr_model = LogisticRegression()\n\n#train the model\nlr_model.fit(x_train, y_train)"
    },
    {
        "instruction": "Create a regex pattern in Python that can extract URL from a text string. text = \"Visit http://www.example.com for more information.\"",
        "response": "import re\n\npattern = re.compile(r'(https?://\\S+)')\nurls = re.findall(pattern, text)"
    },
    {
        "instruction": "Create a Python program to calculate the square root of a number provided by the user. ",
        "response": "def square_root(number):\n    \"\"\"This program takes a number and calculates its square root.\"\"\"\n    return number**0.5\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The square root of \", num, \" is \", square_root(num))"
    },
    {
        "instruction": "Develop a for loop in Javascript to output integers from 0 to 10 ",
        "response": "for (let i = 0; i < 11; i++) {\n    console.log(i);\n}"
    },
    {
        "instruction": "Modify the following python program to include a comment explaining the purpose of the code numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num",
        "response": "# This program is used to calculate the sum of a given list of numbers\n\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num"
    },
    {
        "instruction": "Modify the following JavaScript code to find all of the prime numbers from 1 to 100 for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}",
        "response": "for (let i = 1; i <= 100; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n        if (i % j == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        console.log(i);\n    }\n}"
    },
    {
        "instruction": "Generate a Python code snippet to print the list of numbers from 0 to 9. ",
        "response": "for i in range(0,10):\n    print(i)"
    },
    {
        "instruction": "Modify the given JavaScript code to display \"Hello World\" using alert. let message = 'Hi';\nalert(message);",
        "response": "let message = 'Hello World';\nalert(message);"
    },
    {
        "instruction": "Devise a Python code snippet to return the last character of a given string. string = \"stackoverflow\"",
        "response": "last_char = string[-1]\nprint(last_char)"
    },
    {
        "instruction": "Generate a function in Python to compute the area of a rectangle. ",
        "response": "def area_rectangle(length, breadth): \n    return length * breadth"
    },
    {
        "instruction": "Write a Python script to parse given web pages and extract links from it. ",
        "response": "\"\"\"\nWrite a Python script to parse given web pages and extract links from it\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef extract_links(url):\n    response = requests.get(url)\n    data = response.text\n    soup = BeautifulSoup(data, 'html.parser')\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links\n\nif __name__ == '__main__':\n    print(extract_links('https://example.com'))"
    },
    {
        "instruction": "Write a Python program to calculate the number of bits needed to represent an integer in binary form. ",
        "response": "def num_of_bits(num):\n    return len(bin(num)[2:])\n\nif __name__ == '__main__':\n    print(num_of_bits(50))"
    },
    {
        "instruction": "Write a Python code to generate random numbers from the given list. [10, 20, 30, 40]",
        "response": "import random\n\nnumbers = [10, 20, 30, 40]\n\nrandom_number = random.choice(numbers)\n\nprint(random_number)"
    },
    {
        "instruction": "Find the number of occurrences of ‘Python’ in the given string. Python is a great language. Python is easy to learn.",
        "response": "def count_occurences(str, word):\n    return str.count(word)\n\nif __name__ == '__main__':\n    str = 'Python is a great language. Python is easy to learn.'\n    print(count_occurences(str, 'Python'))"
    },
    {
        "instruction": "Write a multi-line comment in Python describing what the following program does. def hello():\n    print(\"Hello World\")",
        "response": "\"\"\"\nThis program prints \"Hello World\" when executed. \nIt defines a function called \"hello\" that does not take any parameters \nand simply prints out \"Hello World\" when it is called.\n\"\"\""
    },
    {
        "instruction": "Create a Python Exception to handle Nonetype Error. ",
        "response": "try:\n    my_list = [1, 2, 3]\n    my_list[3]\nexcept TypeError:\n    print(\"Error: Nonetype Found\")"
    },
    {
        "instruction": "Create a variable in Python to store 10 multidimensional arrays. ",
        "response": "arrays = [[[1,2], [3,4]],\n          [[5,6], [7,8]],\n          [[9,10], [11,12]],\n          [[13,14], [15,16]],\n          [[17,18], [19,20]],\n          [[21,22], [23,24]],\n          [[25,26], [27,28]],\n          [[29,30], [31,32]],\n          [[33,34], [35,36]],\n          [[37,38], [39,40]]]"
    },
    {
        "instruction": "Convert the Python code using the range function in the for loop to a list comprehension statement. my_list = []\nfor i in range(10):\n    my_list.append(i)",
        "response": "my_list = [i for i in range(10)]"
    },
    {
        "instruction": "Write a Python code to generate Fibonacci sequence up to 'n' numbers, where 'n' is a given integer. ",
        "response": "def generateFib(n): \n    fib = [0, 1] \n    while len(fib) < n : \n        fib.append(fib[-1] + fib[-2]) \n          \n    return fib[:n]"
    },
    {
        "instruction": "Write a JavaScript code to count the number of occurrences of an input string in a text string. str1 = \"My name is Mary and my friend's name is Sarah\"\nstr2 = \"name\"",
        "response": "const countOccurences = (text, str) => {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text.slice(i, i + str.length) === str) {\n            count++;\n        }\n    }\n    return count;\n};\n\ncountOccurences(str1, str2);"
    },
    {
        "instruction": "Write a JavaScript code snippet to sort an array of objects by a given property name. var animals = [\n  {name: \"cat\", age: 3},\n  {name: \"dog\", age: 5},\n  {name: \"bird\", age: 1}\n];",
        "response": "animals.sort((a, b) => (a.age > b.age) ? 1 : -1);"
    },
    {
        "instruction": "Write a JavaScript code to print the characters of a string one by one in an alert message. str = \"Hello World!\"",
        "response": "for (let i = 0; i < str.length; i++) {\n  alert(str.charAt(i));\n}"
    },
    {
        "instruction": "Replace the \"TODO\" comment in the following Python statement with an appropriate value. count = 0\n# TODO: add 1 to count",
        "response": "count = 0\ncount += 1"
    },
    {
        "instruction": "In the following JavaScript function, edit the function body so that it returns the number stored in the variable 'currentNum' minus 5. function subtractFive(currentNum) {\n  // TODO\n}",
        "response": "function subtractFive(currentNum) {\n  return currentNum - 5;\n}"
    },
    {
        "instruction": "Write a Python script to convert a given number of minutes into hours and minutes. ",
        "response": "def minutes_to_hours(minutes):\n  hours = minutes // 60\n  minutes = minutes % 60\n  return hours, minutes"
    },
    {
        "instruction": "Extract only the digits from a given string using Python. ",
        "response": "import re\n\ndef extract_digits(string):\n    regex = r\"\\D\"\n    return re.sub(regex, \"\", string)"
    },
    {
        "instruction": "Write a JavaScript function to convert the given string to title case. ",
        "response": "function toTitleCase(str) {\n    return str.replace(/\\w\\S*/g, function(txt){\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}"
    },
    {
        "instruction": "How can you access the value of a key from a JavaScript object? ",
        "response": "You can access a value from a JavaScript object using either dot notation or square bracket notation. \n\nUsing dot notation, you can do something like \"object.key\", where the key is the name of the property you want to access. \n\nUsing bracket notation, you can do something like \"object[\"key\"]\", where the key is a string containing the name of the property you want to access."
    },
    {
        "instruction": "Write a JavaScript code to filter a given array and return only the even numbers. array = [1,2,3,4,5,6,7]",
        "response": "const even = array.filter(num => num % 2 === 0);"
    },
    {
        "instruction": "How can you validate a credit card number using JavaScript? ",
        "response": "You can validate a credit card number using JavaScript with the Luhn algorithm. The Luhn algorithm is a simple checksum formula that can be used to validate various identification numbers, such as credit card numbers, National Provider Identifier (NPI) numbers, and Canadian Social Insurance Numbers (SINs)."
    },
    {
        "instruction": "Write a Python code to sort a given list into descending order. ",
        "response": "def sortDescending(nums):\n  nums.sort(reverse=True)\n  return nums"
    },
    {
        "instruction": "How do you define and call a function in Python? ",
        "response": "In Python, a function is defined using the `def` keyword followed by the function name, a list of parameters and the code block that implements the function. To call a function, you need to provide the name of the function followed by a list of arguments. For example, to define and call a function called `myfunc` with an argument `x`:\n\ndef myfunc(x):\n    # function implementation\n\nmyfunc(x)  # call the function with argument x"
    },
    {
        "instruction": "What is the syntax for performing an instruction inside a loop in JavaScript? ",
        "response": "The syntax for performing an instruction inside a loop in JavaScript is: \n\nfor (initialization; condition; iteration) {\n    // instruction\n}"
    },
    {
        "instruction": "Create a Python script that inputs an integer and prints \"odd\" if the number is odd, or \"even\" if the number is even. ",
        "response": "def check_even_or_odd(num):\n  if num % 2 == 0:\n    print(\"even\")\n  else:\n    print(\"odd\")\n  \ncheck_even_or_odd(5) # odd"
    },
    {
        "instruction": "Create a Python class for a movie instance with name, director, and year fields. ",
        "response": "class Movie:\n    def __init__(self, name, director, year):\n        self.name = name\n        self.director = director\n        self.year = year"
    },
    {
        "instruction": "Create a function in JavaScript that squares a given number. ",
        "response": "const square = (num) => {\n  return num * num;\n}"
    },
    {
        "instruction": "Complete the following function in Python which will return all the numbers in a list between a given minimum and maximum. def getRange(min, max):",
        "response": "def getRange(min, max):\n  return [i for i in range(min, max+1)]"
    },
    {
        "instruction": "Create a function in JavaScript that calculates the area of a rectangular room given its width and length. ",
        "response": "const calculateArea = (width, length) => {\n  return width * length;\n}"
    },
    {
        "instruction": "Create a function in Python that prints out all prime numbers between two given numbers. ",
        "response": "def print_primes(start, end):\n    for num in range(start, end):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)"
    },
    {
        "instruction": "Generate the output given the following input to the Python function you wrote in  task 11. print_primes(5, 15)",
        "response": "5\n7\n11\n13"
    },
    {
        "instruction": "How can you write a JavaScript regular expression to validate an email address? ",
        "response": "var re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;"
    },
    {
        "instruction": "What does a negative index signify in a Python array? ",
        "response": "A negative index in a Python array is used to access elements from the end of the array, where the last element of the array is at index -1."
    },
    {
        "instruction": "Rewrite the following jQuery code to its vanilla JavaScript equivalent. $(\"#list li\").each(function(){\n  //some code\n});",
        "response": "document.querySelectorAll(\"#list li\").forEach(function (el) {\n  //some code\n});"
    },
    {
        "instruction": "Write a function in Python to generate a list of numbers that is the square of all numbers between 1 and the number provided. num = 10",
        "response": "def generate_square_list(num):\n    result = []\n    for i in range(1, num+1):\n        result.append(i*i)\n    return result"
    },
    {
        "instruction": "Given a list of sentence fragments, use a loop in Python to print each fragment on a separate line. sentences = [\"Hello\", \"My name is\", \"John\", \"Nice to meet you!\"]",
        "response": "for sentence in sentences:\n    print(sentence)"
    },
    {
        "instruction": "In the following Python function, insert code to check if the given number is even or odd. def check_num(num):\n    # TODO\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")",
        "response": "def check_num(num):\n    assert isinstance(num, int), \"num must be an integer value\"\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "instruction": "Create a new class in Python named \"Employee\". ",
        "response": "class Employee:\n    def __init__(self):\n        pass"
    },
    {
        "instruction": "Using the comment as a guide, write code in JavaScript to generate a random number between 1 and 10. // TODO",
        "response": "let randomNumber = Math.floor(Math.random() * 10 + 1);"
    },
    {
        "instruction": "In the following code, write a switch statement in JavaScript that identifies whether a number is positive, negative, or zero. num = 5",
        "response": "switch(num) {\n    case (num > 0):\n        console.log(\"positive\");\n        break;\n    case (num < 0):\n        console.log(\"negative\");\n        break;\n    case (num == 0):\n        console.log(\"zero\");\n        break;\n    default:\n        console.log(\"Error\");\n        break;\n}"
    },
    {
        "instruction": "Write a Python function to sort the given array of dictionaries by key value. arr = [{'name': 'Jose', 'age': 32}, {'name': 'Ravi', 'age': 23}, {'name': 'Paul', 'age': 26}]",
        "response": "def sort_by_key(arr):\n return sorted(arr, key=lambda i: i['name'])"
    },
    {
        "instruction": "Suggest a python code to print all the even numbers from the given list. list_of_numbers = [11, 22, 31, 37, 44]",
        "response": "list_of_numbers = [11, 22, 31, 37, 44]\nfor num in list_of_numbers:\n    if num % 2 == 0:\n        print(num)"
    },
    {
        "instruction": "Inside a Python program, how would you convert a float number to a string? ",
        "response": "str_number = str(float_number)"
    },
    {
        "instruction": "What should be the output of the following JavaScript statement? let x = 5 + 4",
        "response": "The output of the statement is 9."
    },
    {
        "instruction": "Develop a Python function that returns the first two characters of a string. string = \"GPT-3\"",
        "response": "def first_two_chars(string):\n  return string[:2]"
    },
    {
        "instruction": "Construct a block of JavaScript code to find the smallest of 3 numbers ",
        "response": "let num1 = 10;\nlet num2 = 20;\nlet num3 = 15;\n\nlet smallest = Math.min(num1, num2, num3);\nconsole.log(smallest);"
    },
    {
        "instruction": "Create a JavaScript object with 3 keys and 3 values. ",
        "response": "const myObject = { \n  key1: 'value1',\n  key2: 'value2', \n  key3: 'value3' \n}"
    },
    {
        "instruction": "Format this JavaScript code in a readable way. function foo(){console.log(\"this is a test\")}",
        "response": "function foo() {\n  console.log(\"this is a test\");\n}"
    },
    {
        "instruction": "Write a JavaScript program to calculate the exponential for a given base and exponent. Base = 3, exponent=4",
        "response": "function calculateExponential(base, exponent) {\n  let result = 1;\n  for (let i = 0; i < exponent; i++) {\n    result *= base;\n  }\n  return result;\n}"
    },
    {
        "instruction": "Rewrite this C++ function in Python int max (int a, int b)\n{\nif (a > b) \nreturn a;\nelse \nreturn b; \n}",
        "response": "def max(a, b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "instruction": "Write a Python code to print the following output:\nday     temperature\nMonday    20\nTuesday   25 ",
        "response": "print(\"day     temperature\")\nprint(\"Monday    20\")\nprint(\"Tuesday   25\")"
    },
    {
        "instruction": "Write a code to flatten a two-dimensional list into one-dimensional list in Python. Two-dimensional List: [[1,2], [3,4], [5,6]]",
        "response": "def flatten_2d_list(lst):\n  flat_list = []\n  for elem in lst:\n    for item in elem:\n      flat_list.append(item)\n  return flat_list\n\ntest_list = [[1,2], [3,4], [5,6]] \nprint(flatten_2d_list(test_list))"
    },
    {
        "instruction": "How can we dynamically add an element to a set in Python? ",
        "response": "In Python, we can dynamically add an element to a set using the add() method. For example, \n\ns = set()\ns.add(4)\nprint(s)"
    },
    {
        "instruction": "Change the following list of strings to uppercase in Python. List: ['one', 'two', 'three']",
        "response": "list_strings = [\"one\", \"two\", \"three\"]\n\nlist_strings = [string.upper() for string in list_strings]\n\nprint(list_strings)"
    },
    {
        "instruction": "How can we create an array of ten zeroes in JavaScript? ",
        "response": "In JavaScript, we can create an array of ten zeroes using the Array.from() method. For example:\n\nconst array = Array.from({length: 10}, () => 0);\n\nconsole.log(array);"
    },
    {
        "instruction": "Create a python function that computes the area of a rectangle given the length and width. ",
        "response": "def calculateRectangleArea(length, width):\n  area = length * width\n  return area"
    },
    {
        "instruction": "Generate a random 29 character hexadecimal string using javascript. ",
        "response": "function generateRandomHexString(length) {\n    let result = '';\n    const characters = '0123456789ABCDEF';\n\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n \n    return result;\n}\nlet hexString = generateRandomHexString(29);\nconsole.log(hexString);"
    },
    {
        "instruction": "Design a JavaScript program that takes two numbers as input and prints their sum. ",
        "response": "// Define a function to add two numbers\nfunction addTwoNumbers(num1, num2){\n  return num1 + num2;\n}\n\n// Main program\n// Get two numbers from user\nlet num1 = prompt(\"Enter the first number to add:\");\nlet num2 = prompt(\"Enter the second number to add:\");\n\n// Call the function to get the sum\nlet sum = addTwoNumbers(num1, num2);\n\n// Print result to the user\nconsole.log(`The sum of ${num1} and ${num2} is: ${sum}`);"
    },
    {
        "instruction": "Write a Python script to compute Pi to the Nth digit. ",
        "response": "import math\n\nn = int(input(\"Enter the number of digits of pi to compute: \"))\n\n# Compute pi to nth decimal place\npi = round(math.pi, n)\n\nprint(\"The value of pi to {0} decimal places is: {1}\".format(n, pi))"
    },
    {
        "instruction": "Create a JavaScript function that takes in two arrays of numbers, and returns an array containing only the numbers that appear in both arrays. arr1 = [1, 2, 3, 4, 5]; \narr2 = [3, 4, 5, 6, 7]",
        "response": "function containsSameNumbers(arr1, arr2) {\n\tconst intersection = [];\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr2.includes(arr1[i])) {\n\t\t\tintersection.push(arr1[i]);\n\t\t}\n\t}\n\treturn intersection;\n}\n\ncontainsSameNumbers(arr1, arr2); // Output: [3, 4, 5]"
    },
    {
        "instruction": "In Python, create a function that takes a string as an argument and returns a string with the vowels replaced with an asterisk (*). ",
        "response": "def replace_vowels(string):\n\tvowels = \"aeiou\"\n\tresult = \"\"\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tchar = \"*\"\n\t\tresult += char\n\treturn result"
    },
    {
        "instruction": "What is the purpose of the `sort()` JavaScript array method? ",
        "response": "The sort() JavaScript array method is used to sort the elements of an array in place and returns the sorted array. The default sort order is ascending according to the string Unicode code points."
    },
    {
        "instruction": "Create a JavaScript function that takes a positive integer as an argument and returns the first prime number larger than that integer. num = 10",
        "response": "function nextPrime(num) {\n  let isPrime = true;\n  let nextNum = num + 1;\n  while (isPrime) {\n    for (let i = 2; i < nextNum; i++) {\n      if (nextNum % i === 0) {\n        nextNum++;\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      return nextNum;\n    }\n  }\n }\n\nnextPrime(num); // Output: 11"
    },
    {
        "instruction": "Create a JavaScript object with two properties, `name` and `age`, and two methods `sayHello`, which logs \"Hello\" to the console, and `addOneToAge`, which increments the `age` by one. ",
        "response": "const user = {\n  name: 'John',\n  age: 20,\n  sayHello: function() {\n    console.log('Hello');\n  },\n  addOneToAge: function() {\n    this.age++;\n  }\n}"
    },
    {
        "instruction": "In JavaScript, write 3 lines of code to define a function `add()` which will take two numbers as arguments and returns their sum. ",
        "response": "function add(a, b) {\n  let sum = a + b;\n  return sum;\n}"
    },
    {
        "instruction": "In Python, write a function to print out a sequence of numbers from 1 to 10. ",
        "response": "def print_sequence():\n  for i in range(1, 11):\n    print(i)\n\nprint_sequence() # Output: 1 2 3 4 5 6 7 8 9 10"
    },
    {
        "instruction": "How can you generate a random number in the range of 1 to 10 in Python? ",
        "response": "import random\nrandom_number = random.randint(1, 10)"
    },
    {
        "instruction": "Write a JavaScript program to accept two numbers from the user and multiply them. ",
        "response": "let num1 = prompt('Enter the first number:');\nlet num2 = prompt('Enter the second number:');\n\nlet result = parseInt(num1) * parseInt(num2);\n\nconsole.log(`The product of ${num1} and ${num2} is ${result}`);"
    },
    {
        "instruction": "Write a Python script that uses regular expressions to check whether a given URL is correctly formatted or not. ",
        "response": "import re\n\ndef is_valid_url(url):\n # Check if the URL is valid using a regex\n regex = re.compile(r\"^(?:http|ftp)s?://([^/]+[.])*[^/]+/?.*$\")\n if regex.match(url):\n  return True\n return False"
    },
    {
        "instruction": "Suggest a method to run a python program from an interactive terminal session. ",
        "response": "The simplest way to run a python program from an interactive terminal session is to use the \"python\" command. For example, if you have a file called \"myprog.py\", you can type \"python myprog.py\" at the command line and the program will be executed. Alternately, you can use the \"execfile\" command, which takes a file name as an argument and executes it."
    },
    {
        "instruction": "Create a bash script to print the version of python installed in the computer. ",
        "response": "#!/bin/bash\npython --version"
    },
    {
        "instruction": "Given a list of numbers and a target number, write a Python program to find if there exists a sublist whose sum equals the target. numbers = [2, 4, 8, 9, 5, 7], target = 15",
        "response": "def sublist_sum(numbers, target) : \n    n = len(numbers) \n  \n    # Consider all sublists of arr[] and return \n    # true if given sum is present in any of them \n    for i in range(n) : \n        curr_sum = numbers[i] \n  \n        # Try different endpoints for current subarray \n        j = i+1\n        while j<=n : \n  \n            if curr_sum == target : \n                return True\n  \n            if curr_sum > target or j == n: \n                break\n  \n            curr_sum = curr_sum + numbers[j] \n            j += 1\n  \n    return False"
    },
    {
        "instruction": "Write a Python script to calculate the total of all the elements in a nested list. nested_list = [[1,2,3], [4,5,6], [7,8,9]]",
        "response": "def sum_of_nested_list(nested_list):\n    total = 0\n    for internal_list in nested_list:\n        for num in internal_list:\n            total += num\n    return total"
    },
    {
        "instruction": "Write a Python script to find the maximum depth of a given nested list. nested_list = [[1,2], [3,4], [5,6,7]]",
        "response": "def max_depth_of_nested_list(nested_list):\n    max_depth = 1\n    for inner_list in nested_list:\n        depth = 1\n        if type(inner_list) == list:\n            depth += max_depth_of_nested_list(inner_list)\n        max_depth=max(depth, max_depth)\n    return max_depth"
    },
    {
        "instruction": "Given a list of integers, write a Python code to return the most frequent item. num_list = [3, 7, 8, 8, 5, 7, 8, 6, 8]",
        "response": "ModeElement = max(set(num_list), key = num_list.count) \nprint(\"Most Frequent Element : \", ModeElement)"
    },
    {
        "instruction": "Create a function to calculate the factorial of 5 using Python. ",
        "response": "def factorial(n): \n   if n == 0: \n       return 1\n   else: \n       return n * factorial(n-1) \nprint(factorial(5)) # Output: 120"
    },
    {
        "instruction": "Given an array of integers, write JavaScript code to find the largest number amongst the array elements. arr = [5, 10, 2, 7, 3]",
        "response": "let largestNumber = arr.reduce(\n  (mostRecentLargest, currentItem) => \n    currentItem > mostRecentLargest ? \n    currentItem : mostRecentLargest\n);\n\nconsole.log(largestNumber); // Output: 10"
    },
    {
        "instruction": "Create a function to check if two strings are an anagram of one another using Python. str1 = 'cat'\nstr2 = 'tac'",
        "response": "def anagram_checker(str1, str2): \n    if (len(str1)==len(str2)): \n        if (\"\".join(sorted(str1.lower())) == \"\".join(sorted(str2.lower()))): \n            return True\n        else: \n            return False"
    },
    {
        "instruction": "Build a Lambda function using Python to calculate the sum of two numbers. n1 = 5\nn2 = 8",
        "response": "def add_two_numbers(n1, n2):\n return n1 + n2"
    },
    {
        "instruction": "Generate a list in Python that contains the numbers from 0 to 50 that are divisible by 7. ",
        "response": "numbers = []\nfor i in range(51):\n  if i % 7 == 0:\n    numbers.append(i)\nprint(numbers)\n# output: [0, 7, 14, 21, 28, 35, 42, 49]"
    },
    {
        "instruction": "Write a Python code snippet to get the first 1000 prime numbers. ",
        "response": "primes = []\nn = 2\nwhile len(primes) < 1000:\n if is_prime(n):\n primes.append(n)\n n += 1\n\nprint(primes)"
    },
    {
        "instruction": "Write a Python code snippet to sum up all the elements in a given dictionary. {\n  'a': 10,\n  'b': 15,\n  'c': 20\n}",
        "response": "d = {'a': 10, 'b': 15, 'c': 20} \n\nprint(sum(d.values())) # Output: 45"
    },
    {
        "instruction": "What's the output of this program in Python given the following input? input_string = \"Hello, World!\"   \nlist_of_chars = list(input_string)\n\nfor current_char in list_of_chars:\n print(current_char)",
        "response": "H\ne\nl\nl\no\n,\n \nW\no\nr\nl\nd\n!"
    },
    {
        "instruction": "Scan through the following code in JavaScript and replace the placeholders with appropriate code. var numbers = [1, 2, 3, 4];\n\nfor(___){\n  console.log(___);\n}",
        "response": "var numbers = [1, 2, 3, 4];\n\nfor(var i = 0; i < numbers.length; i++){\n  console.log(numbers[i]);\n}"
    },
    {
        "instruction": "Edit the following Python code to make it error-free. a = 33\nab = a +",
        "response": "a = 33\nab = a + b"
    },
    {
        "instruction": "Using JavaScript, write code to display the current time in the format \"hh:mm:ss\". ",
        "response": "let now = new Date();\nlet time = now.getHours() + \":\" + now.getMinutes() + \":\" + now.getSeconds();\nconsole.log(time);"
    },
    {
        "instruction": "Write a JavaScript function that accepts two parameters - a number and a string - and returns a sentence with both parameters combined. num=10;\nstr=\"apples\"",
        "response": "function combine(num, str) {\n    return `There are ${num} ${str}!`;\n}"
    },
    {
        "instruction": "Generate a Python class definition for a pig object that includes the following properties. name: string\ncolor: string\nage: integer",
        "response": "class Pig(object):\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_color(self, color):\n        self.color = color\n    \n    def set_age(self, age):\n        self.age = age"
    },
    {
        "instruction": "Solve the following programming puzzle using Python. A rope connected two opposite trees.  You need to cut the rope so the rope is never longer than 10 meters.  What is the shortest distance you can cut?",
        "response": "def closest_cutting_distance(total_rope_length):\n    '''This function will calculate the shortest distance you can cut a rope so the rope is never longer than 10 meters.'''\n    if total_rope_length <= 10:\n        return total_rope_length\n    else:\n        return total_rope_length - 10"
    },
    {
        "instruction": "Create an array in Python that contains numbers from 1 to 5. ",
        "response": "my_array = [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Write a function in JavaScript that counts the number of characters in a sentence. The quick brown fox",
        "response": "function characterCounter(str) {\n return str.length;\n}"
    },
    {
        "instruction": "Write a code in Python that returns an inversion of a given string. tea",
        "response": "def reverseStr(s): \n    return s[::-1] \n  \ns = \"tea\"\nprint(reverseStr(s))"
    },
    {
        "instruction": "What is the complexity class of the below Python code snippet for adding an item to a list? list = [1, 2, 3]\nlist.append(4)",
        "response": "The complexity class of this code snippet is O(1) since appending an item to a list has constant time complexity."
    },
    {
        "instruction": "Define a JavaScript class called Person that has a constructor for setting the name of the person. ",
        "response": "class Person {\n   constructor(name) {\n      this.name = name\n   }\n}"
    },
    {
        "instruction": "How would you convert the following JavaScript object to a JSON string? let myObj = {\n   name: \"John Doe\",\n   age: 32\n};",
        "response": "let  myJSON  =  JSON.stringify(myObj);"
    },
    {
        "instruction": "What is the data type of the following variable in JavaScript?\nlet myNumber = 10 ",
        "response": "The data type of the variable myNumber is a number."
    },
    {
        "instruction": "Write a Python class that has two variables 'name' and 'age' and a method to print the values of both variables. ",
        "response": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_values(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)"
    },
    {
        "instruction": "Write a JavaScript code snippet to concatenate the given strings: \"Hello\" and \"World!\" ",
        "response": "var string1 = \"Hello\";\nvar string2 = \"World!\";\n\nconsole.log(string1 + ' ' + string2); // Hello World!"
    },
    {
        "instruction": "Write a JavaScript method that takes an array of numbers and checks if all values in the array are the same. [2,2,2,2]",
        "response": "function allValuesSame(arr) {\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] !== arr[0])\n      return false;\n  }\n  return true;\n}"
    },
    {
        "instruction": "In JavaScript, write a function to calculate the nth term in the Fibonacci series. ",
        "response": "function fibonacci(n){\n if (n <= 1) \n  return n;\n return fibonacci(n - 1) + fibonacci(n - 2);\n}"
    },
    {
        "instruction": "Write a Python code to calculate the total price of a given list of items including taxes. items = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5",
        "response": "#Calculate total price of a given list of items including taxes\n\nitems = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5\n\ntotal_price = 0\n\nfor item in items:\n  total_price += item['price']\n\ntotal_price = total_price + (total_price * (tax_rate/100))\n\nprint(total_price)"
    },
    {
        "instruction": "Write a code in Python to print out the common elements of two lists which are [2, 4, 6, 8] and [3, 6, 9, 12]. ",
        "response": "#Function to print out the common elements of two lists\ndef commonElements(l1, l2):\n    result = [value for value in l1 if value in l2]\n    return result\n\n# Lists to compare\nlist1 = [2, 4, 6, 8] \nlist2 = [3, 6, 9, 12] \n\n# Output  \nprint(commonElements(list1, list2)) \n\n# Output: [6]"
    },
    {
        "instruction": "Perform sentiment analysis on the given text using NLTK library in Python. The food here is amazing.",
        "response": "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"The food here is amazing!\"]\n\nsid = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    ss = sid.polarity_scores(sentence)\n    print(\"for sentence: {}, sentiment analysis: {}\".format(sentence, ss))\n\n# Output\n# for sentence: The food here is amazing!, sentiment analysis: {'neg': 0.0, 'neu': 0.436, 'pos': 0.564, 'compound': 0.6249}"
    },
    {
        "instruction": "Create a Python dictionary which contains the student name and their grade for the course. {\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n}",
        "response": "student_grades = {\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n}"
    },
    {
        "instruction": "Create a Python class with the following attributes: firstname, lastname and address. ",
        "response": "# Define a python class \nclass Person: \n def __init__(self, firstname, lastname, address): \n  self.firstname = firstname\n  self.lastname = lastname\n  self.address = address"
    },
    {
        "instruction": "Write a Python program to find all the factors of an integer. number = 16",
        "response": "def find_factors(number):\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append(i)\n    return factors"
    },
    {
        "instruction": "Write a Python function to compare two lists and return the elements that are in both of them. list1 = [3, 5, 7, 8]\nlist2 = [3, 5, 10, 12]",
        "response": "def compare_lists(list1, list2):\n    return [x for x in list1 if x in list2]"
    },
    {
        "instruction": "Write a Python function that takes two lists and returns a new list which contains only the unique elements from both of the lists. list1=[1,2,3,4]\nlist2=[3,4,5,6]",
        "response": "def unique_from_two_lists(list1,list2):\n  return list(set(list1 + list2))"
    },
    {
        "instruction": "Create a Python program to analyze a given list of URL requests and count the number of unique requests. ",
        "response": "def count_unique_requests(url_list):\n    return len(set(url_list))"
    },
    {
        "instruction": "Using Python, parse a given XML document and output the names of all elements with the “class” attribute. ",
        "response": "from xml.etree import ElementTree\n\ndef find_elements(tree):\n    elements = []\n    for elem in tree.iter():\n        if 'class' in elem.attrib:\n            elements.append(elem.tag)\n    return elements"
    },
    {
        "instruction": "Write a Python function to convert a given number of days into weeks, days. ",
        "response": "def convert_days(days):\n  weeks = days // 7\n  days = days % 7\n  return (weeks, days)"
    },
    {
        "instruction": "Write a Python function that takes a list of strings as an input and returns a new list with the strings sorted by length. ",
        "response": "def sort_by_length(lst):\n  return sorted(lst, key=len)"
    },
    {
        "instruction": "Write a Python function that takes a list of n strings and a number k and returns the longest string with length of k or less. ",
        "response": "def find_longest_at_length(lst, k):\n    longest_str = lst[0]\n    for s in lst[1:]:\n        if len(s) <= k and len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"
    },
    {
        "instruction": "Create a JSON string representation of the given Python dictionary. {'name': 'John', 'age': 20, 'hobby': 'Coding'}",
        "response": "var jsonStr = JSON.stringify({name: \"John\", age: 20, hobby: \"Coding\"});"
    },
    {
        "instruction": "Implement a sorting algorithm in Python to arrange the given array in descending order. [10, 80, 40, 20, 60]",
        "response": "def descendingOrder(arr): \n    arr.sort(reverse = True) \n    return arr \n  \n# Driver code \narr = [10, 80, 40, 20, 60] \noutput = descendingOrder(arr) \nprint(output)"
    },
    {
        "instruction": "Write a Python class for a Employee object to store the basic properties such as name, age, salary, etc. ",
        "response": "class Employee:\n \n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n \n    def get_details(self):\n        return \"Name: {}, Age: {}, Salary: {}\".format(self.name, self.age, self.salary)"
    },
    {
        "instruction": "Write a JavaScript function for finding the biggest element in an array. [2, 4, 5, 6, 8, 10]",
        "response": "function findMax(arr) { \n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) { \n    if (arr[i] > max) \n      max = arr[i]; \n  } \n  return max; \n}"
    },
    {
        "instruction": "Create a Python class named \"Bicycle\" which has two attributes named \"color\" and \"wheels\". ",
        "response": "class Bicycle: \n  def __init__(self, color, wheels):\n      self.color = color\n      self.wheels = wheels"
    },
    {
        "instruction": "Make a copy of a given dictionary in Python. ",
        "response": "import copy\n\noriginal_dict = {1: 'a', 2: 'b', 3: 'c'}\nnew_dict = copy.deepcopy(original_dict)"
    },
    {
        "instruction": "Create an object in JavaScript containing the output of a multiplication table from 1 to 10. ",
        "response": "let multiplicationTable = {\n 1:1,2,3,4,5,6,7,8,9,10,\n 2:2,4,6,8,10,12,14,16,18,20,\n 3:3,6,9,12,15,18,21,24,27,30,\n 4:4,8,12,16,20,24,28,32,36,40,\n 5:5,10,15,20,25,30,35,40,45,50,\n 6:6,12,18,24,30,36,42,48,54,60,\n 7:7,14,21,28,35,42,49,56,63,70,\n 8:8,16,24,32,40,48,56,64,72,80,\n 9:9,18,27,36,45,54,63,72,81,90,\n 10:10,20,30,40,50,60,70,80,90,100\n};"
    },
    {
        "instruction": "Develop a Python script to count the number of characters, words, and sentences present in a given string. This is a sample sentence to test the program.",
        "response": "string = 'This is a sample sentence to test the program.'\ncharacter_count = len(string)\nword_count = len(string.split())\nsentence_count = len(string.split('.'))\n\nprint('Number of characters: ', character_count)\nprint('Number of words: ', word_count)\nprint('Number of sentences: ', sentence_count)\n\nOutput:\nNumber of characters: 45\nNumber of words: 8\nNumber of sentences: 1"
    },
    {
        "instruction": "Given an array [6, 4, 15, 10], write a JavaScript code snippet to find the largest number. [6, 4, 15, 10]",
        "response": "let largest = 0;\nlet arr = [6, 4, 15, 10];\n\nfor (let i = 0; i < arr.length; i++) {\n  if (arr[i] > largest) {\n    largest = arr[i];\n  }\n}\n\nconsole.log(largest); // 15"
    },
    {
        "instruction": "Write a JavaScript code snippet to retrieve the value of the cookie named \"userID\". ",
        "response": "var userID = document.cookie.split(';')\n  .find(c => c.trim().startsWith('userID'))\n  .split('=')[1];"
    },
    {
        "instruction": "Given an array [1, 2, 3, 4], write a Python code snippet to print the items in the array in a single line. [1, 2, 3, 4]",
        "response": "arr = [1, 2, 3, 4]\nprint(*arr, sep=\", \") // 1, 2, 3, 4"
    },
    {
        "instruction": "Write a class for a shopping cart in Python. ",
        "response": "class ShoppingCart:\n    def __init__(self):\n        self.cart = {}\n\n    def add_item(self, item, price):\n        self.cart[item] = price\n\n    def get_cart_total(self):\n        return sum(self.cart.values())"
    },
    {
        "instruction": "How to use the reduce function in Python for computing the sum of elements in a list? ",
        "response": "from functools import reduce\n\ndef my_sum(list):\n  return reduce((lambda x, y: x + y), list)"
    },
    {
        "instruction": "Write an if else statement in Python for checking if a given number is positive or negative. ",
        "response": "if x > 0:\n  print(\"The number is positive\")\nelse:\n  print(\"The number is negative\")"
    },
    {
        "instruction": "Write a loop in Python for printing all even numbers between 1 and 10. ",
        "response": "for i in range(1, 11):\n    if i % 2 == 0:\n        print(i)"
    },
    {
        "instruction": "Write a JavaScript code to sort a list of strings in alphabetical order. words = ['car', 'apple', 'tree', 'book', 'cat']",
        "response": "let sortedWords = words.sort(); \nconsole.log(sortedWords); // ['apple', 'book', 'car', 'cat', 'tree']"
    },
    {
        "instruction": "Write a JavaScript function that checks if the given string contains any vowels. String: \"Hello\"",
        "response": "function containsVowel(str) {\n return /[aeiou]/i.test(str);\n}"
    },
    {
        "instruction": "Rewrite the following Python code without using the 'list comprehension' syntax. [x * x for x in range(5)]",
        "response": "list_result = []\nfor x in range(5):\n    list_result.append(x*x)"
    },
    {
        "instruction": "Write a Python program to sort a list of tuples using Lambda. list = [(3, 4), (5, 1), (2, 0)]",
        "response": "sorted_list = sorted(list, key=lambda x: x[1])"
    },
    {
        "instruction": "Using the code provided, create an algorithm in Python to print the numbers from 1 to 10. ",
        "response": "for i in range(1, 11): \n    print(i)"
    },
    {
        "instruction": "Create a JavaScript function for getting the unique elements in an array. const arr = [3, 1, 4, 3, 2, 5]",
        "response": "const getUniqueElements = array => {\n    const uniqueElements = [...new Set(array)];\n    return uniqueElements;\n}\n\nconsole.log(getUniqueElements(arr)); // [3, 1, 4, 2, 5]"
    },
    {
        "instruction": "Create a function using JavaScript to generate a random string of up to 10 characters in length. ",
        "response": "function randomString(length) {\n  let result           = '';\n  let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for ( let i = 0; i < length; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}"
    },
    {
        "instruction": "Construct a loop in JavaScript that prints out each item in an array. let arr = [1,2,3,4,5]",
        "response": "for (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}"
    },
    {
        "instruction": "Write a code snippet in Python to generate a random float with up to 4 decimal places. ",
        "response": "import random\ndef random_float(a,b):\n  return round(random.uniform(a,b), 4)"
    },
    {
        "instruction": "Using the Jest JavaScript test framework, write a test that checks if a given number is divisible by 2. n = 6",
        "response": "test('divisible by 2', () => {\n expect(n % 2).toBe(0);\n});"
    },
    {
        "instruction": "Implement a function in Python that takes two array-like structures and returns a new array containing all elements from the first one that do not appear in the second one. list_1 = [9, 4, 2, 1, 5]\nlist_2 = [4, 6, 2]",
        "response": "def difference_array(list_1, list_2):\n  new_list = []\n  for i in list_1:\n    if i not in list_2:\n      new_list.append(i)\n  return new_list"
    },
    {
        "instruction": "Implement a function in Python that takes a list of integers and the size of the list. The function should return a list in which every element is multiplied by three and none of the elements exceeding the size of the list. s=[1,2,3,4]",
        "response": "def multiply_by_3(s):\n    result = []\n    for x in s:\n        if x*3 <len(s):\n            result.append(x * 3)\n    return result"
    },
    {
        "instruction": "Create a function in JavaScript that removes all vowels from a string. ",
        "response": "function removeVowels(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if ((str[i] !== 'a') && (str[i] !== 'e') && (str[i] !== 'i') && (str[i] !== 'o') && (str[i] !== 'u')) {\n      result += str[i];\n    }\n  }\n  return result;\n}"
    },
    {
        "instruction": "Write an algorithm in Python to count how many words a given string contains. ",
        "response": "def count_words(string):\n\twords = string.split()\n\treturn len(words)"
    },
    {
        "instruction": "Create a function in JavaScript to concatenate two strings without using the concat() method. ",
        "response": "function concat_str(str1, str2) {\n    let result = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        result += str1[i];\n    }\n    for (let j = 0; j < str2.length; j++) {\n        result += str2[j];\n    }\n    return result;\n}"
    },
    {
        "instruction": "Develop a script in JavaScript to validate an email address. ",
        "response": "function isValidEmail(email) { \n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}"
    },
    {
        "instruction": "Write a Python script to remove all the values that are greater than 30 from the list list_of_num = [25, 12, 36, 118, 200, 30]",
        "response": "new_list = [num for num in list_of_num if num <= 30]"
    },
    {
        "instruction": "Edit the following Python code to add error handling for invalid inputs. def area_triangle(base,height):\n    pass",
        "response": "def area_triangle(base,height):\n    if base == 0 or height == 0:\n        raise ValueError(\"Base and height should not be zero.\")\n    else:\n        return 0.5 * base * height"
    },
    {
        "instruction": "Create a function that prints out the Pythagorean theorem in Python. ",
        "response": "def pythagoras_theorem():\n    \"\"\"Print the Pythagorean theorem in Python.\"\"\"\n    print(\"The Pythagorean theorem states that the sum of the squares of the two sides of a right triangle is equal to the square of the hypotenuse.\")"
    },
    {
        "instruction": "Create an array that contains the numbers from 0 to 10 in Python. ",
        "response": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "instruction": "Write a JavaScript function to find the cube root of a number. let num = 8;",
        "response": "function cubeRoot(num) {\n  return Math.pow(num, 1/3);\n}"
    },
    {
        "instruction": "Create a function in Python that takes an input list of strings and returns the longest string in the list. list = [\"cat\", \"dog\", \"elephant\"]",
        "response": "def longest_string(list):\n  longest_word = \"\"\n  for word in list:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return longest_word"
    },
    {
        "instruction": "Create a function in Python that takes as arguments two strings and returns a boolean if both strings are equal or not. string1 = \"Hello\"\nstring2 = \"World\"",
        "response": "def is_equal(str1, str2):\n    if str1 == str2:\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Construct a machine learning model in Python for the given dataset. The dataset contains information on the daily income of 500 students. You should be able to predict the income of a student based on the given characteristics.",
        "response": "import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load dataset\ndataframe = pd.read_csv('student_income_data.csv')\n\n# split into input X and output y\nX = dataframe.iloc[:,:-1]\ny = dataframe.iloc[:,-1]\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\n\n# create model\nmodel = LinearRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)"
    },
    {
        "instruction": "Write a function in Python to calculate the compound interest given the principal amount, rate of interest and number of years. p = 1000\nr = 0.10\nn = 3",
        "response": "def calc_comp_int(principal, rate, num_years):\n    return principal * (1 + rate) ** num_years - principal\n\nprint(calc_comp_int(p, r, n))"
    },
    {
        "instruction": "Reorganize the following code in a more efficient way using Python. def get_student_avg(students):\n    for student in students:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum / len(student['grades'])\n        student['avg'] = avg",
        "response": "def get_student_avg(students):\n    for student in students:\n        student['avg'] = sum(student['grades']) / len(student['grades'])"
    },
    {
        "instruction": "Generate an appropriate python code snippet to capitalize all elements of an array called A. A = ['welcome', 'to', 'my', 'website']",
        "response": "A = ['welcome', 'to', 'my', 'website']\n\nA = [x.capitalize() for x in A]\n\nprint(A)"
    },
    {
        "instruction": "Write a Python program to exchange the values of two different variables. x = 10 \ny = 20",
        "response": "x, y = y, x"
    },
    {
        "instruction": "Create an array in Python with 6 elements and print the last three elements. ",
        "response": "my_array = [1, 2, 3, 4, 5, 6] \n#Print the last three elements\nprint (my_array[-3:]) \n#Output:[4, 5, 6]"
    },
    {
        "instruction": "Generate an array in JavaScript with two elements of type boolean. ",
        "response": "let booleanArray = [true, false];"
    },
    {
        "instruction": "Create a dictionary in Python mapping the following characters to numbers: A = 1, B = 2, C = 3 ",
        "response": "my_dict = { \n    'A': 1, \n    'B': 2, \n    'C': 3\n}"
    },
    {
        "instruction": "Build a function in Python that takes a string as the input and prints each letter of the string on a separate line. ",
        "response": "def print_letters(string): \n    for letter in string: \n        print(letter)"
    },
    {
        "instruction": "Sort the following array in descending order using JavaScript:[\"cat\", \"dog\", \"fish\", \"elephant\"]. ",
        "response": "my_arr = [\"cat\", \"dog\", \"fish\", \"elephant\"];\nmy_arr.sort().reverse();\nconsole.log(my_arr); //prints [\"elephant\", \"fish\", \"dog\", \"cat\"]"
    },
    {
        "instruction": "Write a Python program to find all numbers divisible by 5 but not a multiple of 7, between 1500 and 2700 (both included). ",
        "response": "result = []\nfor i in range(1500, 2701):\n  if i % 5 == 0 and i % 7 != 0:\n    result.append(i)\n\nprint(result) # [1505, 1540, 1575, 1610, 1645, 1680, 1715, 1750, 1785, 1820, 1855, 1890, 1925, 1960, 1995, 2030, 2065, 2100, 2135, 2170, 2205, 2240, 2275, 2310, 2345, 2380, 2415, 2450, 2485, 2520, 2555, 2590, 2625, 2660, 2695]"
    },
    {
        "instruction": "Generate a Python dictionary that contains student information. Name: John; Age: 22; Grade: A;",
        "response": "{\n \"name\": \"John\",\n \"age\": 22,\n \"grade\": \"A\"\n}"
    },
    {
        "instruction": "Write a JavaScript code that gets the URL of a web page. ",
        "response": "var url = window.location.href;"
    },
    {
        "instruction": "Convert a given list into a dictionary in Python [\"apple\", \"banana\", \"cherry\"]",
        "response": "dict = {\n    \"apple\": 0,\n    \"banana\": 1,\n    \"cherry\": 2\n}"
    },
    {
        "instruction": "Code a solution that prints out the string \"Hello, [name]!\" using string interpolation in JavaScript. ",
        "response": "const name = \"John Doe\";\nconsole.log(`Hello, ${name}!`);"
    },
    {
        "instruction": "Rewrite the following JavaScript code to make it compatible with older browsers. let colors = [\"red\", \"blue\", \"green\"];",
        "response": "var colors = [\"red\", \"blue\", \"green\"];"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and returns an array containing only the even numbers. ",
        "response": "function get_even_numbers(nums) {\n  return nums.filter(n => n % 2 == 0);\n}"
    },
    {
        "instruction": "Write a JavaScript function to determine if a given string contains at least one upper case letter. ",
        "response": "function hasUpperCase(str) {\n    return str.split('').some(function(l) {\n        return l.charCodeAt(0) >= 65 && l.charCodeAt(0) <= 90;\n    });\n}"
    },
    {
        "instruction": "Fix the bug in the following Python script: def is_odd(x):\n  if x % 2 == 1\n    return True\n\nis_odd(5)",
        "response": "def is_odd(x):\n  if x % 2 == 1:\n    return True\n  else:\n    return False\n\nis_odd(5)"
    },
    {
        "instruction": "Write a JavaScript function that calculates the area of a triangle based on the three sides provided. ",
        "response": "function areaOfTriangle(a, b, c) {\n  var s = (a+b+c)/2;\n  return Math.sqrt(s*(s-a)*(s-b)*(s-c));\n}"
    },
    {
        "instruction": "Write a function in Python for sorting a given list of numbers. [29, 11, 46, 7, 248, 1724]",
        "response": "def sort_list(numbers):\n  return sorted(numbers)"
    },
    {
        "instruction": "Design a recursive algorithm in Python to calculate the sum of all elements in the given array [1, 3, 7, 9, 11]",
        "response": "def recursive_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + recursive_sum(arr[1:])\n\narr = [1, 3, 7, 9, 11]\nprint(recursive_sum(arr))"
    },
    {
        "instruction": "Using JavaScript, suggest a program to update a key in a given object. object = {\"name\":\"john\"};",
        "response": "object[\"name\"] = \"JAMES\";"
    },
    {
        "instruction": "Write a method in Python to append a given list to another list. list_1 = [1,2,3]\nlist_2 = [4,5,6]",
        "response": "list_1.extend(list_2)"
    },
    {
        "instruction": "Create a Python program that takes two strings as input and finds their longest common subsequence. x = “ABCBDAB”\n y = “BDCABA”",
        "response": "def longestSubsequence(x, y): \n    m = len(x) \n    n = len(y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n   \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    index = L[m][n] \n  \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\\0\" \n  \n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        if x[i-1] == y[j-1]: \n            lcs[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    print(\"Longest common subsequence of \" + x + \" and \" + y + \" is \\\"\" + \"\".join(lcs) + \"\\\"\")"
    },
    {
        "instruction": "Create a Javascript class for a customer address book. ",
        "response": "class AddressBook {\n  constructor() {\n    this.contacts = [];\n  }\n\n  add(name, email, phone, relation) {\n    let contact = {\n      name,\n      email,\n      phone,\n      relation\n    };\n    this.contacts.push(contact);\n  }\n\n  delete(name) {\n    this.contacts = this.contacts.filter(contact => contact.name !== name);\n  }\n\n  list() {\n    console.log(this.contacts);\n  }\n}"
    },
    {
        "instruction": "Write a Python function that accepts a list and returns the sum of the numbers present in the list. list = [1, 2, 3, 4, 5]",
        "response": "def list_sum(lst):\n    result = 0\n    for num in lst:\n        result += num\n    return result"
    },
    {
        "instruction": "Write a function in JavaScript to sort an array of objects based on a selected key. [{\"name\":\"John\",\"age\":25},{\"name\":\"Bob\",\"age\":30}]",
        "response": "function sortByKey(arr, key) {\n    return arr.sort((a, b) => (a[key] > b[key]) ? 1 : -1);\n}"
    },
    {
        "instruction": "Write a JavaScript program to generate the following types of patterns of stars. *\n**\n***\n****\n*****",
        "response": "for (var i = 0; i < 5; i++){\n  var row = \"\";\n  for (var j = 0; j <= i; j++){\n    row += \"*\";\n  }\n  console.log(row);\n}"
    },
    {
        "instruction": "Create a JavaScript function that checks if all elements of an array are equal or not. [1,2,3,1,2]",
        "response": "function checkEquality(arr) {\n  return arr.every(val => val === arr[0]);\n}\n\nlet arr = [1, 2, 3, 1, 2];\nconsole.log(checkEquality(arr)); // false"
    },
    {
        "instruction": "Create a function in Python that executes the below pseudocode. Input: A list of integers\n\nFor each integer:\n    If the integer is even, add 1 to the list\n    If the integer is odd, subtract 1 from the list\n\nOutput: A new list of integers",
        "response": "def modify_list(int_list):\n    for i in range(len(int_list)):\n        if int_list[i] % 2 == 0:\n            int_list[i] += 1\n        else:\n            int_list[i] -= 1\n    return int_list"
    },
    {
        "instruction": "Identify all person names in the following text using python. John, Paul, and George went to the park.",
        "response": "import re\ntext = \"John, Paul, and George went to the park.\"\npersons = re.findall(r\"\\w+\", text)\nprint(persons) # [\"John\", \"Paul\", \"and\", \"George\"]"
    },
    {
        "instruction": "Rewrite the following Python function without using an elif statement. def find_type(x):\n    if x == \"a\":\n        print(\"alpha\")\n    elif x == \"b\":\n        print(\"beta\")\n    elif x == \"c\":\n        print(\"gamma\")",
        "response": "def find_type(x):\n    type_map = {\"a\": \"alpha\", \"b\": \"beta\", \"c\": \"gamma\"}\n    if x in type_map:\n        print(type_map[x])"
    },
    {
        "instruction": "Identify the data type (int, string, list, etc.) of the following expression in Python \"hello world\"",
        "response": "string"
    },
    {
        "instruction": "Write Python code which changes a string to all lowercase characters. String: \"This is a string in Uppercase!!!\"",
        "response": "text = \"This is a string in Uppercase!!!\"\ntext = text.lower()\nprint(text)"
    },
    {
        "instruction": "Generate a random string 10 characters in length using the given Python code. import random",
        "response": "import random\n\ndef generate_random_string(length):\n    \"\"\"Generate a random string with given length using a set of lowercase and uppercase letters, numbers, and punctuation characters.\"\"\"\n    chars = \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()[]{}\\\\|;:'\"\",./<>?\"\n    result = \"\"\n    for i in range(length):\n        result += random.choice(chars)\n    return result\n\nrandom_string = generate_random_string(10)\nprint(random_string) #eg. 7O?1Y%%&_K"
    },
    {
        "instruction": "Given a JSON string, write a function in JavaScript to extract the value for the key \"name\". jsonString = {\"name\":\"John\", \"age\":30, \"city\":\"New York\"}",
        "response": "function getValueByKey(jsonString, key) {\n    let jsonObj = JSON.parse(jsonString);\n    return jsonObj[key];\n}\n\nnameValue = getValueByKey(jsonString, \"name\");\nconsole.log(nameValue) //prints \"John\""
    },
    {
        "instruction": "Create a variable in JavaScript for storing the result of the following expression. a + 5*b",
        "response": "let result = a + 5*b;"
    },
    {
        "instruction": "Search for the string \"tutorials\" in the given text and replace it with the word \"lessons\". text = \"This site provides many Python tutorials\"",
        "response": "text = text.replace(\"tutorials\", \"lessons\");\nconsole.log(text); // prints \"This site provides many Python lessons\""
    },
    {
        "instruction": "Code a function in JavaScript to find the area of a triangle given the lengths of its three sides. ",
        "response": "function calculateArea(a, b, c) {\n    let s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}"
    },
    {
        "instruction": "Generate Python code to find the compound interest for a given principal amount, rate, and time period. ",
        "response": "# Python program to find compound interest\n\ndef compound_interest(p,r,t):\n    # p is the principal amount \n    # r is the rate \n    # t is the time period \n  \n    # Calculating compound interest \n    CI = p * (pow((1 + r / 100), t))\n    print(\"Compound interest is\", CI) \n\np=1000\nr=10\nt=2\ncompound_interest(p,r,t)"
    },
    {
        "instruction": "Explain the difference between .push(), .pop(), .shift() and .unshift() methods in JavaScript arrays. ",
        "response": "The .push() method adds an element to the end of an existing array. It takes a single argument, the element to be added, and returns the new length of the array.\n\nThe .pop() method removes an element from the end of an existing array. It does not take any arguments and returns the element that was removed.\n\nThe .shift() method removes an element from the beginning of an existing array. It does not take any arguments, and returns the element that was removed.\n\nThe .unshift() method adds an element to the beginning of an existing array. It takes a single argument, the element to be added, and returns the new length of the array."
    },
    {
        "instruction": "Write a JavaScript program to randomly select items from an array. const fruits = ['apple', 'banana', 'mango', 'cherry'];",
        "response": "function getRandomItem(arr) {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index]; \n}\n \nconst randomItem = getRandomItem(fruits);\nconsole.log(randomItem);"
    },
    {
        "instruction": "Explain the differences between a while loop and a for loop in JavaScript. ",
        "response": "The major difference between a while loop and a for loop is that a while loop checks the condition before the block of code is executed, while a for loop checks the condition before each iteration of the loop. A while loop is used when the number of iterations is not known, while the number of iterations in a for loop is known. In a while loop, the condition must be true in order to execute the loop body, while in a for loop, the loop body is always executed at least once, regardless of whether the condition is true or false. Another difference is that a for loop allows you to include an increment section where you can increment or decrement the loop counter."
    },
    {
        "instruction": "Create a JavaScript array from a given Object. my_obj = {\"a\": 1, \"b\": 2, \"c\": 3}",
        "response": "my_arr = [1, 2, 3]"
    },
    {
        "instruction": "Parse a given XML document and create a JavaScript object. <?xml version=\"1.0\"?>\n<catalog>\n <book id=\"bk101\">\n  <author>Kerridge, Alan</author>\n  <title>The Kitchen Diaries</title>\n  <price>29.99</price>\n </book>\n <book id=\"bk102\">\n  <author>Zinsser, William</author>\n  <title>On Writing Well</title>\n  <price>19.95</price>\n </book>\n</catalog>",
        "response": "const parser = new DOMParser();\nconst xmlDoc = parser.parseFromString(text, \"text/xml\");\n \nconst books = xmlDoc.querySelectorAll('book');\nconst result = {};\n \nbooks.forEach(book => {\n const id = book.getAttribute('id');\n result[id] = {\n  author: book.querySelector('author').textContent,\n  title: book.querySelector('title').textContent,\n  price: book.querySelector('price').textContent\n }\n});\n\nconsole.log(result);\n// { \n//  bk101: {author: \"Kerridge, Alan\", title: \"The Kitchen Diaries\", price: \"29.99\"}, \n//  bk102: {author: \"Zinsser, William\", title: \"On Writing Well\", price: \"19.95\"}\n// }"
    },
    {
        "instruction": "Parse a JSON string into an object in JavaScript. {\"name\": \"John Doe\", \"age\": 30}",
        "response": "var data = JSON.parse('{\"name\": \"John Doe\", \"age\": 30}');\nvar name = data.name;\nvar age = data.age;"
    },
    {
        "instruction": "Create a list of 10 strings in Python and print each string in a separate line. ",
        "response": "mylist = ['string1', 'string2', 'string3', 'string4', 'string5', 'string6', 'string7', 'string8', 'string9', 'string10']\nfor item in mylist:\n  print(item)"
    },
    {
        "instruction": "Create an array of 10 random numbers between 1 and 100 in JavaScript and print each number in the console. ",
        "response": "var arr = [];\n\nfor (i = 0; i < 10; i++) {\n  arr.push(Math.floor(Math.random() * 100) + 1);\n  console.log(arr[i]);\n}"
    },
    {
        "instruction": "Create a class in Python with one method called talk that prints a string when invoked. ",
        "response": "class MyClass:\n  def talk(self):\n    print(\"Hello, world!\")"
    },
    {
        "instruction": "Create an array of objects in JavaScript, each object should have two properties, a \"name\" and \"age\". ",
        "response": "var arr = [\n  {name: 'John', age: 25},\n  {name: 'Alice', age: 28},\n  {name: 'Bob', age: 30},\n  {name: 'David', age: 32},\n]"
    },
    {
        "instruction": "Generate a JavaScript array containing the first ten Fibonacci numbers. ",
        "response": "let fib_nums = [1, 1]\nfor (let i=2; i < 10; i++) {\n  fib_nums[i] = fib_nums[i - 1] + fib_nums[i - 2]\n}"
    },
    {
        "instruction": "Write a Python code to group the following numbers according to their last digit [1, 9, 5, 4, 6, 7, 8, 11]. [1, 9, 5, 4, 6, 7, 8, 11]",
        "response": "group_by_last_digit = {\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    11: [11]\n}"
    },
    {
        "instruction": "Create a Python class for a user object that includes a name and email field. ",
        "response": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email"
    },
    {
        "instruction": "How would you loop through the elements in an array in JavaScript? ",
        "response": "You can loop through elements in an array in JavaScript by using a `for loop`:\n\nfor (let i = 0; i < myArray.length; i++) {\n  const element = myArray[i];\n  // Do something with the element\n}"
    },
    {
        "instruction": "Rewrite the following Python code to a Bash program. v = [1, 2, 3, 4, 5]\nfor i in v:\nprint(i)",
        "response": "v=(1 2 3 4 5)\n\nfor i in ${v[@]}; do\n    echo $i\ndone"
    },
    {
        "instruction": "Using recursion, write a Python program to find the factorial of a given number. Number: 5",
        "response": "def factorial(num): \n    if num == 1: \n        return 1\n    else: \n        return num * factorial(num-1)\n\nans = factorial(5)\nprint(ans)"
    },
    {
        "instruction": "Create a Python dictionary with customer details provided. Name: John\nAge: 25\nGender: Male\nOccupation: Chef",
        "response": "customer = { \n'name': 'John',\n'age': 25,\n'gender': 'Male',\n'occupation': 'Chef'\n}"
    },
    {
        "instruction": "Name two methods of sorting a list in Python. ",
        "response": "The two methods of sorting a list in Python are the sorted() function and the .sort() method."
    },
    {
        "instruction": "Implement a JavaScript function that takes two strings as parameters and replaces all occurrences of the first string with the second. \"test\", \"Data\"",
        "response": "function replaceString(str1, str2) {\n  return str1.split(' ').map(word => (word === str2) ? str1 : word).join(' ');\n}"
    },
    {
        "instruction": "Given a string of text, write a python script to remove all non-alphanumeric characters. ",
        "response": "def remove_non_alphanumeric_chars(input_string):\n  return ''.join(c for c in input_string if c.isalnum())"
    },
    {
        "instruction": "Modify the following JavaScript code to alert \"Thanks for visiting!\" when the page is loaded. ",
        "response": "window.onload = function() {\n    alert(\"Thanks for visiting!\");\n}"
    },
    {
        "instruction": "Create a function to convert a given integer to a string in Python. ",
        "response": "def intToStr(n): \n\treturn str(n)\n\n# Driver Program \nintNum = 55\n  \n# Print the output \nprint(intToStr(intNum))"
    },
    {
        "instruction": "Write a Python program to identify whether or not a given number is prime. ",
        "response": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "instruction": "Create a JavaScript object which contains a key-value pair representing \"name\" and \"lucy\". ",
        "response": "let lucy = {\n    name: \"Lucy\"\n};"
    },
    {
        "instruction": "Write some code in JavaScript to generate an array with 3 positive random integers. ",
        "response": "function getRandomIntegers(size) {\n  return [...Array(size)].map(\n      () => Math.floor(Math.random() * Math.floor(20))\n    ).filter(randomNumber => randomNumber > 0);\n}\n\ngetRandomIntegers(3); //Returns an array with 3 random positive integers"
    },
    {
        "instruction": "Write a code to detect all possible anagrams of a given word in Python. word = \"cat\"",
        "response": "def all_anagrams(word):\n \n    if len(word) ==0:\n        return [word]\n    else:\n        temp = []\n        for anagram in all_anagrams(word[1:]):\n            for i in range(len(word)):\n                temp.append(anagram[:i] + word[0:1] + anagram[i:])\n        return temp\n\nall_anagrams(word) // Returns ['act', 'atc', 'cat', 'cta', 'tac', 'tca']"
    },
    {
        "instruction": "You need to sort an array of numbers in ascending order using JavaScript. arr = [7, 4, 1, 10, 2]",
        "response": "function sortArray(arr) {\n  return arr.sort((a,b) => a - b);\n}\n\nsortArray(arr); //Returns [1, 2, 4, 7, 10]"
    },
    {
        "instruction": "Create a for loop in Python that iterates over every element in a list named 'nums'. nums = [1, 4, 6, 8, 10]",
        "response": "for num in nums:\n    # Do something with num"
    },
    {
        "instruction": "Implement a function 'convert_to_upper()' in JavaScript that converts a given string to uppercase. string = \"Hello, World!\"",
        "response": "function convert_to_upper(string) {\n return string.toUpperCase();\n}"
    },
    {
        "instruction": "Compare and contrast Java and Python for developing applications. ",
        "response": "Java and Python are both popular programming languages used for developing applications. Java is a statically typed language and requires extra effort in the form of type checking during compilation, while Python is a dynamically typed language and no type checking is required. Java is more suitable for large-scale enterprise software development and is known for its performance and scalability, whereas Python is generally easier to work with and better suited for smaller projects and prototyping. Java is also more verbose than Python, requiring more lines of code to accomplish the same task. On the other hand, Python has a large library of additional modules and provides simpler syntax and more intuitive programming style."
    },
    {
        "instruction": "How would you create a function in JavaScript that takes a string as an argument and counts the number of occurrences of a given character? ",
        "response": "function countOccurrences(str, char) {\n    let count = 0;\n    for(let i=0; i < str.length; i++) {\n        if(str[i] == char)\n            count++;\n    }\n    return count;\n}"
    },
    {
        "instruction": "Create a function in JavaScript that takes an array and returns a new array containing the elements in reverse order. ",
        "response": "function reverseArray(arr) {\n    let newArr = [];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        newArr.push(arr[i]);\n    }\n    return newArr;\n}"
    },
    {
        "instruction": "Write a Python program to find the longest substring in a given string which has no repeating characters. ",
        "response": "def longest_substring_without_repeating_characters(str):\n    start, max_len = 0, 0\n    used_char = {}\n\n    for i, char in enumerate(str):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, i - start + 1)\n\n        used_char[char] = i\n        \n    return max_len"
    },
    {
        "instruction": "Write a class and its constructor in Python for a vehicle object that has the fields 'type', 'make', 'model' and 'color'. Car, Toyota, Camry, Red",
        "response": "class Vehicle:\n    def __init__(self, vehicle_type, make, model, color):\n        self.type = vehicle_type\n        self.make = make\n        self.model = model\n        self.color = color\n\ncar = Vehicle(\"Car\", \"Toyota\", \"Camry\", \"Red\")"
    },
    {
        "instruction": "Write an algorithm in JavaScript for finding the maximum number in a given array. [5, 10, 8, 3, 13]",
        "response": "function maxFromArray(arr) {\n    let maxNum = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > maxNum) {\n            maxNum = arr[i];\n        }\n    } \n    return maxNum;\n}\n\nconsole.log(maxFromArray([5, 10, 8, 3, 13])); // Outputs: 13"
    },
    {
        "instruction": "Create a JavaScript object that holds properties and methods for a Vehicle. ",
        "response": "let Vehicle = {\n  make: '',\n  model: '',\n  year: 0,\n  getFullDetails: function() {\n    return this.make + \" \" + this.model + \" \" + this.year;\n  }\n}"
    },
    {
        "instruction": "Generate a random probability distribution with mean 0 and standard deviation 1 in Python. ",
        "response": "import numpy as np\n\ndist = np.random.normal(0, 1, 1000)  # mean, standard deviation, samples"
    },
    {
        "instruction": "Filter a given list of numbers in Python to find all the even numbers. list1 = [3, 4, 5, 6, 7, 8, 9]",
        "response": "list2 = [number for number in list1 if number % 2 == 0]\nprint(list2) #[4, 6, 8]"
    },
    {
        "instruction": "Sort a given list of strings in ascending order by length in Python. list1 = [\"cat\", \"apple\", \"dog\", \"banana\"]",
        "response": "list2 = sorted(list1, key=len)\nprint(list2) #['cat', 'dog', 'apple', 'banana']"
    },
    {
        "instruction": "Fill in the blank to generate a SHA-256 hash in JavaScript: ",
        "response": "const crypto = require('crypto');\nconst hash = crypto.createHash('sha256');"
    },
    {
        "instruction": "Create an array and insert a new record at the beginning of the array in JavaScript. ",
        "response": "let array = [1, 2, 3];\narray.unshift(4);\n// Output: [4, 1, 2, 3]"
    },
    {
        "instruction": "Implement a basic calculator using JavaScript. ",
        "response": "function calculate(inputString) {\n  let result = 0;\n  inputString.split(/\\+|\\-|\\*|\\//).forEach(function(value) {\n    result += parseFloat(value);\n  });\n  return result;\n}"
    },
    {
        "instruction": "Write JavaScript code to Print the message after 5 seconds ",
        "response": "setTimeout(function(){\n    console.log('Printing message after 5 seconds');\n}, 5000);"
    },
    {
        "instruction": "Provide a function to read a single line of user input in Python. ",
        "response": "def read_input():\n    \"\"\"Reads a single line of user input.\"\"\"\n    return input()"
    },
    {
        "instruction": "Create a program in JavaScript that takes in a positive integer and returns the sum of its digits. 824",
        "response": "function sumDigits(num) {\n  let str = num.toString();\n  let result = 0;\n  for (let char of str) {\n    result += Number(char);\n  }\n  return result;\n}"
    },
    {
        "instruction": "Use Python to write a code that displays a multiplication table of a given number. 8",
        "response": "def multTable(n):\n    for i in range(1, 11):\n        print(\"{} x {} = {}\".format(n, i, n*i))"
    },
    {
        "instruction": "Create a function in JavaScript to replace all instances of a specified word in a string with \"peanut butter\". String: \"This is an example of the word example.\"\nWord to replace: \"example\"",
        "response": "function replaceWord (str, wordToReplace) {\n    return str.replace(wordToReplace, \"peanut butter\");\n}"
    },
    {
        "instruction": "Using JavaScript, make a function to calculate the area of a circle with a given radius. 4",
        "response": "function areaOfCircle (radius) {\n    return Math.PI * radius * radius;\n}"
    },
    {
        "instruction": "Create a python function that will convert a string to all uppercase. ",
        "response": "def toUpperCase(str):\n  return str.upper()"
    },
    {
        "instruction": "Evaluate the following JSON data using a Javascript function. var data = {\n    \"name\": \"John Doe\",\n    \"age\": 28,\n    \"hobbies\": [\"tennis\", \"football\", \"golf\"]\n}",
        "response": "function evaluateData(data) {\n    console.log(`Name: ${data.name}`);\n    console.log(`Age: ${data.age}`);\n    console.log(`Hobbies: ${data.hobbies.join(', ')}`);\n}\n\nevaluateData(data);\n// Output:\n// Name: John Doe\n// Age: 28\n// Hobbies: tennis, football, golf"
    },
    {
        "instruction": "Write a function in Python which can generate a random string consisting of lowercase letters, numbers and symbols. ",
        "response": "import string\nimport random\n\ndef random_string(stringLength=10):\n  lettersAndDigits = string.ascii_letters + string.digits + string.punctuation\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))"
    },
    {
        "instruction": "Create a function in JavaScript for validating a given a string for all required special characters. ExampleString: \"This string should contain at least 1 digit, one special character and one capital letter.\"",
        "response": "function checkRegex(string) {\n    if (/[A-Z]/.test(string) && /[!@#$%^&*]/.test(string) && /[0-9]/.test(string)) { \n        return true;\n    } else {\n        return false;\n    }\n}"
    },
    {
        "instruction": "Create two classes in Python which inherits from a parent class called **Shape**. ",
        "response": "class Shape(object):\n  pass\n  \nclass Square(Shape):\n  def __init__(self, side):\n    self.side = side\n    \nclass Circle(Shape):\n  def __init__(self, radius):\n    self.radius = radius"
    },
    {
        "instruction": "Create a function in Python for sending an email using the SMTP protocol. ",
        "response": "import smtplib\n\ndef send_email(sender, recipient, message): \n  smtp_server = smtplib.SMTP(\"smtp.example.com\")\n  smtp_server.sendmail(sender, recipient, message)\n  smtp_server.quit()"
    },
    {
        "instruction": "Create a function in JavaScript which can receive and store user inputs. ",
        "response": "function storeInput() {\n  let inputs = [];\n  inputs.push(prompt(\"Please input your name: \"));\n  inputs.push(prompt(\"Please input your age: \"));\n  inputs.push(prompt(\"Please input your email address: \"));\n  \n  return inputs;\n}"
    },
    {
        "instruction": "Write a JavaScript program to find the sum of two numbers using a recursive function. ",
        "response": "// create a recursive function to find the sum of two numbers\nfunction addNums(num1, num2) {\n  // base case\n  if (num2 == 0) {\n    return num1;\n  }\n  // recursive case\n  else {\n    return addNums(++num1, --num2);\n  }\n}"
    },
    {
        "instruction": "Create an object in JavaScript and give it two properties and two methods. ",
        "response": "const myObject = {\n    prop1: \"value1\",\n    prop2: \"value2\",\n\n    method1 : function(){\n        // do something\n    },\n    method2: function(){\n        // do something else\n    }\n}"
    },
    {
        "instruction": "Create a JavaScript class that has three properties. ",
        "response": "class MyClass {\n  constructor(prop1, prop2, prop3) {\n    this.prop1 = prop1;\n    this.prop2 = prop2;\n    this.prop3 = prop3;\n  }\n}"
    },
    {
        "instruction": "Create an if-elseif-else statement in JavaScript ",
        "response": "if (condition1) {\n    // code to execute if condition1 is true\n} else if (condition2) {\n    // code to execute if condition2 is true\n} else {\n    // code to execute if both condition1 and condition2 are false\n}"
    },
    {
        "instruction": "Name and describe a feature of the JavaScript Date object. ",
        "response": "One feature of the JavaScript Date object is the Get Full Year method, which returns the 4 digit year for the provided date. It allows you to retrieve the year from a date object without any ambiguity due to different calendar conventions. It can also be used when dealing with years outside of the Gregorian calendar."
    },
    {
        "instruction": "Loop through an array using JavaScript const array = [2, 3, 5, 7, 11];",
        "response": "const array = [2, 3, 5, 7, 11];\nfor (let i = 0; i < array.length; i++) {\n    console.log(array[i]);\n}"
    },
    {
        "instruction": "Construct a JavaScript object with the following properties gender: female\nname: Jane\nage: 22",
        "response": "let person = {\n    gender: 'female',\n    name: 'Jane',\n    age: 22\n};"
    },
    {
        "instruction": "Create a function in Python to identify if the inputted number is odd or even. ",
        "response": "def is_odd_or_even(num): \n  return \"even\" if num % 2 == 0 else \"odd\""
    },
    {
        "instruction": "Create a JavaScript function to convert a given temperature in celsius to its equivalent in fahrenheit. ",
        "response": "function celsiusToFahrenheit(celsius) { \n  let fahrenheit = (celsius * 9/5) + 32; \n  return fahrenheit;\n}"
    },
    {
        "instruction": "Using an array, write a Python script that prints the sum of the numbers from 0 to 10. ",
        "response": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nsum = 0\n  \n# Iterate to find the sum \nfor i in range (0, len(arr)): \n    sum = sum + arr[i] \n      \n# Print the sum  \nprint(sum)"
    },
    {
        "instruction": "Create a JavaScript function that takes two integers, n and m as input and returns true if n is larger than m, and false otherwise. ",
        "response": "function isNGreaterThanM(n, m) { \n  return n > m ? true : false; \n}"
    },
    {
        "instruction": "Create a list comprehension in Python to generate odd numbers between 1 and 10 ",
        "response": "odd_numbers = [x for x in range(1, 11) if x % 2 != 0]"
    },
    {
        "instruction": "In JavaScript, what is the difference between var and let? ",
        "response": "The main difference between the \"var\" and \"let\" keywords in JavaScript is their scope. Variables declared with the \"var\" keyword have a function scope and are available throughout the entire function, while variables declared with \"let\" have a block scope and are available only in the block in which they are declared."
    },
    {
        "instruction": "We want to display a random number between 1 and 10 using Python. Write a program for that. ",
        "response": "import random\nrandomNumber = random.randint(1, 10)\nprint(randomNumber)"
    },
    {
        "instruction": "Construct a multi-threaded application in Python to read and calculate the sum of a list of numbers. List of numbers:[25, 10, 5, 20]",
        "response": "import threading \n  \n# function to read the numbers \ndef read_sum(list_of_numbers): \n    total = 0\n    for number in list_of_numbers: \n        total += number  \n  \n    print(\"Sum of the list of numbers is: {}\".format(total)) \n  \n# Driver code \nlist_of_numbers = [25, 10, 5, 20] \nstart = 0\nend = len(list_of_numbers) \n  \n# creating thread \nt1 = threading.Thread(target=read_sum, args=(list_of_numbers[start:end],)) \n  \n# starting thread 1 \nt1.start() \n# wait until thread 1 is completely executed \nt1.join() \n  \n# both threads completely executed \nprint(\"Done!\")"
    },
    {
        "instruction": "Write a JavaScript code snippet to filter an array to retain only the strings in the array that start with \"A\". Array: [\"Apple\", \"Banana\", \"Orange\", \"Apple Pie\"]",
        "response": "const result = array.filter(s => s.startsWith('A'));"
    },
    {
        "instruction": "Design an algorithm in Python to detect palindrome strings. ",
        "response": "def is_palindrome(s):\n    rev = ''.join(reversed(s))\n    if (s == rev): \n        return True\n    return False"
    },
    {
        "instruction": "Run a sentiment analysis of the following sentence using Python. The food was really good but the service was terrible.",
        "response": "\"\"\"\nRun a sentiment analysis of the sentence using Python\n\"\"\"\nimport nltk \nfrom textblob import TextBlob \n\ntext = 'The food was really good but the service was terrible.'\nblob = TextBlob(text) \nfor sentence in blob.sentences:\n    print(sentence.sentiment)\n\n# Output\nSentiment(polarity=0.05, subjectivity=0.6)"
    },
    {
        "instruction": "Given a data set, calculate the average using Python. [1, 2, 3, 4, 5]",
        "response": "nums = [1,2,3,4,5]\nsum = 0\n\nfor num in nums:\n  sum +=num\n\naverage =sum / len(nums)\n\nprint(average) // output is 3.0"
    },
    {
        "instruction": "Using Python, create a program that prints out the numbers 0 to 100. ",
        "response": "for i in range(101):\n    print(i)"
    },
    {
        "instruction": "Create a function in JavaScript that takes a string as an argument and returns the number of times that string is repeated in the input string. string = \"HelloHello\"",
        "response": "function countString(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.substring(i, i + 5) == \"Hello\") {\n      count++;\n    }\n  }\n  return count;\n}"
    },
    {
        "instruction": "Write a Python statement to print out the common items between two lists. list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6 , 8]",
        "response": "for i in list1:\n  if i in list2:\n    print(i)"
    },
    {
        "instruction": "Update the following JavaScript code so that it alerts a given string. let myStr = 'My string'",
        "response": "let myStr = 'My string';\nalert(myStr);"
    },
    {
        "instruction": "Write a JavaScript function that takes two numbers and returns the sum of all numbers in between the two. ",
        "response": "function sumNumbers(x, y) {\n  let sum = 0\n  for(let i = x; i <= y; i++) {\n    sum += i\n  }\n  return sum\n}"
    },
    {
        "instruction": "Create a JavaScript object to fulfill the following purpose Create a calculator that can add, subtract, multiply and divide two numbers.",
        "response": "const Calculator = {\n  add: function(a, b) {\n    return a + b;\n  },\n  subtract: function(a, b) {\n    return a - b;\n  },\n  multiply: function(a, b) {\n    return a * b;\n  },\n  divide: function(a, b) {\n    return a / b;\n  },\n};"
    },
    {
        "instruction": "Write a JavaScript program to create an array with the first element as the maximum and all other elements as the minimum value of the previous element. let arr = [5, 4, 3, 2, 1];",
        "response": "let result = [];\nlet max = arr[0];\nresult.push(max);\nfor (let i = 1; i < arr.length; i++) {\n  let min = Math.min(max, arr[i]);\n  result.push(min);\n  max = min;\n}\n\nconsole.log(result); # Output: [5, 4, 3, 2, 1]"
    },
    {
        "instruction": "Write a JavaScript program to generate a random aluminum hexadecimal color code. ",
        "response": "let color = \"#\"; \nlet characters = '0123456789ABCDEF'; \nfor (let i = 0; i < 6; i++)\n   color += characters[Math.floor(Math.random() * 16)];\n\nconsole.log(color); # Output: #6f435a"
    },
    {
        "instruction": "Create a Python function that takes a string and prints out its reverse. string = \"Hello world!\"",
        "response": "def reverseString(string):\n  return string[::-1]\n\nprint(reverseString(string)) # Output: !dlrow olleH"
    },
    {
        "instruction": "Create an array of objects in JavaScript for the following data: id, first name, last name, age. ",
        "response": "const array = [\n    { id: 1, firstName: 'John', lastName: 'Doe', age: 20 },\n    { id: 2, firstName: 'Jane', lastName: 'Smith', age: 21 },\n    { id: 3, firstName: 'Mike', lastName: 'Williams', age: 22 }\n];"
    },
    {
        "instruction": "Create a python dictionary of two elements 'name' and 'age' with the corresponding values John and 25. ",
        "response": "my_dict = {'name': 'John', 'age': 25}"
    },
    {
        "instruction": "How would you convert an integer to a float in Python? ",
        "response": "You can convert an integer to a float in Python using the float() function. For example, float(4) would return 4.0."
    },
    {
        "instruction": "Create and run a Python script that prints \"Hello, World!\" ",
        "response": "# A simple python script\nprint(\"Hello, World!\")"
    },
    {
        "instruction": "Generate a unique 8-digit number using the Python Random module ",
        "response": "import random \n\nrandom.seed(32) \nunique_id = random.randint(100000000, 999999999)\nprint(\"unique 8-digit number:\", unique_id)"
    },
    {
        "instruction": "Write a Python code snippet for printing the items in a given set. my_set = {1, 3, 5, 7, 9}",
        "response": "for item in my_set:\n    print(item)"
    },
    {
        "instruction": "How do you run a Python script from the command line? ",
        "response": "In order to run a python script from the command line, the \"@python\" command and the path to the file should be used. For example, to execute the \"input.py\" file, the command would be \"@python C:\\Path\\input.py\"."
    },
    {
        "instruction": "Write code to remove the first item from a list of integers in Python. numbers = [2, 3, 4, 5]",
        "response": "numbers.pop(0)"
    },
    {
        "instruction": "Write a JavaScript program to rotate an array by a given number let arr = [1, 2, 3, 4, 5];\nlet n = 2;",
        "response": "function rotateArray(arr, n) {\n    while (n > 0) {\n        let temp = arr[arr.length-1];\n        for (let i = arr.length-2; i >= 0; i--) { \n            arr[i+1] = arr[i];\n        }\n        arr[0] = temp;\n        n--;\n    }\n    return arr;\n}"
    },
    {
        "instruction": "Create a function in Python to generate n permutations of a given array. arr = [1, 2, 3]\nn = 6",
        "response": "import itertools \n\n# Function to generate \n# n permutations of the given array \ndef permutation(arr, n): \n\t\n\t# Get all permutations \n\tpermList = list(itertools.permutations(arr, n)) \n\t\n\t# Converting each tuple in the \n\t# list of tuples to list \n\tres = [list(ele) for ele in permList] \n\n\t# Returning the list of lists \n\treturn res"
    },
    {
        "instruction": "Create a python class \"Car\" with fields \"make\" and \"model\". ",
        "response": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model"
    },
    {
        "instruction": "Generate a Python code that flattens a two-dimensional array. [[1, 2], [3, 4]]",
        "response": "def flatten_2d_array(arr):\n    flat_arr = []\n    for subarr in arr:\n        flat_arr += subarr\n    return flat_arr\n\n# Driver code\ninput_list = [[1, 2], [3, 4]]\nprint(flatten_2d_array(input_list))"
    },
    {
        "instruction": "Implement a function in Python that takes a list of strings as parameter and prints out the longest string. strings = [\"Hello\", \"world\", \"Welcome\",\"to\", \"my\", \"programming\", \"challenge\"]",
        "response": "def print_longest_string(strings):\n  longest_string = \"\"\n  for string in strings:\n    if len(string) > len(longest_string):\n      longest_string = string\n  print(longest_string)\n\nprint_longest_string(strings)"
    },
    {
        "instruction": "Create a function that performs a bubble sort of an array in JavaScript. arr = [4, 7, 1, 3, 6, 9, 8, 10, 2, 5]",
        "response": "function bubbleSort(arr) {\n  let swapped;\n  do {\n    swapped = false;\n    for (let i=0; i < arr.length; i++) {\n      if (arr[i] && arr[i + 1] && arr[i] > arr[i + 1]) {\n        let temp = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = temp;\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  return arr;\n}\n\nbubbleSort(arr);"
    },
    {
        "instruction": "Given a Python function, edit the function such that it correctly prints the second highest value of the list. def getSecondMax(a):\n    print(max(a))",
        "response": "def getSecondMax(a):\n    s = sorted(a)[-2]\n    print(s)"
    },
    {
        "instruction": "Create a Python script to output the sum of the elements in a given 2-D array. X = [[11, 18], [20, 1], [12, 16]]",
        "response": "def sum_elements(X):\n    sums = 0\n    for i in range(len(X)):\n        for j in range(len(X[i])):\n            sums+=X[i][j]\n    return sums\n\nprint(sum_elements(X))"
    },
    {
        "instruction": "Modify the input so that the following Python program returns 'Yes' num = 10\n\nif num > 5:\n    print('No')",
        "response": "num = 10\n\nif num > 5:\n    print('Yes')"
    },
    {
        "instruction": "Edit the following Python class 'Foo' to accept a list of numbers upon instantiation. class Foo():\n    def __init__(self):\n        self.lst = []",
        "response": "class Foo():\n    def __init__(self, lst):\n        self.lst = lst"
    },
    {
        "instruction": "Write a code to print out the union of two sets using Python. ",
        "response": "def find_union(A, B):\n    return list(set(A).union(set(B)))\n\nA = [1, 2, 3, 4] \nB = [4, 5, 6, 7] \nprint(find_union(A, B))"
    },
    {
        "instruction": "Convert the following JavaScript function to TypeScript. function countOccurences(numList,num) {\n    let count = 0;\n    for (let i = 0; i < numList.length; i++) {\n        if (numList[i] === num) count++;\n    }\n    return count;\n}",
        "response": "function countOccurences(numList: number[], num: number): number {\n    let count = 0;\n    for (let i = 0; i < numList.length; i++) {\n        if (numList[i] === num) count++;\n    }\n    return count;\n}"
    },
    {
        "instruction": "Write a JavaScript program to accept a string and display the characters in reverse order. ",
        "response": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nlet str = \"JavaScript\";\nconsole.log(reverseString(str)); \n// Output: tpircSavaJ"
    },
    {
        "instruction": "Create a switch statement in JavaScript to compare two values. ",
        "response": "let x = 1;\nlet y = 2;\n\nswitch (x) {\n case 1: \n  if (y === 2) {\n    console.log('x is 1 and y is 2');\n    break;\n  }\n default:\n  console.log('No match');\n}"
    },
    {
        "instruction": "Name 3 popular JavaScript frameworks. ",
        "response": "Three popular JavaScript frameworks are React, Angular, and Vue."
    },
    {
        "instruction": "What are the best practices when writing Javascript code? ",
        "response": "The best practices for writing JavaScript code include using valid and properly formatted code, utilizing functions, avoiding global variables, using comments to explain code, using object and array literals, and avoiding memory leaks."
    },
    {
        "instruction": "Use the following input to write a python code for calculating the area of a triangle Base = 6cm, Height = 4.5cm",
        "response": "# calculate the area of a triangle\n# define the constant base and height\nbase = 6.0\nheight = 4.5\n# calculate the area\narea = 0.5 * base * height\n# print the result\nprint('The area of the triangle is: %0.2f cm^2' %area)"
    },
    {
        "instruction": "Implement Binary Search in Python [2, 3, 4, 5, 11, 19, 20]",
        "response": "# function to do binary search\ndef binarySearch(array, x): \n    l, r = 0, len(array)-1 \n    while l <= r: \n  \n        mid = l + (r - l)//2; \n          \n        # Check if x is present at mid \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif array[mid] < x: \n            l = mid + 1\n  \n        # If x is smaller, ignore right half \n        else: \n            r = mid - 1\n      \n    # If we reach here, then the element \n    # was not present \n    return -1\n  \narray = [2, 3, 4, 5, 11, 19, 20] \nx = 11\n\nresult = binarySearch(array, x) \nif result != -1: \n    print (\"Element is present at index\", \n            result) \nelse: \n    print (\"Element is not present in array\")"
    },
    {
        "instruction": "Generate a correct JavaScript program to convert a string into an array s = \"hello world\";",
        "response": "//function to split a string into an array\nfunction stringToArray(s) {\n    return s.split(' ');\n}\n\n//create a string\ns = \"hello world\";\n\n//convert string to array\narray = stringToArray(s);\n\n//print the array\nconsole.log(array);"
    },
    {
        "instruction": "Create a function in Python that adds two numbers. ",
        "response": "def add(x, y):\n    \"\"\"Return the sum of x and y.\"\"\"\n    return x + y"
    },
    {
        "instruction": "Write a JavaScript program to convert an array of objects into an object of objects. [\n  { id: '001', firstName: 'John' , lastName: 'Doe' },\n  { id: '002', firstName: 'Jim' , lastName: 'Smith' },\n  { id: '003', firstName: Joe , lastName: 'Mail' },\n]",
        "response": "const arrayToObj = (arr) => {\n    return arr.reduce((acc, item) => {\n      acc[item.id] = item;\n      return acc;\n    }, {});\n  }\n\nconst result = arrayToObj([\n  { id: '001', firstName: 'John' , lastName: 'Doe' },\n  { id: '002', firstName: 'Jim' , lastName: 'Smith' },\n  { id: '003', firstName: Joe , lastName: 'Mail' },\n]);\n\nconsole.log(result);\n// Output\n// {\n//   001: { id: '001', firstName: 'John', lastName: 'Doe' },\n//   002: { id: '002', firstName: 'Jim', lastName: 'Smith' },\n//   003: { id: '003', firstName: 'Joe', lastName: 'Mail' },\n// }"
    },
    {
        "instruction": "Create a if statement in JavaScript that checks if number is divisible by 3. Number: 9",
        "response": "if (number % 3 === 0) {\n    console.log('Number is divisible by 3');\n}"
    },
    {
        "instruction": "Create a quick calculator in Python based on the user input. 2 * 3 + 5",
        "response": "def quick_calc(string):\n    result = 0 \n    calculation = string.split(\" \")\n    for item in calculation:\n        try:\n            result += int(item)\n        except:\n            if item.lower() == \"*\":\n                result *= int(calculation[calculation.index(item) + 1])\n    return result\n\nprint(quick_calc(\"2 * 3 + 5\"))\n11"
    },
    {
        "instruction": "Output the nth Fibonacci number in JavaScript. 10",
        "response": "function Fibonacci(n) \n{ \n\tvar a = 0, b = 1, c, i; \n\tif (n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} \nconsole.log(Fibonacci(10)); \n55"
    },
    {
        "instruction": "Create a function in JavaScript to implement Newton's Method of Numerical Approximation. ",
        "response": "function newtonsMethod(f, df, x, epsilon) {\n    //  Keep track of how many iterations we calculate\n    let iteration = 0;\n    while (Math.abs(f(x)) > epsilon && iteration < MAX_ITER) {\n        x -= f(x) / df(x);\n        iteration += 1;\n    }\n    return x;\n}"
    },
    {
        "instruction": "Create an algorithm in JavaScript to find the closest pair of points from a given set of points. let points = [[2, 0], [4, 4], [-2, 2], [-3, -4], [4, -2]];",
        "response": "// algorithm to find closest pair of points \n// uses divide and conquer approach \nconst closestPair = (points) => { \n  // base case: two or fewer points\n  if (points.length <= 2) {\n    return points;\n  }\n\n  // divide\n  const middle = Math.floor(points.length / 2);\n  const left = points.slice(0, middle);\n  const right = points.slice(middle);\n  \n  // conquer\n  const leftPoints = closestPair(left);\n  const rightPoints = closestPair(right);\n\n  const closestPair = getClosestPair(leftPoints, rightPoints);\n\n  // combine\n  return closestPair;\n}\n \n// get closest pair between two sets of points\nconst getClosestPair = (leftPoints, rightPoints) => {\n  // calculating the minimum distance\n  let minDist = getDistance(leftPoints[0], rightPoints[0]);\n  let closestPair = [leftPoints[0], rightPoints[0]];\n  \n  for (let i = 0; i < leftPoints.length; i++) {\n    for (let j = 0; j < rightPoints.length; j++) {\n      let dist = getDistance(leftPoints[i], rightPoints[j]);\n      if (dist < minDist) {\n        minDist = dist;\n        closestPair = [leftPoints[i], rightPoints[j]];\n      }\n    }\n  }\n \n  // return the minimum distance and its pair\n  return closestPair;\n}\n \n// calculate the Euclidean distance between two points\nconst getDistance = (point1, point2) => {\n  let xDist = Math.abs(point2[0] - point1[0]);\n  let yDist = Math.abs(point2[1] - point1[1]);\n \n  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n}\n\n// testing our function \nlet points = [[2, 0], [4, 4], [-2, 2], [-3, -4], [4, -2]];\nlet closestPoints = closestPair(points);\nconsole.log(closestPoints);\n//Output: [[-2, 2], [2, 0]]"
    },
    {
        "instruction": "Edit this code snippet to reverse a string in Python. def reverse_string(s):\n    # Edit here\n    return reversed_string",
        "response": "def reverse_string(s):\n    reversed_string = \"\"\n    for char in s:\n        reversed_string = char + reversed_string\n    return reversed_string"
    },
    {
        "instruction": "Write a JavaScript function to search a string for a specified value and return the position of the match. searchString = \"banana\"\nsearchValue = \"a\"",
        "response": "function searchString(str, val) {\n  let pos = -1;\n  const len = str.length;\n\n  for (let i=0; i < len; i++) {\n    if (str[i] === val) {\n      pos = i;\n      break;\n    }\n  }\n\n  return pos;\n}\n\nconst searchString = 'banana';\nconst searchValue = 'a';\nconst searchResult = searchString(searchString, searchValue);\nconsole.log(searchResult); // outputs 2, because 'a' is in the 2nd position in \"banana\""
    },
    {
        "instruction": "Identify the type of a variable in a Python program. x = [1, 2, 3]",
        "response": "type(x) # List"
    },
    {
        "instruction": "Write a Python program to sort the given list of dictionary elements by the score value lst = [{\"score\":1},{\"score\":5},{\"score\":8}]",
        "response": "def sort_by_score(lst):\n    lst.sort(key=lambda item: item['score'])\n    return lst"
    },
    {
        "instruction": "Convert the following chess board into a 2D array in JavaScript. +---+\n|BR |\n|BK |\n| BB|\n|BR |\n+---+",
        "response": "let chessBoard = [[\"BR\", \"BK\", \"BB\", \"BR\"]];"
    },
    {
        "instruction": "Create a variables in Python to store the following information. Name: John, Age: 35",
        "response": "name = \"John\"\nage = 35"
    },
    {
        "instruction": "Write a Python program to print a random integer between 0 and 5. ",
        "response": "import random \n  \n# Print random integer  \nprint(random.randint(0, 5))"
    },
    {
        "instruction": "Create a validation rule to check if an email address is valid for an input field in JavaScript. ",
        "response": "function validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}"
    },
    {
        "instruction": "Input two numbers and output the maximum one in Python 3, 5",
        "response": "a = 3\nb = 5\n\nif a > b:\n    print(a)\nelse:\n    print(b)"
    },
    {
        "instruction": "Write a script in JavaScript to iterate over a given array of objects and return all objects with the color green. const arr = [{ color: 'blue', shape: 'square' }, { color: 'red', shape: 'triangle' }, { color: 'green', shape: 'circle' }]",
        "response": "const greenObjects = arr.filter(obj => obj.color === 'green');"
    },
    {
        "instruction": "Write a JavaScript function that returns that number of elements from an array of numbers which sum up to a given target. array = [2, 3, 7, 8, 10] \ntarget = 11",
        "response": "function findElementsSum(array, target){\n    let result = [];\n    for (let i = 0; i < array.length; i++){\n        for (let j = i+1; j < array.length; j++){\n            if (array[i] + array[j] == target){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}"
    },
    {
        "instruction": "Write a Python function to check if a given string is a palindrome and has all the vowels in it. ",
        "response": "def all_vowels_palindrome(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if not word == word[::-1]:\n        return False\n    for char in vowels:\n        if char not in word:\n            return False\n    return True"
    },
    {
        "instruction": "Write a Python script to detect if two numbers have the same frequency of digits. ",
        "response": "def same_frequency(num1,num2):\n    str1 = str(num1)\n    str2 = str(num2)\n    if len(str1) != len(str2):\n        return False\n    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    for char in str2:\n        if not char in dict:\n            return False\n        dict[char] -= 1\n    for k in dict:\n        if dict[k] != 0:\n            return False\n    return True"
    },
    {
        "instruction": "Writing a Python function which takes a 2D array as an argument and transposes it. arr = [[4, 5, 44], [3, 8, 20], [2, 5, 10]]",
        "response": "def transpose_(arr):\n  transposedarr = []\n  for i in range(len(arr[0])):\n    row = []\n    for j in range(len(arr)):\n      row.append(arr[j][i])\n    transposedarr.append(row)\n  return transposedarr"
    },
    {
        "instruction": "Create a function in JavaScript to search an element in a given sorted array. arr = [1, 3, 4, 5, 6, 7, 9, 11]",
        "response": "function sortedArraySearch(arr, el) {\n  let start = 0, end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === el) return true;\n    else if (arr[mid] < el) start = mid + 1;\n    else end = mid - 1;\n  }\n  return false;\n}"
    },
    {
        "instruction": "Construct a for loop in Python to iterate through the items in the list and print their corresponding index. lst = [1,2,3]",
        "response": "for i, num in enumerate(lst):\n    print(i, num)"
    },
    {
        "instruction": "Write code to delete all elements in a given Python list which are NOT integer type. lst = [1, \"a\", 2.3, False, 4, \"abc\"]",
        "response": "for item in lst[:]:\n    if not isinstance(item, int):\n        lst.remove(item)"
    },
    {
        "instruction": "Create a python anonymous function that squares an input number. ",
        "response": "square_num = lambda x: x ** 2"
    },
    {
        "instruction": "Write a python loop to print all the even numbers between 2 and 15 (inclusive). ",
        "response": "for i in range(2, 16):\n    if i % 2 == 0:\n        print(i)"
    },
    {
        "instruction": "Write a python statement to calculate the factorial of 6. ",
        "response": "import math\n\nfactorial = math.factorial(6)"
    },
    {
        "instruction": "Given a list of integers, write a function in Python to sort and reverse the list. input_list = [3, 8, 10, 1, 9]",
        "response": "def sort_and_reverse(list): \n  res_list = sorted(list, reverse=True) \n  return res_list \n  \nsort_and_reverse(input_list) \n\n# Output \n[10, 9, 8, 3, 1]"
    },
    {
        "instruction": "Generate a unique ID string of length 12 using a Python function. ",
        "response": "import string, random\ndef generate_unique_id(stringLength=12):\n  lettersAndDigits = string.ascii_letters + string.digits\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nunique_string = generate_unique_id()\nprint(\"unique string: \",unique_string)"
    },
    {
        "instruction": "Find the reverse of an array in Python. arr = [1, 2, 3, 4, 5]",
        "response": "arr = [5, 4, 3, 2, 1]"
    },
    {
        "instruction": "Write JavaScript code for a for loop with condition that iterates 8 times. ",
        "response": "for (let i = 0; i < 8; i++) { \n  // code to be executed \n}"
    },
    {
        "instruction": "Write Python code to extract the title from a URL. url = \"https://www.google.com/search?q=gpt-3&oq=GPT+3\"",
        "response": "def get_title(url): \n    url_parsed = urlparse(url)\n    query_parsed = parse_qs(url_parsed.query)\n    title = query_parsed['q'][0]\n    return title\n\nprint(get_title(url))\n\n# Output: GPT 3"
    },
    {
        "instruction": "In Python, how can you iterate a list in reverse order? ",
        "response": "We can use the reversed() function to iterate a list in reverse order in Python. For example:\n\nmy_list = [1, 2, 3, 4]\n\nfor element in reversed(my_list):\n    print(element)"
    },
    {
        "instruction": "How can you create a dictionary in Python with 3 key-value pairs? ",
        "response": "We can create a dictionary in Python with 3 key-value pairs by declaring a dictionary variable with the desired contents. For example:\n\nmy_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}"
    },
    {
        "instruction": "Given a list, write a Python code snippet to print the elements of the list in reverse order. my_list = [\"one\", \"two\", \"three\", \"four\", \"five\"]",
        "response": "for element in reversed(my_list):\n    print(element)"
    },
    {
        "instruction": "Using Python, reverse a given string \"Hello World!\". ",
        "response": "\"!dlroW olleH\""
    },
    {
        "instruction": "Create a function in Python that can compute the area of a rectangular room in square feet. length = 20\nwidth = 15",
        "response": "def findArea(length, width):\n  area = length * width\n  return area\n\n# Call the function\narea = findArea(20, 15)\nprint(\"The area of the room is: \" + str(area) + \"sq.ft\")"
    },
    {
        "instruction": "Design a data structure in Python to store customer contact details. ",
        "response": "#Create a class to store customer information\nclass ContactData:\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone\n\n#Create a dictionary to store the customer contact details\ncustomer_details = {}\n\n# function to add customer details in the dictionary\ndef add_customer_details(name, email, phone):\n    customer_details[name] = ContactData(name, email, phone)\n\n#Function to display customer details\ndef display_customer_details():\n    for key in customer_details.keys():\n        customer = customer_details[key]\n        print(\"Name: {}, Email: {}, Phone: {}\".format( \n            customer.name, customer.email, customer.phone))"
    },
    {
        "instruction": "Suggest the missing line of code in the following Python program. nums = [1, 2, 3]\nfor n in nums:\n    print(n)",
        "response": "nums = [1, 2, 3]\nfor n in nums:\n    print(n)\n\n#Print the sum of the list\nprint(sum(nums))"
    },
    {
        "instruction": "Using only JavaScript, determine the length of a given string \"Hello World\". ",
        "response": "let stringLength =  \"Hello World\".length; \nconsole.log(stringLength); // output 11"
    },
    {
        "instruction": "Create a method to sort a given array of integers without using any of the built-in sorting functions in JavaScript. array = [5, 4, 3, 2, 1]",
        "response": "\"\"\"\nCreate a method to sort a given array of integers without using any of the built-in sorting functions in JavaScript\n\nInput: array = [5, 4, 3, 2, 1]\n\"\"\"\n\n// bucket sort\nfunction bucketSort(arr) {\n  let buckets = new Array(arr.length); \n  let result = []; \n  \n  for (let i = 0; i < arr.length; i++) {\n    buckets[i] = 0;\n  }\n  \n  for (let i = 0; i < arr.length; i++) {\n    buckets[arr[i]]++;\n  }\n  \n  for (let i = 0; i < arr.length; i++) {\n    while (buckets[i] > 0) {\n      result.push(i);\n      buckets[i]--;\n    }\n  }\n  \n  return result;\n}"
    },
    {
        "instruction": "Create a JavaScript code that takes a number as input and returns its factorial. num = 5",
        "response": "\"\"\"\nCreate a JavaScript code that takes a number as input and returns its factorial.\n\nInput: num = 5\n\"\"\"\n\nfunction factorial(num) {\n    if (num === 0) {\n        return 1;\n    } else {\n        return num * factorial(num-1);\n    }\n}\n\nconsole.log(factorial(5))"
    },
    {
        "instruction": "Create a code in Python to get the current stock price of a company from yahoo finance. ticker = \"AAPL\"",
        "response": "\"\"\"\nCreate a code in Python to get the current stock price of a company from yahoo finance.\n\nInput: ticker = \"AAPL\"\n\"\"\"\n\nimport requests\n\ndef get_stock_price(ticker):\n    url = 'https://finance.yahoo.com/quote/' + ticker\n    response = requests.get(url)\n    data = response.text.split('\"regularMarketPrice\":{\"raw\":')[1].split(',\"fmt\"')[0]\n    return float(data)\n\nprint(get_stock_price('AAPL'))"
    },
    {
        "instruction": "Write a Python code to initialize a 10 x 10 matrix with random values. ",
        "response": "import random\n\ndef init_matrix():\n    matrix = [[0 for _ in range(10)] for _ in range(10)]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = random.randint(0,100)\n    return matrix"
    },
    {
        "instruction": "Create a JavaScript function to convert a string to pig-latin. ",
        "response": "function toPigLatin(str) {\n const vowels = ['a', 'e', 'i', 'o', 'u'];\n let result = '';\n str.split(' ').forEach(word => {\n if (vowels.includes(word[0])) {\n result += `${word}ay `;\n } else {\n result += `${word.substring(1)}${word[0]}ay `;\n }\n });\n return result;\n}"
    },
    {
        "instruction": "Using python, create two variables that are equal to each other. ",
        "response": "x = 5\ny = 5"
    },
    {
        "instruction": "Implement a quicksort algorithm in JavaScript that takes an array of numbers as input and returns a sorted array. input_array = [21, 4, 1, 3, 9, 20, 25]",
        "response": "function quicksort(input_array) {\n    if (input_array.length <= 1) {\n        return input_array;\n    }\n\n    const pivot = input_array[0];\n    const left = [];\n    const right = [];\n\n    for (let i = 1; i < input_array.length; i++) {\n        if (input_array[i] < pivot) {\n            left.push(input_array[i]);\n        } else {\n            right.push(input_array[i]);\n        }\n    }\n\n    return [...quicksort(left), pivot, ...quicksort(right)];\n}\n\ninput_array = [21, 4, 1, 3, 9, 20, 25]\nconsole.log(quicksort(input_array)) // prints [1, 3, 4, 9, 20, 21, 25]"
    },
    {
        "instruction": "Write a code snippet to loop over the characters in a string and add them to an array in Python. ",
        "response": "def loop_over_string(s):\n    arr = []\n    for c in s:\n        arr.append(c)\n    return arr"
    },
    {
        "instruction": "How can you delete an object in JavaScript? ",
        "response": "To delete an object in JavaScript, you can use the delete keyword, e.g. delete object_name;"
    },
    {
        "instruction": "Create a matrix of size 3 x 3 in Python. ",
        "response": "# 3x3 matrix \nmatrix3x3 = [[10, 20, 30],  \n             [15, 25, 35],  \n             [27, 29, 37]]"
    },
    {
        "instruction": "Construct a python list comprehension List of numbers from 2 to 8",
        "response": "list_nums = [x for x in range(2, 9)]"
    },
    {
        "instruction": "Create a Bash script that runs a Python code Python code:\n\ndef hello_world():\n    print(\"Hello World!\")",
        "response": "#!/bin/bash\n \npython << END\ndef hello_world():\n    print(\"Hello World!\")\nhello_world()\nEND"
    },
    {
        "instruction": "Write a short python script to determine whether a given number is divisible by 5. ",
        "response": "def is_divisible_by_5(number):\n    \"\"\"Check whether a given number is divisible by 5 or not.\"\"\"\n    if number % 5 == 0:\n        return True\n    return False"
    },
    {
        "instruction": "Write a python command which prints the text “Hello World” if a given number is even. number = 10",
        "response": "if number % 2 == 0:\n    print(\"Hello World\")"
    },
    {
        "instruction": "Answer the following question: What Python library is used for web scraping? ",
        "response": "The Python library used for web scraping is called 'BeautifulSoup'."
    },
    {
        "instruction": "Write a python command which prompts the user to input text ",
        "response": "input_text = input(\"Enter some text: \")"
    },
    {
        "instruction": "What data type is returned by the Python function pow()? ",
        "response": "The Python function pow() returns a float data type."
    },
    {
        "instruction": "What is the GIL in Python and what is its purpose? ",
        "response": "The Global Interpreter Lock (GIL) is a mechanism used by Python to manage and control access to shared data and resources. It prevents multiple threads from accessing the same data or using shared resources at the same time. The purpose of the GIL is to prevent the Python interpreter from crashing due to race conditions."
    },
    {
        "instruction": "Is the following code valid Python? if bool == true:\n    print(\"True\")",
        "response": "False"
    },
    {
        "instruction": "Which of the following statements is/are valid in Javascript? let x = \"Hello World!\";\nlet y = 'Hello World!'",
        "response": "Both statements are valid in Javascript. The first statement uses double quotes, while the second statement uses single quotes."
    },
    {
        "instruction": "Generate a random hex color in Python. ",
        "response": "import random \n  \ndef random_hex_colour_code(): \n    return '#' + ''.join([random.choice('0123456789ABCDEF') for x in range(6)]) \n  \nprint (\"Random Hex Color Code:\", random_hex_colour_code())"
    },
    {
        "instruction": "Write a function in Python that takes a list of integers as an argument and calculates the mean average. ",
        "response": "def calculate_mean(numbers):\n    total_sum = 0; \n    for num in numbers:\n        total_sum += num\n    \n    mean_average = total_sum / len(numbers)\n    return mean_average"
    },
    {
        "instruction": "Create a while loop in JavaScript to print the Fibonacci series. ",
        "response": "let result = [];\nlet prev = 0;\nlet next = 1;\n\nwhile (next < 10) {\n  temp = prev;\n  prev = next;\n  next = temp + next;\n  result.push(next);\n}\nconsole.log(result);"
    },
    {
        "instruction": "Write a function in Python to split a given string into the words in the string. ",
        "response": "def split_string(string):\n    return string.split()"
    },
    {
        "instruction": "Create a JavaScript class named \"Student\" that has the following fields. ",
        "response": "class Student {\n    constructor(name, age, email) {\n        this.name = name;\n        this.age = age;\n        this.email = email;\n    }\n}"
    },
    {
        "instruction": "Reverse this array in-place using Python. arr = [4, 2, 8, 6]",
        "response": "arr.reverse() # arr is now [6, 8, 2, 4]"
    },
    {
        "instruction": "Explain the difference between String comparison operators == and === in JavaScript. ",
        "response": "The \"==\" operator is the equality comparison operator, which compares two values and returns true if they are equal. The \"===\" operator is the strict equality comparison operator, which compares two values and returns true only if both the values and their type are equal."
    },
    {
        "instruction": "Calculate the sum of 3, 5, 7 and 17 using JavaScript. ",
        "response": "let sum = 3 + 5 + 7 + 17;"
    },
    {
        "instruction": "Write a Python program that reads a list of words and prints the most frequently used one. ['apple', 'banana', 'orange', 'apple']",
        "response": "\"\"\"\nProgram to read a list of words and print the most frequently used one\n\nInput: List of words\nOutput: Most frequently used word\n\"\"\"\n\ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \n  \n    # Iterate over the list of words \n    for word in words: \n        # Check if word is already present in the freq dictionary \n        if (word in freq): \n            #Increment the count of word \n            freq[word] += 1\n        else: \n            # Add it to the dictionary with a count of one \n            freq[word] = 1\n  \n    # Get the count of most frequent word \n    max_count = max(freq.values()) \n  \n    # Loop over words and return the most frequent one \n    for key, value in freq.items(): \n        if value == max_count: \n            return key \n\n\nif __name__ == '__main__': \n    # Input\n    words = ['apple', 'banana', 'orange', 'apple']\n\n    # Result\n    print(most_freq_word(words))"
    },
    {
        "instruction": "Create a class definition in Python for a vehicle with attributes like make, model, year. ",
        "response": "class Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n \n    # Other methods..."
    },
    {
        "instruction": "Explain a Python program to check whether a number is Armstrong or not. ",
        "response": "def is_armstrong(num):\n    digits = [int(d) for d in str(num)]\n    num_digits = len(digits)\n    armstrong_sum = 0\n    for digit in digits:\n        armstrong_sum += digit ** num_digits\n    return num == armstrong_sum\n\n#Test code\nnum = 153\nprint(is_armstrong(num)) # Output will be True"
    },
    {
        "instruction": "Write Python code to fill missing values in a Pandas dataframe with a given value. import pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])",
        "response": "import pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])\n\ndf.fillna(value='NA', inplace=True)"
    },
    {
        "instruction": "Implement a function in JavaScript that returns true if an object is empty, false otherwise. ",
        "response": "function isEmptyObject(obj) {\n    return Object.keys(obj).length === 0;\n}"
    },
    {
        "instruction": "How to extract the domain name from an email address using JavaScript? ",
        "response": "function getDomainFromEmail(email_address) {\n  return email_address.split('@')[1];\n}\n\ngetDomainFromEmail('example@domain.com'); // 'domain.com'"
    },
    {
        "instruction": "Write a function in Python that takes four strings as parameters and returns a single string with all strings concatenated together. ",
        "response": "def concatenate(str1, str2, str3, str4):\n  return str1 + str2 + str3 + str4"
    },
    {
        "instruction": "Write an if-else statement in JavaScript that prints 'positive' if a number is greater than 0 and 'negative' if a number is less than 0. ",
        "response": "if (number > 0) {\n  console.log('positive');\n} else if (number < 0) {\n  console.log('negative');\n}"
    },
    {
        "instruction": "Add a function to the following Javascript code so that it calculates the average of the two numbers. const add = (a, b) => {\n\treturn a + b;\n};",
        "response": "const add = (a, b) => {\n\treturn a + b;\n};\n\nconst average = (a, b) => {\n    return (a + b) / 2;\n};"
    },
    {
        "instruction": "Create a python function which finds the intersection of two lists list1=[2, 5, 8, 10]\nlist2=[3, 5, 8, 10]",
        "response": "def intersect(list1,list2):\n    return [i for i in list1 if i in list2]"
    },
    {
        "instruction": "Write a python program that takes a string as a parameter and prints the character at index 4 if the length of the string is greater than 4. astring = \"Python\"",
        "response": "def character_at_index(astring):\n    if len(astring) > 4:\n        print(astring[4])"
    },
    {
        "instruction": "Create a python class that stores the name of the student, their total marks and return the student name with their total marks. name = 'John'\nmarks = 75",
        "response": "class Student:\n    def __init__(self, name, marks):\n        self.name = name\n        self.marks = marks\n\n    def get_details(self):\n        return self.name + \": \" + str(self.marks)"
    },
    {
        "instruction": "List all the methods available in axelrod python library ",
        "response": "Methods available in axelrod Python library are constructor method, player_names method, init method, play method, get_history method, reset method, sign_string method, find_conformers method, oppose_strategy method, strategy method, final_score method, cooperation method, defect method, normalised_score method, and elo_rating method."
    },
    {
        "instruction": "Calculate the sum of all characters in a string using a for loop String: Python",
        "response": "total = 0\nfor ch in 'Python':\n    total += ord(ch)\nprint(total)\n\n# Output: 686"
    },
    {
        "instruction": "Write a Python parser to parse the json string to a dictionary. {\"name\": \"John\", \"age\": 23}",
        "response": "import json\n\ndef json_parser(string):\n  data = json.loads(string)\n  return data"
    },
    {
        "instruction": "Use the information provided to initialize a dictionary in Python. keys = [\"name\", \"age\", \"gender\"]\nvalues = [\"John Doe\", 25, \"Male\"]",
        "response": "my_dict = dict(zip(keys, values))"
    },
    {
        "instruction": "Define an absolute difference function in Python to find the difference between two numbers. ",
        "response": "def absolute_difference(x, y):\n    return abs(x - y)"
    },
    {
        "instruction": "Given two lists, write a Python code to find the common elements in both the lists list1 = [3, 7, 14, 19]\nlist2 = [6, 8, 14, 17]",
        "response": "common_elements = [element for element in list1 if element in list2]\n\nprint(common_elements) #[14]"
    },
    {
        "instruction": "Explain the use of the continue keyword in Python ",
        "response": "The continue keyword can be used to skip over certain elements in a loop body. It is often used to skip over certain unwanted elements. It works by returning to the loop condition by stopping the current iteration of the loop and jumping straight to the next iteration."
    },
    {
        "instruction": "Using the following data, generate a random string in Python data = [“H”, “e”, “l”, “l”, “o”]",
        "response": "import random\n\nrandom_string = \"\".join(random.choices(data, k=5))\n\nprint(random_string) #helll or olleh or leloh or any other combination"
    },
    {
        "instruction": "Write a Python code to classify the following sentence It's raining cats and dogs",
        "response": "import nltk\nfrom nltk.tokenize import word_tokenize\n\nsentence = \"It's raining cats and dogs\"\ntokens = word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nprint(tagged) #[('It', 'PRP'), (\"'s\", 'VBZ'), ('raining', 'VBG'), ('cats', 'NNS'), ('and', 'CC'), ('dogs', 'NNS')]"
    },
    {
        "instruction": "Given a course consisting of 5 lessons, write a program to display the first lesson. Lessons = [\"Python Basics\", \"Javascript Basics\", \"C++ Basics\", \"Data Structures\", \"Object-Oriented Programming\"]",
        "response": "def display_first_lesson(lessons):\n    print(\"The first lesson is: \" + lessons[0])\n\nLessons = [\"Python Basics\", \"Javascript Basics\", \"C++ Basics\", \"Data Structures\", \"Object-Oriented Programming\"]\n\ndisplay_first_lesson(Lessons)"
    },
    {
        "instruction": "Change all the element in the array to negative using JavaScript. var arr = [1, 2, 3, 4, 5];",
        "response": "// Change all the element in the array to negative \nfor (var i = 0; i < arr.length; i++) {\n    arr[i] = -arr[i];\n}"
    },
    {
        "instruction": "Check whether all elements in the array are equal using Python. arr = [2,2,2]",
        "response": "# Check whether all elements in the array are equal\nif all(x == arr[0] for x in arr):\n    print(\"All elements are equal\")\nelse:\n    print(\"Elements are not equal\")"
    },
    {
        "instruction": "Create an object of your own class using JavaScript. ",
        "response": "// Create an object of your own class \nclass MyClass {\n    constructor(name) {\n        this.name = name;\n    }\n}\nlet obj = new MyClass(\"MyObject\");\nconsole.log(obj);"
    },
    {
        "instruction": "Write a JavaScript code to create a timer that counts down from 10. ",
        "response": "let countDown = 10;\nlet interval = setInterval(() => {\n  countDown--;\n  if (countDown == 0) {\n    clearInterval(interval);\n  }\n}, 1000);"
    },
    {
        "instruction": "Use the provided text to generate a python ``dict``. KEY1:VALUE1,KEY2:VALUE2,KEY3:VALUE3",
        "response": "{'KEY1': 'VALUE1', 'KEY2': 'VALUE2', 'KEY3': 'VALUE3'}"
    },
    {
        "instruction": "How can you create a dictionairy from the following two lists in Python? list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]",
        "response": "dict_from_lists = dict(zip(list1, list2))"
    },
    {
        "instruction": "Create a JavaScript function for sorting a list of strings alphabetically by their third letter. [\"apple\",\"pear\",\"banana\",\"grape\"]",
        "response": "function sortByThirdLetter(arr) {\n  return arr.sort((a, b) => {\n    if (a[2] < b[2]) return -1;\n    if (a[2] > b[2]) return 1;\n    return 0;\n  });\n}\n\nsortByThirdLetter([\"apple\", \"pear\", \"banana\", \"grape\"]);  // [\"apple\", \"grape\", \"banana\", \"pear\"]"
    },
    {
        "instruction": "How can we use try…except blocks in Python to handle errors? ",
        "response": "Try...except blocks are used in Python to handle errors gracefully. They provide a way for Python to execute a code block and gracefully handle any errors that may occur. The code block inside the try is executed first and if an error occurs, it will be caught by the except block and handled. For example, if we have a function that might generate an error, we can use a try...except block to gracefully handle the error and prevent the program from crashing. The try...except block allows us to execute the code and gracefully handle any errors that may occur."
    },
    {
        "instruction": "Rewrite the given recursive Python program as a loop. def factorial(n): \n   if (n == 1): \n       return n\n   else: \n       return n * factorial(n-1)",
        "response": "def factorial(n): \n    result = 1\n    for i in range(n): \n        result = result * (i + 1)\n    return result"
    },
    {
        "instruction": "Create a python function that takes a string as input and returns a boolean if the string contains only upper case letters. ",
        "response": "def all_upper(s):\n        return s.isupper()"
    },
    {
        "instruction": "Create a JavaScript function to validate an email address with the following conditions. ",
        "response": "function validateEmail(email) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}"
    },
    {
        "instruction": "Generate a JavaScript solution to print all prime numbers between 1 and 50. ",
        "response": "for(var i = 2; i <= 50; i++) {\n     var isPrime = true;\n     for(var j = 2; j < i; j++) {\n         if(i % j == 0) {\n             isPrime = false;\n         }\n     }\n     if(isPrime) {\n         console.log(i);\n     }\n}"
    },
    {
        "instruction": "Fetch data from the internet using an API call in Python \"https://api.example.com/v1/search\"",
        "response": "import requests\n\nurl = \"https://api.example.com/v1/search\"\n\nresponse = requests.get(url)\ndata = response.json()\nprint(data)"
    },
    {
        "instruction": "Create a function in Python which takes two strings as arguments and returns true if the first string contains the second string, false otherwise. ",
        "response": "def contains(string1, string2):\n    return string2 in string1"
    },
    {
        "instruction": "Evaluate the following arithmetic expression with Python. 15 * (2 + 7)",
        "response": "195"
    },
    {
        "instruction": "Implement a function in JavaScript which returns the nth element from the end of an array. array: [2, 5, 8, 6, 9, 0]\nn: 2",
        "response": "function nthFromEnd(arr, n) {\n    return arr[arr.length - n];\n}\n\nnthFromEnd([2, 5, 8, 6, 9, 0], 2) // returns 6"
    },
    {
        "instruction": "Split the string \"hello world\" into an array of individual words in JavaScript. ",
        "response": "\"hello world\".split(\" \") // returns [\"hello\", \"world\"]"
    },
    {
        "instruction": "Merge the two following dictionaries into one with Python. dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4};",
        "response": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4};\n\nmerged_dict = {**dict1, **dict2}\n\nprint(merged_dict) // returns {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
    },
    {
        "instruction": "Explain in simple terms what a dictionary is in Python. ",
        "response": "In Python, a dictionary is a collection of unordered key-value pairs. It is a mutable data type which allows users to store data in the form of key-value pairs. A key is an immutable object (like a number, string, or tuple) that is used to access the value stored for the corresponding key. A value can be any type of object like an integer, float, list, string, etc."
    },
    {
        "instruction": "Translate the following Ruby code to Javascript def print_hello\n  puts \"Hello!\"\nend\n\nprint_hello",
        "response": "function printHello() {\n  console.log(\"Hello!\");\n}\n\nprintHello();"
    },
    {
        "instruction": "How would you define a Python decorator called ``logger`` to log the functions being called? ",
        "response": "from functools import wraps\n\ndef logger(func):\n    @wraps(func)\n    def log_function(*args, **kwargs):\n        print('Running \"{}\" with arguments {}, {}'.format(func.__name__, args, kwargs))\n        return func(*args, **kwargs)\n    return log_function"
    },
    {
        "instruction": "Write a class in Python to represent an entry in a contact book. ",
        "response": "class ContactEntry:\n    def __init__(self, name, phone_number, email):\n        self.name = name\n        self.phone_number = phone_number\n        self.email = email"
    },
    {
        "instruction": "Implement a web scraper in Python to extract all headlines from a web page. ",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\nresponse = requests.get(url)\nhtml = response.text\nsoup = BeautifulSoup(html, 'html.parser')\n\nheadlines = []\nfor tag in soup.find_all('h1', class_='headline'):\n    headline = tag.string\n    headlines.append(headline)"
    },
    {
        "instruction": "Find the maximum and minimum values of a given list of integers in Python. ",
        "response": "int_list = [3, 5, 2, 4, 1]\nmax_value = max(int_list)\nmin_value = min(int_list)"
    },
    {
        "instruction": "Create a Python script to print the following output. ",
        "response": "for x in range(10):\n    for y in range(10):\n        print(\"*\" if (x + y) % 2 == 0 else \" \", end=\"\")\n    print(\"\")"
    },
    {
        "instruction": "Write Python code to create a list of numbers from 1 to 10 (including 10). ",
        "response": "list_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "instruction": "Write a JavaScript program to create an array of elements, representing the Fibonacci sequence, up to the given number n. ",
        "response": "function fibonacci_array(n) {\n let sequence = [0, 1];\n while (sequence.length <= n) {\n let lastIndex = sequence.length - 1;\n sequence.push(sequence[lastIndex] + sequence[lastIndex - 1]);\n }\n return sequence;\n}"
    },
    {
        "instruction": "How does JavaScript handle undeclared variables? ",
        "response": "JavaScript will automatically create an undeclared variable if it is referenced in the code. The variable is then set to the undefined value. The variable cannot be set or accessed until it has been declared. The variable will also remain in the global scope."
    },
    {
        "instruction": "Identify the Python statement used for looping. ",
        "response": "for"
    },
    {
        "instruction": "Create a format string in Python to output the sentence “Hello, my name is John Doe.” name = \"John Doe\"",
        "response": "print(f\"Hello, my name is {name}.\")"
    },
    {
        "instruction": "Write a Python script to create a dictionary of key - value pairs from a list. list = [\"apple\", \"banana\", \"cherry\"]",
        "response": "dictionary = dict.fromkeys(list, 0)\n\nprint(dictionary)\n\n# Output: {'apple': 0, 'banana': 0, 'cherry': 0}"
    },
    {
        "instruction": "Create a loop in Python to print odd numbers between 10 and 25. ",
        "response": "for i in range(11, 25, 2):\n    print(i)"
    },
    {
        "instruction": "Write a function in Python that takes a list of integer as input and return the most frequent value in the list. [3, 9, 5, 6, 3, 9, 5]",
        "response": "def most_frequent_value(list):\n    return max(set(list), key = list.count)"
    },
    {
        "instruction": "Create a function in Javascript to be used for capitalizing the first letter of each word in a string of text. ",
        "response": "const toTitleCase = (str) => {\n    return str.replace(/\\w\\S*/g, function(txt){\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}"
    },
    {
        "instruction": "Suggest a one-line solution for intersecting two given arrays in Javascript. ",
        "response": "const intersection = (arr1, arr2) => arr1.filter(x => arr2.includes(x));"
    },
    {
        "instruction": "Rewrite the following function to use the modern function syntax in Javascript. function greetUser(name) {\n    console.log('Hello ' + name + '!');\n}",
        "response": "const greetUser = (name) => console.log(`Hello ${name}!`);"
    },
    {
        "instruction": "Create a JavaScript class named “Apple” that holds one property, the “Name”. ",
        "response": "class Apple {\n    constructor(name){\n        this.Name = name;\n    }\n}"
    },
    {
        "instruction": "Create an object in Python that has three properties, \"Color\", \"Height\" and \"Weight\". ",
        "response": "myObject = { \n    'color': '',\n    'height': 0,\n    'weight': 0\n}"
    },
    {
        "instruction": "Edit the Python code to reverse a linked list. # Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None",
        "response": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef reverse_list(head):\n    prev = None\n    while head != None:\n        next = head.next\n        head.next = prev\n        prev = head\n        head = next\n    return prev"
    },
    {
        "instruction": "Change the Python code to output the product of two numbers. def multiply(a, b): \n    return a + b",
        "response": "def multiply(a, b): \n    return a * b"
    },
    {
        "instruction": "Change the Python code to find the occurrences of an item in a list def count(list_of_items, item): \n    return len(list_of_items)",
        "response": "def count(list_of_items, item): \n    count = 0\n    for i in list_of_items:\n        if i == item:\n            count += 1\n    return count"
    },
    {
        "instruction": "Generate a Python program to generate the square of a number. ",
        "response": "def square(n):\n    return n*n"
    },
    {
        "instruction": "Construct a JavaScript function that implements a fibonacci sequence. ",
        "response": "function fibonacci(num) {\n  let a = 1,\n    b = 0,\n    temp;\n\n  while (num >= 0) {\n    temp = a;\n    a = a + b;\n    b = temp;\n    num--;\n  }\n\n  return b;\n}"
    },
    {
        "instruction": "How would you convert this list of strings to integers in Python? str_list = ['1', '2', '3', '4']",
        "response": "int_list = [int(i) for i in str_list]\n# Output: [1, 2, 3, 4]"
    },
    {
        "instruction": "Create a Python function to generate a random hex color code. ",
        "response": "import random\n\ndef generate_random_hex_color_code():\n  hex_code = \"#\"\n  for i in range(6):\n    random_digit = random.choice(\"0123456789ABCDEF\")\n    hex_code += random_digit\n  return hex_code\n\nif __name__ == '__main__':\n  print(generate_random_hex_color_code())"
    },
    {
        "instruction": "Write a JavaScript function to print a specific pattern. ",
        "response": "function printPattern(n) { \n    for (var i = 1; i <= n; i++) { \n        for (var j = 1; j <= i; j++) { \n            document.write(j + \" \"); \n        } \n        document.write(\"<br>\"); \n    } \n} \n  \nprintPattern(7);"
    },
    {
        "instruction": "Design a function in Python which takes a list of characters and returns the frequency of each character as a dictionary. [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]",
        "response": "def character_frequency(lst):\n    \"\"\"Function to count the frequency of each character in a list\"\"\"\n    frequencies = {}\n    for c in lst:\n        if c in frequencies:\n            frequencies[c] += 1\n        else:\n            frequencies[c] = 1\n    return frequencies\n\nprint(character_frequency([\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]))\n# Output: {'a': 3, 'b': 2, 'c': 1, 'd': 1}"
    },
    {
        "instruction": "Create a JavaScript program which takes an array of dates and returns the average date. [2018-01-01, 2018-01-05, 2018-01-10]",
        "response": "function avgDate(dates) {\n  let sum = 0;\n  const dateLen = dates.length;\n\n  for (let i = 0; i < dateLen; i++) {\n    sum += Date.parse(dates[i]);\n  }\n\n  const avgDate = Date();\n  avgDate.setTime(sum / dateLen);\n\n  return avgDate;\n}\n\nconsole.log(avgDate([\"2018-01-01\", \"2018-01-05\", \"2018-01-10\"])); // Output: Mon Jan 07 2019 00:00:00 GMT+0545 (Nepal Time)"
    },
    {
        "instruction": "Construct a JavaScript program to sort a two-dimensional array by column 3 in ascending order. const array = [\n    [7, 0, 5],\n    [3, 2, 1],\n    [2, 5, 9],\n    [0, 6, 8]\n]",
        "response": "function sortByColumn3Ascending(array) {\n    array.sort(function(a, b) {\n        return a[2] - b[2];\n    });\n    return array;\n}\n\nconsole.log(sortByColumn3Ascending(array));"
    },
    {
        "instruction": "Implement a web service in Python to retrieve the current temperature from an external API. ",
        "response": "import requests\n\n# Gets the current temperature from an external API\ndef get_current_temperature():\n    response = requests.get('https://weather.com/api/current-temperature')\n    response_json = response.json()\n    return response_json['current_temperature']"
    },
    {
        "instruction": "Create a JavaScript module to get the current day and month. ",
        "response": "var getDateInfo = (function() {\n    var today = new Date();\n    var day = today.getDate();\n    var month = today.getMonth() + 1; \n    return {\n        day : day,\n        month : month\n    };\n  })(); \n\n  module.exports = getDateInfo;"
    },
    {
        "instruction": "How would you create a function to calculate factorial of a given number in Python? ",
        "response": "def factorial(n):\n    if n == 0: \n        return 1\n    return n * factorial(n-1)"
    },
    {
        "instruction": "Edit the following JavaScript code to create an array of only the even numbers from the given array. [5, 12, 7, 23, 10]",
        "response": "let arr = [5, 12, 7, 23, 10];\nlet evenNumbers = arr.filter(num => num % 2 == 0);"
    },
    {
        "instruction": "Rewrite the following JavaScript function to be more concise. function findMax(nums) {\n  let currentMax = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > currentMax) currentMax = nums[i];\n  }\n  return currentMax;\n}",
        "response": "function findMax(nums) {\n  return nums.reduce((currentMax, num) => num > currentMax ? num : currentMax, 0);\n}"
    },
    {
        "instruction": "Debug the following code snippet in Python to find the maximum number accross a list of integers. lst = [-1, 5, 10, 0, -9]",
        "response": "def find_maximum(lst):\n  max_value = float('-inf')\n  for i in lst:\n    if i > max_value:\n      max_value = i\n  return max_value\n\nprint(find_maximum(lst))"
    },
    {
        "instruction": "Write an algorithm in JavaScript for finding all common elements between two given integer arrays. [1,7,9] and [2,7,8]",
        "response": "function findCommonElements(arr1, arr2) {\n  const commonElements = [];\n\n  arr1.forEach(num => {\n    if(arr2.includes(num)) {\n      commonElements.push(num);\n    }\n  });\n \n  return commonElements;\n}\n\nconsole.log(findCommonElements([1,7,9], [2,7,8]))"
    },
    {
        "instruction": "Create a regex expression in Python that finds all numbers from 1 to 100 inclusive. ",
        "response": "import re\n\nregex = re.compile('[1-9]|[1-9][0-9]|100')"
    },
    {
        "instruction": "Construct a JavaScript program to find all the prime numbers within a range of numbers range = [2,10]",
        "response": "function findPrimes(range) {\n  let primes = [];\n  for (let i=range[0]; i< range[1]; i++) {\n    if (checkPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\nfunction checkPrime(num) {\n  for (let i=2; i<=Math.sqrt(num); i++) {\n    if (num % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}"
    },
    {
        "instruction": "Generate a multiplication table for a given number in JavaScript. n = 5;",
        "response": "function createmultiplicationTable(n) \n{ \n for ( var i = 1; i <=10; i++ )\n {\n  document.write(n+\" x \"+i+\" = \"+n*i,\"<br>\");\n }\n} \ncreatemultiplicationTable(n);"
    },
    {
        "instruction": "Create a JavaScript object with the keys \"name\", \"age\", and \"location\". ",
        "response": "var person = {\n    name: 'John Doe',\n    age: 26,\n    location: 'New York'\n};"
    },
    {
        "instruction": "Create a while loop in Python to increment a counter by 1 until it reaches 10. counter = 0",
        "response": "while counter < 10:\n    counter += 1"
    },
    {
        "instruction": "Create a Regex in JavaScript to extract all words of length 6 or more from a sentence. Sentence = \"This is a sample sentence with some words of length 6 or more\"",
        "response": "let regex = /\\w{6,}/g;\nlet words = sentence.match(regex);"
    },
    {
        "instruction": "Write a code to generate a random password using random library of Python. length = 8",
        "response": "import string \nimport random \n\ndef generate_password(length): \n    # Generate a random string of characters \n    letters = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters) for i in range(length)) \n  \n    return password\n  \n# Driver Code\nlength = 8\nprint(generate_password(length))"
    },
    {
        "instruction": "Implement the Euclidean distance formula using a def function in Python. ",
        "response": "def euclidean_dist(x, y):\n    # write function here\n    dist = 0\n    # iterate through each coordinate of the points\n    for i in range(len(x)):\n        # calculate the distance between corresponding coordinates\n        dist += (x[i]-y[i])**2\n    return (dist**0.5)"
    },
    {
        "instruction": "Create a JavaScript program that updates the navigation menu based on user preferences ",
        "response": "function updateNavMenu(preferences) {\n  // code to update navigation menu for each user preference\n  let html = '';\n  for (let preference in preferences) {\n    if (preferences[preference]) {\n      html += '<li>' + preference + '</li>';\n    }\n  }\n  document.getElementById(\"navMenu\").innerHTML = html;\n}"
    },
    {
        "instruction": "Translate the following sentiment analysis model written in Python to JavaScript model = tf.keras.models.Sequential([\n tf.keras.layers.Dense(128, activation='relu', input_shape=(tem_train_data.shape[1],)),\n tf.keras.layers.Dense(2, activation='softmax')\n])",
        "response": "const model = tf.sequential();\nmodel.add(tf.layers.dense({units: 128, activation: 'relu', inputShape: tem_train_data.shape[1]}));\nmodel.add(tf.layers.dense({units: 2, activation: 'softmax'}));"
    },
    {
        "instruction": "Create a JavaScript object with two properties, x and y, and set them to 10 and 20, respectively. ",
        "response": "let obj = {\n    x: 10,\n    y: 20\n};"
    },
    {
        "instruction": "Create a class to illustrate the concept of encapsulation in Python. ",
        "response": "class Car:\n    def __init__(self, brand, model, year):\n        self.__brand = brand\n        self.__model = model\n        self.__year = year\n    \n    def get_brand(self):\n        return self.__brand\n    \n    def get_model(self):\n        return self.__model\n    \n    def get_year(self):\n        return self.__year"
    },
    {
        "instruction": "What data structure would you use to store a matrix in Python ",
        "response": "The best data structure to store a matrix in Python is a two-dimensional list. A two-dimensional list is a list of lists where each sub-list represents a row in the matrix. This makes it easy to access and modify values in the matrix."
    },
    {
        "instruction": "Create a virtual environment in Python using the \"virtualenv\" tool. ",
        "response": "python -m pip install virtualenv\nvirtualenv envname\nsource envname/bin/activate"
    },
    {
        "instruction": "Create an array in Python that contains five different values. ",
        "response": "arr = [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Create a function in JavaScript to take a given number and add 10 to it. ",
        "response": "function addTen(num) {\n  return num+10;\n}"
    },
    {
        "instruction": "Create a bar chart in Python, plotting the following integer data set. [1, 2, 4, 8, 16, 32]",
        "response": "import matplotlib.pyplot as plt\n \ndata_set = [1, 2, 4, 8, 16, 32]\n \nplt.bar(range(len(data_set)), data_set)\nplt.show()"
    },
    {
        "instruction": "Create a python script to determine whether a number is odd or even. 15",
        "response": "number = 15 \nif (number % 2 == 0): \n    print(\"even\") \nelse: \n    print(\"odd\")"
    },
    {
        "instruction": "Convert the following array of strings to a set of tuples in Python. ['Python', 'Java', 'JavaScript']",
        "response": "arr =  ['Python', 'Java', 'JavaScript']\narr_tuple = tuple(arr)\nprint(arr_tuple)"
    },
    {
        "instruction": "Make a prediction using the following machine learning model in Python. ",
        "response": "svm_model = SVC()\nsvm_model.fit(X_train, y_train)\npredictions = svm_model.predict(X_test)"
    },
    {
        "instruction": "Create a random list of 10 numbers in the range of -10 to 10 in Python. ",
        "response": "import random\n \nrandom_list = [random.randint(-10, 10) for i in range(10)] \nprint(random_list)"
    },
    {
        "instruction": "Generate a JavaScript object that contains two key-value pairs. ",
        "response": "let object = {\n  key1: \"value1\",\n  key2: \"value2\" \n}"
    },
    {
        "instruction": "Identify the wrong code in this JavaScript snippet. let a = \"Hello World!\";\nconsole 'log(a);",
        "response": "console 'log(a); // lacks () parenthesis for the log method of the console object."
    },
    {
        "instruction": "What is the argument type of the function \"len()\" in Python? ",
        "response": "The argument type of the function \"len()\" in Python is an object."
    },
    {
        "instruction": "Craft a JavaScript snippet to create an array with elements from 0 to 10. ",
        "response": "let array = Array.from({length: 11}, (v, k) => k);"
    },
    {
        "instruction": "Find the maximum element from a given array in JavaScript. //Array\nlet array = [2, 3, 6, 9, 5, 14];",
        "response": "let maxElement = Math.max(...array);\nconsole.log(maxElement);\n//Output: 14"
    },
    {
        "instruction": "Write a function in JavaScript to check if the given string contains a vowel or not. ",
        "response": "function containsVowel(str) {\n  var vowels = \"aeiou\"\n  for(i=0; i<str.length; i++) {\n    if (vowels.indexOf(str[i]) !== -1)\n      return true;\n  }\n  return false;\n}"
    },
    {
        "instruction": "How can you access the last element of the following Python array? arr = [\"A\",\"B\",\"C\",\"D\",\"E\"]",
        "response": "arr[-1]"
    },
    {
        "instruction": "How can you check if the given word is a palindrome in Python? ",
        "response": "word = \"madam\"\n\nif word == word[::-1]:\n  print(\"It is a palindrome\")\nelse:\n  print(\"It is not a palindrome\")"
    },
    {
        "instruction": "Write a JavaScript function to convert a given number to its Roman numeral equivalent. ",
        "response": "function toRoman(num) {\n    // store roman equivalents of numbers\n    var romanNumerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L'\n    };\n  \n    // array to store roman numeral\n    var roman = [];\n  \n    // loop to check for roman equivalents\n    for (let i = Object.keys(romanNumerals).length; i >= 0; i--) {\n        let div = Math.floor(num / Object.keys(romanNumerals)[i]);\n        let rem = num % Object.keys(romanNumerals)[i];\n  \n        if (div > 0) {\n            roman.push(romanNumerals[Object.keys(romanNumerals)[i]].repeat(div));\n            num = rem;\n        }\n    }\n  \n    // return the new created string\n    return roman.join(\"\");\n}"
    },
    {
        "instruction": "Design a function in Python to sort a list of tuples based on the first element. ",
        "response": "def sort_list_of_tuples(my_list):\n    my_list.sort(key=lambda x: x[0])\n    return my_list"
    },
    {
        "instruction": "Generate code to call an API and print the results using JavaScript. url: 'www.example.com/api/v1/data'",
        "response": "fetch(url)\n  .then(response => {\n    return response.json()\n  }).then(data => {\n    console.log(data);\n  });"
    },
    {
        "instruction": "Create a Python script to generate random numbers from 1 to 10 in a given range. ",
        "response": "import random\n\ndef random_num_gen(start, end):\n  \n  random_nums = []\n  \n  for _ in range(start, end + 1):\n    random_nums.append(random.randint(1, 10))\n  \n  return random_nums"
    },
    {
        "instruction": "Using JavaScript, create an input field to store a hexadecimal value. ",
        "response": "<input type=\"text\" pattern=\"^#([A-Fa-f0–9]{6}|[A-Fa-f0–9]{3})$\">"
    },
    {
        "instruction": "Write a JavaScript function to check whether a string contains all the vowels in alphabetical order. ",
        "response": "function checkVowels(str) {\n  const sortedVowels = 'aeiou'.split('').sort().join('');\n  const sortedStr = str\n    .toLowerCase()\n    .split('')\n    .filter(letter => ['a','e','i','o','u'].includes(letter))\n    .sort()\n    .join('');\n  return sortedVowels === sortedStr;\n}"
    },
    {
        "instruction": "Create a Python program to extract the URLs from a given list of strings. ['https://stackoverflow.com/questions/42063887/how-to-extract-urls-from-a-list-of-strings-in-python',\n 'This is an example of a string without a URL']",
        "response": "import re\n\ndef extract_urls(strings):\n  urls = []\n  for s in strings:\n    urls += re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', s)\n  return urls"
    },
    {
        "instruction": "Write a Python program to convert a given binary string to its equivalent hexadecimal representation. ",
        "response": "def bin_to_hex(binary_string):\n    dec = int(binary_string, 2)\n    hex_string = hex(dec).replace('x', '')\n    return hex_string"
    },
    {
        "instruction": "Write Python code to merge two given dictionaries into a single dictionary. Dictionary 1: {'A':1, 'B':2} \nDictionary 2: {'C':3, 'D':4}",
        "response": "def merge_dicts(dic1, dic2): \n    res = {**dic1, **dic2} \n    return res"
    },
    {
        "instruction": "Construct a Python class for a camera object. ",
        "response": "class Camera:\n    \"\"\"Class representing a camera\"\"\"\n    \n    def __init__(self, brand, model):\n        \"\"\"\"\"\"\n        self.brand = brand \n        self.model = model \n    \n    def get_brand(self):\n        \"\"\"\"\"\"\n        return self.brand\n    \n    def get_model(self):\n        \"\"\"\"\"\"\n        return self.model"
    },
    {
        "instruction": "Write a Python program to calculate the sum of the digits in an integer N = 155",
        "response": "def sum_digits(n):\n    s = 0\n    while(n):\n        s += n % 10\n        n //= 10\n    return s\n\nprint(sum_digits(155))"
    },
    {
        "instruction": "Create a JavaScript statement to set the margin of an element with class \"myclass\" to 0. ",
        "response": "document.querySelector('.myclass').style.margin = '0';"
    },
    {
        "instruction": "Construct an array in JavaScript that contains the numbers from 6 to 15. ",
        "response": "let arr = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15];"
    },
    {
        "instruction": "Write a Python program to read a list of numbers and print them as a single string without any space. [34, 32, 67, 85]",
        "response": "my_list = [34, 32, 67, 85] \n  \n# using join() \nprint(''.join(str(n) for n in my_list))"
    },
    {
        "instruction": "How does one go about creating a function in JavaScript? ",
        "response": "In JavaScript, functions are declared using the 'function' keyword followed by the name of the function and a pair of parentheses. The code for the function should be enclosed within curly brackets. For example:\n\nfunction addTwoNumbers(a, b) {\nreturn a + b;\n}"
    },
    {
        "instruction": "Create a class to represent a blog post in Python. ",
        "response": "class BlogPost:\n    def __init__(self, title, content, author):\n        self.title = title\n        self.content = content\n        self.author = author\n\n    def edit_post(self, new_title, new_content):\n        self.title = new_title\n        self.content = new_content"
    },
    {
        "instruction": "How do you represent time in JavaScript? ",
        "response": "In JavaScript, time is typically represented as the number of milliseconds that have elapsed since midnight on January 1st, 1970 (also known as the Unix Epoch). It can be represented as a Date object, or by using its individual components (such as hours, minutes, and seconds)."
    },
    {
        "instruction": "Write a loop to iterate through all elements in an array in JavaScript. ",
        "response": "for (let i = 0; i < array.length; i++) {\n   const element = array[i];\n   // perform operations on element\n}"
    },
    {
        "instruction": "Create two lists, one in Python and one in JavaScript, with 10 numbers each. ",
        "response": "Python List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nJavaScript List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "instruction": "Write a long-running Python script with a while loop? ",
        "response": "while True:\n    # perform a long-running task\n    pass # or perform an action"
    },
    {
        "instruction": "Compare and contrast JavaScript Objects and Arrays. ",
        "response": "JavaScript Objects and Arrays are both used to store and organize data in JavaScript. However, they are two distinct data structures. Objects store data in key-value pairs, while Arrays are indexed collections of items. Additionally, Objects are mutable, whereas Arrays are not. Objects can have any type of data as a key, whereas Array indices must typically be represented by integers."
    },
    {
        "instruction": "Create a JavaScript object called 'book' with the following properties - title, author, genre, and number of pages. ",
        "response": "let book = {\n title: \"The Great Gatsby\",\n author: \"F.Scott Fitzgerald\",\n genre: \"Novel\",\n pages: 180\n};"
    },
    {
        "instruction": "Use the given string and convert it to hexadecimal representation. Python",
        "response": "0x50797468"
    },
    {
        "instruction": "How many jokes can you write in Python? ",
        "response": "There is no definite answer to this question. It depends on the creativity and programming skills of the individual. It is possible to write an infinite number of jokes, but writing a joke that is funny and unique will require more effort and expertise."
    },
    {
        "instruction": "Edit the given JavaScript code so that the output is the Fibonacci sequence from 1 to \"n\". let a = 0, b = 1, result\nfor (let i = 1; i < n; i++) {\n  result = a + b\n  a = b\n  b = result\n}\nconsole.log(result)",
        "response": "let a = 0, b =1, result\nfor (let i = 0; i < n; i++) {\n  result = a + b\n  a = b\n  b = result\n  console.log(a)\n}"
    },
    {
        "instruction": "Translate the following JavaScript code into Python. let x = 10;\nif(x > 0){\n    console.log(\"x is positive\");\n}",
        "response": "x = 10\nif x > 0:\n    print(\"x is positive\")"
    },
    {
        "instruction": "Create a Javascript function which takes an array as an argument and returns an array with the elements in reverse order. [1, 2, 3, 4, 5]",
        "response": "function reverseArray(arr) {\n  return arr.reverse();\n}"
    },
    {
        "instruction": "Tell me how to print an IMDB movie rating using Python ",
        "response": "import imdb\n\n# create an instance of the IMDb class\nia = imdb.IMDb()\n\n# get the movie\nmovie = ia.get_movie('tt0111161') # The Shawshank Redemption\n\n# get the rating\nrating = movie['rating']\n\n# print the rating\nprint(f\"Rating for the movie 'The Shawshank Redemption': {rating}\")"
    },
    {
        "instruction": "Name some of the important data types in Python. ",
        "response": "The important data types in Python are integers, floats, strings, booleans, lists, tuples, dictionaries and sets."
    },
    {
        "instruction": "Edit the given code in Python to produce the desired output. lst = [3, 8, 9]\n\nfor i in lst:\n    print(i)\n\nExpected Output:\n3\n8\n9",
        "response": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(str(i))\n\n# Output\n3\n8\n9"
    },
    {
        "instruction": "Create a function in python to print all values between two given values. Do not include the two given values in the output. ",
        "response": "def print_range(start, end): \n    for value in range(start + 1, end): \n        print(value, end = \" \")"
    },
    {
        "instruction": "Create a function in JavaScript that finds the maximum number between two given numbers. ",
        "response": "function maxNum(num1, num2) {\n  if (num1 > num2) {\n    return num1;\n  } \n  else {\n    return num2;\n  }\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of words and returns an array of the lengths of each of those words. ",
        "response": "function lengths(words) {\n  var length = [];\n  for (var i = 0; i < words.length; i++) {\n    length.push(words[i].length);\n  }\n  return length;\n}"
    },
    {
        "instruction": "Write a Python program to parse a text string given a regular expression and return the matches. ",
        "response": "import re\n\ndef parse(expression, string):\n  matches = re.finditer(expression, string)\n  return [match.group(0) for match in matches]"
    },
    {
        "instruction": "Use Python to reverse the order of a string input. I love coding",
        "response": "def reverse_string(string): \n    return string[::-1]\n\nstring_input = 'I love coding'\n\nreverse_string(string_input)"
    },
    {
        "instruction": "Create an algorithm in JavaScript to sort an array of numbers. [5, 2, 4, 6, 1]",
        "response": "let arr = [5, 2, 4, 6, 1];\n\narr.sort(function(a, b){\n    return a-b;\n});\n\nconsole.log(arr);"
    },
    {
        "instruction": "Design an algorithm in JavaScript to check if a given string consists of only unique characters. Hello",
        "response": "function isUnique(str) {\n    for(let i = 0; i<str.length; i++){\n        for(let j = i+1; j<str.length; j++){\n            if(str.charAt(i) === str.charAt(j)){\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nlet str = 'Hello';\nlet result = isUnique(str);\nconsole.log(result);"
    },
    {
        "instruction": "Edit the given python code to execute the arithmetic operation. a = 8\nb = a+2",
        "response": "a = 8\nb = a + 2\nc = a * b\nprint(c)"
    },
    {
        "instruction": "Create a function in Python which checks if an input value is positive or negative. ",
        "response": "def check_sign(x):\n  if x < 0:\n    print(\"The number is negative.\")\n  elif x > 0:\n    print(\"The number is positive.\")\n  else:\n    print(\"The number is 0.\")"
    },
    {
        "instruction": "Write a HTML structure using semantic tags to list the skills of a web developer. HTML, CSS, JavaScript, React",
        "response": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Web Developer Skills</title>\n</head>\n<body>\n <h1>Web Developer Skills</h1>\n <ul>\n  <li>HTML</li>\n  <li>CSS</li>\n  <li>JavaScript</li>\n  <li>React</li>\n </ul>\n</body>\n</html>"
    },
    {
        "instruction": "Write a Python function that takes a list of numbers and returns the mean and standard deviation of that list. list = [1, 2, 3, 4, 5]",
        "response": "import statistics\n\ndef get_stats(list):\n mean = statistics.mean(list)\n stdev = statistics.stdev(list)\n return mean, stdev\n\nmean, stdev = get_stats(list)\nprint(\"Mean:\", mean)\nprint(\"Standard Deviation:\", stdev)"
    },
    {
        "instruction": "Create a Python program that prints out all even numbers between 0 and the given number n. ",
        "response": "def print_even_numbers(n):\n  for i in range (0, n+1):\n    if i % 2 == 0:\n      print (i)\n\nprint_even_numbers(20)"
    },
    {
        "instruction": "Write a Python function to create a dictionary with the given list as its keys and values. list = [\"a\", \"b\", \"c\"]",
        "response": "def create_dict(list):\n  return dict(zip(list, list))\n\ndict = create_dict(list)\nprint(dict)\n# Output: {'a': 'a', 'b': 'b', 'c': 'c'}"
    },
    {
        "instruction": "When would you use a while-loop in Python? ",
        "response": "A while-loop in Python is used when we need to iterate through a set of instructions or code block until a condition is met or false. It allows us to perform an operation multiple times until the condition is met. For example, we can use a while-loop to iterate and check if a certain number is prime or not."
    },
    {
        "instruction": "How would you create a function in Python to add two numbers? ",
        "response": "def add(a, b):\n\treturn a + b \n\n# Usage \nprint(add(3,4)) # output: 7"
    },
    {
        "instruction": "Implement a JavaScript function to find all distinct prime factors of a given number. ",
        "response": "function findPrimeFactors(num) { \n    let factors = []; \n    while (num % 2 === 0) { \n        factors.push(2); \n        num = num / 2; \n    } \n  \n    // num must be odd at this point \n    for (let i = 3; i <= Math.sqrt(num); i += 2) { \n        while (num % i === 0) { \n            factors.push(i); \n            num = num / i; \n        } \n    } \n  \n    // This condition is to handle the case \n    // when num is a prime number greater than 2 \n    if (num > 2) \n        factors.push(num); \n  \n    // Distinct prime factors\n    let uniqFactors = new Set(factors);\n    return [...uniqFactors];\n}"
    },
    {
        "instruction": "Create a class in JavaScript to encapsulate user information. ",
        "response": "class User {\n  constructor(fullName, email, address) {\n    this.fullName = fullName;\n    this.email = email;\n    this.address = address;\n  }\n\n  updateName(name) {\n    // update the user's full name\n    this.fullName = name;\n  }\n  \n  updateEmail(email) {\n    // update the user's email address\n    this.email = email;\n  }\n  \n  updateAddress(address) {\n    // update the user's address\n    this.address = address;\n  }\n  \n  getFullName() {\n    // return the user's full name\n    return this.fullName\n  }\n  \n  getEmail() {\n    // return the user's email\n    return this.email\n  }\n  \n  getAddress() {\n    // return the user's address\n    return this.address\n  }\n}"
    },
    {
        "instruction": "Rewrite the following JavaScript program using ES6 syntax. let result=[];\nfor (let i=0;i<array.length;i++) {\nif (array[i]%2 == 0) {\nresult.push(array[i]);\n  }\n}",
        "response": "let result = array.filter(n => n % 2 == 0);"
    },
    {
        "instruction": "Given the object below, debug the problem to make a valid code in JavaScript. let obj = {\n    name: 'John',\n    age: 20,\n    printDetails: () => {\n        console.log(`The name is ${name} and age is ${age}`);\n    }\n}",
        "response": "let obj = {\n    name: 'John',\n    age: 20,\n    printDetails() {\n        console.log(`The name is ${this.name} and age is ${this.age}`);\n    }\n}"
    },
    {
        "instruction": "Use JavaScript to write a program that finds the greatest common divisor of two numbers. num1 = 45\nnum2 = 36",
        "response": "function findGCD(num1, num2) {  \n    let min = Math.min(num1, num2); \n    while (num1 % min !== 0 || num2 % min !== 0) {\n        min--; \n    }\n    return min;  \n}\n\nlet result = findGCD(45, 36); \nconsole.log(result); // output: 9"
    },
    {
        "instruction": "Create a Python program to take the input and print the output as shown in the example below. list1 = [10, 20, 30, [40, 50], [60, 70], 80]",
        "response": "print(list1[3][1])\nprint(list1[4][0])\n\nprint(list1[3][1]) # output: 50\nprint(list1[4][0]) # output: 60"
    },
    {
        "instruction": "Let's try a different sort algorithm. Generate a Python code snippet to implement merge sort. ",
        "response": "# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n    n1 = m - l + 1\n    n2 = r- m \n  \n    # create temp arrays \n    L = [0] * (n1) \n    R = [0] * (n2) \n  \n    # Copy data to temp arrays L[] and R[] \n    for i in range(0 , n1): \n        L[i] = arr[l + i] \n  \n    for j in range(0 , n2): \n        R[j] = arr[m + 1 + j] \n  \n    # Merge the temp arrays back into arr[l..r] \n    i = 0     # Initial index of first subarray \n    j = 0     # Initial index of second subarray \n    k = l     # Initial index of merged subarray \n  \n    while i < n1 and j < n2 : \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n        k += 1\n  \n    # Copy the remaining elements of L[], if there \n    # are any \n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n  \n    # Copy the remaining elements of R[], if there \n    # are any \n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n  \n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n    if l < r: \n  \n        # Same as (l+r)//2, but avoids overflow for \n        # large l and h \n        m = (l+(r-1))//2\n  \n        # Sort first and second halves \n        mergeSort(arr, l, m) \n        mergeSort(arr, m+1, r) \n        merge(arr, l, m, r)"
    },
    {
        "instruction": "Create an input validation function in Python which checks that the input is an integer between 2-6. ",
        "response": "def input_validation(input):\n    try:\n        input = int(input)\n        if input >= 2 and input <= 6:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "instruction": "Make a function in Python that sorts a list of integers in increasing order. [50, 2, 8, 7, 19, 29]",
        "response": "def sortInt(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if nums[i] > nums[j]:\n                #Swap\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums"
    },
    {
        "instruction": "In Python, create a function that reverses a list. ",
        "response": "def reverse_list(list): \n    return list[::-1] \n  \nlist = [10, 16, 1, 5] \n  \nprint(\"Original List\", list) \nprint(\"Reversed List\", reverse_list(list))"
    },
    {
        "instruction": "From the array of integers given below, write a Python code snippet to select all even numbers. array = [1, 9, 4, 10, 5, 12];",
        "response": "even_numbers = [num for num in array if num % 2 == 0]"
    },
    {
        "instruction": "What should the input to the following JavaScript code be? const capitalizeFirstLetter = word => word[0].toUpperCase() + word.slice(1);\n\nconst result = capitalizeFirstLetter(input);",
        "response": "The input to this JavaScript code should be a string. The code capitalizes the first letter of the string, and then concatenates the rest of the string after the first letter.\nFor example, if the input is \"hello\", the output will be \"Hello\"."
    },
    {
        "instruction": "Generate random numbers in the range of 1 to 100 using a for loop in Python. ",
        "response": "import random\n\nfor i in range(100):\n\trand_num = random.randint(1, 100)\n\tprint(rand_num)"
    },
    {
        "instruction": "Write a script in JavaScript that gets the value of a certain input field whenever the user clicks it. <input type=\"text\" name=\"myInput\" value=\"Input\" />",
        "response": "document.getElementById(\"myInput\").addEventListener(\"click\", function() {\n    var inputValue = document.getElementById(\"myInput\").value;\n    console.log(inputValue);\n});"
    },
    {
        "instruction": "Calculate the Fibonacci sequence up to the 10th number using a for loop in JavaScript. ",
        "response": "let n1 = 0, n2 = 1;\nlet fibonacci_sequence = [n1, n2];\n\nfor (let i = 2; i < 10; i++) {\n    let n3 = n1 + n2;\n    fibonacci_sequence.push(n3);\n    n1 = n2;\n    n2 = n3;\n}\n\nconsole.log(fibonacci_sequence);"
    },
    {
        "instruction": "Write a Python script that prints out the Fibonacci sequence up to the nth number. 10",
        "response": "\"\"\"\nPrint out the Fibonacci sequence up to the nth number\n\"\"\"\ndef printFibSequence(n): \n    \n    # Initialize first two terms \n    a = 0\n    b = 1\n\t\n    # Add the first two terms \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(2, n): \n        c = a + b \n        print(c, end=\" \") \n        a = b \n        b = c \n\n# Main program\nif __name__ == '__main__':\n    n = 10 \n    printFibSequence(n)"
    },
    {
        "instruction": "Create a JavaScript object with two keys \"firstName\" and \"lastName\". Ahsan",
        "response": "let person = {\n    \"firstName\": \"Ahsan\",\n    \"lastName\": \"\"\n}"
    },
    {
        "instruction": "Generate a random string of 10 characters in a JavaScript program. ",
        "response": "let randomString = \"\";\nlet characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n \nfor (let i = 0; i < 10; i++) {\n  randomString += characters.charAt(Math.floor(Math.random() * characters.length));\n}\n\nconsole.log(randomString);"
    },
    {
        "instruction": "Suggest a way to solve the following problem in Python: extracting the last element from a given list. ",
        "response": "A convenient way to extract the last element from a given list in Python is to use negative indexing. This allows you to access the last element of a list by using the index -1. For example, the following code will return the last element of the list \"my_list\": \n\nmy_last_element = my_list[-1]"
    },
    {
        "instruction": "Compute the result of 2 + 6 in JavaScript. ",
        "response": "let result = 2 + 6;\nconsole.log(result); // Outputs 8;"
    },
    {
        "instruction": "Construct an IPython code cell to display the content of a given pandas DataFrame. DataFrame:\nName      Age\nAlice      26\nBob        32\nCarol      12",
        "response": "import pandas as pd\n\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Carol'],\n                   'Age': [26, 32, 12]})\n\ndf"
    },
    {
        "instruction": "Write a JavaScript code snippet to log the integer 3 to the web console. ",
        "response": "console.log(3);"
    },
    {
        "instruction": "Generate a loop to read each word from a given sentence and display them as a list. Sentence: \"Python is a great programming language\"",
        "response": "\"\"\"\nGenerate a loop to read each word from a given sentence and display them as a list.\n\"\"\"\nsentence = \"Python is a great programming language\"\nwords = sentence.split()\n\nword_list= []\nfor word in words:\n    word_list.append(word)\n\nprint(word_list)"
    },
    {
        "instruction": "Use features of the Python language to implement 3-way partitioning of a given array. Array: [9,6,7,4,1,6,3]",
        "response": "\"\"\"\nUse features of the Python language to implement 3-way partitioning of a given array.\n\"\"\"\ndef threeWayPartition(array, pivot): \n    less = [] \n    equal = [] \n    greater = [] \n    for i in array: \n        if i < pivot: \n            less.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i)   \n    return less + equal + greater \n\nif __name__ == '__main__': \n    array = [9,6,7,4,1,6,3]\n    pivot = 6\n    print(threeWayPartition(array, pivot))"
    },
    {
        "instruction": "Compile the following code to JavaScript and return the compiled code. function myFunc(a, b) {\n    return a + b;\n}",
        "response": "function myFunc(a, b) {\n    return a + b;\n}\n\n//Compiled Version\nconst myFunc = (a, b) => a + b;"
    },
    {
        "instruction": "Describe two ways to insert elements into a hashmap in Python. ",
        "response": "1. The simplest way is to use the Square Bracket ([]) Notation. For example, hashmap[key] = value allows you to insert key-value pair into a hashmap. \n2. The other way to insert elements into a hashmap is by using the update() method. This method takes in a dictionary object as an argument and updates the existing hashmap with values from the dictionary."
    },
    {
        "instruction": "Write a function in Python to format a given date according to the format \"Day-Name, Month Name, Day, Year\". \"2019-06-27\"",
        "response": "def format_date(date): \n    date_list = date.split('-') \n    formatted_date = date_list[2] + '-' + calendar.month_name[int(date_list[1])] + '-' + date_list[0] \n    return formatted_date"
    },
    {
        "instruction": "Write a class in Python to store the objects of student and their grades. ",
        "response": "# Class to store student and grades\n\nclass StudentGrades:\n    def __init__(self, student_name):\n        self.student_name = student_name\n        self.grades = {}\n     \n    def add_grade(self, course_name, grade):\n        self.grades[course_name] = grade\n    \n    def get_total_grade(self):\n        total_grade = 0\n        for grade in self.grades.values():\n            total_grade += grade\n        return total_grade"
    },
    {
        "instruction": "Create an object in JavaScript for calculating the area of rectangular with length and width. ",
        "response": "// Object to calculate the area of rectangular with length and width\n\nconst rectangular = {\n  length: 0,\n  width: 0,\n  area: function() {\n    return this.length * this.width;\n  }\n};"
    },
    {
        "instruction": "Create a list in JavaScript containing the names of the five most populous countries in the world. ",
        "response": "let topFiveCountries = ['China', 'India', 'United States', 'Indonesia', 'Brazil'];"
    },
    {
        "instruction": "Write a function in JavaScript that takes a given array and prints its elements in reverse order. [1, 2, 3, 4]",
        "response": "function reverseArray(arr) {\n    let reversedArr = [];\n    let index = arr.length - 1;\n   \n    while (index >= 0) {\n        reversedArr.push(arr[index]);\n        index--;\n    }\n \n    return reversedArr;\n}"
    },
    {
        "instruction": "Generate a program in Python that prints all days of the week ",
        "response": "#list of Weekdays\nweekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \n            \"Saturday\", \"Sunday\"]\n\n#print Weekdays\nfor weekday in weekdays:\n    print(weekday)"
    },
    {
        "instruction": "Generate a program in JavaScript that reads a given string from user input and prints the characters of the string in reverse order. ",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "Given a list of strings, write a Python function to expand each element into a set of characters. ['hello', 'world']",
        "response": "def expand_list(strings): \n    new_list = []\n    for string in strings: \n        for character in string: \n            new_list.append(character) \n    return new_list"
    },
    {
        "instruction": "Create a JavaScript class to represent an Employee object ",
        "response": "class Employee {\n    constructor(name, age, salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n}"
    },
    {
        "instruction": "Design a Data Structure in Javascript to store a list of tasks. ",
        "response": "class TaskList {\n  constructor() {\n    this.tasks = []\n  }\n\n  add_task(task) {\n    this.tasks.push(task);\n  }\n\n  remove_task(task) {\n    const i = this.tasks.indexOf(task);\n    if (i !== -1) {\n      this.tasks.splice(i, 1);\n    }\n  }\n\n  count_tasks() {\n    return this.tasks.length;\n  }\n}"
    },
    {
        "instruction": "Write a function in JavaScript that returns the maximum number from an array of numbers. [3, 6, 8, 2, 9, 4, 10]",
        "response": "function getMaxNum(arr){\n  return Math.max.apply(null, arr);\n}\n\nlet maxNum = getMaxNum([3, 6, 8, 2, 9, 4, 10]);\nconsole.log(maxNum); // 10"
    },
    {
        "instruction": "Write an Object-Oriented Python program to find the area of a triangle given the base and the height. ",
        "response": "class Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n\n    def calculate_area(self):\n        area = (self.base * self.height) / 2\n        return area\n\n# Create triangle\ntriangle = Triangle(10, 5)\n\n# Find the area\narea = triangle.calculate_area()\n\n# Print the area\nprint(area)"
    },
    {
        "instruction": "Edit the code to print “Welcome to Python Programming” five times. print(\"Hello Python\")",
        "response": "for i in range(5):\n  print(\"Welcome to Python Programming\")"
    },
    {
        "instruction": "Design a program in Python that will count the words in a sentence. This is a sample sentence.",
        "response": "def word_count(sentence):\n    words = sentence.split(' ')\n    return len(words)\n\nprint(word_count('This is a sample sentence.'))"
    },
    {
        "instruction": "Edit the given code to reverse a given array in JavaScript. let arr = [1, 2, 3, 4, 5];",
        "response": "let arr = [1, 2, 3, 4, 5];\narr.reverse();\nconsole.log(arr);"
    },
    {
        "instruction": "How would you use Recursion to solve the Fibonacci Sequence in Python? ",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n    \nprint(fibonacci(10))"
    },
    {
        "instruction": "Construct a function that adds two numbers written in reverse order in JavaScript. 893 342",
        "response": "function reversedAddition(reverseOrder1, reverseOrder2) {\n    let firstNum = parseInt(reverseOrder1.toString().split('').reverse().join(''));\n    let secondNum = parseInt(reverseOrder2.toString().split('').reverse().join(''));\n    let answer = firstNum + secondNum;\n  \n    return answer;\n}\n\nconsole.log(reversedAddition(893, 342))"
    },
    {
        "instruction": "How can you move an element from one array to another in JavaScript? let array1 = [1, 2, 3]; \nlet array2 = [4, 5, 6];",
        "response": "let array1 = [1, 2, 3]; \nlet array2 = [4, 5, 6];\nlet el = array1.pop();\narray2.push(el);\nconsole.log(array2);"
    },
    {
        "instruction": "Design a function to get the number of elements in a JSON array in Python. [{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]",
        "response": "def get_num_elements(data):\n    count = 0\n    for item in data:\n        count += 1\n    return count\n\ndata = [{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]\nprint(get_num_elements(data))"
    },
    {
        "instruction": "Construct a function that will remove all special characters in a given string in JavaScript. $sample!%string!*",
        "response": "function removeSpecialChars(str) {\n    return str.replace(/[^\\w\\s]/gi, '');\n}\n\nconsole.log(removeSpecialChars('$sample!%string!*'));"
    },
    {
        "instruction": "Develop a program in Python to implement a Simple Linear Regression model. ",
        "response": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# generate dataset\nx = np.random.rand(100, 1)\ny = 4 + 3 * x + np.random.rand(100, 1)\n\n# linear regression\nx_b = np.c_[np.ones((100, 1)), x]\ntheta_best = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)\n\n# prediction\nx_new = np.array([[0], [1]])\nx_new_b = np.c_[np.ones((2, 1)), x_new]\ny_predict = x_new_b.dot(theta_best)\n\n# plot\nplt.plot(x, y, \"b.\")\nplt.plot(x_new, y_predict, \"r-\")\nplt.axis([0, 1, 0, 15])\nplt.show()"
    },
    {
        "instruction": "Make the existing JavaScript function asynchronous. function handleData(data, cb) {\n    if (data.type === 'A') {\n        const filteredData = data.filter(x => x.name === 'hello')\n        const processedData = filteredData.map(x => x.value)\n        const result = processedData.length\n        cb(result)\n    }",
        "response": "async function handleData(data, cb) {\n    if (data.type === 'A') {\n        const filteredData = data.filter(x => x.name === 'hello')\n        const processedData = filteredData.map(x => x.value)\n        const result = processedData.length\n        cb(result)\n    }\n}"
    },
    {
        "instruction": "Write a Python program to create a copy of a given set. my_set = {1, 2, 3, 4, 5}",
        "response": "def clone_set(my_set):\n    new_set = set()\n    for item in my_set:\n        new_set.add(item)\n    return new_set"
    },
    {
        "instruction": "Edit the Python code snippet to remove the syntax error. def calculate_area(length, width):\n    area = length * width\n    return “The area is” + area",
        "response": "def calculate_area(length, width):\n    area = length * width\n    return \"The area is \" + str(area)"
    },
    {
        "instruction": "Write a Python program to randomly sample a list without replacement. list = [30, 40, 50, 60, 70, 80]",
        "response": "import random\n\ndef sample_list(list):\n    list_copy = list.copy()\n    sampled_list = []\n    while list_copy:\n        element = random.choice(list_copy)\n        sampled_list.append(element)\n        list_copy.remove(element)\n    return sampled_list"
    },
    {
        "instruction": "You need to edit a Python code snippet to add a loop and make it print the square of the numbers from 1 to 10. ",
        "response": "for i in range(1, 11):\n    square = i * i\n    print(square)"
    },
    {
        "instruction": "Create a data structure in Python that stores the details of a shoe product. Name: \"Nike Air Max 720\"\nPrice: $219.99\nSize: 8\nColor: White",
        "response": "class ShoeProduct:\n    def __init__(self, name, price, size, color):\n        self.name = name\n        self.price = price\n        self.size = size\n        self.color = color"
    },
    {
        "instruction": "Create a JavaScript object that stores the properties of an employee. Name: John Doe\nAge: 25\nPosition: Accountant",
        "response": "let employee = {\n  name: 'John Doe',\n  age: 25,\n  position: 'Accountant'\n };"
    },
    {
        "instruction": "Using HTML/CSS and JavaScript, construct a web page that generates a random password. ",
        "response": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Random Password Generator</title>\n    <script src=\"generate.js\"></script>\n    <style>\n    body {\n        background-color: lightblue;\n    }\n\n    #container {\n        margin: 0 auto;\n        width: 500px;\n        background-color: white;\n        padding: 30px;\n    }\n\n    #password {\n        font-size: 20px;\n        font-weight: bold;\n    }\n    </style>\n</head>\n\n<body>\n    <div id=\"container\">\n    <h1>Random Password Generator</h1>\n        <h2>Your Password:</h2>\n        <div id=\"password\"></div>\n        <button onclick=\"generatePassword()\">Generate</button>\n    </div>\n</body>\n\n</html>\n\n// JavaScript code in a file called 'generate.js' //\n\nfunction generatePassword() {\n    let password = Math.random().toString(36).substring(2, 10);\n    document.getElementById(\"password\").innerHTML = password;\n}"
    },
    {
        "instruction": "Translate this piece of JavaScript into Python. let val = 10;\nif (val > 5) {\n  console.log(\"val is greater than 5\");\n}",
        "response": "val = 10\nif val > 5:\n    print(\"val is greater than 5\")"
    },
    {
        "instruction": "Read the given input, and write a Python code to create a dictionary which contains unique elements as keys and their corresponding count as values. Input: ['a',\"a\",'b',1,1,1,'c']",
        "response": "my_list = ['a',\"a\",'b',1,1,1,'c']\nmy_dict = {}\nfor i in my_list:\n    my_dict[i] = my_dict.get(i, 0) + 1\n\nprint(my_dict) \n# Output: {'a': 2, 'b': 1, 1: 3, 'c': 1}"
    },
    {
        "instruction": "Create a function in Python to evaluate the given numpy array and return the maximum absolute difference of any two elements. // Array A\nimport numpy as np\nA = np.array([1, 4, 5, -3])",
        "response": "def max_difference(A):\n    return max(abs(np.max(A) - np.min(A)), abs(A[-1] - A[0]))"
    },
    {
        "instruction": "Create a function in Python to modify the given list and remove all strings with length less than three. mylist = ['Apple', 'Cat', 'Hello', 'Hi']",
        "response": "def remove_short(mylist):\n    mylist = [x for x in mylist if len(x) >= 3]\n    return mylist\n    \nprint(remove_short(mylist))\n# Output: ['Apple', 'Hello']"
    },
    {
        "instruction": "Write a function in JavaScript that takes in a number x and returns the pythagorean triplet whose sum is x. // Number x \nint x = 12;",
        "response": "function getTripletsFromSum (x) { \n\tvar triplet = [];\n\tfor (var i = 1; i < x; i++) \n\t\tfor (var j = i; j < x; j++) \n\t\t\tfor (var k = j; k < x; k++) \n\t\t\t\tif (i*i + j*j === k*k && \n\t\t\t\t\t\ti + j + k === x) \n\t\t\t\t\ttriplet.push(i, j, k);\n\treturn triplet; \n} \n\nconsole.log(getTripletsFromSum(12));\n# Output: [3,4,5]"
    },
    {
        "instruction": "Transform the C code into an equivalent Python program. int main()\n{\n    int i, j;\n    for (i = 0; i < 3; i++) \n        for (j = 0; j < 4; j++)\n            printf(\"%d %d\\n\", i, j);\n    return 0;\n}",
        "response": "for i in range(3):\n    for j in range(4):\n        print(i, j)"
    },
    {
        "instruction": "Create a python generator that prints fibonacci numbers from n to 2*n-1. n = 10",
        "response": "def fibonacci_generator(n):\n    a, b = 0, 1\n    while a < 2 * n - 1:\n        yield a\n        a, b = b, a + b"
    },
    {
        "instruction": "What does the 'break' keyword do in a loop structure in Python and how is it used? ",
        "response": "The 'break' keyword is used to break out of a loop prematurely. It causes an immediate exit from the loop, bypassing any remaining code in the loop. It is generally used inside a conditional statement, such as an 'if' statement, as it can be used to stop the loop from executing when a certain condition is satisfied. For example:\n\nfor number in range(10):\n if number == 5:\n  break\n print(number)\n\nThis code will print the numbers 0 through 4 and will exit the loop once it reaches the number 5. If the 'break' statement is not used the loop will continue and print all the numbers up to 9."
    },
    {
        "instruction": "Create a function in Python that takes a list and returns the first two elements that adds up to 0. [1, 5, 2, -7, 3]",
        "response": "def zero_sum_pair(list):\n    # loop through the list \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == 0: \n                return [list[i], list[j]] \n    return None"
    },
    {
        "instruction": "Edit the existing Python code to convert Fahrenheit (F) degrees to Celsius (C) degrees. def convert(F):\n return F + 32",
        "response": "def convert(F):\n return (F-32)*5/9"
    },
    {
        "instruction": "Write a JavaScript program to accept user input and store it in a variable. ",
        "response": "const userInput = prompt(\"Please enter some text:\");"
    },
    {
        "instruction": "In JavaScript, how do you loop through the properties of an object? ",
        "response": "In JavaScript, an object can be looped through by using either a for-in loop or by using the Object.keys() method. The for-in loop will iterate through the properties of the object and can be used to access the values associated with the properties. The Object.keys() method returns an array of the object's own property names and thus will loop through all the enumerable properties of the object."
    },
    {
        "instruction": "Write a function in Python that takes in a list and returns the second largest element list_of_numbers = [5, 10, 15, 20]",
        "response": "def second_largest(list_of_numbers):\n    max_num = max(list_of_numbers)\n    sec_max_num = None\n    for num in list_of_numbers:\n        if num != max_num and (sec_max_num is None or sec_max_num < num):\n            sec_max_num = num\n    return sec_max_num"
    },
    {
        "instruction": "Write a web scraper using Python ",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n \n# Function to scrape for the specified HTML elements\ndef scrape(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Use the .find, .find_all, .select and .select_one methods to scrape website\n    titles = soup.find_all(\"title\")\n    content = soup.find_all(\"p\")\n    headings = soup.find_all(\"h1\")\n    links = soup.find_all(\"a\")\n \n    # Extract text from each element and store in variables\n    title = titles[0].text\n    content_p = [p.text for p in content]\n    headings_h1 = [h1.text for h1 in headings]\n    link_urls = [a.get(\"href\") for a in links]\n \n    # Print out each element\n    print(title)\n    print(\"\\n\")\n    print(\"Content paragraphs:\")\n    for paragraph in content_p:\n        print(paragraph)\n    print(\"\\n\")\n    print(\"Headings:\")\n    for heading in headings_h1:\n        print(heading)\n    print(\"\\n\")\n    print(\"Links and URLs:\")\n    for link in link_urls:\n        print(link)\n\n# Scrape the website below\nscrape('https://en.wikipedia.org/wiki/Python_(programming_language)')"
    },
    {
        "instruction": "Create a class in Python that implements an algorithm for sorting a list of numbers. list = [3, 2, 5, 1, 4]",
        "response": "class SortNum():\n    def selection_sort(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n        return list"
    },
    {
        "instruction": "Using Python, write code to check if a list contains duplicates or not. list = [10, 20, 30, 40, 50]",
        "response": "def has_duplicates(list): \n    seen = set() \n    for item in list: \n        if item in seen: \n            return True \n        seen.add(item) \n    return False"
    },
    {
        "instruction": "Construct a URL to search for a given query on Google query = 'Python programming'",
        "response": "url = 'https://www.google.com/search?q=' + query.replace(' ', '+')"
    },
    {
        "instruction": "Construct a class in Python that can calculate the volume of a cube given its side length. ",
        "response": "class Cube(object):\n    \n    def __init__(self, side_length):\n        self.side_length = side_length\n    \n    \n    def calculate_volume(self):\n        return self.side_length * self.side_length * self.side_length"
    },
    {
        "instruction": "Design a key-value database with Python for storing course information. The database should contain the following fields: Course Name, Course ID, Course Description and Course Instructor.",
        "response": "import sqlite3\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create table\nc.execute('CREATE TABLE Course (course_name TEXT, course_id TEXT, course_description TEXT, course_instructor TEXT)')\n\n# Save (commit) the changes\nconn.commit()\n\n# Close the connection\nconn.close()"
    },
    {
        "instruction": "Create a function in Python to break down the number into its digits ",
        "response": "def break_down(n):\n    digit_list = [int(x) for x in str(n)]\n    return digit_list"
    },
    {
        "instruction": "Using JavaScript, convert the following JSON object into a string. JObj = {\n  “name” : “John”,\n  “age” : 42\n}",
        "response": "const JString = JSON.stringify(JObj);\nconsole.log(JString); // { “name” : “John”, “age” : 42 }"
    },
    {
        "instruction": "Write a Python program to find all numbers from 1 to the given number n which are divisible by 6. ",
        "response": "def findDivisibleBySix(n):\n  result = []\n  for i in range(1, n+1):\n    if i % 6 == 0:\n      result.append(i)\n  return result"
    },
    {
        "instruction": "Create a JavaScript class that represents a person and ouputs their name and age to the console. ",
        "response": "class Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    outputInfo() {\n        console.log(`Name: ${this.name}, Age: ${this.age}`);\n    }\n}"
    },
    {
        "instruction": "Design a recursanve function in Python that prints a given string in reverse. hello",
        "response": "def print_string_reverse(str):\n    if not str:\n        return\n    else:\n        print_string_reverse(str[1:])\n        print(str[0], end='')"
    },
    {
        "instruction": "Define an iterator class in Python. ",
        "response": "class myIterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n        \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        item = self.data[self.index]\n        self.index += 1\n        return item"
    },
    {
        "instruction": "Create a class in Python that can be used as a context manager. ",
        "response": "class myContextManager:\n    def __init__(self, name):\n        self.name = name\n        print(\"Context Manager initialized.\")\n        \n    def __enter__(self):\n        print(\"Entering context.\")\n        return self\n        \n    def __exit__(self, type, value, traceback):\n        print(f\"Exiting context: {self.name}\")"
    },
    {
        "instruction": "Write a Python program to implement Find-Max algorithm. arr = [10, 7, 8, 11, 15]",
        "response": "def FindMax(arr):\n    curr_max = arr[0]\n    curr_index = 0\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            curr_index = i\n    return curr_max, curr_index\n\nif __name__ == \"__main__\":\n    arr = [10, 7, 8, 11, 15]\n    curr_max, curr_index = FindMax(arr)\n    print(\"Max element:\", curr_max)\n    print(\"Index of max element:\", curr_index)"
    },
    {
        "instruction": "Define a function in Python that calculates the sum of the sum of the elements of a nested list. ",
        "response": "def nestedListSum(nested_list):\n    total = 0\n    for sub_list in nested_list:\n        total += sum(sub_list)\n    return total"
    },
    {
        "instruction": "Write a Python program to compare two dictionaries by key. ",
        "response": "def compare_dicts_by_key(dic1, dic2):\n    if len(dic1) != len(dic2):\n        return False\n    for key in dic1:\n        if key not in dic2 or dic1[key] != dic2[key]:\n            return False\n    return True"
    },
    {
        "instruction": "Write a Python program to format the following list of IP addresses. ip_addresses = [\"192.168.1.1\", \"255.255.255.255\",\"8.8.8.8\"]",
        "response": "def format_IP_addresses(ip_addresses):\n    return [str(IPAddress(ip)) for ip in ip_addresses]"
    },
    {
        "instruction": "Create a list in Python that contains the first 10 multiples of 3. ",
        "response": "multiples_list = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]"
    },
    {
        "instruction": "Given the following array in JavaScript, write a statement that finds the largest number. const numbers = [3, 5, 2, 10, 7, 4]",
        "response": "const largestNumber = Math.max(...numbers);"
    },
    {
        "instruction": "What is the difference between a string in Python and a list? ",
        "response": "In Python, strings are immutable which means they can not be changed once created. On the other hand, a list is mutable, meaning the elements can be altered after the list is created. Additionally, strings are sequences of characters, whereas lists are sequences of any type of data."
    },
    {
        "instruction": "Given a JavaScript object, how can you remove a key from the object? ",
        "response": "delete object[\"key\"];"
    },
    {
        "instruction": "In JavaScript, create a function that returns the length of a string. ",
        "response": "function stringLength(str){\n    return str.length;\n}"
    },
    {
        "instruction": "Suggest a way to create a linked list in python. ",
        "response": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n\n        current = self.head\n        while current.next:\n            current = current.next\n\n        current.next = new_node"
    },
    {
        "instruction": "Write a Python function that generates a key-value pair for the given array. arr = [1, 2, 3, 4]",
        "response": "def generate_key_value(arr):\n    key_val_pairs = {k:v for k,v in enumerate(arr)}\n    return key_val_pairs\n\nprint(generate_key_value(arr))\n\nOutput:\n{0: 1, 1: 2, 2: 3, 3: 4}"
    },
    {
        "instruction": "Compute the sum of a given array using a Python function. arr = [1, 2, 3, 4]",
        "response": "def compute_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nprint(compute_sum(arr))\n\nOutput:\n10"
    },
    {
        "instruction": "Explain the use of *args and **kwargs in Python. ",
        "response": "*args and **kwargs are special syntax in Python used to pass a variable number of arguments to a function. *args denotes positional arguments, while **kwargs represents keyword arguments. The syntax allows functions to take arbitrary number of arguments and provide flexibility for functions to handle different arguments."
    },
    {
        "instruction": "Write a code to shuffle a list randomly in Python ",
        "response": "import random\n\nmy_list = [1, 2, 3, 4, 5]\n\nrandom.shuffle(my_list)\n\nprint(my_list)"
    },
    {
        "instruction": "Use JavaScript and HTML to create a form with 3 input fields and a submit button. ",
        "response": "<html>\n<head>\n  <script>\n    // JavaScript code\n  </script>\n</head>\n\n<body>\n  <form>\n    <input type=\"text\" name=\"field1\" />\n    <input type=\"text\" name=\"field2\" />\n    <input type=\"text\" name=\"field3\" />\n    <input type=\"submit\" name=\"submit\" value=\"Submit\" />\n  </form>\n</body>\n</html>"
    },
    {
        "instruction": "Design a JavaScript function to filter out the prime numbers from an array. [1, 2, 3, 4, 5, 6]",
        "response": "function isPrime(n) {\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\nfunction primeFilter(array) {\n    let result = [];\n    for (let i = 0; i < array.length; i++) {\n        if (isPrime(array[i])) {\n            result.push(array[i]);\n        }\n    }\n    return result;\n}"
    },
    {
        "instruction": "Create a Python script that calculates the surface area of a cylinder. ",
        "response": "def surface_area_cylinder(radius, height):\n    pi = 3.14\n    return 2*pi*radius*(radius + height)"
    },
    {
        "instruction": "Given two strings str1 and str2, write a function in JavaScript to check if str1 is a substring of str2. ",
        "response": "function isSubstring(str1, str2){\n    if(str2.indexOf(str1) !== -1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}"
    },
    {
        "instruction": "Suggest a way to the generate a random number between 0 and 1 in JavaScript. ",
        "response": "function getRandom() {\n    return Math.random();\n}"
    },
    {
        "instruction": "Suggest a completion for the following JavaScript code to determine if a number is an odd number. function isOddNumber(",
        "response": "function isOddNumber(num) {\n    return num % 2 !== 0;\n}"
    },
    {
        "instruction": "Generate a JavaScript code that prints all the numbers from 1 to 30. ",
        "response": "for(let i=1; i<=30; i++){\n  console.log(i);\n}"
    },
    {
        "instruction": "Write a Python program to add the items of two given lists and create a new list. [1, 2, 3], [4, 5, 6]",
        "response": "newList = [x + y for x, y in zip([1, 2, 3], [4, 5, 6])]"
    },
    {
        "instruction": "Create a Javascript function that calculates the median value of an array of numbers. [2, 7, 12, 15]",
        "response": "function calculateMedian(arr) {\n  arr.sort(function(a, b){return a-b});\n  if (arr.length % 2 !== 0) {\n    return arr[Math.floor(arr.length / 2)];\n  }\n  else {\n    return (arr[arr.length / 2 - 1] + arr[arr.length / 2]) / 2;\n  }\n}"
    },
    {
        "instruction": "Design a JavaScript function that will accept two numbers and return their sum. ",
        "response": "function add(a, b) {\n return a + b;\n}"
    },
    {
        "instruction": "Create a loop in JavaScript to iterate through all names in an array and print them in a sentence. names = [\"John\", \"Jack\", \"Jane\", \"Jill\"]",
        "response": "for(let i = 0; i < names.length; i++) {\n console.log(\"Hello, my name is \" + names[i] + \".\")\n}"
    },
    {
        "instruction": "Develop an algorithm in Python to find the average of four numbers. [2, 4, 8, 5]",
        "response": "def avg(numbers):\n sum = 0\n for num in numbers:\n  sum += num\n return sum/len(numbers)\n\naverage = avg([2, 4, 8, 5])\nprint(average)"
    },
    {
        "instruction": "Write a basic JavaScript program to request a user's name and display a greeting message with the user's name. ",
        "response": "let name = prompt(\"What is your name?\");\nconsole.log(`Hello ${name}, how are you doing today?`);"
    },
    {
        "instruction": "Create a for loop in Python to iterate over all items in a list. my_list = [1, 2, 3, 4, 5]",
        "response": "for item in my_list:\n    print(item)"
    },
    {
        "instruction": "Suggest a method to remove the pair of parentheses ( ) and the words inside them from the following python string. my_string = 'This is (a sample) string with (parentheses)'",
        "response": "import re\n\nmy_string = 'This is (a sample) string with (parentheses)'\nop = re.sub(r'\\([^)]*\\)', '', my_string)\nprint(op)"
    },
    {
        "instruction": "Create a Python class for a car with two methods. ",
        "response": "class Car:\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n    \n    def start(self):\n        print(\"Starting car\")\n\n    def stop(self):\n        print(\"Stopping car\")"
    },
    {
        "instruction": "Write a loop in Python to find all numbers below 100 that are divisible by 7. ",
        "response": "for i in range(1,100):\n    if i % 7 == 0:\n        print(i, end=\" \")"
    },
    {
        "instruction": "Use the reduce() method to sum the values of an array of numbers in JavaScript. const numbers = [1, 2, 3, 4, 5];",
        "response": "let sum = numbers.reduce((total, num) => total + num);\n\nconsole.log(sum); // 15"
    },
    {
        "instruction": "Write a function to parse a query string into its components in JavaScript. query = \"name=John&age=30\"",
        "response": "function parseQueryString(query) {\n let components = query.split(\"&\");\n let data = {};\n for (let c of components) {\n let pair = c.split(\"=\");\n data[pair[0]] = pair[1];\n }\n return data;\n}\n\nconsole.log(parseQueryString(query)); // {name: 'John', age: '30'}"
    },
    {
        "instruction": "Write a JavaScript program that asks the user to enter a number and then prints the sum of the cube of the digits of the number. ",
        "response": "let number = Number(prompt(\"Enter a number:\"));\nlet sum = 0;\n\nwhile (number > 0) {\n    let last_digit = number % 10;\n    sum = sum + last_digit**3;\n    number = (number - last_digit)/10;\n}\n\nconsole.log(sum); # The output will be the sum of the cube of the digits"
    },
    {
        "instruction": "What are the prerequisites for learning Python? ",
        "response": "The prerequisites for learning Python are basic knowledge of Computer Science concepts, knowledge of some programming language like C/C++, understanding of Object-Oriented Programming, and familiarity with some text editors like Notepad++, Visual Studio Code, etc."
    },
    {
        "instruction": "Explain why function scope is important in Python. ",
        "response": "Function scope is important in Python because it allows for the scoping of data to the specific environment in which the function was invoked. This is critical for ensuring that code runs correctly and that variables are isolated to the environment in which the associated function was called. Scoping also helps promote the common programming practice of modularity and encapsulation, as it allows you to create \"black-boxes\" that separate the internal implementation of a function from the external environment. Scoping also helps to ensure that only the variables and data which are intended to be used within a function are actually used within it, as any variables which are out of scope will be inaccessible."
    },
    {
        "instruction": "Explain the effect of calling the following JavaScript function on the list provided. list = [4,8,2,7];\nfunction sort_ascending(list) {\n    list.sort(function(a, b){return a-b});\n}",
        "response": "The effect of calling the given JavaScript function on the list provided is that the list is re-arranged in ascending order. The sort() function sorts the elements in the list in ascending order according to each element's position relative to other elements in the list. The function has been provided a custom sorting function compares the two elements a and b in the list and return a negative, 0, or positive value, depending on whether a is less than, equal to, or greater than b. This is used to determine the order in which the elements are sorted."
    },
    {
        "instruction": "Name a function in Python which can be used to convert a list to a dictionary. ",
        "response": "The function in Python which can be used to convert a list to a dictionary is the dict() function. This function takes in an iterable such as a list as an argument and returns a dictionary with the elements of the iterable as the keys and their index as the values."
    },
    {
        "instruction": "Implement a function in Python that makes a copy of a list. my_list = [1, 2, 3, 4]",
        "response": "def copy_list(lst):\n    new_lst = lst[:]\n    return new_lst\n\nmy_list = [1, 2, 3, 4]\nprint(copy_list(my_list))"
    },
    {
        "instruction": "Implement a function in Python that sorts a list in ascending order using Bubble Sort algorithm. my_list = [4, 6, 3, 9, 1]",
        "response": "def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nmy_list = [4, 6, 3, 9, 1]\nprint(bubble_sort(my_list))"
    },
    {
        "instruction": "In JavaScript construct a function to obtain the number of digits in an integer ",
        "response": "function getNumOfDigits(num) {\n    return num.toString().length;\n}"
    },
    {
        "instruction": "Create a Fibonacci sequence of 5 numbers using Python. ",
        "response": "fib_sequence = [0, 1, 1, 2, 3]"
    },
    {
        "instruction": "Define a function in Python to print a pattern of right-angled triangles of different sizes ",
        "response": "def rightangle_triangles_pattern(n): \n    pattern = \"\" \n    \n    \n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            pattern = pattern + \" * \"\n        pattern = pattern + \"\\n\"\n  \n   \n    print(pattern) \n    \n    \nrightangle_triangles_pattern(5)"
    },
    {
        "instruction": "Extract the common key words from the given two strings using a Python script. String 1: This programming language is easy to learn\nString 2: Comparing to other languages, this language is simpler",
        "response": "common_key_words = [\"language\", \"easy\", \"learn\", \"comparing\", \"other\", \"simpler\"]"
    },
    {
        "instruction": "Construct a for-loop for finding all prime numbers between 1 and 50 in Python. ",
        "response": "for num in range(1, 51):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)"
    },
    {
        "instruction": "Create a function in Python to rearrange the characters of each word in a given string. string = \"Welcome to the world of Python\"",
        "response": "def rearrangeWord(string): \n     temp_string = string.split(\" \") \n     rearranged_string = [word[::-1] for word in temp_string] \n     return \" \".join(rearranged_string) \nprint(rearrangeWord(string))"
    },
    {
        "instruction": "Convert the Python list below to a nested dictionary of countries and their populations. List = [[\"United_Kingdom\", 66_000_000],[\"United_States\", 323_000_000]]",
        "response": "countries = {\n    \"United_Kingdom\": 66_000_000,\n    \"United_States\": 323_000_000\n}"
    },
    {
        "instruction": "Explain the difference between a parameter and an argument in Python. ",
        "response": "A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters. Parameters are specified after the method name, inside the parentheses. They are used to pass values to a method. An argument is the actual value of this variable that gets passed to the method. Arguments are the data you pass into the method's parameters when you call the method. Parameters are like empty vessels that are waiting to be filled as a result of calling the method. Arguments are like the values that are placed inside the vessels. In a nutshell, Parameters are variable in the declaration of function. Arguments are the actual values of these variables that get passed to function."
    },
    {
        "instruction": "Explain the following Python statement. sorted_list = sorted(input_list)",
        "response": "This statement uses the sorted() function to sort the elements in the list 'input_list' in ascending order. The elements in the list will be compared using their default ordering and then sorted accordingly. The sorted list is returned and stored in a new list called 'sorted_list'."
    },
    {
        "instruction": "Given a string of characters, write a function in Python that returns only the uppercase characters. \"Hello, World!\"",
        "response": "def get_upper(string):\n  \"\"\"Return only uppercase characters from given string.\"\"\"\n  return ''.join([c for c in string if c.isupper()])"
    },
    {
        "instruction": "Write a function in Python that takes a sentence and removes all spaces. \"Hello, World!\"",
        "response": "def remove_spaces(sentence):\n  \"\"\"Remove all spaces from a given sentence.\"\"\"\n  return sentence.replace(\" \", \"\")"
    },
    {
        "instruction": "Write a function in Python that takes a string and splits it into a list of words. \"Hello, World!\"",
        "response": "def split_string(text):\n  \"\"\"Split a given string into a list of words.\"\"\"\n  return text.split()"
    },
    {
        "instruction": "Write a function in Python that takes a 2D array and returns the product of all elements in it. [[1, 2],[3, 4]]",
        "response": "def product_of_elements(arr):\n  \"\"\"Return product of all elements in a given 2D array.\"\"\"\n  product = 1\n  for row in arr:\n    for ele in row:\n      product *= ele\n  return product"
    },
    {
        "instruction": "Write a function in Python that takes two strings and returns a single string with the characters in alternating order. \"Hello\", \"World!\"",
        "response": "def alternate_string(str1, str2):\n  \"\"\"Return a string with characters in alternating order from two given strings.\"\"\"\n  result = \"\"\n  for i in range(min(len(str1), len(str2))):\n      result += str1[i] + str2[i]\n  result += str1[i + 1:] + str2[i + 1:]\n  return result"
    },
    {
        "instruction": "Write a function in Python that takes an integer and returns a boolean value specifying whether the number is a prime number or not. 9",
        "response": "def is_prime(num):\n  \"\"\"Check if a number is a prime number.\"\"\"\n  if num <= 1:\n    return False\n  for i in range(2,num):\n    if num % i == 0:\n      return False\n  return True"
    },
    {
        "instruction": "Write a function in Python that takes a list of strings and checks whether the list is empty or not. [\"Hello\", \"World\"]",
        "response": "def is_list_empty(list_str):\n  \"\"\"Check if a list is empty or not.\"\"\"\n  return len(list_str) == 0"
    },
    {
        "instruction": "Write a function in Python that takes a list of strings and checks if they are all the same length. [\"Hello\", \"World\"]",
        "response": "def is_all_same_length(list_str):\n  \"\"\"Check if all strings in a list are of same length.\"\"\"\n  return len(set(map(len, list_str))) == 1"
    },
    {
        "instruction": "Write a Python class to implement a linked list. ",
        "response": "class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n \n def push(self, data):\n node = Node(data)\n node.next = self.head\n self.head = node\n \n def pop(self):\n data = self.head.data\n self.head = self.head.next\n return data"
    },
    {
        "instruction": "How can you sort a list of dictionaries by values of the dictionary in Python? ",
        "response": "def sort_dict_by_values(dict_list):\n    return sorted(dict_list, key=lambda k: k['value'])"
    },
    {
        "instruction": "Write code to implement a priority queue in Python. ",
        "response": "class PriorityQueue:\n    def __init__(self):\n        self.queue = []\n \n    # Create the enqueue(data) method to add data inside the queue\n    def enqueue(self, data):\n        self.queue.append(data)\n \n    # Create the dequeue() method to remove data from the queue\n    def dequeue(self):\n        if self.queue:\n            min_item = min(self.queue)\n            self.queue.remove(min_item)\n            return min_item\n        else:\n            return None"
    },
    {
        "instruction": "How can you print a string character by character in Python? ",
        "response": "def char_by_char(string):\n    for char in string:\n        print(char)"
    },
    {
        "instruction": "Write a JavaScript code snipplet that append the contents of one array to another array. let arr1 = [1,2,3];\nlet arr2 = [4,5,6];",
        "response": "let arr1 = [1,2,3];\nlet arr2 = [4,5,6];\narr2.push(...arr1);\n// arr2 is [4,5,6,1,2,3]"
    },
    {
        "instruction": "Write a Python function to convert a dictionary into a list of tuples. dictionary = {\n  \"name\": \"John\",\n  \"age\": 36\n}",
        "response": "def dict_to_tuple(dictionary): \n  return [(key, value) for key, value in dictionary.items()]"
    },
    {
        "instruction": "Convert the following English sentence into a Python function definition: \"Prints a string on the screen\". ",
        "response": "def printString(string):\n  print(string)"
    },
    {
        "instruction": "Describe how the for loop works in Python? ",
        "response": "A for loop in Python is a type of looping construct that is used to iterate over a sequence of objects including strings, lists, tuples, dictionaries, and sets. A for loop has three components, the iterator (variable), sequence, and statements. With each iteration, the iterator is assigned the value of the next element in the sequence and the statements are executed. When all the elements in the sequence have been exhausted, the loop terminates."
    },
    {
        "instruction": "Write a JavaScript function to generate a random strong password with length 8-10. ",
        "response": "function generatePassword(){\n  var charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#%^&*()_+-=\";\n  var passwordLength = Math.floor(Math.random() * (10 - 8 + 1)) + 8;\n  var password = '';\n  \n  for(let i = 0; i < passwordLength; i++){\n    var randomChar = charSet[Math.floor(Math.random() * charSet.length)];\n    password += randomChar;\n  }\n  \n  return password;\n}"
    },
    {
        "instruction": "Explain how Python List Comprehensions work? ",
        "response": "Python List Comprehensions allow users to quickly build a list from another list or an iterable. List Comprehensions use a syntax that consists of an expression followed by a ‘for’ statement and then zero or more ‘for’ or ‘if’ clauses. The expression is evaluated once for each item in the list. List Comprehensions can be used to perform filtering and mapping operations over the lists, or any other iterable. The output is a new list that can be formed from items in the original list, or any of its combinations."
    },
    {
        "instruction": "Create a web page with the headline \"Welcome to Python programming\". ",
        "response": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome to Python Programming</title>\n</head>\n<body>\n    <h1>Welcome to Python Programming</h1>\n</body>\n</html>"
    },
    {
        "instruction": "Create a Python dictionary to store employee details. Name: John Doe\nAge: 25\nRole: Sales Manager",
        "response": "employee = {\n 'name': 'John Doe',\n 'age': 25,\n 'role': 'Sales Manager',\n}"
    },
    {
        "instruction": "Using JavaScript, create an algorithm to check if an array of numbers is sorted in ascending order. ",
        "response": "function isSortedAscending(arr) {\n    for (let i = 0; i < (arr.length - 1); i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Write a function in Python that takes two numbers and swaps the values of the two numbers. ",
        "response": "def swap(x, y): \n    temp = x \n    x = y \n    y = temp \n  \nx = 10\ny = 5\n\nswap(x, y) \n\nprint(\"x =\", x, \"y =\", y)\n\n# Output: x = 5 y = 10"
    },
    {
        "instruction": "Write a JavaScript code to print out the multiplication table of 3. ",
        "response": "for (let i = 1; i <= 10; i++) { \n   console.log(`3x${i}=${3*i}`); \n}"
    },
    {
        "instruction": "Make a function in Python which calculates the covariance between two given lists. list1: [1, 2, 3, 4, 5]\nlist2: [3, 4, 2, 4, 5]",
        "response": "def cov(list1, list2): \n    mean1 = sum(list1)/len(list1) \n    mean2 = sum(list2)/len(list2) \n    total = 0\n\tfor i in range(len(list1)): \n        total += (list1[i] - mean1)*(list2[i] - mean2) \n    return total/len(list1)"
    },
    {
        "instruction": "Create a method in JavaScript that takes a comma-separated list of values as an argument and returns an array containing those values. ",
        "response": "function createArray(string) { \n return string.split(','); \n}"
    },
    {
        "instruction": "What is the purpose of this JavaScript code? const studentNames = [\"John\", \"Paul\", \"Ringo\", \"George\"];\nlet nameString = studentNames.reduce((string, name) => {\n    return string + name + \",\";\n}, 'All students: ');",
        "response": "The purpose of this JavaScript code is to create a comma-separated string from an array of strings. The code uses the reduce function to concatenate the strings in the array with a comma and create a new string beginning with the string 'All students: '. The resulting string is stored in the nameString variable."
    },
    {
        "instruction": "Here's some Python code that finds the smallest number in a list. Edit it\nto find the greatest number in a list. # list of numbers\nlist = [20, 10, 4, 45, 99]\n\n# printing the smallest number\nprint(min(list))",
        "response": "# list of numbers\nlist = [20, 10, 4, 45, 99]\n\n# printing the greatest number\nprint(max(list))"
    },
    {
        "instruction": "Create a dictionary using comprehension technique in Python. original_dict = {'a':1, 'b':2, 'c':3, 'd':4}",
        "response": "new_dict = {key: value ** 2 for key, value in original_dict.items()}"
    },
    {
        "instruction": "Generate a random array of size n in Python. Size of array: 5",
        "response": "import numpy as np\n\nsize = 5\n\n# Create an array of size 5\narr = np.random.randint(100, size = (size))\nprint (arr)"
    },
    {
        "instruction": "Using Python, write a piece of code to convert Celsius temperatures to Fahrenheit. Celsius: 20",
        "response": "Fahrenheit = 68"
    },
    {
        "instruction": "Create a random password generator in Python that outputs 10 characters of random alphanumeric characters. ",
        "response": "import random\nimport string\n\ndef random_password_generator():\n  charsds = string.ascii_letters + string.digits\n  password = ''.join(random.choice(charsds) for i in range(10))\n  return password\n\nprint(random_password_generator())"
    },
    {
        "instruction": "Write a code in Python to convert the following string to an integer. \"12345\"",
        "response": "string = \"12345\"\n\nnumber = int(string)\n\nprint(number)"
    },
    {
        "instruction": "Write a Python code to count the number of uppercase characters in the given string. \"Hello World\"",
        "response": "string = \"Hello World\"\n\ncount = 0\nfor char in string:\n  if char.isupper():\n    count += 1\n\nprint(\"The number of uppercase characters are:\", count)"
    },
    {
        "instruction": "Suggest a better way to compare two strings in Python. ",
        "response": "Using Python's Standard Library function `difflib.SequenceMatcher` is a more efficient way to compare two strings. This function uses an algorithm to compute the longest common subsequence between the two strings which is then used to calculate the similarity score of the given strings."
    },
    {
        "instruction": "How could we access the third element of a list in Python? ",
        "response": "The third element of a list can be accessed using the index value 2, as Python indexing starts from 0. For example, if x is a list containing the elements [1, 2, 3], x[2] will return the third element of the list i.e. 3."
    },
    {
        "instruction": "Generate a best-fit line for data points {(2,4), (4,7), (6,8), (7,11)} in Python. ",
        "response": "\"\"\"\nGenerate a best fit line for data points in Python\n\"\"\"\nimport numpy as np\n\ndata = [(2,4), (4,7), (6,8), (7, 11)]\n\nx = np.array([x[0] for x in data])\ny = np.array([y[1] for y in data])\n\nm, c = np.polyfit(x, y, 1)\n\nprint(\"Best-fit line equation: y = {:.2f}x + {:.2f}\".format(m,c))"
    },
    {
        "instruction": "Develop an algorithm in Python that detects any outliers in an array. A = [1, 5, 2, 10, 8, 5, 9, 15]",
        "response": "\"\"\"\nDevelop an algorithm in Python that detects any outliers in an array\n\"\"\"\n#define function to detect outliers\ndef detect_outliers(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\n#call the function to find outliers\nA = [1, 5, 2, 10, 8, 5, 9, 15]\nprint(\"outliers: \", detect_outliers(A))"
    },
    {
        "instruction": "Design a module in JavaScript that allows a user to reverse a provided array. A = [1,2,3,4,5]",
        "response": "\"\"\"\nDesign a module in JavaScript that allows a user to reverse a provided array\n\"\"\"\n//implement reverse function\nfunction reverseArray(array){\n  let start = 0;\n  let end = array.length-1;\n  \n  while (start  < end){\n     let temp = array[start];\n     array[start] = array[end];\n     array[end] = temp;\n     start++;\n     end--;\n  }\n  \n  return array;\n}\n\n//Reverse an array\nlet A = [1,2,3,4,5];\nlet B = reverseArray(A);\nconsole.log(B);"
    },
    {
        "instruction": "Develop an algorithm in JavaScript that determines whether a given year is a leap year or not. Year = 2100",
        "response": "\"\"\"\nDevelop an algorithm in JavaScript that determines whether a given year is a leap year or not\n\"\"\"\nfunction isLeapYear(year) {\n    if (year % 4 === 0) {\n        if (year % 100 === 0) {\n            if (year % 400 === 0) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return true;\n        }\n    }\n    else {\n        return false;\n    }\n}\n\nlet year = 2100;\nconsole.log(isLeapYear(year));"
    },
    {
        "instruction": "Write a script in Python that takes a list of strings and prints out the first letter of each string in uppercase. A = [\"apple\", \"banana\", \"grapes\"]",
        "response": "\"\"\"\nWrite a script in Python that takes a list of strings and prints out the first letter of each string in uppercase\n\"\"\"\n# create the function\ndef uppercase_first_letters(list_of_strings):\n    for string in list_of_strings:\n        print(string[0].upper())\n\n# call the function with the list\nA = [\"apple\", \"banana\", \"grapes\"]\nuppercase_first_letters(A)"
    },
    {
        "instruction": "Design a module in JavaScript that sorts an array of integers starting from the smallest number. A = [9, 8, 12, 4, 7, 10]",
        "response": "\"\"\"\nDesign a module in JavaScript that sorts an array of integers starting from the smallest number.\n\"\"\"\n// Create the sorting function\nfunction sortArray(array){\n  // Keep track of the index of the minimum value.\n  let index;\n  \n  //loop through the array starting from the beginning.\n  for(let i = 0; i < array.length; i++){\n    //set the min value to the current i value.\n    let min = array[i];\n    //set the index to i\n    index = i;\n    \n    //loop through the array starting from i + 1.\n    for(let j = i + 1; j < array.length; j++){\n      //if the value of array[j] is less then the min value\n      //then set the min to this value and set the index to j\n      if (array[j] < min){\n        min = array[j];\n        index = j;\n      }\n    }\n    \n    //if there was a new min then swap it at the current i position. \n    if(i != index){\n      let temp = array[i];\n      array[i] = array[index];\n      array[index] = temp;\n    }\n  }\n  \n  //return the sorted array\n  return array;\n}\n\n//Call the function for sorting\nlet A = [9, 8, 12, 4, 7, 10];\nlet B =  sortArray(A);\nconsole.log(B);"
    },
    {
        "instruction": "Develop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation. Base = 5\nExponent = 3",
        "response": "\"\"\"\nDevelop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation.\n\"\"\"\ndef power(base, exponent):\n    result = base**exponent;\n    return result;\n\nbase = 5\nexponent = 3\nprint(power(base, exponent))"
    },
    {
        "instruction": "Write a function in Python that returns the greatest common divisor (GCD) of two numbers. n1 = 18, n2 = 15",
        "response": "def greatest_common_divisor(n1, n2): \n    while n2 > 0: \n        n1, n2 = n2, n1 % n2 \n    return n1 \n\nresult = greatest_common_divisor(18, 15)\nprint(result)\n// Output: 3"
    },
    {
        "instruction": "Create a function in Python to convert time from 12 hour to 24 hour format. ",
        "response": "def convert12to24(time12h):\n    # Check if last two elements of time is AM and first two are 12\n    if time12h[-2:] == \"AM\" and time12h[:2] == \"12\": \n        return \"00\" + time12h[2:-2] \n          \n    # If last two elements of time is AM\n    elif time12h[-2:] == \"AM\": \n        return time12h[:-2] \n      \n    # If last two elements of time is PM and first two are 12    \n    elif time12h[-2:] == \"PM\" and time12h[:2] == \"12\": \n        return time12h[:-2] \n          \n    else: \n          \n        # add 12 to hours and remove AM\n        return str(int(time12h[:2]) + 12) + time12h[2:8]"
    },
    {
        "instruction": "Create a JavaScript program to sort a given list in ascending order. ",
        "response": "function sortList(arr) {\n    return arr.sort((a, b) => a - b);\n}"
    },
    {
        "instruction": "What is the function of the ‘enumerate’ keyword in Python? ",
        "response": "The 'enumerate' keyword is used to iterate over an iterable and keep track of the index along the way. Its syntax is \"enumerate(iterable, start=0)\". Each iteration yields a tuple containing the index of the element and the element itself. This is most commonly used for loops that need to track the index of the elements in the iterable. For example, the loop below will print out all the elements and their respective indices in a list:\n\nmy_list = [\"A\",\"B\",\"C\"]\nfor index, element in enumerate(my_list):\n    print(index, element)\n\n# Output:\n# 0 A\n# 1 B\n# 2 C"
    },
    {
        "instruction": "What is the difference between deep copy and shallow copy in Python? ",
        "response": "A shallow copy of an object creates a new reference to the existing object, while a deep copy creates a new object with a different reference but with the same values. In a shallow copy, changes made to the copied object will be reflected in the original object, whereas with a deep copy, the changes are independent. For example, if a list is shallow copied, the copied list will share the same elements as the original list, while a deep copy will contain independent copies of the original list's elements."
    },
    {
        "instruction": "Parse the following HTML using the BeautifulSoup library in Python. html = '<h1>This is a heading</h1><p>This is a paragraph.</p>'",
        "response": "from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nheading = soup.h1.string\nparagraph = soup.p.string\n\nprint(\"Heading:\", heading)\nprint(\"Paragraph:\", paragraph)\n\n# Output:\nHeading: This is a heading\nParagraph: This is a paragraph."
    },
    {
        "instruction": "Write a code to calculate the roots of a quadratic equation in Python. ",
        "response": "import math\n\ndef calculate_roots(a, b, c):\n  # calculate the discriminant\n  d = (b**2) - (4*a*c)\n  \n  # find two solutions\n  sol1 = (-b-math.sqrt(d))/(2*a)\n  sol2 = (-b+math.sqrt(d))/(2*a)\n  \n  print('The solutions are {0} and {1}'.format(sol1,sol2))"
    },
    {
        "instruction": "Edit a JavaScript function to perform an action based on another action in the code. function myFunction(arr) { \n  return arr.reverse();\n}",
        "response": "function myFunction(arr) { \n  arr.reverse();\n  return arr;\n}"
    },
    {
        "instruction": "Create a for-loop in JavaScript that iterates through numbers from 1 to 10 and prints out the current number. ",
        "response": "for (let i = 1; i <= 10; i++) {\n  console.log(i);\n}"
    },
    {
        "instruction": "Create a JavaScript object with a property \"name\" and a value of your choice. ",
        "response": "let person = {\n  name: \"John Doe\"\n};"
    },
    {
        "instruction": "Create a function in Python to find all elements of a given list whose sum is equal to a given number. list = [5, 7, 9, 4]\nnumber = 18",
        "response": "def find_elements(list, number): \n    result = [] \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == number: \n                result.append([list[i], list[j]]) \n  \n    return result \n  \n# Driver code \nlist = [5, 7, 9, 4] \nn = 18\nprint(find_elements(list, n))"
    },
    {
        "instruction": "Write a single line of code to convert a string to a date in Python. ",
        "response": "date = datetime.strptime('01/01/2019', '%d/%m/%Y')"
    },
    {
        "instruction": "Write a code snippet to create an object of type Car in Python. ",
        "response": "class Car():\n    def __init__(self):\n        self.make = \"\"\n        self.model = \"\"\n        self.year = 0\n        self.color = \"\"\n \ncar = Car()"
    },
    {
        "instruction": "Write a code to find out if a given number is prime in JavaScript. number = 29",
        "response": "function isPrime(number) {\n\nfor (i=2; i <= Math.sqrt(number); i++) {\n    if (number % i == 0) {\n        return false;\n    }\n}\nreturn true;\n}\n\nlet number = 29\nconsole.log(isPrime(number))"
    },
    {
        "instruction": "Create a Python script to compact a given list of elements. my_list = [1,1,2,3,3,3,4,4,4,4,5]",
        "response": "def compact_list(lst):\n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Iterate through lst\n    for item in lst:\n        if item != current:\n            current = item\n            new_list.append(current)\n    # Return the new list\n    return new_list\n    \n# Call the function with the given list\nmy_list = [1,1,2,3,3,3,4,4,4,4,5]\nprint(compact_list(my_list)) # [1,2,3,4,5]"
    },
    {
        "instruction": "Create a class in Python that will allow us to initialize and store a given list of numbers. ",
        "response": "class NumbersList:\n    def __init__(self, numbers_list):\n        self.numbers_list = numbers_list\n    \n    def get_list(self):\n        return self.numbers_list\n    \n    def set_list(self, numbers_list):\n        self.numbers_list = numbers_list"
    },
    {
        "instruction": "Write a Python function that takes in an argument 'arr' which is an array of integers and prints the arithmetic mean of the array. arr = [2, 8, 10, 22, 4]",
        "response": "def mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    mean = sum/len(arr)\n    print(mean)\nmean(arr) # Output: 10.0"
    },
    {
        "instruction": "Write a JavaScript code snippet to create a new array from an existing array where each element is doubled. ages = [10, 20, 30, 40]",
        "response": "let doubledAges = ages.map(age => age * 2);"
    },
    {
        "instruction": "Identify the correct syntax for creating a class with name 'Car' in Python. ",
        "response": "class Car:\n  pass"
    },
    {
        "instruction": "Write a JavaScript function to convert a given string to title case (every word must start with a capital letter). ",
        "response": "function toTitleCase(str) {\n  let new_str = str.toLowerCase().replace(/\\b[a-z]/g, char => char.toUpperCase());\n  return new_str;\n}"
    },
    {
        "instruction": "Write a Python program to print out the longest word entered by the user. string = \"Happiness is the best thing\"",
        "response": "def find_longest_word(string): \n    # split the string \n    word_list = string.split() \n  \n    # sort the list \n    word_list.sort(key = len) \n  \n    # return the last word \n    # which will be the longest \n    return word_list[-1]\n  \n# driver code \nstring = \"Happiness is the best thing\"\n \nprint(find_longest_word(string)) # Output: Happiness"
    },
    {
        "instruction": "Create a JavaScript program to compute the mathematical expression \"9 + x^3 - 7\" where x is user input. x = 7",
        "response": "let x = 7; \nlet expression = 9 + (x*x*x) - 7;\nconsole.log(expression); // Output: 570"
    },
    {
        "instruction": "Create a Python function which accepts two numbers then return an array with the Fibonacci sequence starting by the two numbers. start_1: 1\nstart_2: 2",
        "response": "def fib_array(start_1, start_2):\n    arr = [start_1, start_2]\n    while True:\n        next_num = arr[-1] + arr[-2]\n        if next_num > 100:\n            break\n        arr.append(next_num)\n    return arr"
    },
    {
        "instruction": "Write a few lines of code in Python that prints out name followed by age. name: John\nage: 25",
        "response": "name = \"John\"\nage = 25\nprint(name + \" \" + str(age))"
    },
    {
        "instruction": "You need write a code in JavaScript for a web page with an alert box showing a message 'Thank You for Visiting'. ",
        "response": "alert('Thank You for Visiting');"
    },
    {
        "instruction": "You need to write a for loop in Python that takes two arguments, N and K and prints out the numbers from 0 to N which are divisible by K. N: 15\nK: 4",
        "response": "for i in range(0, N+1):\n    if i % K == 0:\n        print(i)"
    },
    {
        "instruction": "Write a JavaScript code to convert all the strings in a given array to upper case. arr: [\"this\", \"is\", \"an\", \"example\"]",
        "response": "var upperCaseArray = arr.map(function(element) {\n  return element.toUpperCase();\n});"
    },
    {
        "instruction": "Write a JavaScript code that counts the number of tokens that are present in a given document. document: \"This is a sentence with five tokens\"",
        "response": "let tokenCount = 0;\nlet words = document.split(\" \");\nwords.forEach(word => {\n  tokenCount++;\n});\nconsole.log(tokenCount); \n// Output: 5"
    },
    {
        "instruction": "Create a JavaScript function to filter an array of strings. strings = [\"apple\", \"banana\", \"coconut\", \"dragon fruit\"]",
        "response": "function filterStrings(strings) {\n  return strings.filter(string => string.length < 7);\n}"
    },
    {
        "instruction": "Write a script in Python for drawing a rectangle on the screen. ",
        "response": "import pygame \n  \n# Initialize the game engine \npygame.init() \n  \n# Define the colors \nBLACK = (0, 0, 0) \nWHITE = (255, 255, 255) \n  \n# Set the window size \nsize = (400, 500) \nscreen = pygame.display.set_mode(size) \n  \n# Iterate over the list of rectangles \nrects = [pygame.Rect(75, 150, 150, 50), \n         pygame.Rect(200, 150, 150, 50)] \n  \n# Iterate over the list of rectangles \nfor rect in rects: \n    pygame.draw.rect(screen, WHITE, rect) \n  \n# Update the display \npygame.display.flip()"
    },
    {
        "instruction": "Write a Python function to convert temperatures from Fahrenheit to Celsius. ",
        "response": "def fahrenheit_to_celsius(f):\n return (f - 32) * 5 / 9"
    },
    {
        "instruction": "Create a Python dictionary to store information about a student. The student should have the following attributes: name, age, grades, and graduation year. ",
        "response": "student = {\n 'name': '',\n 'age': 0,\n 'grades': [],\n 'graduation_year': 0\n}"
    },
    {
        "instruction": "Write a Python function to add an item to a given list. ",
        "response": "def add_item(items, item):\n items.append(item)\n return items"
    },
    {
        "instruction": "Write a Python function to compute the total amount of a given grocery bill after taxes. items = [('apple', 1.49), ('banana', 0.99), ('bread', 4.99)]",
        "response": "def compute_total_after_taxes(items):\n tax = 0.07\n total = 0\n for item in items:\n  price = item[1]\n  tax_amount = price * tax\n  total += price + tax_amount\n return round(total, 2)"
    },
    {
        "instruction": "Write a Python function to create a dictionary from two given lists. The first list should be the keys and the second list should be the values. ",
        "response": "def create_dict(keys, values):\n return dict(zip(keys, values))"
    },
    {
        "instruction": "Create a function in Python to calculate the sum of the square of all numbers from 1 to n. ",
        "response": "def sum_squares(n): \n   total = 0\n   for x in range(1,n+1): \n      total += x * x\n   return total"
    },
    {
        "instruction": "Generate a simple python function to concatenate two lists. ",
        "response": "def concatenate_lists(list1, list2):\n    return list1 + list2"
    },
    {
        "instruction": "Write a python function to detect if two lists contain the same items in different order. ",
        "response": "def compare_lists(list1, list2):\n    return sorted(list1) == sorted(list2)"
    },
    {
        "instruction": "Write a method to calculate the average of three numbers in Python. ",
        "response": "def avg(num1, num2, num3):\n return (num1 + num2 + num3) / 3"
    },
    {
        "instruction": "Design a Python program to print all numbers between 0 and 100 that are divisible by 3 and 5. ",
        "response": "for i in range(101):\n    if i % 3 == 0 and i % 5 == 0:\n        print(i)"
    },
    {
        "instruction": "Create a Python dictionary with the key-value: \"Alice\": 28 ",
        "response": "example_dict = {'Alice': 28}"
    },
    {
        "instruction": "Create a table using JavaScript with three columns, \"Name\", \"Age\", and \"Country\". ",
        "response": "<table id=\"exampleTable\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Country</th>\n  </tr>\n</table>\n\n<script>\n  const exampleTable = document.getElementById('exampleTable');\n  const rows = [];\n  const columns = [\"Name\", \"Age\", \"Country\"];\n\n  columns.forEach((columnName) => {  \n  const newRow = document.createElement('tr'); \n  newRow.innerHTML = `<td>${columnName}</td>`;\n  rows.push(newRow);\n });\n\n exampleTable.append(...rows);\n</script>"
    },
    {
        "instruction": "Design an algorithm to swap two numbers in Python. Swap 10 and 20",
        "response": "def swapNumbers(a, b): \n  temp = a \n  a = b \n  b = temp \n \n  print(\"After swapping: a =\", a, \" b =\", b) \n\n# Driver program \na = 10\nb = 20\nswapNumbers(a, b)"
    },
    {
        "instruction": "generate a JavaScript function to check whether a string is a palindrome. ",
        "response": "function isPalindrome(str) {\n    let start = 0;\n    let end = str.length - 1;\n    while (start < end) {\n        if (str[start] !== str[end]) {\n            return false;\n        }\n    start++;\n    end--;\n    }\n    return true;\n}"
    },
    {
        "instruction": "Write a JavaScript code snippet to test if a given variable is an array or not. ",
        "response": "if (Array.isArray(variable)) {\n  console.log('It is an array');\n} else {\n  console.log('It is not an array');\n}"
    },
    {
        "instruction": "Suggest a code snippet in Python to delete the dictionary entry with a key called \"name\". sample_dic = {'id': 123, 'name': 'John Doe'}",
        "response": "del sample_dic['name']"
    },
    {
        "instruction": "Write a function in JavaScript to capitalize all the words in a given phrase. ",
        "response": "function capitalizeWords(str) {\n  let words = str.split(' ');\n  let capitalizedWords = words.map(word => word[0].toUpperCase() + word.slice(1));\n  return capitalizedWords.join(' ');\n}"
    },
    {
        "instruction": "Write a script in Python for generating a histogram for a given set of data. [3, 5, 8, 1, 9, 12]",
        "response": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 8, 1, 9, 12]\nplt.hist(data, color='blue', ec='black')\n\nplt.title(\"Histogram\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()"
    },
    {
        "instruction": "Create a function in Javascript to return an array containing the numbers from 1 to 10. ",
        "response": "function generateArray() {\n    let arr = [];\n    for (let i = 1; i <= 10; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\n\nconsole.log(generateArray());\n\nOutput: [1,2,3,4,5,6,7,8,9,10]"
    },
    {
        "instruction": "Explain the concept behind the Python decorator. ",
        "response": "Python decorator is a function which takes another function as argument and extends the behavior of that function without modifying its code. It allows developers to modify the behavior of a function, class or method at runtime without changing the code itself. Decorators are heavily used in frameworks like Flask and Django which are based on the MVC pattern. Decorators allow developers to easily modify and extend the code without having to rewrite it."
    },
    {
        "instruction": "Debug a logic error in this JavaScript code that returns the wrong result. function multiply(a,b) {\n    return a + b;\n}",
        "response": "function multiply(a,b) {\n    return a * b;\n}"
    },
    {
        "instruction": "Create a JavaScript code to insert a given item at the specified position in an array. item = \"hello world\", position = 2",
        "response": "function insertAtPosition(item, position, array) {\n    array.splice(position, 0, item);\n    return array;\n}"
    },
    {
        "instruction": "Write a JavaScript expression to remove all even numbers in an array. ",
        "response": "function removeEvens(numbers) {\n  return numbers.filter((num) => num % 2 !== 0);\n}"
    },
    {
        "instruction": "given a sentence, Write a JavaScript program to find out whether the sentence contains all the vowels. let sentence = \"This is an example sentence\";",
        "response": "function findVowels(sentence) { \n  let count = 0; \n  let vowels = \"aeiou\"; \n  for (let char of sentence.toLowerCase()) { \n     if (vowels.indexOf(char) !== -1) { \n        count++; \n    } \n  } \n  return count === 5; \n}"
    },
    {
        "instruction": "Implement FTP server in Python ",
        "response": "import ftplib\n\ndef start_ftp_server(host, port, user, password):\n    server = ftplib.FTP()\n    server.connect(host, port)\n    server.login(user, password)\n    print('FTP Server started successfully')\n\nstart_ftp_server('localhost', 21, 'testuser', 'testpass')"
    },
    {
        "instruction": "Create a javascript function for calculating the average of 1 to n-1 numbers in an array. [1, 2, 3, 4]",
        "response": "function calcAvg(arr) {\n   let sum = 0;\n   let arrLength = arr.length - 1;\n   for(let i = 0; i < arrLength; i++) {\n       sum += arr[i];\n   }\n   return sum / arrLength;\n}"
    },
    {
        "instruction": "Generate a python statement to print out \"Hello World\". ",
        "response": "print(\"Hello World\")"
    },
    {
        "instruction": "Given a JavaScript code, what are valid identifier names for its variables? ",
        "response": "Valid identifier names for JavaScript variables must start with a letter, underscore (_), or dollar sign ($); can contain alphanumeric characters and underscore; and must not contain spaces, start with a number or a keyword (such as \"var\"). Examples of valid variable names include \"myVar\", \"$_1stName\", \"name2\"."
    },
    {
        "instruction": "Generate a JavaScript function to return the average of two numbers ",
        "response": "function avgTwoNums(num1, num2) {\n   const average = (num1 + num2) / 2;\n   return average;\n}"
    },
    {
        "instruction": "Identify the type of input that is required for this Python function. def get_sum(a, b):\n    # return the sum of two numbers",
        "response": "The type of input required for this Python function is two numerical values (for example, integers or floats)."
    },
    {
        "instruction": "Create a array of objects in JavaScript. ",
        "response": "let arrayObjects = [\n {name: 'Spike', age: 6},\n {name: 'Spot', age: 4},\n {name: 'Max', age: 2},\n {name: 'Fluffy', age: 8}\n];"
    },
    {
        "instruction": "Execute this JavaScript Promise chain and explain the output. new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(1);\n  }, 1000);\n}).then((result) => {\n  console.log(result); // 1\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(result * 2);\n    }, 1000);\n  });\n}).then((result) => {\n  console.log(result); // 2\n  return result * 2;\n}).then((result) => {\n  console.log(result); // 4\n});",
        "response": "This JavaScript promise chain prints out the following output:\n1\n2\n4\n\nThe first console.log() logs the result of the first promise when it resolves, which is the number 1.\n\nThe second console.log() logs the result of the second promise when it resolves, which is the number 2 (1 * 2).\n\nThe third console.log() logs the result of the final promise when it resolves, which is the number 4 (2 * 2)."
    },
    {
        "instruction": "Create a Python script to scrape HTML data from a website. ",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com/\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# extract information from HTML\ndata = soup.find_all(\"div\", {\"class\": \"content\"})\n\n# save scraped data \nwith open('filename.txt', 'w') as file:\n    for content in data:\n        file.write(str(content))"
    },
    {
        "instruction": "Describe the purpose and syntax of the 'forEach' method in Javascript. ",
        "response": "The forEach() method in Javascript is used to iterate over each element in an array. It takes a callback function as an argument which is executed for each element of the array. The syntax of the forEach() method is as follows:\narray.forEach(function(element, index, array) {\n  // code to be executed;\n});"
    },
    {
        "instruction": "Create a JavaScript code snippet to store a string value in localStorage. ",
        "response": "localStorage.setItem('key', 'value');"
    },
    {
        "instruction": "Write a Python program to calculate the sum of all multiples of 3 and 5 between 1 and a given number. ",
        "response": "def sum_multiples_of_3_and_5(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0: \n            sum += i\n    return sum"
    },
    {
        "instruction": "Convert a code written in Python 3 into code compatible with Python 2. input = int(input('Enter your number: '))",
        "response": "import sys\nif sys.version_info.major == 3:\n input = int(input('Enter your number: '))\nelse:\n input = int(raw_input('Enter your number: '))"
    },
    {
        "instruction": "Write a Python function which takes a number as an argument and print \"even\" if the number is even and print \"odd\" if the number is odd. ",
        "response": "def print_even_odd(number):\n if number % 2 == 0:\n print(\"even\")\n else:\n print(\"odd\")"
    },
    {
        "instruction": "Implement a Wiki page title search using Python. Search string: \"Machine Learning\"",
        "response": "\"\"\"\nImplement a Wiki page title search using Python\n\"\"\"\n\nimport wikipedia\n\ndef search_wiki_title(search_string):\n    try:\n        wikipedia.set_lang(\"en\")\n        result = wikipedia.search(search_string)[0]\n    except (wikipedia.exceptions.PageError, wikipedia.exceptions.DisambiguationError):\n        result = None\n    return result\n\nif __name__ == '__main__':\n    search_string = input('Search string: ')\n    result = search_wiki_title(search_string)\n    print(result)"
    },
    {
        "instruction": "Explain what the yield keyword does in Python. ",
        "response": "The yield keyword in Python is used to create an iterator. When a function containing yield is called, it does not execute the code as a normal function would, instead it returns a generator object which is an iterator. Each time next() is called on the iterator, the yield statement is executed and returns a value. The execution of the function can be stopped at any point using the yield statement and the function can save the state of its variables when a yield statement is encountered, allowing it to be resumed after all the values have been generated."
    },
    {
        "instruction": "How does a try-except block work in Python? ",
        "response": "A try-except block in Python allows a code block to be tested for errors. The code that could potentially cause an exception is placed in the try clause and the code that handles the exception is put in the except clause. If an error is encountered in the try clause, the program execution is transferred to the except clause for further handling. The except clause can also be used to handle multiple exceptions in the same block of code."
    },
    {
        "instruction": "Develop a class in Python to print the name and age of the user. Name:\"John\", Age:\"25\"",
        "response": "class Hello: \n    def __init__(self,name,age): \n        self.name = name\n        self.age = age\n    \n    def printNameAge(self): \n        print(\"Name:\", self.name, \"Age:\", self.age)\n  \nobj1 = Hello(\"John\", 25) \nobj1.printNameAge()"
    },
    {
        "instruction": "Reverse the given list using python. list_to_reverse = [2, 3, 5, 6, 8, 10, 11]",
        "response": "def reverse_list(input_list):\n    \"\"\"Return a reversed copy of the list\"\"\"\n    return input_list[::-1]"
    },
    {
        "instruction": "Create a Python class to work with complex numbers. ",
        "response": "class ComplexNumber:\n    \"\"\"This class is used to work with complex numbers.\"\"\"\n    def __init__(self, real, imag): \n        self.real = real \n        self.imag = imag \n      \n    def __add__(self, other):\n        \"\"\"This method overloads the '+' operator to add complex numbers.\"\"\"\n        return ComplexNumber(self.real + other.real, self.imag + other.imag) \n      \n    def __sub__(self, other):\n        \"\"\"This method overloads the '-' operator to subtract complex numbers.\"\"\"\n        return ComplexNumber(self.real - other.real, self.imag - other.imag) \n  \n    def __mul__(self, other): \n        \"\"\"This method overloads the '*' operator to multiply complex numbers.\"\"\"\n        return ComplexNumber(self.real*other.real - self.imag*other.imag, self.real*other.imag + self.imag*other.real) \n  \n    def __str__(self): \n        \"\"\"This method overrides the __str__ method to print complex numbers in a readable format.\"\"\"\n        return self.real + self.imag + \"i\"\n\nif __name__ == '__main__':\n    c1 = ComplexNumber(1, 2) \n    c2 = ComplexNumber(2, 3) \n  \n    print(\"Addition of c1 and c2 =\", c1 + c2) \n    print(\"Subtration of c1 and c2 =\", c1 - c2) \n    print(\"Multiplication of c1 and c2 =\", c1 * c2)"
    },
    {
        "instruction": "Write a find() method in JavaScript to find an item in an array. Array: [1, 2, 3, 4, 5], query: 3",
        "response": "let find = (array, query) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === query) return i;\n  }\n  return -1;\n};\n\nlet index = find([1, 2, 3, 4, 5], 3);\nconsole.log(index);"
    },
    {
        "instruction": "Implement a factorial function in Python. ",
        "response": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)"
    },
    {
        "instruction": "Create a function in Python that adds a new item to the beginning of a list. my_list = [\"Cats\", \"Dogs\", \"Fish\"]",
        "response": "def insert_beginning(my_list, item):\n my_list = [item] + my_list\n return my_list"
    },
    {
        "instruction": "Write a Python code snippet that combines the elements of two lists into a single list. list_1 = [\"Cat\", \"Dog\", \"Fish\"]\nlist_2 = [\"Monkey\", \"Tiger\", \"Lion\"]",
        "response": "single_list = list_1 + list_2"
    },
    {
        "instruction": "Design a search system in Python with two methods (or functions) one method \"add\" to add a keyword and value, the other \"search\" to search by a keyword return the corresponding value. ",
        "response": "class SearchSystem:\n\n def __init__(self):\n     self.data = {}\n\ndef add(self, keyword, value):\n self.data[keyword] = value\n\ndef search(self, keyword):\n if keyword in self.data:\n return self.data[keyword]\n return None"
    },
    {
        "instruction": "Create a JavaScript program to find the area of a triangle using Heron's formula given the three sides, a, b and c. ",
        "response": "function areaOfTriangle(a, b, c) {\n let s = (a + b + c) / 2;\n let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n return area;\n}"
    },
    {
        "instruction": "Create a class in Python with methods \"add\" and \"find\" to add a value to a dictionary and find the value in it, respectively. ",
        "response": "class Dictionary:\n def __init__(self):\n     self.data = {}\n\ndef add(self, key, value):\n self.data[key] = value\n\ndef find(self, key):\n if key in self.data:\n return self.data[key]\n return None"
    },
    {
        "instruction": "How many elements are in list1 after executing the following Python code? list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist1.extend(list2)",
        "response": "6"
    },
    {
        "instruction": "How many elements will the array arr have after executing the following Python code? arr = [1, 2, 3]\narr.pop(1)",
        "response": "2"
    },
    {
        "instruction": "Create a Python function that generates a random number between two specified numbers. lower_bound = 10\nupper_bound = 20",
        "response": "def random_num(lower_bound, upper_bound):\n\timport random\n\treturn random.randint(lower_bound, upper_bound)\n\nlower_bound = 10\nupper_bound = 20\n\nprint(random_num(lower_bound, upper_bound))\n\n# Output\n# [random number between 10 and 20]"
    },
    {
        "instruction": "Create a JavaScript program to spread a given array into subarrays of the given size. arr = [1, 2, 3, 4, 5, 6]\nsize = 3",
        "response": "function spreadArray(arr, size) {\n  let subarrays = [];\n\n  while (arr.length) {\n    subarrays.push(arr.splice(0, size));\n  }\n  return subarrays;\n}\n\narr = [1, 2, 3, 4, 5, 6]\nsize = 3\n\nconsole.log(spreadArray(arr, size));\n\n# Output\n# [[1, 2, 3], [4, 5, 6]]"
    },
    {
        "instruction": "Change the following Python code to convert the list to a dictionary of key-value pairs. mylist  = [1, 2, 3, 4, 5]",
        "response": "mydict = {}\nfor i in range(len(mylist)):\n    mydict[i] = mylist[i]"
    },
    {
        "instruction": "Write a Python function to check if an element is present in a given list or not. ",
        "response": "def is_in_list(element, input_list):\n    return element in input_list"
    },
    {
        "instruction": "Compare and contrast the features of the two programming languages: Python and Java. ",
        "response": "Python and Java are both popular programming languages with different features that make them suitable for different tasks. Python is an interpreted, high-level, and general-purpose programming language that emphasizes code readability and has simple, easy-to-use syntax. Java, on the other hand, is an object-oriented, statically typed programming language that is heavily used in enterprise-level applications. Python is popular for its expressiveness and lack of boilerplate code, while Java provides a lot of technical support and stability. Additionally, Python is easier to learn and has a wide range of libraries and tools, while Java has powerful tools that allow developers to create more robust applications."
    },
    {
        "instruction": "Write a JavaScript program that creates an array with all the numbers from 1 to 10. ",
        "response": "const a = [];\nfor (let i = 1; i <= 10; i++) {\n a.push(i);\n}\nconsole.log(a);"
    },
    {
        "instruction": "Construct a for loop in Javascript to measure the sum of the squares of integers from 2 to 6 ",
        "response": "let sum = 0;\n\nfor (let i = 2; i <= 6; i++) {\n  sum += i * i;\n}\n\nconsole.log(sum);"
    },
    {
        "instruction": "How would you add the following list to a JSON document using Python?\n[1,2,3] ",
        "response": "import json\n\ndata = [1,2,3]\n\nwith open('my-json-file.json', 'w') as outfile:\n  json.dump(data, outfile)"
    },
    {
        "instruction": "Build an array in JavaScript containing the words: \"cat\", \"dog\", \"fish\", and \"wolf\". ",
        "response": "let animals = [\"cat\", \"dog\", \"fish\", \"wolf\"];"
    },
    {
        "instruction": "Write a function in JavaScript to truncate a string to a given length. ",
        "response": "function truncateString(str, num) {\n  if (str.length <= num) {\n    return str;\n  }\n  return str.slice(0, num) + \"...\";\n}"
    },
    {
        "instruction": "Create a function in Javascript that accepts a string as an argument. ",
        "response": "function myFunction(str) {\n  // code here\n}"
    },
    {
        "instruction": "Implement a function in Python to convert a given RGB color to Hexadecimal format. rgb_color = [255, 232, 154]",
        "response": "def rgb_to_hex(rgb_color):\n    hex_code = ''\n    for color in rgb_color:\n        hex_code += f'{color:02x}'\n    return hex_code\n\nhex_code = rgb_to_hex(rgb_color) # hex_code = \"ffe89a\""
    },
    {
        "instruction": "Write a for loop in Python which prints out the contents of the given stack. sample_stack = [\"first\", \"second\", \"third\"]",
        "response": "for item in sample_stack:\n    print(item)"
    },
    {
        "instruction": "Edit the statement to make it a valid expression in Python. x = y =",
        "response": "x = y = 0"
    },
    {
        "instruction": "Write a script in Python for printing the given second level sub-dictionary. data = {'first': {'A': 1, 'B': 2}, 'second': {'C': 3, 'D': 4}}",
        "response": "second_dict = data.get('second')\nfor key, value in second_dict.items():\n    print(key, value)"
    },
    {
        "instruction": "Using the input provided, write a program in JavaScript that finds the largest number in an array. my_array = [2, 3, 6, 1, 9]",
        "response": "let largestNumber = my_array[0];\nfor (let i = 1; i < my_array.length; i++) {\n  if (largestNumber < my_array[i]) {\n    largestNumber = my_array[i];\n  }\n}\nconsole.log(largestNumber);"
    },
    {
        "instruction": "Using the input provided, write a code in Python to print the elements of a given dictionary along with the corresponding keys. my_dict = {'one':1, 'two':2, 'three':3}",
        "response": "for key, value in my_dict.items():\n    print(key + ':', value)"
    },
    {
        "instruction": "Write a JavaScript program to compute the difference between two dates in days. Two dates- \"2021/07/26\" and \"2022/06/01\"",
        "response": "const dateOne = new Date(\"2021/07/26\");\nconst dateTwo = new Date(\"2022/06/01\");\nconst timeDifference = dateTwo.getTime() - dateOne.getTime();\nconst daysDifference = timeDifference / (1000 * 3600 * 24);\nconsole.log(daysDifference);"
    },
    {
        "instruction": "Create an animnation of a bouncing ball in the canvas using JavaScript. ",
        "response": "let x = canvas.width/2;\nlet y = canvas.height/2;\nlet radius = 20;\nlet dx = 3;\nlet dy = -3;\n\nfunction draw() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.beginPath();\n  ctx.arc(x, y, radius, 0, Math.PI*2);\n  ctx.fillStyle = \"#0095DD\";\n  ctx.fill();\n  ctx.closePath();\n\n  if (x+radius > canvas.width || x-radius < 0) {\n    dx = -dx;\n  }\n  \n  if (y+radius > canvas.height || y-radius < 0) {\n    dy = -dy;\n  }\n  \n  x += dx;\n  y += dy;\n  requestAnimationFrame(draw);\n}"
    },
    {
        "instruction": "Generate a python program to solve the Tower of Hanoi problem with n discs ",
        "response": "def TowerOfHanoi(n, from_rod, to_rod, aux_rod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod)\n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print(\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod)\n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod) \n        \n# Driver code \nn = 3\nTowerOfHanoi(n, 'A', 'C', 'B')"
    },
    {
        "instruction": "Write a Python code that prints out the following patterns: ",
        "response": "# Pattern 1\nfor i in range(1, 10):\n    for j in range(1, i + 1):\n        print(\"*\", end=\" \")\n    print(\" \")\n\n# Pattern 2\nfor i in range(10, 0, -1):\n    for j in range(i, 0, -1):\n        print(\"*\", end=\" \")\n    print(\" \")"
    },
    {
        "instruction": "Create a Python code for printing the following pattern. ",
        "response": "# Pattern \nfor i in range(1,6):\n for j in range(1,i+1):\n  print(i,end=\"\")\n print(\"\")"
    },
    {
        "instruction": "Write a Python function to generate a random integer in the range of 1 to 10. ",
        "response": "import random\n\ndef random_int_1_10():\n    return random.randint(1, 10)\n\n\nif __name__ == '__main__':\n    print(random_int_1_10())"
    },
    {
        "instruction": "Using HTML and JavaScript, implement a drag and drop feature. ",
        "response": "<script>\nfunction dragStart(event){\n    event.dataTransfer.setData(\"Text\", event.target.id);\n    event.dataTransfer.dropEffect = \"move\";\n}\n\nfunction allowDrop(event) {\n    event.preventDefault();\n}\n\nfunction drop(event) {\n    event.preventDefault();\n    var data = event.dataTransfer.getData(\"Text\");\n    event.target.appendChild(document.getElementById(data));\n}\n</script>\n\n<div id=\"drag1\" draggable=\"true\" ondragstart=\"dragStart(event)\">Drag Me</div>\n<div id=\"drop1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\">Drop Here</div>"
    },
    {
        "instruction": "Generate a HTTP request using Python to send a GET request to https://www.wikihow.com/Main-Page ",
        "response": "import requests\n\nurl = 'https://www.wikihow.com/Main-Page'\n\nresponse = requests.get(url)\n\nprint(response)"
    },
    {
        "instruction": "Write a script in Python to take an age as an input and return a boolean which indicates if a person is a minor or not. ",
        "response": "def is_minor(age):\n    \"\"\"\n    Function to determine if a person is a minor or not\n    \"\"\"\n    if age < 18:\n        return True\n    else:\n        return False\n\n# Let's test it\nage = 18\nprint(is_minor(age)) # Output: False"
    },
    {
        "instruction": "Transform a given XML document into a JSON object using Python. ",
        "response": "import xmltodict\n\n# open the XML document\nwith open(\"document.xml\") as f:\n  xml_data = f.read()\n\n# convert to json\njson_data = xmltodict.parse(xml_data)\n\n# print the JSON object\nprint(json.dumps(json_data, indent=2))"
    },
    {
        "instruction": "Using regular expressions, extract all telephone numbers from a given string in JavaScript. ",
        "response": "let string = \"My telephone numbers are 123-456-7890 and 012-345-6789\";\n\nlet regex = /\\d{3}-\\d{3}-\\d{4}/g;\nlet numbers = string.match(regex);\n\nconsole.log(numbers);"
    },
    {
        "instruction": "Parse a given HTML document and find all elements with the given class name using JavaScript. ",
        "response": "let list = document.getElementsByClassName(\"classname\");\nlet elements = [];\nfor (let i = 0; i < list.length; i++) {\n  elements.push(list[i]);\n}\n\nconsole.log(elements);"
    },
    {
        "instruction": "Write a code snippet that reverses a string in JavaScript. ",
        "response": "function reverseString(str) {\n    strArray = str.split('');\n    reversedStrArray = strArray.reverse();\n    return reversedStrArray.join('');\n}"
    },
    {
        "instruction": "Write a Python function that prints the first n even numbers. ",
        "response": "def print_even_numbers(n):\n    for i in range(2, n*2, 2): \n        print(i)"
    },
    {
        "instruction": "Create a JavaScript code snippet to check if an object contains a specified key. ",
        "response": "function hasKey(obj, key) {\n    if(obj.hasOwnProperty(key)) {\n        return true;\n    }\n    return false;\n}"
    },
    {
        "instruction": "Given two data sets, one containing the user id (user_id) and first name (firstname) and another data set containing user_id and last name (lastname), write a Python function to join the two sets and create a new data set with firstname, lastname and user_id. user_id: [1,3,4,7] \nfirstname: [\"John\", \"Alice\", \"Madison\", \"Peter\"] \nuser_id: [1,2,3,6]\nlastname: [\"Smith\", \"Jones\", \"Brown\", \"Miller\"]",
        "response": "def join_sets(user_id1, firstname, user_id2, lastname):\n    user_id = user_id1 + user_id2\n    names = firstname + lastname\n    result = []\n    for id in user_id:\n        firstname = [name for id, name in zip(user_id1, firstname) if id == id][0]\n        lastname = [name for id, name in zip(user_id2, lastname) if id == id][0]\n        result.append({\"user_id\": id, \"firstname\": firstname, \"lastname\": lastname})\n    return result"
    },
    {
        "instruction": "Write a Python program to compute and return a list that contains every possible combination of two given lists. list1 = [1,2]\nlist2 = [3,4]",
        "response": "def combine_lists(list1,list2):\n  result = []\n  for i in list1:\n    for j in list2:\n      result.append([i,j])\n  return result"
    },
    {
        "instruction": "Write a Python program to find all the Armstrong numbers between the given two numbers. An Armstrong number is a number such that the sum of its digits raised to the third power is equal to the number itself. lower = 100\nupper = 2000",
        "response": "def isArmstrong(num):\n s = 0\n temp = num\n while temp > 0:\n digit = temp % 10\n s += digit ** 3\n temp //= 10\n if num == s:\n return True\n else:\n return False\n\nfor num in range(lower, upper + 1):\n if isArmstrong(num):\n print(num)"
    },
    {
        "instruction": "Write a virtual assistant in Python to gauge the sentiment of a given string. string = \"I had a terrible day\"",
        "response": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analyzer(string):\n sid = SentimentIntensityAnalyzer()\n snt = sid.polarity_scores(string)\n return snt[\"compound\"]\n\nsentiment_analyzer(string)"
    },
    {
        "instruction": "Write a Python function to check if a number is perfect or not. A number is said to be a perfect number if its sum of divisors is equal to itself. ",
        "response": "def is_perfect(n):\n s = 0\n for i in range(1, n):\n if n % i == 0:\n s += i\n return s == n"
    },
    {
        "instruction": "Use the Python built-in function filter() to find all numbers divisible by 5. mylist = [10, 21, 32, 45, 56, 77]",
        "response": "list(filter(lambda x: (x % 5 == 0), mylist))"
    },
    {
        "instruction": "Construct a loop to print numbers from 1 to 10 using a while loop in Python. ",
        "response": "i = 1\nwhile i <= 10:\n    print(i)\n    i += 1"
    },
    {
        "instruction": "Create a Python script that find the number of occurrences of a specific word in a given sentence. This is a sample sentence.",
        "response": "sentence_input = \"This is a sample sentence.\"\n\ndef count_keyword(sentence_input, keyword):\n    return sentence_input.lower().count(keyword.lower())\n\ncount = count_keyword(sentence_input, \"sentence\")\nprint(\"The word 'sentence' occurs \" + str(count) + \" times.\")"
    },
    {
        "instruction": "Make a class in Python which will represent a binary search tree. ",
        "response": "class BinarySearchTree:\n \n    def __init__(self, value): \n        self.left = None\n        self.right = None\n        self.value = value\n \n    def inorder(self):\n        if self.left:\n            self.left.inorder()\n        print(self.value)\n        if self.right:\n            self.right.inorder()\n \n    def insert(self, value):\n        if value <= self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:\n                self.left.insert(value)\n        elif value > self.value:\n            if self.right is None:\n                self.right = BinarySearchTree(value)\n            else:\n                self.right.insert(value)"
    },
    {
        "instruction": "Design a solution in JavaScript to find the kth smallest element in an unsorted array. arr = [8, 5, 7, 2, 3, 1, 9, 4]\nk = 3",
        "response": "function kthSmallest(arr, k) { \n  // Sort the array \n  arr.sort((a, b) => a - b); \n  \n  // Return kth element in the sorted array \n  return arr[k - 1]; \n}"
    },
    {
        "instruction": "Change the following Python program so that it prints out the palindromic substrings. string = 'mom'",
        "response": "def palindromicSubstrings(string): \n    for start in range(len(string) + 1):\n        for end in range(start + 1, len(string) + 1):\n            substring = string[start:end]\n            if substring == substring[::-1]:\n                print(substring) \npalindromicSubstrings(string)"
    },
    {
        "instruction": "Create a function in Python that takes a number as an argument and displays the corresponding day from Monday to Sunday. ",
        "response": "def getDay(num):\n    days = {\n        0: 'Monday',\n        1: 'Tuesday',\n        2: 'Wednesday',\n        3: 'Thursday',\n        4: 'Friday',\n        5: 'Saturday',\n        6: 'Sunday',\n    }\n    return days[num]"
    },
    {
        "instruction": "How to check for a key in a dictionary in Python? ",
        "response": "if key in dictionary:\n    # execute this block of code\nelse:\n    # execute this block of code"
    },
    {
        "instruction": "Write a function in Python that accepts an array as an argument and returns the index of the item with the maximum value. arr = [2, 5, 9, 4, 10]",
        "response": "def find_max_index(arr):\n    if len(arr) == 0:\n        return None\n    max_val = arr[0]\n    max_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index\n\narr = [2, 5, 9, 4, 10]\nmax_index = find_max_index(arr)\nprint(max_index)  # Output 4"
    },
    {
        "instruction": "Create a method that takes a string as a parameter and returns the number of unique characters present in the string. python",
        "response": "def count_unique_characters(str):\n    characters = set()\n    for char in str:\n        characters.add(char)\n    return len(characters)"
    },
    {
        "instruction": "Write a JavaScript program to compare two Strings for equality, ignoring case. String1: 'Hello'\nString2: 'heLLo'",
        "response": "const compareIgnoreCase = (string1, string2) => {\n    return string1.toUpperCase() === string2.toUpperCase();\n};\n\ncompareIgnoreCase(\"Hello\", \"heLLo\"); // true"
    },
    {
        "instruction": "Write a JavaScript function to find the number of days left from today to a given date. let date = \"12/20/2020\";",
        "response": "function daysLeft(date){ \n  let today = new Date(); \n  let endDate = new Date(date); \n  let timeDifference = endDate - today; \n  \n  let daysLeft = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));\n  \n  return daysLeft;\n }"
    },
    {
        "instruction": "Design a basic calculator using HTML, CSS, and JavaScript. ",
        "response": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML/CSS/Javascript Calculator</title>\n    <style>\n      * {\n        box-sizing: border-box;\n      }\n      .calculator {\n        width: 425px;\n        background-color: #fafafa;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      .calculator-display {\n        display: flex;\n        align-items: flex-end;\n        padding: 0px 20px;\n        font-size: 2.5rem;\n        font-family: sans-serif;\n      }\n      .calculator-keypad {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        grid-gap: 8px;\n      }\n      .calculator-key {\n        background-color: #f0f0f0;\n        width: 100%;\n        height: 80px;\n        border-radius: 8px;\n        font-size: 1.25rem;\n        font-family: sans-serif;\n        font-weight: bold;\n        color: #444;\n        cursor: pointer;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"calculator\">\n      <div class=\"calculator-display\"></div>\n      <div class=\"calculator-keypad\"></div>\n    </div>\n    <script>\n      const calculator = {\n        displayValue: '0',\n        firstOperand: null,\n        waitingForSecondOperand: false,\n        operator: null\n      };\n      \n      function updateDisplay() {\n        const display = document.querySelector('.calculator-display');\n        display.innerText = calculator.displayValue;\n      }\n    \n      updateDisplay();\n      \n      // add event listeners for the calculator buttons\n      \n    </script>\n  </body>\n</html>"
    },
    {
        "instruction": "Design a currency exchange program using JavaScript that allows the user to instantly receive the exchange rate for a particular currency. ",
        "response": "const currencyExchange = (baseCurrency, foreignCurrency) => {\n  let response;\n\n  const endpoint = `https://api.exchangeratesapi.io/latest?base=${baseCurrency}&symbols=${foreignCurrency}`;\n\n  // Use Fetch API to make a call to endpoint\n  fetch(endpoint)\n  .then(res => {\n    res.json()\n    .then(data => {\n      response = data.rates[foreignCurrency];\n      console.log(response);\n    })\n  });\n};\n\n// Call to currencyExchange\ncurrencyExchange(\"USD\", \"EUR\");"
    },
    {
        "instruction": "Create a web page that displays a message in different languages by using HTML, CSS, and JavaScript. ",
        "response": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello World in Different Languages</title>\n  <style>\n    body {\n      font-family: sans-serif;\n      background-color: #eee;\n      text-align: center;\n      padding: 20px;\n    }\n    select {\n      background-color: #f0f0f0;\n      font-size: 1rem;\n      padding: 5px 10px;\n      margin-top: 20px;\n      border: none;\n      border-radius: 5px;\n    }\n    button {\n      background-color: #444;\n      color: #fff;\n      font-size: 1rem;\n      padding: 5px 10px;\n      margin-top: 20px;\n      border: none;\n      border-radius: 5px;\n    }\n    .language-message {\n      font-size: 2rem;\n      margin: 20px;\n      color: #444;\n    }\n  </style>\n</head>\n<body>\n  <h1>Hello World in Different Languages</h1>\n  <select id=\"language-selector\">\n    <option value=\"English\">English</option>\n    <option value=\"French\">French</option>\n    <option value=\"Spanish\">Spanish</option>\n    <option value=\"German\">German</option>\n    <option value=\"Italian\">Italian</option>\n  </select>\n  <button type=\"button\" id=\"language-button\">Show!</button>\n  <label class=\"language-message\" id=\"language-message\"></label>\n\n  <script>\n    // Get language button, message label, and language selector elements\n    const languageButton = document.querySelector('#language-button');\n    const languageMessage = document.querySelector('#language-message');\n    const languageSelector = document.querySelector('#language-selector');\n\n    let messages = {\n      'English': 'Hello, World!',\n      'French': 'Bonjour le monde!',\n      'Spanish': 'Hola Mundo!',\n      'German': 'Hallo Welt!',\n      'Italian': 'Ciao Mondo!'\n    };\n\n    languageButton.addEventListener('click', () => {\n      let language = languageSelector.value;\n      languageMessage.innerText = messages[language];\n    });\n  </script>\n</body>\n</html>"
    },
    {
        "instruction": "Design an interactive game using HTML, CSS and JavaScript. ",
        "response": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hunted Maze</title>\n  <style>\n    * {\n      box-sizing: border-box;\n    }\n    body{\n      font-family: sans-serif;\n      background-color: #eee;\n      text-align: center;\n      padding: 20px;\n    }\n    h1 {\n      font-size: 2rem;\n      color: #444;\n    }\n    .maze {\n      position: relative;\n      width: 800px;\n      height: 600px;\n      background-color: #f0f0f0;\n      border-radius: 8px;\n    }\n    .box {\n      position: absolute;\n      width: 25px;\n      height: 25px;\n      background-color: #444;\n      border-radius: 4px;\n      top: 0;\n      left: 0;\n    }\n  </style>\n</head>\n<body>\n  <h1>Hunted Maze</h1>\n  <div class=\"maze\">\n    <div class=\"box\"></div>\n  </div>\n  <script>\n    // add logic for the game\n\n  </script>\n</body>\n</html>"
    },
    {
        "instruction": "How can you test a user-defined function with the name \"sum\" in JavaScript? ",
        "response": "function sumTest(){\n  let expectedResult = 15; \n  let actualResult = sum(5, 10);\n\n  if(expectedResult === actualResult){\n    console.log(\"sum test passed\");\n  }\n  else{\n    console.log(\"sum test failed\");\n  }\n}\n\nsumTest();"
    },
    {
        "instruction": "Rewrite the following python code to an equivalent code using lambda and sorted function. def sort_by_length(words):\n    return sorted(words, key=lambda x: len(x))",
        "response": "sort_by_length = lambda words: sorted(words, key=len)"
    },
    {
        "instruction": "How can we extend the following JavaScript program to add two more students? function getStudents(){\n    const students = [\n        {name: \"Tom\", age: 17},\n        {name: \"Jack\", age: 16},\n    ];\n    return students;\n}",
        "response": "function getStudents(){\n    const students = [\n        {name: \"Tom\", age: 17},\n        {name: \"Jack\", age: 16},\n        {name: \"Jill\", age: 13},\n        {name: \"Dave\", age: 21},\n    ];\n    return students;\n}"
    },
    {
        "instruction": "How can the following JavaScript program be modified to include a letter grade for each student score? let grades = [\n  {name: 'John', score: 90},\n  {name: 'Jack', score: 80},\n  {name: 'Jill', score: 85},\n]",
        "response": "let grades = [\n  {name: 'John', score: 90, grade: 'A'},\n  {name: 'Jack', score: 80, grade: 'B'},\n  {name: 'Jill', score: 85, grade: 'B+'},\n];\n\ngrades = grades.map(grade => {\n  let letter;\n  if (grade.score >= 90) {\n    letter = 'A';\n  } else if (grade.score >= 80) {\n    letter = 'B';\n  } else if (grade.score >= 70) {\n    letter = 'C';\n  } else if (grade.score >= 60) {\n    letter = 'D';\n  } else {\n    letter = 'F';\n  }\n  grade.grade = letter;\n  return grade;\n});"
    },
    {
        "instruction": "Generate an array of random numbers using the JavaScript Math.random() function. Array length :10",
        "response": "let arrayLength = 10;\nlet randomArray = [];\nfor (let i = 0; i < arrayLength; i++) {\n  randomArray.push(Math.random());\n}\n\nconsole.log(randomArray);"
    },
    {
        "instruction": "Identify which of the given statements is incorrect. - fopen() is a PHP function for opening a file\n- fgets() is a JavaScript function for reading contents of a file\n- fread() is a PHP function for reading contents of a file",
        "response": "fgets() is a JavaScript function for reading contents of a file is incorrect. The correct statement is fgets() is a PHP function for reading contents of a file."
    },
    {
        "instruction": "What does this declaration mean in JavaScript ? let myArray = []",
        "response": "The declaration let myArray = [] in JavaScript is declaring a variable myArray which is an empty array."
    },
    {
        "instruction": "Describe the meaning of the variable name ‘arraySize’ in JavaScript ",
        "response": "The variable name arraySize in JavaScript is used to describe the size of an array, that is, the number of elements in the array."
    },
    {
        "instruction": "Draft a Javascript function that takes no arguments and returns ‘Hello World’ ",
        "response": "function helloWorld() {\n\treturn \"Hello World\";\n}"
    },
    {
        "instruction": "Assign a variable in JavaScript. ",
        "response": "let myVar = \"Hello World\";"
    },
    {
        "instruction": "What does typeof do in JavaScript? ",
        "response": "The typeof operator in JavaScript is used to determine the type of a value. It can be used to determine the type of primitives, such as string, number, boolean, null, undefined, and Symbol, and the type of objects. It returns a string indicating the type of the argument."
    },
    {
        "instruction": "How do you comment multiple lines in JavaScript? ",
        "response": "In Javascript, one can comment multiple lines by enclosing the code or text within the /* and */ symbols. For example:\n/*\nThis is an example\nof a multi-line comment\n*/"
    },
    {
        "instruction": "Find the sum of all even numbers in the following list (Python code): [1, 4, 6, 7, 8, 12, 19]",
        "response": "sum_even_num = 0\nfor num in [1, 4, 6, 7, 8, 12, 19]:\n    if num % 2 == 0:\n        sum_even_num = sum_even_num + num \nprint(sum_even_num)"
    },
    {
        "instruction": "Create a function to sort a list of numbers without using python's built-in sort function. [3,5,4,2,1]",
        "response": "# Function to sort a list of numbers without using Python's built-in sort function\ndef my_sort(numbers):\n    n = len(numbers)\n\n    for i in range(n): \n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1] :\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n                \n    return numbers\n\n# Example list\nlist = [3,5,4,2,1]\nprint(my_sort(list))"
    },
    {
        "instruction": "Write a Python function that prints the frequencies of even and odd numbers in a given array. [2, 5, 4, 6, 8, 10]",
        "response": "def frequency_of_odd_and_even(arr):\n    freq_even = 0\n    freq_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            freq_even += 1\n        else:\n            freq_odd += 1\n    print(\"Frequency of even numbers:\", freq_even)\n    print(\"Frequency of odd numbers:\", freq_odd)"
    },
    {
        "instruction": "Create a JavaScript class that allows the user to choose the size, position and color of a textbox. ",
        "response": "class Textbox {\n    constructor(size, position, color) {\n        this.size = size;\n        this.position = position;\n        this.color = color;\n    }\n\n    showTextbox() {\n        const textbox = document.createElement(\"div\");\n        textbox.style.width = this.size + \"px\";\n        textbox.style.position = this.position;\n        textbox.style.background = this.color;\n        document.body.appendChild(textbox);\n    }\n}"
    },
    {
        "instruction": "Write a python code snippet to calculate the sum of any number of integers. num1 = 10\nnum2 = 6 \nnum3 = 8",
        "response": "sum = num1 + num2 + num3\nprint(\"The sum is\", sum)"
    },
    {
        "instruction": "Rewrite the code so that it can run in Python 3 instead of Python 2. #!/usr/bin/env python\nprint 'Hello, world!'",
        "response": "#!/usr/bin/env python\n\nprint('Hello, world!')"
    },
    {
        "instruction": "Edit the code so that it can run in JavaScript async/await instead of Promise const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"Success!\");\n  }, 1000);\n});\n\nmyPromise.then(data => {\n  console.log(data);\n});",
        "response": "async function myAsync() {\n  const response = await new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(\"Success!\");\n    }, 1000);\n  });\n  console.log(response);\n}\n\nmyAsync(); // Success!"
    },
    {
        "instruction": "Create an AI chatbot using JavaScript and Natural Language Processing. ",
        "response": "const { NlpManager } = require('node-nlp');\n \nconst manager = new NlpManager({ languages: ['en'] });\n \nmanager.addDocument('en', 'Good morning', 'greet.morning');\nmanager.addDocument('en', 'Good evening', 'greet.evening');\nmanager.addDocument('en', 'Hi', 'greet.hello');\n\nmanager.addAnswer('en', 'greet.morning', 'Good morning! How can I help you today?');\nmanager.addAnswer('en', 'greet.evening', 'Good evening! What do you need help with?');\nmanager.addAnswer('en', 'greet.hello', 'Hi there! How may I assist you?');\n\n(async() => {\n    await manager.train();\n    const response = await manager.process('en', 'Hi');   \n    console.log(response.answer); // Hi there! How may I assist you?\n})();"
    },
    {
        "instruction": "Write a Python script to determine how many lowercase letters are in a given string. string = \"Hello World!\"",
        "response": "\"\"\"\nPython script to determine how many lowercase letters are in a given string \n\"\"\"\n\n# Initialize a variable to count the lowercase letters\nlowercase_letter_count = 0\n\n# Loop through each character in the string\nfor char in string:\n    # Check if the character is a lowercase letter\n    if char.islower():\n        # If yes, then increment the counter\n        lowercase_letter_count += 1\n\n# Print the total number of lowercase letters\nprint(lowercase_letter_count)"
    },
    {
        "instruction": "Write a JavaScript program that allows the user to input two numbers and shows the bigger number. ",
        "response": "function biggestNum(){\nvar num1 = parseInt(prompt(\"Please enter the first number: \")); \nvar num2 = parseInt(prompt(\"Please enter the second number: \")); \n  \nif(num1 > num2){\n  alert(\"The largest number is: \" + num1); \n}\nelse if(num2 > num1){\n  alert(\"The largest number is: \" + num2); \n}\nelse{\n  alert(\"Both numbers are equal.\");\n}\n}\nbiggestNum();"
    },
    {
        "instruction": "Modify the following Python code to print the program output unique and ordered. x = [1, 2, 3, 4, 4, 3, 1]\nprint(x)",
        "response": "x = [1, 2, 3, 4]\ny = list(set(x))\ny.sort()\nprint(y)"
    },
    {
        "instruction": "Write a Python function that takes a number n as parameter and prints out all even numbers from 2 to n. ",
        "response": "def printEven(n): \n   for i in range(2, n+1): \n      if(i % 2 == 0): \n         print(i, end = \" \")"
    },
    {
        "instruction": "Write a JavaScript code to find a value in an array of objects and return the object with that value. list = [{name:\"John\", age:\"22\"}, {name:\"Peter\", age:\"40\"}, {name:\"Anne\", age:\"32\"}];\nfind_name = \"John\"",
        "response": "function findObject(list, find_name) {\n    for(let i = 0; i < list.length; i++){\n        if(list[i].name == find_name){\n            return list[i];\n        }\n    }\n    return null;\n}\n\nfindObject(list, find_name)"
    },
    {
        "instruction": "Generate a function in python that takes two lists and returns the product of their longest common substrings. list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 5, 7]",
        "response": "def longest_common_substring(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\n    if longest_substring == 0:\n        return 0\n    else:\n        return list1[0] * list2[0] * longest_substring"
    },
    {
        "instruction": "Suggest a code in Python that will calculate the area of any given shape. ",
        "response": "def area(shape):\n    if shape == \"rectangle\":\n        length = float(input(\"Please enter the length: \"))\n        width = float(input(\"Please enter the width: \"))\n        return length * width\n\n    elif shape == \"triangle\":\n        base = float(input(\"Please enter the base: \"))\n        height = float(input(\"Please enter the height: \"))\n        return 0.5 * base * height\n\n    elif shape == \"circle\":\n        r = float(input(\"Please enter the radius: \"))\n        return 3.14 * r * r"
    },
    {
        "instruction": "Create a function in Python to take a positive integer and return its factorial. num = 5",
        "response": "def factorial(num): \n    \"\"\"Function to return the factorial of a positive integer\"\"\"\n    if(num <=1): \n        return 1\n    else: \n        return(num*factorial(num-1))"
    },
    {
        "instruction": "Create a Python function to return the frequency table of a list of words. words = [\"apple\", \"mango\", \"cherry\", \"banana\", \"apple\", \"mango\"]",
        "response": "def create_frequency_table(words):\n    \"\"\"\n    Function to create a frequency table for a given list of words.\n    \n    Arguments:\n        words {list}: List of words.\n    \n    Returns:\n        dictionary: Frequency table of words.\n    \"\"\"\n    frequency_table = dict()\n    for word in words:\n        if word in frequency_table:\n            frequency_table[word] += 1\n        else:\n            frequency_table[word] = 1\n    return frequency_table"
    },
    {
        "instruction": "Create a Python function to find all unique values in a list. L = [1, 2, 4, 2, 1]",
        "response": "def find_unique_values(L):\n    \"\"\"\n    Function to find all the unique values in a list.\n    \n    Arguments:\n        L {list}: The list to search in.\n    \n    Returns:\n        set: The set of unique values.\n    \"\"\"\n    unique_values = set()\n    for item in L:\n        if item not in unique_values:\n            unique_values.add(item)\n    return unique_values"
    },
    {
        "instruction": "Create a Python code to print out all the common elements in two lists. list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 6]",
        "response": "def get_common_elements(list1, list2):\n    \"\"\"\n    Function to get all the common elements in two lists.\n    \n    Arguments:\n        list1 {list}: The first list.\n        list2 {list}: The second list.\n    \n    Returns:\n        list: A list containing all the common elements in both lists.\n    \"\"\"\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "instruction": "Create a javascript code to open a pop-up window when a user clicks the button ",
        "response": "<button type=\"button\" onclick=\"alert('Pop up window')\">Click Me!</button>"
    },
    {
        "instruction": "Create a constructor in JavaScript that will assign a value to an object's properties. properties: x, y, z",
        "response": "function MyObject(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n}"
    },
    {
        "instruction": "Create a class in Python that takes a list of numbers and finds the average. list: [4, 5, 6]",
        "response": "class AverageCalculator:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def calculate_average(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n        return total / len(self.numbers)"
    },
    {
        "instruction": "Create a JavaScript program which takes two arguments as strings and returns true if they both have the same length ",
        "response": "function sameLength(str1, str2) {\n    if (str1.length == str2.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}"
    },
    {
        "instruction": "Create a Python class named 'Student' that contains the name, age and grade of a student. ",
        "response": "class Student:\n  def __init__(self, name, age, grade):\n    self.name = name\n    self.age = age\n    self.grade = grade"
    },
    {
        "instruction": "Write a JavaScript code that randomly generates a 2D array of size m X n, wherein each element has a random value between 0 and 5. ",
        "response": "function genRandom2DArray(m, n){ \n    let result = new Array(m);\n  \n    for (let i = 0; i < m; i++) {\n    result[i] = new Array(n);\n  \n    for (let j = 0; j < n; j++) {\n        result[i][j] = Math.floor(Math.random() * 6);\n    } \n    }\n    return result; \n}"
    },
    {
        "instruction": "In Python, write code to sort a list of integers in ascending order. [9, 15, 5, 11, 4]",
        "response": "def sort_list(list_of_numbers):\n   list_of_numbers.sort()\n   return list_of_numbers\n\nprint(sort_list([9, 15, 5, 11, 4])) # Output: [4, 5, 9, 11, 15]"
    },
    {
        "instruction": "Write a JavaScript code to find all the elements with class 'myclass' in a given HTML page and alert their inner HTML. ",
        "response": "let elements = document.getElementsByClassName('myclass');\n\nfor(let i=0; i<elements.length; i++){\n   alert(elements[i].innerHTML);\n}"
    },
    {
        "instruction": "Create an array in JavaScript to store integers from 1 to 10 ",
        "response": "var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "instruction": "Write a python function that takes two strings as an argument and returns the True if they are anagrams of each other, else False. \"rat\" and \"tar\"",
        "response": "def check_anagrams(str1,str2):\n    str1_list = list(str1) \n    str1_list.sort() \n    str2_list = list(str2) \n    str2_list.sort() \n    return (str1_list == str2_list) \n  \n# Driver code  \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str1, str2): \n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings aren't anagrams.\")"
    },
    {
        "instruction": "Print the array elements in reverse order using a recursive function in JavaScript [1,2,3,4]",
        "response": "function reversePrintArray(arr) {\n    if (arr.length === 0) {\n        return;\n    }\n    reversePrintArray(arr.slice(1));\n    console.log(arr[0]);\n}"
    },
    {
        "instruction": "Write a JavaScript program to find the longest common prefix string amongst two given strings? \"hello\" and \"heaven\"",
        "response": "function longestCommonPrefix(str1, str2) {\n    let prefix = '';\n    let min_len = Math.min(str1.length, str2.length);\n    for (let i = 0; i < min_len; i++) {\n        if (str1[i] === str2[i]) {\n            prefix += str1[i];\n        } else {\n            break;\n        }\n    }\n    return prefix;\n}\nlet str1 = 'hello'; \nlet str2 = 'heaven';\nconsole.log(longestCommonPrefix(str1,str2));"
    },
    {
        "instruction": "Write a Python function that takes a string as an argument and checks if it contains the word “Python”. text = \"This sentence does not contain the word Python\"",
        "response": "def contains_python(string): \n  if \"Python\" in string: \n    return True\n  else: \n    return False\n\nprint(contains_python(text)) # False"
    },
    {
        "instruction": "Create a python script to check if a substring exists in a given string ",
        "response": "def is_substring(s1, s2):\n    return s2 in s1"
    },
    {
        "instruction": "Write a JavaScript program to generate and print multiplication table up to 10. ",
        "response": "for(var i = 1; i <= 10; i++) {\n  for(var j = 1; j <= 10; j++) {\n    console.log(i + \" x \" + j + \" = \" + (i*j));\n  }\n}"
    },
    {
        "instruction": "Write a Python function to filter a given list of strings and return the list with the strings having length greater than the given number. list = ['Example', 'cat', 'dog', 'hello', 'word']\nlength = 4",
        "response": "def filter_list(list, length):\n  return [string for string in list if len(string) > length]"
    },
    {
        "instruction": "Write a Python function to subtract two given numberss. ",
        "response": "def subtract_numbers(num1, num2):\n  return num1 - num2"
    },
    {
        "instruction": "Create a program in Python that will take in a list of strings and print out each unique string in the list. mylist = [\"Hello\", \"World\", \"Hello\", \"WDI\", \"Class\"]",
        "response": "uniquelist = []\nfor string in mylist:\n    if string not in uniquelist:\n        uniquelist.append(string)\n\nprint(uniquelist)"
    },
    {
        "instruction": "Write a function in Python that takes a sentence and a number as inputs, and returns the number of words in that sentence that are longer than the given number. Sentence = \"Hello, this is a sentence\";\nNumber = 3;",
        "response": "def count_words_longer_than_number(text, number):\n  words = text.split()\n  count = 0\n  for word in words:\n    if len(word) > number:\n      count += 1\n\n  return count\n\ncount_words_longer_than_number(Sentence, Number)"
    },
    {
        "instruction": "Create a program in Python that takes a list of numbers as input and sorts it in ascending order. mylist = [3, 2, 5, 4, 1]",
        "response": "def list_sort(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\nlist_sort(mylist)"
    },
    {
        "instruction": "Write a script in JavaScript for converting temperature from Celsius to Fahrenheit. Celsius = 20",
        "response": "var celsius = 20;\nvar fahrenheit = (celsius * (9/5)) + 32;\nconsole.log(fahrenheit);"
    },
    {
        "instruction": "Create a program in Python that will take a list of strings and output a list containing the lengths of each string. mylist = [\"Hello\", \"World\", \"WDI\", \"Class\"]",
        "response": "length_list = []\nfor string in mylist:\n    length_list.append(len(string))\n\nprint(length_list)"
    },
    {
        "instruction": "Create a JavaScript object to store the data of a person. name: John Doe, age: 20, address: New York, USA",
        "response": "const person = {\n  name: 'John Doe', \n  age: 20,\n  address: 'New York, USA'\n}"
    },
    {
        "instruction": "Write a JavaScript program to validate whether a given phone number is valid. phone number: 412-678-9012",
        "response": "function validPhoneNumber(phoneNumber) {\n  let phoneRegex = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n   \n  let validPhone = phoneRegex.test(phoneNumber);\n   \n  return validPhone;\n}\n\nvalidPhoneNumber(\"412-678-9012\") # true"
    },
    {
        "instruction": "Create an HTML page to display the output of a JavaScript greeting message. message: Welcome!",
        "response": "<!DOCTYPE html>\n<html>\n<head>\n  <title>JavaScript Greeting Message</title>\n</head>\n<body>\n  <h1>Welcome!</h1>\n  <script type=\"text/javascript\">\n    document.write(\"Welcome!\");\n  </script>\n</body>\n</html>"
    },
    {
        "instruction": "Create a class definition in python with one variable and one method ",
        "response": "class Example:\n  def __init__(self, variable):\n    self.variable = variable\n\n  def method(self):\n    return self.variable + 1"
    },
    {
        "instruction": "Define a python function that returns an array of the numbers from 0 to n ",
        "response": "def create_array(n): \n    # create an empty list \n    mylist=[] \n    # add elements to the list by looping n times \n    for i in range(0, n + 1): \n        mylist.append(i) \n    # return the list \n    return mylist"
    },
    {
        "instruction": "Write a function in Python that takes two parameters, a list of integers and a target integer. The function should return the number of times the target integer appears in the list. list = [12, 4, 1, 18, 7, 15, 6, 11, 4]\ntarget = 4",
        "response": "def count_target(lst, target):\n    count = 0\n    for i in lst:\n        if i == target:\n            count += 1\n    return count\n\nprint(count_target(list, target))"
    },
    {
        "instruction": "Write a Python script that takes a string as input and outputs a string with the same characters in reverse order. hello",
        "response": "def reverse_string(str):\n  return str[::-1]\n\nprint(reverse_string('hello'))"
    },
    {
        "instruction": "Construct a factorial function in JavaScript that takes in two inputs x and y as parameters. ",
        "response": "function factorial(x, y) {\n    let result = 1;\n    for (let i = x; i <= y; i++) {\n        result *= i;\n    }\n    return result;\n}"
    },
    {
        "instruction": "Given an array of strings \"words\", write a code to remove all the words which are greater than 5 characters in length. words = [\"Stack\", \"Overflow\", \"Python\", \"Coding\"]",
        "response": "words = [\"Stack\", \"Overflow\", \"Python\", \"Coding\"]\n\nwords = list(filter(lambda x : len(x)<=5, words))\nprint(words)"
    },
    {
        "instruction": "Design a JavaScript program to find the factorial of an integer. 5",
        "response": "function factorial(num) { \n    // If the number is less than 0, reject it. \n    if (num < 0) {\n        return -1;\n    }\n    // If the number is 0, its factorial is 1.\n    else if (num == 0) {\n        return 1;\n    }\n    // Otherwise, call the recursive procedure. \n    else { \n        return (num * factorial(num - 1)); \n    } \n} \n\nconst num = 5;\nconst result = factorial(num);\n\nconsole.log(`The factorial of ${num} is ${result}.`);"
    },
    {
        "instruction": "Write a method in Python which takes a positive integer and returns the sum of squares of all numbers smaller than the given number. 5",
        "response": "def sum_of_squares(n): \n    if n == 1: \n        return 1\n    else: \n        return n*n + sum_of_squares(n-1) \n\nnumber = 5\nresult = sum_of_squares(number)\nprint('The sum of squares of numbers smaller than {} is {}.'.format(number, result))"
    },
    {
        "instruction": "Describe the differences between \"==\" and \"===\" operators in JavaScript. ",
        "response": "In JavaScript, the \"==\" operator compares two values by performing type-conversion if necessary, while the \"===\" operator does not perform type-conversion and compares the values directly. For example, the statement \"3 == '3'\" will return true for the \"==\" operator, but false for the \"===\" operator, since the two values on either side of the operator are not of the same type."
    },
    {
        "instruction": "Rewrite the following code using the set module in Python a = [1, 1, 2, 3, 4, 5, 5, 5]",
        "response": "import set\n\na = [1, 1, 2, 3, 4, 5, 5, 5]\na_set = set(a)\nnew_list = list(a_set)\nprint(new_list)"
    },
    {
        "instruction": "Generate a python program to create a n-dimensional array filled with zeros. n = 4",
        "response": "# Program to create a n-dimensional array filled with zeros \n\nimport numpy as np\n\n# Get the number of dimensions \nn = 4\n\n# Create an array of zeros of given size \narr = np.zeros((n,n,n,n))\n\nprint(arr)"
    },
    {
        "instruction": "Create a Python class called Employee which contains the employee id and the name. ",
        "response": "# define the Employee class\nclass Employee:\n    # construct a new Employee instance\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n\n# create a new Employee object\nemployee1 = Employee(1, \"John Doe\")\n\n# access the employee id and name\nprint(employee1.id)\nprint(employee1.name)"
    },
    {
        "instruction": "What is this coding question asking you to do? Write a Python function to check whether a number is prime or not",
        "response": "This coding question is asking you to write a Python function to check whether a given number is prime or not. The function should take an integer as an argument and return a boolean indicating if the number is prime or not."
    },
    {
        "instruction": "Edit the code such that it prints the same output. str1 = \"python \"\nstr2 = \"programming\"\nprint(str1 + str2)",
        "response": "str1 = \"python\"\nstr2 = \" programming\"\nprint(str1 + str2)"
    },
    {
        "instruction": "Explain the advantages of using the following linear regression algorithm in Python. Linear Regression using Stochastic Gradient Descent",
        "response": "The advantages of using the Linear Regression algorithm with Stochastic Gradient Descent (SGD) in Python include:\n\n1. It is relatively fast to train, as it only has to go through each sample in the dataset once in order to generate the coefficients.\n2. It requires small datasets and low complexity models, so it can be utilized on limited hardware systems.\n3. It is well suited for problems where the number of features is quite high, and the relationships between features is non-linear.\n4. It can exploit sparse data, which can make it perfect for certain types of data, such as text."
    },
    {
        "instruction": "List out all the sorting algorithms supported in Python. ",
        "response": "The sorting algorithms supported in Python include bubble sort, insertion sort, selection sort, merge sort, quick sort, and heap sort."
    },
    {
        "instruction": "Write a JavaScript function to find all words in a string. This is a string",
        "response": "function findWords(str) { \n    let words = []; \n    let start = 0; \n\n    for (let i = 0; i < str.length; i++) { \n        if (str[i] == ' ') { \n            let word = str.substring(start, i); \n            if (word != '') \n                words.push(word); \n            start = i + 1; \n        } \n    } \n  \n    let lastWord =  str.substring(start, str.length); \n    if (lastWord != '') \n        words.push(lastWord); \n\n    return words; \n}"
    },
    {
        "instruction": "Create a JavaScript object with key-value pairs representing names and ages. ",
        "response": "const people = {\n  \"John\": 30,\n  \"Emily\": 28,\n  \"George\": 25,\n  \"Karen\": 33\n}"
    },
    {
        "instruction": "Create a data visualization in Python using the given dataset. Dataset: \nThe data contains information about the latest coronavirus cases per US state",
        "response": "import pandas as pd\nimport matplotlib.pyplot as plt\n \n# Read the dataset\ndf = pd.read_csv('data.csv')\n \n# Create visualization\nfig, ax = plt.subplots(figsize=(10,8))\nax.bar(df['State'], df['Cases'], color='#88e398')\nplt.xlabel('States')\nplt.ylabel('Coronavirus Cases')\nplt.title('Covid-19 Cases per US State')\nplt.xticks(rotation=45)\nplt.show()"
    },
    {
        "instruction": "Create a Javascript function to take an array of numbers and return the sum of all its elements. [1, 2, 3, 4, 5]",
        "response": "function sumArrayElements(arr) {\n let sum = 0;\n\n for (let i = 0; i < arr.length; i++) {\n  sum += arr[i];\n }\n\n return sum;\n}"
    },
    {
        "instruction": "How are objects instantiated in Python? ",
        "response": "Objects are instantiated in Python by using the keyword \"class\". Python then creates a new instance of the class and assigns it a unique object ID. This object is then used as the basis for the object's other attributes and methods, which are defined within the class definition. Object instantiation is usually used to create objects that inherit from other classes, or that contain data that need to be initialized."
    },
    {
        "instruction": "How are dictionaries implemented in Python? ",
        "response": "Dictionaries in Python are implemented as hash tables. Each key-value pair is stored as an entry in the hash table, and a hash function is used to map the key to its corresponding index in the table. This allows fast lookups of the associated value of a given key and makes dictionary operations such as insertion, deletion, and retrieval very efficient. Furthermore, dictionaries are mutable, meaning they can be changed after they are created."
    },
    {
        "instruction": "Create a function in Python which takes in a list of numbers and returns the sum of all numbers. [1,2,3,4,5]",
        "response": "def list_sum(num_list): \n \n    # initialize sum\n    Sum = 0\n \n    # traverse through all numbers\n    for num in num_list: \n        Sum += num \n  \n    # return Sum\n    return Sum \n  \n# test the above code\nlist1 = [1,2,3,4,5] \nprint(list_sum(list1)) \n\n# Output:\n15"
    },
    {
        "instruction": "Format the given date string using JavaScript. String: 2008-11-10",
        "response": "\"November 10, 2008\""
    },
    {
        "instruction": "Subtract the given list of numbers using JavaScript. List: [8, 3, 6]",
        "response": "-9"
    },
    {
        "instruction": "Write a JavaScript program to compute the value obtained by concatenating the three given strings. str1 = \"Hello \"\nstr2 = \"World!\"\nstr3 = \" How are you?\"",
        "response": "let str1 = \"Hello \";\nlet str2 = \"World!\";\nlet str3 = \" How are you?\";\n\nconst concatString = str1.concat(str2, str3);\n\nconsole.log(concatString); // \"Hello World! How are you?\""
    },
    {
        "instruction": "Find all the elements in a Python list that correspond to a certain condition using list comprehension list = [-3, -2, -1, 0, 1, 2, 3]",
        "response": "[x for x in list if x >= 0]"
    },
    {
        "instruction": "Identify three expressions that are valid in JavaScript. ",
        "response": "1. 5 + 5\n2. document.write(\"Hello World!\")\n3. function greet(){ console.log(\"Hello World!\") }"
    },
    {
        "instruction": "Given the parameter 'word', what JavaScript code should be written to check whether it is a palindrome or not? ",
        "response": "function isPalindrome(word) { \n    let revWord = word.split('').reverse().join(''); \n    return word == revWord; \n}"
    },
    {
        "instruction": "Write Python code to store odd numbers from the given list in a separate list. list = [1, 2, 3, 4, 5, 6, 7]",
        "response": "odds = []\nfor num in list:\n    if num % 2 != 0:\n        odds.append(num)"
    },
    {
        "instruction": "What code should be written to generate a random string with 10 characters in JavaScript? ",
        "response": "function randomString() {\n  let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let string = \"\";\n  for (let i = 0; i < 10; i++) {\n    string += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return string; \n}"
    },
    {
        "instruction": "Rewrite the given Python code snippet using list comprehensions . even_list = []\nfor x in my_list:\n    if x % 2 == 0:\n        even_list.append(x)",
        "response": "even_list = [x for x in my_list if x % 2 == 0]"
    },
    {
        "instruction": "Create a new Python class called Area to calculate the area of different shapes. ",
        "response": "class Area:\n    def __init__(self):\n        pass\n\n    def calculate_area_rectangle(self, length, width):\n        return length * width\n\n    def calculate_area_triangle(self, base, height):\n        return 0.5 * base * height\n\n    def calculate_area_circle(self, radius):\n        return 3.14 * radius**2"
    },
    {
        "instruction": "Implement a in-order traversal of a binary tree in Python. ",
        "response": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inOrderTraversal(root):  \n    if root is not None: \n        inOrderTraversal(root.left)\n        print(root.data)\n        inOrderTraversal(root.right)\n\nroot = Node(1)\nroot.left = Node(7)\nroot.right = Node(9)\nroot.left.left = Node(4)\nroot.left.right = Node(8)\n\ninOrderTraversal(root)\n\n# Output\n4\n7\n1\n8\n9"
    },
    {
        "instruction": "Write a JavaScript function to display the message \"Hello World!\". ",
        "response": "function showMessage() {\n    console.log('Hello World!');\n}"
    },
    {
        "instruction": "Create a class in Python named 'Rectangle' which can compute the area of a rectangle. ",
        "response": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\t\n    def get_area(self):\n        return self.width * self.height"
    },
    {
        "instruction": "Suggest a valid Python code to add two numbers ",
        "response": "def add_two_numbers(a, b):\n    return a + b"
    },
    {
        "instruction": "Suggest a valid Python code to print unique characters of a given string ",
        "response": "def print_unique(s):\n    output = set()\n    for char in s:\n        if char not in output:\n            output.add(char)\n            print(char)"
    },
    {
        "instruction": "Parse a JSON response into a Python dictionary. {\n    \"name\": \"John Doe\",\n    \"age\": \"35\"\n}",
        "response": "import json\n\ndef parse_json(json_data):\n    data = json.loads(json_data)\n    return data\n\nif __name__ == '__main__':\n    json_data = '{\"name\": \"John Doe\", \"age\": \"35\"}'\n    print(parse_json(json_data))"
    },
    {
        "instruction": "How can you define a list of elements in JavaScript? ",
        "response": "In JavaScript, lists of elements can be defined using an array. An array is a data structure that stores a set of elements of the same type. The elements of an array can be accessed by their index.\n\nExample:\nvar myList = ['item1', 'item2', 'item3'];"
    },
    {
        "instruction": "Fix the following Python code to create a dictionary. dic = {“min”, 10, “max”, 20}",
        "response": "dic = {\"min\": 10, \"max\": 20}"
    },
    {
        "instruction": "Write a JavaScript loop to print out all the values of an array. arr = [1, 2, 3, 4, 5]",
        "response": "for (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}"
    },
    {
        "instruction": "Write a function in Python which takes an array of integers and returns a list of all distinct pairs whose sum is equal to a given value. arr = [1, 2, 3, 4, 5]\nvalue = 7",
        "response": "def pairs_with_sum(arr, value):\n    pairs = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == value):\n                pairs.append((arr[i], arr[j]))\n    return pairs"
    },
    {
        "instruction": "Create an object in JavaScript that contains two methods.  The first method takes two parameters and returns the sum of the two numbers, and the second method takes two parameters and returns the product of the two numbers. ",
        "response": "const calculator = {\n    sum: function(a, b){\n        return a + b;\n    },\n    product: function(a, b){\n        return a * b;\n    }\n};"
    },
    {
        "instruction": "Create a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements in the list. [1, 3, 5, 8, 9, 10, 11, 15]",
        "response": "\"\"\"\nCreate a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements.\n\"\"\"\n\ndef long_consec_sequence(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\nif __name__ == '__main__':\n    lst = [1, 3, 5, 8, 9, 10, 11, 15]\n    print(long_consec_sequence(lst)) # Output: 4"
    },
    {
        "instruction": "Convert this regex expression from python to java syntax. pattern = r\"[A-Za-z0-9_]+\"",
        "response": "String pattern = \"[A-Za-z0-9_]+\";"
    },
    {
        "instruction": "Construct a for loop in Python to output the numbers from 1 to 5. ",
        "response": "for i in range(1,6):\n  print(i)"
    },
    {
        "instruction": "Create a class in Python called Math that can calculate the average of two numbers. ",
        "response": "class Math:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n \n    def average(self):\n        return (self.x + self.y) / 2"
    },
    {
        "instruction": "What is a Python tuple? ",
        "response": "A Python tuple is an immutable sequence of objects which is ordered and indexed. Tuples are usually used to store collections of data that are related, but may be of different data types. Tuples are used instead of lists because they are more memory efficient and can be used as elements of sets and as keys in dictionaries."
    },
    {
        "instruction": "Write an IF ELSE statement in Python to print either \"Number is even\" or \"Number is odd\" depending on the number input. ",
        "response": "if (num % 2 == 0):\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")"
    },
    {
        "instruction": "Create a JavaScript function that can convert miles to kilometers. ",
        "response": "function convertMilesToKilometers(miles) {\n return miles * 1.60934;\n}"
    },
    {
        "instruction": "Determine if a number is even or odd using JavaScript. n = 7",
        "response": "if(n % 2 == 0) {\n console.log(\"Number is even!\");\n}\nelse {\n console.log(\"Number is odd!\");\n}"
    },
    {
        "instruction": "Create a list comprehension in Python to double each element in the list. list = [1, 2, 3, 4, 5]",
        "response": "result = [x*2 for x in list]"
    },
    {
        "instruction": "Simulate a coin toss in Python and get the results in a list. ",
        "response": "import random\n\nresults = []\nfor i in range(10):\n    if random.random() < 0.5:\n        results.append('heads')\n    else:\n        results.append('tails')\n\nprint(results)"
    },
    {
        "instruction": "Design a function to convert Fahrenheit to Celsius in Python. ",
        "response": "def fahrenheit_to_celsius(f):\n    celsius = (f - 32) * 5/9\n    return celsius"
    },
    {
        "instruction": "Write a JavaScript function which will return the longest palindrome string from a given strinb \"abacdaaadccb\"",
        "response": "function longestPalindrome(str) {\n  let longest = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let temp = helper(str, i, i);\n    if (temp.length > longest.length) {\n      longest = temp;\n    }\n    temp = helper(str, i, i + 1);\n    if (temp.length > longest.length) {\n      longest = temp;\n    }\n  }\n  return longest;\n}\n\nfunction helper(str, left, right) {\n  while (left >= 0 && right < str.length && str[left] === str[right]) {\n    left--;\n    right++;\n  }\n  return str.substring(left + 1, right);\n}"
    },
    {
        "instruction": "Convert the given Python code to Java def foo(a, b):\n    return a*b",
        "response": "public int foo(int a, int b) {\n    return a * b;\n}"
    },
    {
        "instruction": "Rearrange the code to print the hierarchy of students in a Python class students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]",
        "response": "students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]\n\nteachers = []\nstudents_list = []\n\nfor student in students:\n  if student[\"role\"] == \"teacher\":\n    teachers.append(student)\n  else:\n    students_list.append(student)\n\nprint(\"Teachers:\")\nfor teacher in teachers:\n  print(teacher[\"name\"])\n\nprint(\"Students:\")\nfor student in students_list:\n  print(student[\"name\"])"
    },
    {
        "instruction": "Create a Python program to sort of given list of strings in alphabetical order. list_of_strings = [\"apple\", \"banana\", \"cherry\", \"dog\"]",
        "response": "def sort_words(words):\n    return sorted(words)\n\nlist_of_strings_sorted = sort_words(list_of_strings)\nprint(list_of_strings_sorted)"
    },
    {
        "instruction": "Write a Python program to create a new list which contains all even numbers from the given list. list_of_numbers = [1, 2, 3, 4, 5, 6]",
        "response": "def get_even_numbers(numbers):\n    even_numbers = []\n    for n in numbers:\n        if n % 2 == 0:\n            even_numbers.append(n)\n    return even_numbers\n\neven_numbers = get_even_numbers(list_of_numbers)\nprint(even_numbers) # prints [2, 4, 6]"
    },
    {
        "instruction": "Create a Python function to remove all elements of the given list that are equal to the given value. list_of_numbers = [1, 2, 3, 4, 2, 3] \nvalue = 2",
        "response": "def remove_val(numbers, val):\n    result = []\n    for n in numbers:\n        if n != val:\n            result.append(n)\n    return result\n\nlist_without_2 = remove_val(list_of_numbers, value)\nprint(list_without_2) # prints [1, 3, 4, 3]"
    },
    {
        "instruction": "Make a Python program to generate all permutations of a given list. ",
        "response": "def permutations(nums):\n    if len(nums) == 0:\n        return []\n\n    if len(nums) == 1:\n        return [[nums[0]]]\n    \n    perms = []\n\n    for i, n in enumerate(nums):\n        sub_perms = permutations(nums[:i] + nums[i+1:])\n\n        for perm in sub_perms:\n            perms.append([n] + perm)\n\n    return perms"
    },
    {
        "instruction": "Create a Python program to remove all whitespace from the given string. text = \"   This is a    sentence    with some whitespace!   \"",
        "response": "def remove_whitespace(text):\n    return text.replace(\" \", \"\")\n\ntext_without_whitespace = remove_whitespace(text)\nprint(text_without_whitespace) # prints \"Thisisasentencewithsomewhitespace!\""
    },
    {
        "instruction": "Make a Python program to delete elements from a given list at particular indices. list_of_numbers = [0, 1, 2, 3, 4, 5]\nindices = [2, 3, 5]",
        "response": "def remove_elements_at_indices(numbers, indices):\n    for index in sorted(indices, reverse=True):\n        del numbers[index]\n    return numbers\n\nmodified_list = remove_elements_at_indices(list_of_numbers, indices)\nprint(modified_list) # prints [0, 1, 4]"
    },
    {
        "instruction": "What is an exception handling code in Python? ",
        "response": "Exception handling in Python is a process in which errors or exceptions in a program are handled using certain programming construct such as try-except or try-finally blocks so that the program can recover from such exceptions and continue running. Exception handling helps prevent critical errors in the program from crashing the entire program and allows developers to write more robust codes."
    },
    {
        "instruction": "Generate the syntax to declare a variable called 'result' as an integer in Javascript. ",
        "response": "let result = 0;"
    },
    {
        "instruction": "What type of data structure would you use to store key-value pairs in a Python program? ",
        "response": "The data structure to use for key-value pairs in Python is a dictionary. A dictionary is a data type that consists of key-value pairs, and is denoted by {} in Python. Each key has a unique value associated with it that can be accessed using the key. For example, a dictionary called \"person\" could look like this: \n\nperson = {'name':'John', 'age': 32} \n\nThe value of the key \"name\" can be accessed using person['name'] which returns \"John\"."
    },
    {
        "instruction": "Find all substrings of a string that are palindromes in Python. ",
        "response": "def get_all_palindromes(input_string):\n    palindromes = []\n    for substring_length in range(len(input_string)):\n        for i in range(len(input_string) - substring_length + 1):\n            sub_string = input_string[i: i + substring_length]\n            if sub_string == sub_string[::-1]:\n                palindromes.append(sub_string)\n    return palindromes\n\n# Usage\npalindromes = get_all_palindromes(\"banana\")\nprint(palindromes) # ['a', 'ana', 'anana', 'b', 'na', 'nana']"
    },
    {
        "instruction": "Write an algorithm in JavaScript to return the length of the longest word in a string. let str = \"The quick brown fox jumped over the lazy dog.\"",
        "response": "const findLongestWord = (str) => {\n  let longestWord = \"\";\n  let wordsArr = str.split(\" \");\n\n  for(let i = 0; i < wordsArr.length; i++){\n    if (wordsArr[i].length > longestWord.length) {\n      longestWord = wordsArr[i];\n    }\n  }\n\n  return longestWord.length;\n}\n\nfindLongestWord(str); //6"
    },
    {
        "instruction": "Create an algorithm in Python to calculate the compound interest ",
        "response": "def compound_interest(principal, rate, time): \n  \n    # Calculates compound interest\n    CI = principal * (pow((1 + rate / 100), time))  \n    return CI \n  \n# Driver Code \nprincipal=8000\nrate=3\ntime=5\n  \nprint(\"Compound interest is\", compound_interest(principal, rate, time))"
    },
    {
        "instruction": "Create a loop in Python that counts down from 10 to 0. ",
        "response": "for i in range(10, 0, -1):\n  print(i)"
    },
    {
        "instruction": "Create a function in python that takes a string and returns a new string with the same letter count but in ascending order word = “tweet”",
        "response": "def ascending_order(word):\n    list = []\n    for letter in word:\n        list.append(letter)\n    sorted_list = sorted(list)\n    return \"\".join(sorted_list)"
    },
    {
        "instruction": "Create a basic JavaScript code to input three numbers and store the largest one in a variable. num1 = 10\nnum2 = 20\nnum3 = 30",
        "response": "let max;\nif (num1 > num2) {\n max = num1;\n} else {\n max = num2;\n}\nif (max < num3) {\n max = num3;\n}"
    },
    {
        "instruction": "Generate a shorthand method in Python to replace all 0s with 1. input_list = [1, 0, 1, 0, 0]",
        "response": "def replace_zeros(input_list): \n    output_list = [x if x != 0 else 1 for x in input_list] \n    return output_list"
    },
    {
        "instruction": "Generate a method in Python to sort a given list of dictionaries. list_dict = [{'name': 'a', 'age': 23}, {'name': 'b', 'age': 19}, {'name': 'c','age': 36}]",
        "response": "def dict_sort(list_dict): \n    sorted_dict = sorted(list_dict, key = lambda x: x['age']) \n    return sorted_dict"
    },
    {
        "instruction": "Write a simple script in JavaScript to reverse a string. text = “hello world”",
        "response": "function reverseString(text) {\n return text.split(\"\").reverse().join(\"\");\n}\n\nconsole.log(reverseString(text));"
    },
    {
        "instruction": "Modify the given Python code to calculate the sum of the given list and print the output. list = [1,2,3,4,5]",
        "response": "def sumList(list): \n    sum = 0\n    for i in list:\n        sum = sum + i\n    return sum\n\nprint(sumList(list))"
    },
    {
        "instruction": "Compose a script in JavaScript for finding the greatest common divisor of two numbers. x = 36;\ny = 60;",
        "response": "function findGCD(x, y) {\n  if (x === 0)\n    return y;\n  if (y === 0)\n    return x;\n  if (x === y)\n    return x;\n  if (x > y)\n    return findGCD(x - y, y);\n  return findGCD(x, y - x);\n}\nconsole.log(findGCD(x, y));"
    },
    {
        "instruction": "What is the standard indentation size for Python code? ",
        "response": "The standard indentation size for Python code is 4 spaces."
    },
    {
        "instruction": "Create a function my_func in Python that accepts three integers x, y and z as parameters and returns the maximum. ",
        "response": "def my_func(x, y, z):\n  max_num = max(x, y, z)\n  return max_num"
    },
    {
        "instruction": "Create a function 'double_up()' in JavaScript that takes an array of integers as input and returns an array with each of the elements doubled. [2, 4, 6]",
        "response": "function double_up(arr) {\n    // Declare a new array\n    let result = [];\n\n    // Loop through input array\n    for (let i=0; i < arr.length; i++) {\n        result.push(arr[i] * 2);\n    }\n\n    //Return the new array \n    return result;\n}"
    },
    {
        "instruction": "Implement Quicksort in Python to sort this list of integers. [8, 5, 3, 9, 1]",
        "response": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_arr = quicksort([8, 5, 3, 9, 1])\n \nprint(sorted_arr)"
    },
    {
        "instruction": "Write an event handler for a button in JavaScript that prints 'Hello World!' ",
        "response": "// Declare a function `printHelloWorld` \nfunction printHelloWorld () {\n  console.log(\"Hello World!\");\n}\n\n// Add the event handler to the button \ndocument.getElementById(\"myButton\").addEventListener(\"click\", printHelloWorld);"
    },
    {
        "instruction": "Take the following array of numbers and write a JavaScript program that sorts the array [3, 4, 8, 9, 5, 6, 2]",
        "response": "function sortArray(arr) {\n    let len = arr.length;\n    for(let i = len-1; i>=0; i--){\n        for(let j = 1; j<=i; j++){\n            if(arr[j-1] > arr[j]){\n                let temp = arr[j-1];\n                arr[j-1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n}"
    },
    {
        "instruction": "Given an array of strings, write a JavaScript function to filter out all elements that are not palindromes. [\"a\", \" racecar\", \" abba \", \"civic\", \" pot op \"]",
        "response": "function filterPalindromes(arr) {\nreturn arr.filter(element => {\n  let strippedString = element.replace(/\\s+/g, \"\");\n  let reversedString = strippedString.split('').reverse().join('');\n  return strippedString == reversedString;\n});\n}\n\nconsole.log(filterPalindromes([\"a\", \" racecar\", \" abba \", \"civic\", \" pot op \"])); // Output: [\" racecar\", \"abba\", \"civic\", \"pot op\"]"
    },
    {
        "instruction": "How can you access a requested item from an URL in JavaScript? ",
        "response": "In order to access a requested item from an URL in JavaScript you can use the URL API such as the URL.searchParams API. The API allows you to parse the query string and retrieve specific items, such as variables and their values, from the URL. For example, if the URL was \"http://example.com/?key1=value1&key2=value2\" you can use the following code to get the value of \"key1\":\n\nvar url = new URL(\"http://example.com/?key1=value1&key2=value2\");\nvar value1 = url.searchParams.get(\"key1\");\n// value1 will contain 'value1'"
    },
    {
        "instruction": "What are the advantages of using a while loop over a for loop in Python? ",
        "response": "The main advantages of using a while loop over a for loop in Python are that it is more concise and allows the user to have better control over the iteration process. For example, the while loop allows the user to specify an exit condition if a certain condition is met, mid-way through the loop. Furthermore, while loop allows the user to dynamically change the number of times the loop is executed based on a condition or an expression. This is not possible in for loops as the user needs to specify the exact number of iterations beforehand."
    },
    {
        "instruction": "Write a code to convert HTML to Markdown using Python. ",
        "response": "import markdown\nimport re\n\ndef convert_html_to_markdown(html):\n  lines = html.split('\\n')\n  for line in lines:\n    line = markdown.markdown(line)\n    # remove HTML tags\n    line = re.sub(r'<[^>]*>', '', line)\n    # strip whitespace\n    line = line.strip()\n    print line\n\nhtml = '<p>This is an example of HTML text.</p>'\nconvert_html_to_markdown(html)\n\n# Output\nThis is an example of HTML text."
    },
    {
        "instruction": "How can you access an element in an array using JavaScript? ",
        "response": "In order to access an element in an array using JavaScript, you can use the index of the element. The index is the position of the element in the array. For example, if the array is [4, 8, 15], then you can use the following code to access the element at index 1 (i.e. 8):\n\nvar array = [4, 8, 15];\nvar element = array[1];\n// The variable `element` now contains the value 8"
    },
    {
        "instruction": "What is the maximum length of a string in Python? ",
        "response": "The maximum length of a string in Python is sys.maxsize, which is typically 2^63 - 1 on a 64-bit machine. This means that the maximum length of a string is 18,446,744,073,709,551,615 characters."
    },
    {
        "instruction": "Compute the area of the circle where the radius is 5 inches in Python. ",
        "response": "import math \n  \nradius = 5 \narea = math.pi * (radius**2) \n\nprint(\"The area of the circle is\", area)"
    },
    {
        "instruction": "Use the provided dataset to create a Corpus of English words in Python. https://storage.googleapis.com/download.tensorflow.org/data/grammar_corpus.txt",
        "response": "f = open('grammar_corpus.txt', 'r')\n\n# Create an empty list to store the corpus\ncorpus = []\n\n# Loop through the file line by line \nfor line in f: \n    # Split the line into words \n    words = line.lower().strip().split()\n    \n    # Check if the word is an english word \n    if words[1].isalpha(): \n        corpus.append(words[1]) \n \nf.close()\nprint(corpus)"
    },
    {
        "instruction": "Write a Python method to extract only the numeric values from a string. ",
        "response": "def extract_num(string): \n    return [word for word in string.split() if word.isdigit()]"
    },
    {
        "instruction": "Design a function using Python to remove all vowels from a string. ",
        "response": "def remove_vowels(string):\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char not in vowels:\n            new_string += char\n            \n    return new_string"
    },
    {
        "instruction": "Code a function in Python to generate random numbers within a given range. ",
        "response": "import random\n\ndef random_num_gen(start, end):\n    return random.randint(start, end)"
    },
    {
        "instruction": "Write a web crawler in Python to extract only the text content from a given website. ",
        "response": "# import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# define the web crawler\ndef web_crawler(url):\n    # make the request to the specified url\n    page = requests.get(url)\n    page_content = page.content\n    # parse the received content\n    soup = BeautifulSoup(page_content, 'lxml')\n    text_content = soup.find_all(text=True)\n    # return only the text content\n    return [s.strip() for s in text_content if s.strip()]"
    },
    {
        "instruction": "Write a Javascript program to convert a given string into all uppercase characters. String: \"Welcome to the World !\"",
        "response": "let str = \"Welcome to the World !\";\nlet upperCaseStr = str.toUpperCase();\nconsole.log(upperCaseStr);\n\n# Output: \"WELCOME TO THE WORLD !\""
    },
    {
        "instruction": "Create a stand-alone Python script to print the sum of all the divisors of a number. ",
        "response": "def printDivisorSum(num): \n   \n    sum = 0\n    i = 1\n  \n    while i <= num / 2: \n  \n        if num % i == 0: \n            sum = sum + i \n        i = i + 1\n  \n    print(\"Sum of divisors of \" + str(num) + \" is \" + str(sum)) \n\nnum = 16\nprintDivisorSum(num)"
    },
    {
        "instruction": "Construct a Python program to print the numbers from 1 to 10 on a single line. ",
        "response": "for i in range(1,11):\n  print(i, end=\" \")"
    },
    {
        "instruction": "Generate a hash of a given string using the SHA-256 algorithm in Python. string = \"Hello World\"",
        "response": "import hashlib\n\nstring = \"Hello World\"\nresult = hashlib.sha256(string.encode()).hexdigest()\nprint(result)  # output: \"a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\""
    },
    {
        "instruction": "Create a Python program that accepts input from the user and prints out the result for Fibonacci sequence ",
        "response": "def print_fibonacci(n):\n  a = 0\n  b = 1\n  print('Fibonacci sequence:')\n  while a < n:\n    print(a, end=' ')\n    tmp_var = a\n    a = b\n    b = tmp_var + b\n\nnum = int(input(\"Enter positive number: \"))\nprint_fibonacci(num)"
    },
    {
        "instruction": "Design a program that automatically refactors a python code to improve readability and reduce complexity. def myfunc():\nx = 1\ny = 5\nreturn x + y",
        "response": "def myfunc():\n    x = 1\n    y = 5\n    return x + y"
    },
    {
        "instruction": "Write a JavaScript program for finding the sum of two numbers. numbers: 10, 15",
        "response": "var first = 10; \nvar second = 15; \n\n// finding sum of two numbers \nvar sum = first + second; \n  \n// printing the result \nconsole.log(\"Sum of two numbers is \" + sum);"
    },
    {
        "instruction": "Write a JavaScript code snippet to find the greatest of three given numbers. ",
        "response": "let a = 10;\nlet b = 20;\nlet c = 23;\n\n// greatest of three numbers\nlet greatest = 0;\n\nif(a >= b && a >= c) {\n    greatest = a;\n} else if(b >= a && b >= c) {\n    greatest = b;\n} else {\n    greatest = c;\n}\n\nconsole.log('The greatest number among the given numbers is ' + greatest);"
    },
    {
        "instruction": "Develop a function in python to check if a given word can be formed with the given set of letters. Set of letters: 'abeos'\nWord: 'seabed'",
        "response": "def can_form_word(set_letters, word):\n    flag = True\n    for letter in word:\n        if letter not in set_letters:\n            flag = False\n            break\n    return flag"
    },
    {
        "instruction": "Develop a code in python to list the elements present in a given dictionary. dictionary = {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"location\": \"London\"\n}",
        "response": "def list_elements(dict):\n    for item in dict:\n        print(item, \":\", dict[item])\n\nlist_elements(dictionary)\n\n# Output:\n# name : John\n# age : 20\n# location : London"
    },
    {
        "instruction": "Create a JavaScript program to loop the following array array = [2, 4, 6, 8, 10];",
        "response": "let array = [2, 4, 6, 8, 10];\n\nfor (let i=0; i<array.length; i++) {\n  console.log(array[i]);\n}"
    },
    {
        "instruction": "Create a JavaScript Program to sort an unsorted array array = [2, 4, 1, 6, 8, 9, 5];",
        "response": "let array = [2, 4, 1, 6, 8, 9, 5];\n\nlet sorted_array = array.sort((a, b) => a-b);\n\nconsole.log(sorted_array); // [1, 2, 4, 5, 6, 8, 9]"
    },
    {
        "instruction": "Create a function in Python which takes a string and an integer n as input and returns a string with the first n characters of the given string. ",
        "response": "def get_first_n_chars(string, n):\n    return string[:n]"
    },
    {
        "instruction": "Write a Python program to reverse each word of a given sentence. This is a test",
        "response": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\nprint(reverse_words(\"This is a test\")) # Output: sihT si a tset"
    },
    {
        "instruction": "Create a function in Python which takes an integer n and an unsorted list of numbers as input and returns the nth smallest number in the list. [5, 8, 1, 9, 4], 3",
        "response": "def nth_smallest(nums, n):\n    sorted_nums = sorted(nums)\n    return sorted_nums[n-1]\n\nprint(nth_smallest([5, 8, 1, 9, 4], 3)) # Output: 5"
    },
    {
        "instruction": "Write a function in JavaScript that takes two arguments and adds them. ",
        "response": "function add(a, b) {\n   return a + b;\n}"
    },
    {
        "instruction": "Create a function in JavaScript for reversing the order of the characters in a given string. var str = \"TestString\";",
        "response": "function reverseString(str) {\n var reversedStr = '';\n for (var i = str.length - 1; i >= 0; i--){\n reversedStr += str[i];\n }\n return reversedStr;\n}\nconsole.log(reverseString(str)); // gnirtSEtsT"
    },
    {
        "instruction": "Create the following table using the Python language: ",
        "response": "table = [[\"Name\", \"Age\", \"Gender\"],[\"John\", 20, \"Male\"], [\"Anna\", 18, \"Female\"],[\"Adam\", 22, \"Male\"], [\"Sophie\", 19, \"Female\"]]"
    },
    {
        "instruction": "Come up with a python code to find the mean of a list of numbers. nums = [78, 79, 79, 79, 79, 80]",
        "response": "total = 0\nfor num in nums:\n    total += num\nmean = total/len(nums)\nprint(mean)"
    },
    {
        "instruction": "Convert the following SQL query to its equivalent Python expression.\n\nSELECT name FROM students WHERE age > 18 ",
        "response": "[student['name'] for student in students if student['age'] > 18]"
    },
    {
        "instruction": "Develop a Python function to append a number with zeros to a given string up to a maximum number of characters. string = \"some_string\", max_len = 10",
        "response": "def append_num_with_zeros(string, max_len):\n    \"\"\"Append a number with zeros to a given string up to a maximum number of characters.\"\"\"\n    # Convert string to list\n    ls = list(string)\n    # Calculate number of zeros required to append\n    num_zeros = max_len - len(string)\n    # Append zeros\n    for i in range(num_zeros):\n        ls.append('0')\n    # Convert list back to string\n    return ''.join(ls)"
    },
    {
        "instruction": "Create a function to calculate the sum of numbers from a given list in Python. ",
        "response": "def sum_list(list):\n    \"\"\"Calculate the sum of numbers from a given list\"\"\"\n    # Initialize sum\n    s = 0\n    # Sum the list\n    for number in list:\n        s += number\n    # Return the result\n    return s"
    },
    {
        "instruction": "Create a code snippet to print the star pattern below in Python. ",
        "response": "# Print the pattern \nrows = 5\nfor i in range(0, rows): \n    for j in range(0, i + 1): \n        print(\"*\", end=' ') \n    print(\"\\r\")"
    },
    {
        "instruction": "Write a code snippet to get the remainder when 34 is divided by 5 in JavaScript. ",
        "response": "let num = 34;\nlet divisor = 5;\nlet remainder = num % divisor;\nconsole.log(remainder); // prints 4"
    },
    {
        "instruction": "Write a JavaScript code snippet that creates a pop-up window with the text \"Welcome!\". ",
        "response": "window.alert('Welcome!');"
    },
    {
        "instruction": "Create a Python function that prints all the values in a dictionary. Dictionary:  { \"a\": 1, \"b\": 2, \"c\": 3 }",
        "response": "def printDictValues(dict):\n    for key, value in dict.items():\n        print(value)\n\nprintDictValues({\"a\": 1, \"b\": 2, \"c\": 3})"
    },
    {
        "instruction": "What data type in JavaScript corresponds to a finite set of distinct values? ",
        "response": "In JavaScript the data type that corresponds to a finite set of distinct values is an Enum. An Enum is a collection of related values that can be represented as a set of named constants. These constants can be used to represent a single value in many different forms. Each Enum value can be represented numerically or by a String literal value."
    },
    {
        "instruction": "What is the JavaScript syntax for declaring a variable with the value of \"hello\"? ",
        "response": "The JavaScript syntax for declaring a variable with the value of \"hello\" is  \"var myVariable= 'hello';\"."
    },
    {
        "instruction": "Write a function in JavaScript that takes the two given arrays, A and B, and merges them into a single array. let A = [1, 2, 3];\nlet B = [4, 5, 6];",
        "response": "function mergeArrays(A, B) {\n  let merged = [];\n  let indexA = 0;\n  let indexB = 0;\n  while (indexA < A.length && indexB < B.length) {\n    merged.push(A[indexA], B[indexB]);\n    indexA++;\n    indexB++;\n  }\n  if (indexA < A.length) {\n    for (let i=indexA; i < A.length; i++) {\n      merged.push(A[i]);\n    }\n  }\n  if (indexB < B.length) {\n    for (let i=indexB; i < B.length; i++) {\n      merged.push(B[i]);\n    }\n  }\n  return merged;\n}"
    },
    {
        "instruction": "What is the command to run a Python script from the command line? ",
        "response": "The command to run a Python script from the command line is `python filename.py`."
    },
    {
        "instruction": "Create a function to compare two strings and output their similarity score. string_1 = \"python\"\nstring_2 = \"coding\"",
        "response": "def compare_strings(string_1, string_2):\n    similarity_score = 0\n    n = min(len(string_1), len(string_2))\n    for i in range(n): \n        if string_1[i] == string_2[i]: \n            similarity_score += 1\n    return similarity_score"
    },
    {
        "instruction": "Construct a regular expression pattern in Python that matches all emails. ",
        "response": "pattern = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,63}$\""
    },
    {
        "instruction": "Design an algorithm in JavaScript that finds the most frequent element in an array. ",
        "response": "function mostFrequentElem(arr) {\n  let countMap = new Map();\n\n  for (let i = 0; i < arr.length; i++) {\n    if (!countMap.has(arr[i])) {\n      countMap.set(arr[i], 1);\n    } else {\n      let val = countMap.get(arr[i]);\n      countMap.set(arr[i], val + 1);\n    }\n  }\n  let maxCount = 1;\n  let maxElem;\n  for (let [key, val] of countMap.entries()) {\n    if (val > maxCount) {\n      maxCount = val;\n      maxElem = key;\n    }\n  }\n  return maxElem;\n}"
    },
    {
        "instruction": "Explain in detail what is the significance of a local variable in Python ",
        "response": "A local variable in Python is a variable that is declared within a function or a class. It is a variable that only exists in the context of that function or class, and cannot be accessed outside the function or class in which it is declared. Local variables are also referred to as \"lexical\" or \"automatic\" variables because they are automatically scoped to the function or class in which they are declared. They are different from global variables, which are available to the entire program. Local variables are helpful in limiting the scope of a variable, which means that the variable is only accessible in the function or class in which it is declared. This can help make code more efficient, clear, and secure."
    },
    {
        "instruction": "Write a code snippets in Python to print the contents of a dictionary. {\"key1\": \"value1\", \"key2\": \"value2\"}",
        "response": "for key, value in dict.items():\n   print(\"Key: {}, Value: {}\".format(key, value))"
    },
    {
        "instruction": "Construct an object literal in JavaScript to describe a person's name and age. ",
        "response": "let person = {\n  name: \"John\",\n  age: 20\n};"
    },
    {
        "instruction": "Find the indices of the two numbers in an array that have the sum of a given number using JavaScript. let arr = [2, 5, 11, 15],\n    targetSum = 16;",
        "response": "function twoNumSum(arr, targetSum) {\n  let hash = {};\n\n  for(let i = 0; i < arr.length; i++){\n    let current = arr[i];\n    \n    if(hash[current] !== undefined) return [hash.current, i];\n    else hash[targetSum - current] = i;\n  }\n\n  return [];\n}"
    },
    {
        "instruction": "Build an HTML table with 3 columns and 5 rows using JavaScript. ",
        "response": "var htmlTable = '<table border=\"1\">';\n\n// Create the table rows \nfor (var i = 0; i < 5; i++){\n  htmlTable += '<tr>';\n\n  // Create the table columns\n  for (var j = 0; j < 3; j++){\n    htmlTable += \"<td></td>\";\n  }\n \n  htmlTable += \"</tr>\";\n}\n \nhtmlTable += \"</table>\";"
    },
    {
        "instruction": "Construct an array of objects in JavaScript to represent a list of users. ",
        "response": "let users = [\n  {\n    username: 'John',\n    age: 20\n  },\n  {\n    username: 'Jane',\n    age: 22\n  },\n  {\n    username: 'Jacob',\n    age: 25\n  }\n];"
    },
    {
        "instruction": "How do you compare two numbers, num1 and num2, in python? ",
        "response": "We can compare two numbers, num1 and num2, in Python using the comparison operators. These are the equality operators (== and !=), the relational operators (> and <) and the logical operators (and, or, not). For example, ``num1 == num2`` checks if two numbers are equal, ``num1 > num2`` checks if num1 is greater than num2, and ``num1 < num2`` checks if num1 is less than num2. We can also use logical operators like ``num1 > num2 and num2 < num3``, which checks if num1 is greater than num2 and num2 is less than num3."
    },
    {
        "instruction": "Convert the following python code to an equivalent JavaScript code. for item in items:\n    print(item)",
        "response": "items.forEach(item => {\n    console.log(item);\n});"
    },
    {
        "instruction": "What is the meaning of the modulo operator in python? ",
        "response": "In Python, the modulo operator (also known as the “remainder” or “modulus” operator) is the percentage sign (%). It is used to calculate the remainder after division of one number by another. For example, the expression “7 % 3” will evaluate to 1. This means that the remainder after 7 is divided by 3 is 1. Generally, the syntax for this operation is “a % b”, where a and b are numbers. The result of this operation is the remainder after a is divided by b."
    },
    {
        "instruction": "Write a JavaScript function that counts the number of times a given character appears in a string. ",
        "response": "const countCharacter = (str, char) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === char) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// example call\nlet str = \"hello world\";\nlet char = \"l\";\nlet count = countCharacter(str, char);\nconsole.log(count); // 3"
    },
    {
        "instruction": "Design a web scraper in Python to extract the text content from Wikipedia articles. ",
        "response": "The web scraper can be designed using the Python library BeautifulSoup. The scraper can take a url of a wiki article as an argument and extract the text content using the method find_all('p'). The text content of the article can then be extracted using the get_text() method."
    },
    {
        "instruction": "Read the given Python code and generate the output for the following input. my_list = range(1, 11)",
        "response": "my_list = range(1, 11)\noutput = 0\nfor i in my_list:\n output += i\nprint(output) #55"
    },
    {
        "instruction": "Edit the given JavaScript code to convert the input string’s first letter to uppercase. let str = \"hello world\";",
        "response": "let str = \"hello world\";\nstr = str[0].toUpperCase() + str.slice(1);"
    },
    {
        "instruction": "Write a Python program to count how many times a given element appears in the list. my_list = [1, 2, 5, 4, 2, 1, 5]",
        "response": "my_list = [1, 2, 5, 4, 2, 1, 5]\ncount = 0\nfor i in my_list:\n  if i == 5:\n    count += 1\nprint(count) #2"
    },
    {
        "instruction": "Read the following JavaScript code and add an appropriate input field for the function. ",
        "response": "function reverse_string(string){\n   let reversed = '';\n   for(let i = string.length - 1; i >= 0; i--){\n      reversed += string[i];\n   }\n   return reversed;\n}\nlet input = \"hello world\";\nconsole.log(reverse_string(input)); // dlrow olleh"
    },
    {
        "instruction": "Write a JavaScript function to generate a random string of 8 characters using lowercase alphabets and digits. ",
        "response": "function getRandomString(){\n    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let str = '';\n    for (let i=0; i<8; i++)\n        str += chars.charAt(Math.floor(Math.random() * chars.length));\n    return str;\n}"
    },
    {
        "instruction": "Suggest two ways to loop through a python dictionary ",
        "response": "1. Using for loop: \n\nfor key, value in dict.items(): \n    # Do something with key and value\n\n2. Using while loop:\n\nkeys = list(dict.keys()) \ni = 0\nwhile i < len(keys):\n    key = keys[i] \n    value = dict[key]\n    # Do something with key and value\n    i += 1"
    },
    {
        "instruction": "Generate a Python Fibonacci sequence of length n n = 7",
        "response": "def fibonacci_sequence(n): \n    nums = []\n    a, b = 0,1\n    for i in range(n): \n        nums.append(a)\n        a, b = b, a + b \n    return nums\n\nprint(fibonacci_sequence(7))"
    },
    {
        "instruction": "Using the JavaScript language, write a code snippet to display the current date. ",
        "response": "var today = new Date() \nvar date = today.getDate() + \"/\" + (today.getMonth()+1) + \"/\" + today.getFullYear() \nconsole.log(date)"
    },
    {
        "instruction": "Summarize the features of the Python pandas library. ",
        "response": "Pandas is a Python library used for data manipulation and analysis. It provides an efficient and flexible data structure for labeled and relational data called DataFrame, and operations for groupby aggregation, merging, joining, reshaping, and other manipulations. It also offers statistical functions for descriptive statistics, optimization, plotting, and visualization. Finally, pandas is designed to be fast and efficient, with powerful options for indexing, handling missing data, time-series, and automatic conversion of data."
    },
    {
        "instruction": "Write a python program to create a class called cube. ",
        "response": "class Cube:\n    def __init__(self, length, width, height):\n        self.length = length\n        self.width = width\n        self.height = height\n\n    def calculate_volume(self):\n        return self.length * self.width * self.height"
    },
    {
        "instruction": "Create a javascript class that takes in two arguments and prints them out when called. ",
        "response": "class PrintNumber{\n    constructor(num1, num2){\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n    printNumber(){\n        console.log(`${this.num1}, ${this.num2}`);\n    }\n}"
    },
    {
        "instruction": "Explain the main differences between Java and Python. ",
        "response": "The main differences between Java and Python include speed of development, execution speed, type safety, readability and syntax ease, standard libraries, and code scalability. Java is more popular in enterprise applications and is generally faster to develop than Python because of its statically typed language. Java has a JVM (Java Virtual Machine) making it faster to compile and execute than Python, which is dynamically typed. Java is more type-safe and easier to debug, while Python is more readable and easier to learn. Python also has wider range of standard libraries than Java, making development faster. Python is more scalable than Java, making it applicable for larger projects."
    },
    {
        "instruction": "Create a simple calculator program in Python. ",
        "response": "def add(num1, num2): \n  return num1 + num2 \n\ndef subtract(num1, num2): \n  return num1 - num2 \n\ndef multiply(num1, num2): \n  return num1 * num2 \n\ndef divide(num1, num2): \n  return num1 / num2 \n\n# Infinite loop until user chooses to exit \nwhile True: \n    print(\"Select operation:\") \n    print(\"1. Add\") \n    print(\"2. Subtract\") \n    print(\"3. Multiply\") \n    print(\"4. Divide\")\n    print(\"5. Exit\") \n    choice = input(\"Enter choice (1/2/3/4):\") \n  \n    # Check if choice is one of the four options \n    if choice in ('1', '2', '3', '4', '5'): \n        num1 = float(input(\"Enter first number: \")) \n        num2 = float(input(\"Enter second number: \")) \n  \n        if choice == '1': \n            print(num1, \"+\", num2, \"=\", add(num1, num2)) \n\n        elif choice == '2': \n            print(num1, \"-\", num2, \"=\", subtract(num1, num2)) \n  \n        elif choice == '3': \n            print(num1, \"*\", num2, \"=\", multiply(num1, num2)) \n\n        elif choice == '4': \n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        elif choice == '5':\n            break\n        else: \n            print(\"Invalid Input\") \n    else: \n        print(\"Invalid Input\")"
    },
    {
        "instruction": "Write a JavaScript code snippet to check for an empty array. let array = [];",
        "response": "if (array.length === 0) {\n   console.log('Array is empty');\n}"
    },
    {
        "instruction": "Create a JavaScript function to check if a number is divisible by 4. ",
        "response": "const divisibleBy4 = (num) => {\n    if (num % 4 === 0) \n        return true;\n    else\n        return false;\n};"
    },
    {
        "instruction": "Fix this indentation error in the following Python code def double(number):\n return number * 2",
        "response": "def double(number):\n    return number * 2"
    },
    {
        "instruction": "Make a REST API call to get the latest version of Python. ",
        "response": "import requests\n\ndef get_latest_python_version():\n    url = 'https://www.python.org/ftp/python/'\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        html = response.text\n        start_index = html.find('<a href=\"')\n        \n        if start_index != -1:\n            end_index = html.find('/\">', start_index + 1)\n\n            if end_index != -1:\n                version = html[start_index + 9:end_index]\n                return version\n\n    return None"
    },
    {
        "instruction": "Construct an expression in javascript to reverse a string. ",
        "response": "let reverseString = (str) => str.split('').reverse().join('');"
    },
    {
        "instruction": "Change the following code to implement the Observer Design Pattern in Python. class Publisher: \n    def __init__(self): \n        self.observers = [] \n  \n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            observer.notify(self, *args, **kwargs)",
        "response": "class Publisher: \n\n    def __init__(self): \n        self.observers = [] \n        self.state = None\n    \n    def getState(self): \n        return self.state \n\n    def setState(self, state): \n        self.state = state \n        self.notifyAll() \n\n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            if args and kwargs: \n                observer.notify(self, *args, **kwargs) \n            else: \n                observer.notify(self)"
    },
    {
        "instruction": "Declare a variable named 'items' and assign it a list containing the elements ‘pen’, ‘paper’ and ‘pencil’ in Python. ",
        "response": "items = ['pen', 'paper', 'pencil']"
    },
    {
        "instruction": "Write a code in Python for comparing two strings without using a built-in function. string1 = \"apple\"\nstring2 = \"orange\"",
        "response": "string1 = \"apple\" \nstring2 = \"orange\" \nlength = min(len(string1), len(string2))\n\nfor i in range(length):\n  if string1[i] != string2[i]:\n    result = string1[i] < string2[i]\n    break\n\nif result == True:\n  print(string1 + \" follows \" + string2 + \" alphabetically.\")\nelse:\n  print(string2 + \" follows \" + string1 + \" alphabetically.\")"
    },
    {
        "instruction": "Write a JavaScript function to compare two strings without using any built-in functions. ",
        "response": "function compareStrings(str1, str2) {\n    if (str1.length !== str2.length) {\n        return false;\n    }\n\n    for (let i === 0; i < str1.length; i++) {\n        if (str1[i] !== str2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}"
    },
    {
        "instruction": "Construct a for loop in Python to find the sum of all the the numbers between 15 and 30 (inclusive). ",
        "response": "total_sum = 0 \nfor num in range(15, 31): \n    total_sum += num \nprint(total_sum)"
    },
    {
        "instruction": "Construct a class in Python that contains three variables and two methods. ",
        "response": "class myClass():\n    def __init__(self):\n        self.var1 = \"Hello\"\n        self.var2 = \"World!\"\n        self.var3 = 5\n    def method1(self):\n        print(self.var1)\n    def method2(self):\n        print(self.var2)"
    },
    {
        "instruction": "Convert the following SQL statement into a Python def() and write the code. SELECT order_id, order_time, subtotal FROM orders WHERE order_time > NOW()",
        "response": "def get_order_info(order_time):\n    query = \"SELECT order_id, order_time, subtotal FROM orders WHERE order_time > %s\"\n    cursor.execute(query, (order_time, ))\n    rows = cursor.fetchall()\n    return rows"
    },
    {
        "instruction": "Write an algorithm in Python to find the number of distinct words in a given sentence. \"This is a test sentence.\"",
        "response": "def count_distinct_words(sentence):\n    distinct_words = set([word.lower() for word in sentence.split()])\n    return len(distinct_words)\n    \nprint(count_distinct_words(\"This is a test sentence.\")) # Outputs: 4"
    },
    {
        "instruction": "Edit the following JavaScript code to make the function asynchronous. function getData() {\n  // Code to fetch data\n}",
        "response": "function getData() {\n  // Code to fetch data\n  return new Promise((resolve, reject) => {\n    // Fetch data\n    if (/* success */) {\n      resolve(data)\n    } else {\n      reject(err)\n    }\n  })\n}"
    },
    {
        "instruction": "Write a Python program to get the IP address from a given hostname google.com",
        "response": "import socket\n\ndef get_ip(hostname):\n    return socket.gethostbyname(hostname)\n\nprint(get_ip('google.com'))"
    },
    {
        "instruction": "Write a Python code snippet to evaluate an expression stored as a string. expression = '2+2*2'",
        "response": "def evaluate_expression(expression):\n    return eval(expression)\n\nprint(evaluate_expression(expression))"
    },
    {
        "instruction": "Generate a URL to search the desired content on Google using Python. Search Keyword: Covid-19 Pandemic",
        "response": "import urllib\nurl = 'https://www.google.com/search?q=Covid-19+Pandemic'\nurllib.request.urlopen(url)"
    },
    {
        "instruction": "Construct a JSON structure from its respective python dictionaries a = {\n  \"name\": \"John\",\n  \"age\": 32\n}\n\nb = {\n  \"cars\": [\"Ford\", \"BMW\", \"Fiat\"]\n}",
        "response": "import json\n\ndata = {**a, **b}\njson_data = json.dumps(data)"
    },
    {
        "instruction": "Write a function to implement heap sort in JavaScript. ",
        "response": "function heapSort(arr) {\n let n = arr.length;\n \n for (let i = Math.floor(n / 2 - 1); i >= 0; i--) {\n heapify(arr, n, i);\n }\n \n for (let i = n - 1; i > 0; i--) {\n [arr[0], arr[i]] = [arr[i], arr[0]];\n heapify(arr, i, 0);\n }\n \n return arr;\n}\n\nfunction heapify(arr, n, i) {\n let largest = i;\n let left = 2 * i + 1;\n let right = 2 * i + 2;\n\n if (left < n && arr[left] > arr[largest])\n largest = left;\n \n if (right < n && arr[right] > arr[largest])\n largest = right;\n \n if (largest !== i) {\n [arr[i], arr[largest]] = [arr[largest], arr[i]];\n heapify(arr, n, largest);\n }\n}"
    },
    {
        "instruction": "Edit the given function in Python to convert the given list of integers a into a multidimensional list of size len(a) X len(a). def convert_to_multi(a):\n    return [a]",
        "response": "def convert_to_multi(a):\n    result = []\n    for i in range(len(a)):\n        row = []\n        for j in range(len(a)):\n            row.append(a[j])\n        result.append(row)\n    return result"
    },
    {
        "instruction": "Find the data type of the variable x in the following JavaScript code snippet? let x = \"Hello World\";",
        "response": "String."
    },
    {
        "instruction": "Create an object in JavaScript to save the particular book detail. Title: Lord of the Rings\nAuthor: J.R.R. Tolkien",
        "response": "let book = { \n    title: 'Lord of the Rings', \n    author: 'J.R.R. Tolkien'\n};"
    },
    {
        "instruction": "Create a Python class 'Calculator' with two methods: 'add' and 'sub'. ",
        "response": "class Calculator:\n def add(self, x, y):\n  return x + y\n\n def sub(self, x, y):\n  return x - y"
    },
    {
        "instruction": "Write a function in Python to encourage user input by prompting the user \"Please enter a valid email address.\" ",
        "response": "def get_email(): \n  email = input(\"Please enter a valid email address: \")\n  return email"
    },
    {
        "instruction": "Sort an array in descending order using JavaScript. [50, 34, 97, 56, 12, 99]",
        "response": "let arrayToSort = [50, 34, 97, 56, 12, 99];\narrayTo Sort.sort((a, b) => b - a);\nconsole.log(arrayToSort); // [99, 97, 56, 50, 34, 12]"
    },
    {
        "instruction": "Write a JavaScript program to convert a given number of seconds into the equivalent time in days, hours, minutes and seconds. 15000",
        "response": "let totalSeconds = 15000;\nlet days = Math.floor(totalSeconds / (24*60*60));\nlet remainingSeconds = totalSeconds % (24*60*60);\nlet hours = Math.floor(remainingSeconds / (60*60));\nlet remainingSeconds2 = remainingSeconds % (60*60);\nlet minutes = Math.floor(remainingSeconds2 / (60));\nlet seconds = remainingSeconds2 % (60);\n\nconsole.log(`${days} days, ${hours} hours, ${minutes} minutes, ${seconds} seconds.`);"
    },
    {
        "instruction": "Write a JavaScript program to find the remainder when two given numbers are divided. 9 and 5",
        "response": "let dividend = 9;\nlet divisor = 5;\nlet remainder = dividend % divisor;\nconsole.log(remainder);"
    },
    {
        "instruction": "Write a JavaScript code to sort an array of employee objects from oldest to youngest based on age property. [{name: 'John', age: 30},\n{name: 'Mary', age: 25},\n{name: 'Kevin', age: 27}]",
        "response": "let employees = [{name: 'John', age: 30}, \n                 {name: 'Mary', age: 25}, \n                 {name: 'Kevin', age: 27}];\n\nemployees.sort((employee1, employee2) => {\n  return employee2.age - employee1.age;\n});"
    },
    {
        "instruction": "Add the following data to a JavaScript associative array: {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"} ",
        "response": "let data = {\n  \"name\": \"John\", \n  \"age\": 30, \n  \"city\": \"New York\"\n};"
    },
    {
        "instruction": "Write a function in Python to calculate the length and breadth of a given rectangle. ",
        "response": "def calculate_rectangle_length_and_breadth(x, y):\n    length = x\n    breadth = y\n    return length, breadth"
    },
    {
        "instruction": "Given two strings, write a Python function to check if they are anagrams. ",
        "response": "def check_anagrams(str1, str2): \n \n    if (len(str1) != len(str2)): \n        return False \n  \n    # sorting both strings \n    str1_list = sorted(str1) \n    str2_list = sorted(str2) \n  \n    # Check if both lists are equal \n    for i in range(0, len(str1_list)): \n        if str1_list[i] != str2_list[i]: \n            return False \n  \n    # If all characters were same \n    return True"
    },
    {
        "instruction": "Transform an array of objects using JavaScript Array: [{name: \"John\", age: 21}, {name: \"Mary\", age: 18}, {name: \"Steve\", age: 24}]",
        "response": "const result = arr.map(obj => (\n  {\n    name: obj.name, \n    age: obj.age * 2\n  }\n));"
    },
    {
        "instruction": "Write a Python script that extracts the name and age of all customers from the customer table in a database. ",
        "response": "import MySQLdb \n\n# connect to database\ndb = MySQLdb.connect(host=\"localhost\", user=\"user\", passwd=\"password\", db=\"customers\")  \n\n# create a cursor \ncursor = db.cursor()\n\n# execute SQL query \ncursor.execute(\"SELECT name, age FROM customers\")  \n\n# fetch the rows \nrows = cursor.fetchall() \n\n# traverse over the results \nfor row in rows: \n    name = row[0] \n    age = row[1] \n    print(\"Name = {}, Age = {}\".format(name, age))"
    },
    {
        "instruction": "Modify the following JavaScript code to make it print the result on the console. var num1 = 10;\nvar num2 = 20;",
        "response": "var num1 = 10;\nvar num2 = 20;\nconsole.log(num1 + num2);"
    },
    {
        "instruction": "How could you modify the following JavaScript code to generate a random number between 0 and 10? var randomNum = Math.random()",
        "response": "var randomNum = Math.floor(Math.random() * (11 - 0)) + 0;"
    },
    {
        "instruction": "Write a Python program to create a list of n numbers (where n is the input) and print the list in reverse order. n=5",
        "response": "n = 5\nlst = list(range(n, 0, -1))\nprint(lst)"
    },
    {
        "instruction": "Given an array of strings, write a code snippet in Python that finds the longest string and prints its length. arr = [\"Dog\",\"Cat\",\"Mouse\"]",
        "response": "arr = [\"Dog\",\"Cat\",\"Mouse\"]\nlongest_str = max(arr, key=len)\nprint(len(longest_str))"
    },
    {
        "instruction": "Write a code that computes the sum and difference of two numbers in JavaScript. var x = 10;\nvar y = 5;",
        "response": "var x = 10;\nvar y = 5;\n\nvar sum = x + y;\nvar diff = x - y;\n\nconsole.log(\"The sum of \" + x + \" and \" + y + \" is: \" + sum);\nconsole.log(\"The difference of \" + x + \" and \" + y + \" is: \" + diff);"
    },
    {
        "instruction": "How do you loop over a JavaScript array? ",
        "response": "for (let i = 0; i < array.length; i++) {\n    let element = array[i];\n    //code to execute for each element\n}"
    },
    {
        "instruction": "Find the square root of 961 using JavaScript. ",
        "response": "Math.sqrt(961); //Output is: 31"
    },
    {
        "instruction": "Write a Python function to calculate the sum of all items in a given dictionary with integer values. dict = {'a': 5, 'b': 10, 'c': 3}",
        "response": "def dict_sum(nums):\n sum = 0\n for key, val in nums.items():\n  sum +=val\n return sum\n\nprint(dict_sum(dict)) //Output is: 18"
    },
    {
        "instruction": "Create a Dictionary object in JavaScript and add three key-value pairs. ",
        "response": "let dictionary = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n};"
    },
    {
        "instruction": "Sort a JavaScript array of objects by a given property. arr = [\n {name:\"Harry\", age:25}, \n {name:\"John\", age:30},\n {name:\"Jane\", age:22}\n]",
        "response": "arr.sort((a, b) => (a.age > b.age) ? 1 : -1 ); //Output is: [{name:\"Jane\", age:22}, {name:\"Harry\", age:25}, {name:\"John\", age:30}]"
    },
    {
        "instruction": "Write a Python script to calculate the total and the average of an array of numbers. arr = [56, 23, 89, 17, 13, 10]",
        "response": "total=sum(arr)\navg=sum(arr)/len(arr)\nprint(\"Total of the array elements is: \"+str(total))\nprint(\"Average of the array elements is: \"+str(avg))"
    },
    {
        "instruction": "Create a Python function to sort a list of dictionaries in ascending order of \"count\". data = [\n    {'name': 'Alice', 'count': 5}, \n    {'name': 'Bob', 'count': 3}, \n    {'name': 'John', 'count': 7},\n    {'name': 'David', 'count': 4},\n]",
        "response": "def sort_dict_list(data):\n    \"\"\"Sort a list of dictionaries in ascending order of 'count'\n   \n    Args:\n        data (list): A list of dictionaries\n   \n    Returns:\n        list: A sorted list of dictionaries\n    \"\"\"\n \n    sorted_data = sorted(data, key=lambda x: x['count'])\n    return sorted_data\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'Alice', 'count': 5}, \n        {'name': 'Bob', 'count': 3}, \n        {'name': 'John', 'count': 7},\n        {'name': 'David', 'count': 4},\n    ]\n    sorted_data = sort_dict_list(data)\n    print(sorted_data)"
    },
    {
        "instruction": "How can you print the Hello World message using the Tkinter module in Python? ",
        "response": "\"\"\"Print the Hello World message using the Tkinter module in Python\"\"\"\nimport tkinter as tk\n\n# Create the main window\nwindow = tk.Tk()\n\n# Create the label with the text\nhello_label = tk.Label(window, text=\"Hello World\")\n\n# Pack the label to the window\nhello_label.pack()\n\n# Main loop\nwindow.mainloop()"
    },
    {
        "instruction": "Using the JavaScript Math object, calculate the sine of an angle. angle = 45",
        "response": "\"\"\"Using the Math object, calculate the sine of an angle\"\"\"\n\nangle = 45\n\nsine = Math.sin(angle * Math.PI / 180);\nconsole.log(sine);\n\n# Output: 0.7071067811865476"
    },
    {
        "instruction": "Write a Python code take a given string and return the string in reverse. hello",
        "response": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string('hello'))"
    },
    {
        "instruction": "Write a Python code that takes a string and replace all the non-alphanumeric characters with a given character. string = 'Hello, world!'\ncharacter = '#'",
        "response": "import re\n\ndef replace_non_alphanum(string, character):\n    return re.sub(r'\\W', character, string)\n\nstring = 'Hello, world!'\ncharacter = '#'\n\nprint(replace_non_alphanum(string, character))"
    },
    {
        "instruction": "You are passed an array and a value. Write a Python program to insert the value in the array at the end. array = [1, 2, 3, 4], value = 7",
        "response": "array = [1, 2, 3, 4, 7]"
    },
    {
        "instruction": "Create a function in Python that takes a string and prints the frequency table of all its characters. string = “Hello world\"",
        "response": "def get_freq_table(string): \n    char_freq_dict = dict() \n    for char in string: \n        if char in char_freq_dict.keys(): \n            char_freq_dict[char] += 1\n        else: \n            char_freq_dict[char] = 1\n    print (\"Frequency table of given string is : \\n\",char_freq_dict) \n\nget_freq_table(string)"
    },
    {
        "instruction": "Determine the number of words in the given passage using text processing in Python. passage = \"Once upon a midnight dreary, while I pondered, weak and weary\"",
        "response": "n_words = len(passage.split())\nprint(\"The number of words in the passage is:\", n_words)"
    },
    {
        "instruction": "Given a list containing strings, write a Python program to filter out unique strings. mylist = [\"fox\", \"fox\", \"cat\", \"dog\", \"dog\"]",
        "response": "mylist = list(set(mylist))\nprint(mylist)"
    },
    {
        "instruction": "Convert a Python function to a JavaScript function. def add(a, b):\n    return a + b",
        "response": "function add(a, b) {\n    return a + b;\n}"
    },
    {
        "instruction": "Create a JavaScript variable which stores a dictionary of team members and their respective ages. {\n\t\"Tom\": 30,\n\t\"Harry\": 25,\n\t\"Sally\": 28\n}",
        "response": "let teamMembers = {\n  \"Tom\": 30,\n  \"Harry\": 25,\n  \"Sally\": 28\n};"
    },
    {
        "instruction": "Write a Python code snippet for a function to calculate the number of words in a given string. myString = \"The sky is blue\"",
        "response": "def countWords (myString): \n    return len(myString.split()) \n\nnum = countWords(myString) \nprint(\"Number of words =\", num)"
    },
    {
        "instruction": "Create a JavaScript function to encode a given string with Base64 encoding. myString = \"Hello World!\"",
        "response": "function encodeBase64(myString) {\n    return btoa(myString);\n}\nvar myStringEncoded = encodeBase64(myString);\nconsole.log(myStringEncoded);"
    },
    {
        "instruction": "Write a code snippet in JavaScript to get the date and time of the last day of the current month. ",
        "response": "var today = new Date();\nvar lastDayOfMonth = new Date(today.getFullYear(), today.getMonth()+1, 0);\nvar lastDayOfMonthTime = lastDayOfMonth.toLocaleString();\nconsole.log(lastDayofMonthTime);"
    },
    {
        "instruction": "What is the name of the method used to log a message to the console in JavaScript? ",
        "response": "console.log()"
    },
    {
        "instruction": "Write a Python function to check if a given number is a prime number or not. A prime number is an integer greater than 1 which is not divisible by any other numbers. 11",
        "response": "def is_prime(n):\n  #Check if n islarger than one \n  if n > 1:\n    # Check if n is divisible by any number between2 and n\n    for i in range(2,n):\n      if (n % i) == 0:\n        return False\n    else:\n      return True\n  else:\n    return False"
    },
    {
        "instruction": "Write a Python program that finds the longest common subsequence of two strings. str1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"",
        "response": "def lcs(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    lcs = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]\n\n\nstr1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"\n\nprint(lcs(str1, str2))"
    },
    {
        "instruction": "Write a JavaScript code that implements a binary search algorithm. arr = [1, 3, 5, 7, 9, 11]\ntarget = 11",
        "response": "function binarySearch(arr, target) {\n  let start = 0;\n  let end = arr.length - 1;\n  let middle = Math.floor((start + end) / 2);\n\n  while (arr[middle] !== target && start <= end) {\n    if (target < arr[middle]) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n    middle = Math.floor((start + end) / 2);\n  }\n  if (arr[middle] === target) {\n    return middle;\n  }\n\n  return -1;\n}\n\narr = [1, 3, 5, 7, 9, 11];\ntarget = 11;\n\nconsole.log(binarySearch(arr, target));"
    },
    {
        "instruction": "Create a Python function that takes an array of strings and returns a dictionary whose keys are the strings and the values are the lengths of the strings. arr = [\"apple\", \"banana\", \"cherry\"]",
        "response": "def array_lengths_to_dict(arr):\n    my_dict = {}\n    for s in arr:\n        my_dict[s] = len(s)\n    return my_dict\n\narr = [\"apple\", \"banana\", \"cherry\"]\n\nprint(array_lengths_to_dict(arr))"
    },
    {
        "instruction": "Write a JavaScript code to print the current day in the week. ",
        "response": "const day = new Date().getDay();\nlet dayString;\n\nswitch (day) {\n  case 0:\n    dayString = \"Sunday\";\n    break;\n  case 1:\n    dayString = \"Monday\";\n    break;\n  case 2:\n    dayString = \"Tuesday\";\n    break;\n  case 3:\n    dayString = \"Wednesday\";\n    break;\n  case 4:\n    dayString = \"Thursday\";\n    break;\n  case 5:\n    dayString = \"Friday\";\n    break;\n  case 6:\n    dayString = \"Saturday\";\n    break;\n  default:\n    dayString = \"Unknown\";\n}\n\nconsole.log(dayString);"
    },
    {
        "instruction": "Build a function in JavaScript that takes two integers and returns the minimum value of the two. int x = 5;\nint y = 8;",
        "response": "const findMin = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n}\n\nfindMin(x, y); // 5"
    },
    {
        "instruction": "Construct a JavaScript program to find the maximum element in the following array. [12,3,4,1,26,7]",
        "response": "let arr = [12,3,4,1,26,7];\nlet max = arr[0];\n\nfor(let i=0; i<arr.length; i++) {\n    if(arr[i] > max) {\n        max = arr[i];\n    }\n}\n\nconsole.log(max);    # Output: 26"
    },
    {
        "instruction": "Write a Python function to find the minimum element from the given array. arr = [11, 9, 10, 14]",
        "response": "def find_min(arr):\n    return min(arr)"
    },
    {
        "instruction": "Write a Python code to construct a dictionary from the given input. key_arr = [100, 200, 300]\nvalue_arr = [\"apple\", \"banana\", \"mango\"]",
        "response": "def dict_from_arrs(key_arr, value_arr):\n    return dict(zip(key_arr, value_arr))"
    },
    {
        "instruction": "Using python, implement a method to find the longest common subsequence in two strings str1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"",
        "response": "def lcs(str1, str2, n, m): \n    if n == 0 or m == 0:          \n        return 0\n  \n    elif str1[n-1] == str2[m-1]:   \n        return 1 + lcs(str1, str2, n-1, m-1) \n \n    else: \n        return max(lcs(str1, str2, n, m-1),    \n                   lcs(str1, str2, n-1, m))"
    },
    {
        "instruction": "Compute the sum of all elements in an array given as an argument to a JavaScript function. ",
        "response": "function sumArray(array) {\n   let result = 0;\n   array.forEach(function(element) {\n     result += element;\n   });\n   return result;\n}"
    },
    {
        "instruction": "Classify three objects using a decision tree algorithm written in JavaScript. Object 1: round, red, 5cm\nObject 2: square, green, 10cm\nObject 3: triangular, red, 8cm",
        "response": "function classifyObject(object) {\n    if(object.shape === 'round') {\n        return 'object is round';\n    } else if(object.color === 'red') {\n        return 'object is red';\n    } else if(object.size <= 8) {\n        return 'object is small';\n    } else {\n        return 'object is large';\n    }\n}"
    },
    {
        "instruction": "Create a Python program to convert a given temperature in Celsius to Kelvin. ",
        "response": "def convert_celsius_to_kelvin(celsius):\n    kelvin = celsius + 273.15\n    return kelvin"
    },
    {
        "instruction": "Edit the given Python code to compute the mean of the given list of numbers. my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x",
        "response": "my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x\n\nmean = sum / len(my_list)"
    },
    {
        "instruction": "Train a Random Forest classifier in Python on the Iris dataset. ",
        "response": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Import Iris dataset\niris_data = pd.read_csv(\"iris.csv\")\n\n# Split dataset into training and testing\nX = iris_data.drop(\"species\", axis=1)\ny = iris_data['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Train a Random Forest classifier\nclf = RandomForestClassifier() \nclf.fit(X_train, y_train)\n\n# Make predictions\npreds = clf.predict(X_test)"
    },
    {
        "instruction": "Write a function in Python to normalize a given string by removing white spaces, changing to lower case and replacing special characters with underscores. \"Hello World!\"",
        "response": "def normalize_string(string):\n    \"\"\"Normalize a string by removing white spaces, changing to lower case and replacing special characters with underscores.\"\"\"\n    # Remove whitespaces\n    normalized_string = string.replace(\" \", \"\")\n\n    # Convert to lowercase\n    normalized_string = normalized_string.lower()\n\n    # Replace special characters\n    characters = [\"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\"]\n    for c in characters:\n        normalized_string = normalized_string.replace(c, \"_\")\n\n    return normalized_string\n\n# Example\nnormalized_string = normalize_string(\"Hello World!\")\nprint(normalized_string)\n# Output: hello_world_"
    },
    {
        "instruction": "Print the largest number in a given array in Python. my_array = [5, 11, 7, 10, 2]",
        "response": "my_array = [5, 11, 7, 10, 2]\n\n# Function to find the largest number\ndef find_largest_number(array):\n    # Assume that the first item in the array is the largest\n    largest = array[0]\n\n    # Now loop through the array to find the largest number\n    for num in array:\n        # If a number is larger than the assumed largest, it is the new largest number\n        if num > largest:\n            largest = num\n\n    # Return the largest number\n    return largest\n\n# Call the function\nlargest = find_largest_number(my_array)\n\n# Print the result\nprint(largest)\n# Output: 11"
    },
    {
        "instruction": "Create a for loop in JavaScript to loop backwards from 10 to 1. ",
        "response": "for (let i = 10; i > 0; i--) {\n  console.log(i);\n}\n\n// Output: 10 9 8 7 6 5 4 3 2 1"
    },
    {
        "instruction": "Create a function in Python to add two numbers, which may take any number of arguments. ",
        "response": "def add(*nums):\n    \"\"\"Add two or more numbers.\"\"\"\n    # Initialize sum\n    result = 0\n\n    # Iterate through given numbers\n    for num in nums:\n        result += num\n\n    # Return the sum \n    return result\n    \n# Example\nsum = add(15, 7, 10)\nprint(sum)\n# Output: 32"
    },
    {
        "instruction": "Give a function name in JavaScript that takes in two integer numbers as parameters and returns the remainder of the first parameter divided by the second. ",
        "response": "function remainder(a, b) {\n    return a % b;\n}"
    },
    {
        "instruction": "What is an event in JavaScript? ",
        "response": "In JavaScript, an event is an action that a user performs that causes a change in the state of the program. Events can be generated by a user (e.g. pressing a button, clicking a link), by the browser (e.g. loading a page, scrolling, resizing the window) or by the system (e.g. device orientation changes, network connection changes). Events can trigger handlers (functions in JavaScript) that respond to the event with the appropriate action."
    },
    {
        "instruction": "Create a JavaScript program to make a TCP connection to the server. ",
        "response": "const net = require('net');\n\nconst client = new net.Socket();\nclient.connect(5000, '127.0.0.1', () => {\n console.log('Connected');\n});\n\nclient.on('data', (data) => {\n console.log('Received: ' + data);\n});\n\nclient.on('close', () => {\n console.log('Connection closed');\n});"
    },
    {
        "instruction": "Write a Python code snippet to check if an integer is between 5 and 10 (including both). x = 8",
        "response": "if 5 <= x <= 10:\n    print('The integer is between 5 and 10.')\nelse:\n    print('The integer is not between 5 and 10.')"
    },
    {
        "instruction": "Write a JavaScript function to do the following: assign a value of \"true\" to a variable if the number is odd, and assign the value of \"false\" if the number is even. Number: 6",
        "response": "function assignOddOrEven(num){\n  let result;\n  if(num % 2 === 0) {\n    result = false;\n  } else {\n    result = true;\n  }\n  return result;\n}"
    },
    {
        "instruction": "Convert a string of characters to uppercase in JavaScript. String: hello",
        "response": "let upperCaseString = 'hello'.toUpperCase();"
    },
    {
        "instruction": "Write a Python program to insert a given string at a specific position within another given string. string1 = 'Python is fun' \nstring2 = 'awesome '\nposition = 7",
        "response": "def insert_string(string1, string2, pos):\n    return string1[:pos] + string2 + string1[pos:]"
    },
    {
        "instruction": "Given two lists, write a Python program to print all common elements in them. list1 = [10, 20, 30, 40] \nlist2 = [30, 40, 50, 60]",
        "response": "def common_elements(list1, list2):\n    common = []\n    for elem in list1:\n        if elem in list2:\n            common.append(elem)\n    return common"
    },
    {
        "instruction": "Design a program in Python which takes a string as input and returns a list of words from the string. string1 = 'Python Programming is Fun!'",
        "response": "def get_words(string1):\n    words = string1.split()\n    return words"
    },
    {
        "instruction": "Design a program in Python to remove all even elements from a given list. lst = [2, 4, 5, 6, 8, 10]",
        "response": "def remove_even(lst):\n    evens = []\n    for num in lst:\n        if num % 2 != 0:\n            evens.append(num)\n    return evens"
    },
    {
        "instruction": "Write a Python program to replace the last element in a list with another given element. lst = [1, 2, 3, 4]\nelement = 5",
        "response": "def replace_last(lst, element):\n    lst[-1] = element\n    return lst"
    },
    {
        "instruction": "Construct a Python class to represent a student with attributes such as name, age, and course. The class should have a method that returns the student information in a formatted output Student Name: John Smith\nAge: 17\nCourse: Computer Science",
        "response": "class Student: \n    def __init__(self, name, age, course): \n        self.name = name \n        self.age = age\n        self.course = course\n\n    def get_info(self): \n        return f\"Name: {self.name}, Age: {self.age}, Course: {self.course}\"\n\nstudent = Student(\"John Smith\", 17, \"Computer Science\")\n\nprint(student.get_info()) # Name: John Smith, Age: 17, Course: Computer Science"
    },
    {
        "instruction": "What does the `filter()` method do in Python? ",
        "response": "The filter() method in Python takes in a function and a list as arguments. The function is called with all the items in the list and a new list is returned which contains items\nfor which the function evaluates to True.\nIt is typically used to filter out elements from a list based on a certain condition."
    },
    {
        "instruction": "Write a Python code using list comprehension to get the power of each element in a list. list_num = [1, 2, 3, 4, 5]",
        "response": "power_list = [num**2 for num in list_num]\nprint(power_list)  # prints [1, 4, 9, 16, 25]"
    },
    {
        "instruction": "Edit the following code to insert a new item at the end of a given Python list. items = [1, 2, 3]\nnew_item = 4",
        "response": "items = [1, 2, 3] + [new_item]\nprint(items)  # prints [1, 2, 3, 4]"
    },
    {
        "instruction": "Write a code in Python to remove all the duplicate elements from a list and print the result. list: [2, 3, 3, 4, 5, 5]",
        "response": "\"\"\"\nWrite a code in Python to remove all the duplicate elements from a list and print the result\n\"\"\"\n\ndef remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\nif __name__ == '__main__':\n    lst = [2,3,3,4,5,5]\n    print(\"List with duplicates removed:\", remove_duplicates(lst))"
    },
    {
        "instruction": "Write a reusuable function in Python that takes two string variables and returns the longest string. ",
        "response": "def longest_string(str1, str2):\n    if len(str1) > len(str2):\n        return str1\n    else:\n        return str2"
    },
    {
        "instruction": "Translate the following statement from English to Python code: \"If the value of x is greater than 10, print 'x is greater than 10.\" ",
        "response": "if x > 10:\n    print(\"x is greater than 10.\")"
    },
    {
        "instruction": "Write a JavaScript statement to log a string onto the console. String: \"Print this message\"",
        "response": "console.log(\"Print this message\");"
    },
    {
        "instruction": "Create a class called 'Product' in Python and assign the following attributes to it. name, price, description",
        "response": "class Product:\n    \"\"\"\n    A class that represents a product with its attributes.\n    \"\"\"\n    def __init__(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n        self.description = description"
    },
    {
        "instruction": "Write a script in Python to make an http request and extract the title of the web page. url = 'https://en.wikipedia.org/wiki/Deep_learning'",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    \"\"\"\n    This function makes an HTTP request to the given URL and extracts the title of the web page.\n    \"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup.title.string\n\nprint(get_page_title('https://en.wikipedia.org/wiki/Deep_learning'))"
    },
    {
        "instruction": "Suggest a way to generate random passwords using Python. ",
        "response": "One way to generate random passwords using Python is to use the string module's methods. Using the string.ascii_letters and string.digits sequences, we can create a random sequence of alphanumeric characters. The string module's choice() function can then be used to randomly select characters from this sequence to create a new password string. The length of the password should be specified as an argument to the choice() function. For example, to generate an 8 character long password, you can use string.choice(string.ascii_letters + string.digits, 8)."
    },
    {
        "instruction": "Write a JavaScript function to check if a number is a whole number or has decimals. ",
        "response": "const isWholeNumber = (num) => {\n  if (num % 1 === 0) return true\n  return false\n}"
    },
    {
        "instruction": "Implement a random number generator in Python that returns a random number in the range of 1-100. ",
        "response": "import random\n\ndef rand_num():\n    return random.randint(1, 100)"
    },
    {
        "instruction": "Create a class in Python and define several functions for that class. ",
        "response": "class MyClass:\n    def __init__(self):\n        pass \n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n    def divide(self, x, y):\n        return x / y"
    },
    {
        "instruction": "Create a list in Python of elements 0-9 in random order. ",
        "response": "import random \n\n# Generate a list of 10 numbers\nnums = [i for i in range(10)]\n\n# Shuffle the list\nrandom.shuffle(nums) \n\n# Print the shuffled list\nprint(nums) # [5, 0, 2, 3, 9, 8, 4, 1, 7, 6]"
    },
    {
        "instruction": "Create a function to calculate log base 10 in Python. ",
        "response": "import math\n\ndef log10(x):\n    return math.log10(x)\n\nif __name__ == '__main__':\n    print(log10(10))"
    },
    {
        "instruction": "Calculate the total product of all numbers in an array in JavaScript. [5, 4, 2]",
        "response": "const product = arr => arr.reduce((finalProduct, num) => finalProduct * num);\nconsole.log(product([5,4,2]));"
    },
    {
        "instruction": "Create an array of the first 10 natural numbers in JavaScript. ",
        "response": "let numbers = [1,2,3,4,5,6,7,8,9,10];"
    },
    {
        "instruction": "Given a JSON object, write a Python program to convert it into a Pandas dataframe. {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}",
        "response": "import pandas as pd\n\ndata = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n\ndf = pd.DataFrame([data])"
    },
    {
        "instruction": "Write code to sort a Python list of tuples based on their second element in the tuple. list_of_tuples = [('a', 5), ('b', 1), ('c', 10)]",
        "response": "list_of_tuples.sort(key=lambda tup: tup[1])"
    },
    {
        "instruction": "Create a program in Python to remove duplicate values from a list. list_a = [1, 2, 2, 3, 4, 4]",
        "response": "def remove_duplicates(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\nlist_a = [1, 2, 2, 3, 4, 4]\nlist_a = remove_duplicates(list_a)\nprint(list_a)"
    },
    {
        "instruction": "Create a Python function that takes in a time string in the format hh:mm:ss and returns the time in seconds. time_string = '01:10:30'",
        "response": "def time_in_seconds(time_string):\n    hour, minutes, seconds = map(int, time_string.split(':'))\n    return second + minutes * 60 + hour * 3600\ntime_in_seconds(time_string) # 4290"
    },
    {
        "instruction": "Write a function in Python that takes an integer as an input and prints the number of digits in the integer. num = 1234",
        "response": "def countDigits(num):\n    count = 0\n    while(num > 0):\n        num = num//10\n        count += 1\n    return count\n\nprint(countDigits(num)) # Output: 4"
    },
    {
        "instruction": "Create a sorting algorithm in Python that will sort an array of numbers in ascending order [3, 1, 5, 2, 4, 6]",
        "response": "def sort_nums_asc(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n    return arr"
    },
    {
        "instruction": "Edit a JavaScript program to input a number and output its factorial let n = 5;",
        "response": "function factorial(n) { \n    let result = 1; \n    for (let i = 2; i <= n; i++) \n        result *= i; \n    return result; \n} \nconsole.log( factorial(n) );"
    },
    {
        "instruction": "Create a Python class that processes a string of text String = \"Hello World\"",
        "response": "class StringProcessor:\n    def __init__(self, String):\n        self.string = String\n\n    def processString(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n        return myString"
    },
    {
        "instruction": "Generate a list comprehension in Python to get the cube of all the numbers between 1 to 10 ",
        "response": "cubes_list = [x**3 for x in range(1, 11)]"
    },
    {
        "instruction": "Describe the working of a set in Python. ",
        "response": "A set in Python is an unordered collection of unique elements. It is an efficient data structure which provides a variety of operations such as membership testing, intersection, union and difference. Sets in Python do not allow duplicate elements and also do not maintain any particular order of the elements. Sets are mutable meaning that elements can be added or removed from them."
    },
    {
        "instruction": "Create a variable in JavaScript that holds the value of a number. ",
        "response": "let number = 7;"
    },
    {
        "instruction": "Create a JavaScript object that stores three pieces of digital contact data, an email address, a phone number, and a website URL. ",
        "response": "const contact = {\n email: 'example@example.com',\n phone: '000-000-0000',\n website: 'www.example.com'\n};"
    },
    {
        "instruction": "Create a Python 3 script that prints out the total number of days in the current month. ",
        "response": "import calendar\n\nprint(calendar.monthrange(2020, 11)[1])"
    },
    {
        "instruction": "Write a JavaScript program to take an array of numbers, and return an array in which each element is the result of squaring the original. [1,2,3,4]",
        "response": "[1,4,9,16]"
    },
    {
        "instruction": "Write a function in JavaScript which takes a situation as a parameter and returns the probability of success. The probability of the stock market rising tomorrow.",
        "response": "function findProbability(situation) {\n // code to calculate probability \n return probability;\n}"
    },
    {
        "instruction": "Suggest a way to convert the following XML code into JSON in Python. <data>\n  <records> \n  \t<record name=\"John Smith\" age=\"27\">\n   \t\t<address>123 Main Street</address>\n   \t</record>\n    <record name=\"Jane Smith\" age=\"18\">\n    \t<address>167 King Avenue</address>\n    </record>\n  </records>\n</data>",
        "response": "import json \nimport xmltodict \n  \nxml_data = \"\"\"\n<data> \n  <records> \n    <record name=\"John Smith\" age=\"27\"> \n      <address>123 Main Street</address> \n    </record> \n    <record name=\"Jane Smith\" age=\"18\"> \n      <address>167 King Avenue</address> \n    </record> \n  </records>\n</data> \n\"\"\"\n  \nxml_dict = xmltodict.parse(xml_data)  \njson_data = json.dumps(xml_dict) \nprint(json_data)"
    },
    {
        "instruction": "Create a function that takes two arguments, a string and a character, and replaces all occurrences of the character with the string in JavaScript. ",
        "response": "function replaceCharacter(str, char) { \n    return str.replace(new RegExp(char,\"g\"), str); \n} \n  \nlet str = \"Hello World\"; \nlet char = \"l\"; \nlet result = replaceCharacter(str, char); \n  \nconsole.log(result); // Output: Heooo Worod"
    },
    {
        "instruction": "Take the following array as an argument and output the sum of all the numbers in the array using Python. [1, 2, 3, 4, 5]",
        "response": "def sum_of_array(arr):\n  return sum(arr)\n\narray = [1, 2, 3, 4, 5]\nresult = sum_of_array(array)\n\nprint(resutl) # Output: 15"
    },
    {
        "instruction": "Code a function in Python to calculate the nth value of the Fibonacci sequence. ",
        "response": "def fibonacci(n): \n    if n <= 0: \n        return 0 \n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2)"
    },
    {
        "instruction": "Visit the API documentation and create code to make a POST request using Python. ",
        "response": "import requests \n  \ndata = {'name': 'John Doe', 'age': '25'} \n  \nheaders = {'Content-type': 'application/x-www-form-urlencoded', 'Accept': 'text/plain'} \n  \nresponse = requests.post('https://example.com/api/v1/data', data=data, headers=headers)"
    },
    {
        "instruction": "Use nltk package in Python and remove stopwords from the given text. Text: \"I am wondering what is the best way to learn English.\"",
        "response": "import nltk\nfrom nltk.corpus import stopwords\n\ntxt = \"I am wondering what is the best way to learn English.\"\nwords = nltk.word_tokenize(txt)\nfiltered_words = [w for w in words if not w in stopwords.words('english')] \n  \nprint(filtered_words)"
    },
    {
        "instruction": "Build a web scraper in Python to fetch the restaurant details from the website. <uri of the website>",
        "response": "import requests \nfrom bs4 import BeautifulSoup \n  \npage = requests.get(<uri of website>) \nsoup = BeautifulSoup(page.content, 'html.parser') \n  \nrests = soup.find_all('div', class_='restaurant-item')\n\n# Parse the details of restaurants one by one\nfor rest in rests:  \n    name = rest.find('div', class_='restaurant-name') \n    cuisine = rest.find('li', class_='cuisine-list-item') \n    location = rest.find('li', class_='restaurant-location') \n    rating = rest.find('span', class_='star-rating-text') \n      \n    # Print details of restaurant \n    print(name.text, cuisine.text, location.text, rating.text)"
    },
    {
        "instruction": "Write a Python program to remove the nth index character from a nonempty string. var_str = Python, n = 0",
        "response": "def remove_character(var_str, n):\n  first_part = var_str[:n] \n  last_part = var_str[n+1:]\n  return first_part + last_part\n\nprint(remove_character('Python', 0))\n\nOutput: ython"
    },
    {
        "instruction": "Determine the longest word in a given string. sentence = \"I am Python Programmer\"",
        "response": "def longest_word(sentence):\n    words = sentence.split()\n    max_len = len(words[0])\n     \n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n     \n    return max_word\n \nprint(longest_word('I am Python Programmer'))\n\nOutput: Programmer"
    },
    {
        "instruction": "Rewrite this code into Python. ArrayList<Integer> arr = new ArrayList<>();\nfor (int i = 0; i < 10; i++) {\n    arr.add(i);\n}\n\nint sum = 0;\nfor(int num : arr){\n    sum += num;\n}",
        "response": "arr = []\nfor i in range(10):\n    arr.append(i)\n\nsum = 0\nfor num in arr:\n    sum += num"
    },
    {
        "instruction": "Create a Python class to hold a student's information: name, age and major. ",
        "response": "class Student:\n def __init__(self, name, age, major):\n self.name = name\n self.age = age\n self.major = major\n\ndef get_name(self):\n return self.name\n\ndef get_age(self):\n return self.age\n\ndef get_major(self):\n return self.major"
    },
    {
        "instruction": "Create a JavaScript object that holds the global temperatures for the last 5 years. ",
        "response": "const temperatures = {\n  2015: 34.7,\n  2016: 35.2,\n  2017: 35.7,\n  2018: 36.1,\n  2019: 36.7\n};"
    },
    {
        "instruction": "What data type does the output of this Python code have? x = 5",
        "response": "integer"
    },
    {
        "instruction": "Change the code to make it a valid Python program. x = \"hello world",
        "response": "x = \"hello world\""
    },
    {
        "instruction": "Change the code to make it an Expression Statement in Python x + 1",
        "response": "print(x + 1)"
    },
    {
        "instruction": "Replace the comments in the code with the proper Python code. #TODO: get the date from the user\n#TODO: get the month from the user",
        "response": "date = int(input(\"Enter the date: \"))\nmonth = int(input(\"Enter the month: \"))"
    },
    {
        "instruction": "Create a script in JavaScript for flipping a coin. ",
        "response": "function coinFlip(){\n  let flipResult = Math.floor(Math.random() * 2);\n  \n  if (flipResult == 0){\n    return \"Heads\";\n  } \n  else {\n    return \"Tails\";\n  }\n}\n\nlet result = coinFlip();\nconsole.log(result);"
    },
    {
        "instruction": "Create a Python program that finds the highest number in a list of numbers. [2, 4, 32, 41, 19]",
        "response": "# Initializing list\nlist_of_numbers = [2, 4, 32, 41, 19]\n\n# Finding the highest number\nmax_number = max(list_of_numbers)\n\n# Printing the result\nprint(max_number)\n\n# Output: 41"
    },
    {
        "instruction": "Create a function in Python that takes two integers N and M and prints out all possible combinations of numbers that add up to N and are at most M. N=8, M=3",
        "response": "def combinations_with_sum(n, m): \n  for i in range(1, m): \n    for j in range(i, m):\n      if i + j == n:\n        print(i, '+', j, '=', n)"
    },
    {
        "instruction": "Re-write this Python code as a JavaScript function. def double_number(num):\n  return num * 2",
        "response": "function doubleNumber(num) {\n  return num * 2;\n}"
    },
    {
        "instruction": "Explain the purpose of the %i in a Python format string. ",
        "response": "The %i in Python is a special format specifier used to format integer numbers. When used in a format string, it will convert the number to an integer and insert it into the output string. This can be used to easily format numbers when printing output."
    },
    {
        "instruction": "Write a Python program to parse a date string and display the date in ISO 8601 format. date_string = '21 May 2021'",
        "response": "from datetime import datetime\nimport re\n\n# Parse the date string \ndate = datetime.strptime(date_string, '%d %B %Y')\n\n# Convert the date to ISO 8601 format\niso_8601 = date.strftime(\"%Y-%m-%d\")\n\n# Print the ISO 8601 formatted date\nprint(iso_8601)"
    },
    {
        "instruction": "Create an object-oriented JavaScript class to represent a point in two-dimensional space. ",
        "response": "class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  distance(other) {\n    let dx = this.x - other.x;\n    let dy = this.y - other.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n}"
    },
    {
        "instruction": "Create a python program that takes a string as input and prints the length of the longest substring without repeatingcharacters. \"abcabcbb\"",
        "response": "def find_longest_substring(s):\n  max_length = 0\n  start = 0\n  usedChar = {}\n\n  for i in range(len(s)):\n    if s[i] in usedChar and start <= usedChar[s[i]]:\n        start = usedChar[s[i]] + 1\n    else:\n        max_length = max(max_length, i - start + 1)\n\n    usedChar[s[i]] = i\n\n  return max_length\n\ninput_string = \"abcabcbb\"\n\nprint(\"The length of longest substring without repeating characters is: {}\".format(find_longest_substring(input_string)))"
    },
    {
        "instruction": "Create a JavaScript snippet to display the current date in the format \"Monday, DD-MM-YYYY\" ",
        "response": "let today = new Date();\nlet options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\nlet dateText = today.toLocaleDateString('en-GB', options);\n\nconsole.log(dateText); // Monday, DD-MM-YYYY"
    },
    {
        "instruction": "Write a Python program to prompt the user for a string and print the number of unique characters it contains. ",
        "response": "user_string = input(\"Please enter a string: \")\n\nunique_chars = set()\n\nfor char in user_string:\n    unique_chars.add(char)\n\nprint(\"The string contains\", len(unique_chars), \"unique character(s).\")"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns true if every element is an even number and false otherwise ",
        "response": "function checkEven(array) {\n    for (var i = 0; i < array.length; i++) {\n        if (array[i] % 2 !== 0) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Create a class in Python named 'Car' with attributes 'color' and 'make', and methods 'start' and 'stop'. ",
        "response": "class Car:\n    def __init__(self, color, make):\n        self.color = color\n        self.make = make\n    \n    def start(self):\n        print(\"Car started.\")\n        \n    def stop(self):\n        print(\"Car stopped.\")"
    },
    {
        "instruction": "Provide an example of a Python class and its elements. ",
        "response": "class Car: \n    def __init__(self, color, make, model): \n        self.color = color \n        self.make = make \n        self.model = model \n    \n    def start(self): \n        print(\"Engine started!\") \n\nford_mustang = Car('Red', 'Ford', 'Mustang') \nford_mustang.start()"
    },
    {
        "instruction": "Create a function in JavaScript to extract the words from a given sentence that contains a specific letter. Sentence: The quick brown fox jumps over the lazy dog\nLetter: o",
        "response": "function extractWordsWithLetter(sentence, letter) {\n    let words = sentence.split(' ');\n    let result = [];\n    words.forEach(word => {\n        if (word.includes(letter)) {\n            result.push(word);\n        }\n    }); \n    return result;\n}"
    },
    {
        "instruction": "Create a program in JavaScript that will take a list of numbers and return the first index of the highest value. list = [1, 2, 5, 4, 4]",
        "response": "function findIndexOfHighestValue(list){\n\tlet highest = list[0];\n\tlet highestIndex = 0;\n    for (let i=0; i<list.length; i++){\n        if (list[i] > highest){\n            highest = list[i];\n            highestIndex = i;\n        }\n    }\n    return highestIndex;\n}"
    },
    {
        "instruction": "Suggest an algorithm in Python that will detect an anomaly in time-series data. ",
        "response": "We can use Gaussian Mixture Models to detect anomalies in time-series data. This method takes the time-series data as input and trains a model using the data. The model defines a probability distribution for the time-series data, and the anomalies are detected as those data points which have a low probability of occurring according to the distribution."
    },
    {
        "instruction": "Given a URL string, create a JavaScript function to extract the domain name. https://www.example.com",
        "response": "/**\n * Function to extract the domain name from a given URL string\n * @param {string} url - The URL\n * @return {string} The domain name\n */\nfunction extractDomain(url) {\n    var a = document.createElement('a');\n    a.href = url;\n    // Deconstruct the URL to get the domain\n    return a.hostname;\n}\n\nconst domain = extractDomain('https://www.example.com');\nconsole.log(domain); //outputs \"example.com\""
    },
    {
        "instruction": "Explain how to use Binary Search in Python? ",
        "response": "Binary search is an efficient search algorithm for sorted arrays. In Python, the bisect module can be used for binary search. The bisect.bisect() function finds the position of the number in the list or a place for the number if it is not present. The bisect.bisect_left() function does the same, but carefully chooses its insertion point to the left of any existing entries of the same value.\n\nFor example, to search for an element in a list, one can use the following code:\n\nimport bisect\n\ndef binary_search(list, item):\n    pos = bisect.bisect_left(list, item)\n    if pos != len(list) and list[pos] == item:\n        return pos\n    else:\n        return -1\n\nlist = [1, 2, 4, 7, 8]\nprint(binary_search(list, 2))  # Outputs 1"
    },
    {
        "instruction": "How to check if a given number is an Armstrong number in Python? ",
        "response": "#Function to check if a number is an Armstrong number\ndef isArmstrong(number):\n   sum  = 0\n   temp = number\n\n   while temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n \n   if number == sum:\n       return True\n   else:\n       return False\n   \n#Usage\nnumber = 9\nif(isArmstrong(number)):\n    print(f\"{number} is an Armstrong number\")\nelse:\n    print(f\"{number} is not an Armstrong number\")"
    },
    {
        "instruction": "Select the Python data types which can store a sequence of items. ",
        "response": "Sequence data types in Python include lists, tuples and range objects."
    },
    {
        "instruction": "Construct a python code to print the following text in reverse. Hello World",
        "response": "text = 'Hello World'\nprint(text[::-1])"
    },
    {
        "instruction": "Modify the following code to convert it from JavaScript to Java. function getAverage(a, b) {\n  return (a + b) / 2;\n}",
        "response": "public float getAverage(float a, float b) {\n  return (a + b) / 2;\n}"
    },
    {
        "instruction": "Create a function in JavaScript to sum two numbers. ",
        "response": "function addNumbers(a, b) {\n  return a + b;\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array and counts the occurence of each element in the array. [1, 4, 2, 4, 1]",
        "response": "function countOccurences(arr){\n    let count = {};\n    arr.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}"
    },
    {
        "instruction": "Output the below tree structure in Python. ",
        "response": "print('  *  ')\nprint(' *** ')\nprint('*****')"
    },
    {
        "instruction": "Given a list of student records, write a Python code snippet to find all the students who scored above 80. studentList = [ \n    {'name': 'John', 'score': 80},\n    {'name': 'Jane', 'score': 90},\n    {'name': 'Tom', 'score': 75},\n    {'name': 'Eric', 'score': 85}\n  ]",
        "response": "highScoringStudents = [student for student in studentList if student['score'] > 80]"
    },
    {
        "instruction": "Write a JavaScript program to parse and evaluate a simple mathematical expression entered as a string. String str = \"2 + 3 * 4 - 5 / 3\";",
        "response": "function evaluateExpression(str) {\n    let expression = str.split(' ').map(el => {\n        if (el === '+' || el === '-' || el === '*' || el === '/') {\n            return el;\n        }\n        return parseInt(el);\n    });\n    let stack = [];\n    let result;\n\n    for (let i = 0; i < expression.length; i++) {\n        let el = expression[i];\n        if (typeof el === 'number') {\n            stack.push(el);\n        } else {\n            let secondOperand = stack.pop();\n            let firstOperand = stack.pop();\n            switch (el) {\n                case '+':\n                    result = firstOperand + secondOperand;\n                    break;\n                case '-':\n                    result = firstOperand - secondOperand;\n                    break;\n                case '*':\n                    result = firstOperand * secondOperand;\n                    break;\n                case '/':\n                    result = firstOperand / secondOperand;\n                    break;\n            }\n            stack.push(result);\n        }\n    }\n    return stack.pop();\n}\n\nconsole.log(evaluateExpression(\"2 + 3 * 4 - 5 / 3\"));"
    },
    {
        "instruction": "Write a function in Python to sort this dictionary by values. my_dict = {\"Jerry\": 10, \"Marcus\": 3, \"Hanna\": 5}",
        "response": "def sort_dict_by_values(d):\n    sorted_dict = dict(sorted(d.items(), key=lambda x: x[1])) \n    return sorted_dict\n\nprint(sort_dict_by_values(my_dict))\n# Output: {'Marcus': 3, 'Hanna': 5, 'Jerry': 10}"
    },
    {
        "instruction": "Design a function in Python to automate the extraction of emails from a single HTML page. <html>\n<body>\n Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>",
        "response": "def extract_emails(html_page):\n emails = []\n soup = BeautifulSoup(html_page)\n for a in soup.find_all('a'):\n  if a.get('href') and (a.get('href').startswith('mailto:')):\n  emails.append(a.get('href')[7:])\n return emails\n\n# Usage \npage = '<html>\n <body>\n  Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>'\n\nemails = extract_emails(page)\nprint(emails)\n# Output: ['janice@example.com', 'susie@example.com']"
    },
    {
        "instruction": "Given an array of integers, write a program in JavaScript to find the sum of the elements of the given array? ",
        "response": "let array = [2,4,5,7,1];\nlet sumOfArrayElements = 0;\n\nfor(let i = 0; i < array.length; i++)\n{\n    sumOfArrayElements += array[i];\n}\n\nconsole.log(sumOfArrayElements); // Output: 19"
    },
    {
        "instruction": "Write a Python script which checks if an input string is a palindrome. ",
        "response": "def is_palindrome(input_string):\n    input_string = input_string.lower()\n    if len(input_string) == 0:\n        return False\n    if len(input_string) == 1:\n        return True\n\n    if input_string[0] == input_string[-1]:\n        return is_palindrome(input_string[1:-1])\n\n    return False\n\n# Usage \nstring = 'RADAR'\nresult = is_palindrome(string)\nprint(result) # Output: True"
    },
    {
        "instruction": "Design a function in Python to toggle whether a given HTML tag has a given class. <div class=\"myClass\">Hello world</div>",
        "response": "def toggle_class(html_string, tag, tag_class):\n    soup = BeautifulSoup(html_string, 'html.parser')\n    tag_html = soup.find(tag)\n\n    if tag_html:\n        classes = tag_html.get('class')\n        if classes and tag_class in classes:\n            classes.remove(tag_class)\n        else:\n            classes.append(tag_class)\n        tag_html['class'] = classes\n    return soup.decode()\n\n# Usage\nhtml_string = '<div class=\"myClass\">Hello world</div>'\ntag = 'div'\ntag_class = 'myClass'\nnew_html_string = toggle_class(html_string, tag, tag_class)\nprint(new_html_string)\n# Output: <div>Hello world</div>"
    },
    {
        "instruction": "Design a function in Python to format a given string as a URL slug. string = \"This is a sample string to be converted\"",
        "response": "def format_as_slug(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\n# Usage \nstring = \"This is a sample string to be converted\"\nresult = format_as_slug(string)\nprint(result) # Output: this-is-a-sample-string-to-be-converted"
    },
    {
        "instruction": "Create a script in JavaScript to sort the elements of an array in ascending order. ",
        "response": "let array = [1, 9, 4, 2, 5, 7];\nlet sortedArray = array.sort(function(a, b){return a-b});\nconsole.log(sortedArray); // Output: [1, 2, 4, 5, 7, 9]"
    },
    {
        "instruction": "Build a class in Python with three methods. ",
        "response": "class MyClass:\n  def __init__(self):\n   # initialization code \n   self.data = []\n   self.count = 0\n \n  def add_data(self, data_element):\n   # add data to a list\n   self.data.append(data_element)\n   self.count += 1 \n \n  def get_data_count(self):\n   # return number of data elements\n   return self.count"
    },
    {
        "instruction": "Write a python code to insert a new node at the head of a linked list ",
        "response": "# Node class \nclass Node: \n \n\t# Function to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data # Assign data \n\t\tself.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n\n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\n\t# Function to insert a new node at the beginning \n\tdef insert_at_head(self, new_data): \n\t\t\n\t\t# Create a new node \n\t\tnew_node = Node(new_data) \n\n\t\t# update the new nodes next to old head\n\t\tnew_node.next = self.head \n\n\t\t# update head to new node \n\t\tself.head = new_node"
    },
    {
        "instruction": "Given a range of numbers, write a python program to find the sum of the elements within that range. range: 1 to 10",
        "response": "def sum_range(start, end):\n    res = 0\n    for i in range(start, end+1):\n        res += i\n    return res\n\nsum_range(1, 10)"
    },
    {
        "instruction": "How would you implement a function to determine if a number is even or odd in Python? ",
        "response": "def even_odd(number):\n    if number % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "instruction": "Write a JavaScript code to traverse through a given 2D array. [\n  [1, 2],\n  [3, 4],\n  [5, 6]\n]",
        "response": "function traverse2DArray(arr) {\n    for(let i=0; i<arr.length; i++) {\n        for(let j=0; j<arr[i].length; j++) {\n            console.log(arr[i][j]);\n        }\n    }\n}"
    },
    {
        "instruction": "Create a print statement in Python to print the first 5 elements in a list. [2, 3, 4, 5, 6, 7, 8]",
        "response": "print(list[:5])"
    },
    {
        "instruction": "How do you pass a parameter to a function in JavaScript? ",
        "response": "function foo(param) {\n    // do something with param\n}\n\nfoo(param); // pass the parameter here"
    },
    {
        "instruction": "Modify the code so that it prints \"Python is the best language\" five times. for i in range(10):\n    print(\"Python is great!\")",
        "response": "for i in range(5):\n    print(\"Python is the best language!\")"
    },
    {
        "instruction": "Write a Python program to compare two lists and print the elements which are not common between the two. list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]",
        "response": "list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]\n\nnot_common_elements = [i for i in list_a if not(i in list_b)] + [i for i in list_b if not(i in list_a)]\n\nprint(not_common_elements)"
    },
    {
        "instruction": "Write a JavaScript function that generates an array of numbers from 1 to 10 with their cubes. ",
        "response": "function getCubes(){\n    var arr = [];\n    for(var i = 1; i <= 10; i++){\n        arr.push(i*i*i);\n    }\n    return arr;\n}"
    },
    {
        "instruction": "Construct a Python program to print out the biggest number from a given list. my_list = [6, 5, 9, 1, 8, 2]",
        "response": "def find_max(my_list):\n    max_num = my_list[0]\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max(my_list))"
    },
    {
        "instruction": "Write a JavaScript function to convert the given 12-hour time format to 24-hour format. time = \"12:05 PM\"",
        "response": "function convertTo24Hour(timeString) {\n    let [hours, minutes, period] = timeString.split(' ');\n    let [hoursString, minutesString] = hours.split(':');\n    let hoursInteger = parseInt(hoursString);\n    \n    if (period === 'AM' && hoursInteger === 12) {\n        hoursInteger = 0;\n    } else if (period === 'PM' && hoursInteger !== 12) {\n        hoursInteger += 12;\n    }\n    \n    return `${hoursInteger.toString().padStart(2, '0')}:${minutesString}`;\n}\n\nlet result = convertTo24Hour(time);\nconsole.log(result); // Outputs: \"00:05\""
    },
    {
        "instruction": "Suggest a completion to the following python code to print the square of a number. number = 5\n\nprint(number)",
        "response": "number = 5\n\nprint(number*number) # Output: 25"
    },
    {
        "instruction": "Create a class in Python that creates an immutable list. ",
        "response": "class ImmutableList:\n    def __init__(self, list_values):\n        self._dict = dict()\n        for i, elem in enumerate(list_values):\n            self._dict[i] = elem\n    \n    def __getitem__(self, item):\n        return self._dict[item]\n    \n    def __len__(self):\n        return len(self._dict)"
    },
    {
        "instruction": "Sort the list below using insertion sort in Python: list = [1,12,1,4,8,10,13]",
        "response": "list = [1,1,4,8,10,12,13]\n\ndef insertion_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\narr = [1,12,1,4,8,10,13]\ninsertion_sort(arr)\nprint (arr)"
    },
    {
        "instruction": "Write an algorithm in JavaScript to print all the elements inside a given array. var names = [\"Harry\", \"Ron\", \"Hermione\"]",
        "response": "for (var i = 0; i < names.length; i++) {\n    console.log(names[i]);\n}"
    },
    {
        "instruction": "Create a class in Python named 'Circle' with a parameterized constructor to take the radius of the circle as input. ",
        "response": "class Circle():\n    def __init__(self, radius):\n        self.radius = radius"
    },
    {
        "instruction": "Convert the following matrix into a list of lists in Python. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "response": "list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]"
    },
    {
        "instruction": "Convert the following paragraph from English to Python code:\n\n\"Given a list of numbers, find the largest number\". ",
        "response": "def find_largest(nums):\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest"
    },
    {
        "instruction": "Identify the bug in the following python code:\n\ndef foo(x):\n    x[0] = 2 [0, 1, 2]",
        "response": "This code is trying to modify an immutable object (a tuple) as it is attempting to assign a value to the first element in a tuple. The correct way to do this is with a list, not a tuple. The code should be changed to:\n\ndef foo(x):\n    x[0] = 2\n    \nwhere the input x is a list instead of a tuple."
    },
    {
        "instruction": "Generate a stack trace for the following JavaScript code:\n\nfunction foo(n) {\n    return n + 1;\n}\n\nfoo(2); ",
        "response": "Traceback (most recent call last):\n  File \"code.js\", line 3, in <module>\n    foo(2)\n  File \"code.js\", line 1, in foo\n    return n + 1\nTypeError: unsupported operand type(s) for +: 'int' and 'str'"
    },
    {
        "instruction": "Implement a for loop in Python to iterate through a given list of numbers. [1, 2, 3, 4]",
        "response": "for num in [1, 2, 3, 4]:\n    print(num)"
    },
    {
        "instruction": "Identify the data type of the following Python expression:\n\n{\"name\": \"John\", \"age\": 40} ",
        "response": "This expression is a dictionary, which is a type of data structure in Python. A dictionary is a key-value pair, where the key is unique and the value can be a list of data items or a single item. In this example, the key is \"name\" and the value is \"John\", and the key is \"age\" and the value is 40."
    },
    {
        "instruction": "Rewrite the following code snippet in Python to print out the word \"Hello\":\n\nprint(\"Hello\") ",
        "response": "print(\"Hello\")"
    },
    {
        "instruction": "Using Javascript, create an object that has a property of message with a value of \"Hello, World\" ",
        "response": "let obj = {\n   message: \"Hello, World\"\n}"
    },
    {
        "instruction": "Construct an object in JavaScript to store the details of a person with the fields \"name\",\"age\" and \"address\". ",
        "response": "let person = {\n  \"name\": \"John Doe\",\n  \"age\": 25,\n  \"address\": \"123 Main St, New York, NY 10001\"\n}"
    },
    {
        "instruction": "Write a JavaScript code to sort the characters of a string alphabetically. ",
        "response": "function sortString(str) { \n  return str.split(\"\").sort().join(\"\"); \n}"
    },
    {
        "instruction": "Create a regular expression pattern in JavaScript that checks if a given string is a valid mobile phone number in India. ",
        "response": "^[6-9]\\d{9}$"
    },
    {
        "instruction": "Create a machine learning model in Python using the given data that classifies the data into either 'positive' or 'negative'. <contents of the dataset>, data type: binary classification",
        "response": "# Load the dataset\nX, y = <contents of the dataset>\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy score: \", accuracy)"
    },
    {
        "instruction": "Develop a Python code to extract all words from a sentence that begin with a specific letter. sentence = \"I love coding in Python\"\nletter = \"P\"",
        "response": "sentence = \"I love coding in Python\"\nletter = \"P\"\n\nwords_starting_with_P = [word for word in sentence.split() if word.startswith(letter)]\n\nprint(words_starting_with_P)\n# Output: ['Python']"
    },
    {
        "instruction": "Write a web scraper in Python to collect the data from the top 1000 IMDB movies ",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&view=simple&count=250&start=1'\nhtml_doc = requests.get(url).text\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# extract data from HTML table\ntable = soup.find('table', attrs={'class': 'chart'})\nmovies = []\nfor row in table.find_all('tr')[1:]:\n    title = row.find('td', style='').get_text()\n    rating = row.find('td', class_='ratingColumn imdbRating').get_text().strip()\n    movies.append({'title': title, 'rating': rating})\n\nprint(movies)"
    },
    {
        "instruction": "Write a JavaScript program to iterate through a 1D array, and print each value. array = [1,2,3,4]",
        "response": "const array = [1,2,3,4];\n\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}"
    },
    {
        "instruction": "Replace the placeholders in the following Python code snippet with appropriate values. for x in range(__, __):\n    print(x)",
        "response": "for x in range(0, 10):\n    print(x)"
    },
    {
        "instruction": "Create a multi-dimensional array in Python. ",
        "response": "arr = [[1,2,3], [4,5,6], [7,8,9]]"
    },
    {
        "instruction": "Create a loop in Python to multiply each element of a list with 10. lst = [1, 2, 3, 4, 5]",
        "response": "def multiply_list(lst):\n    for i in range(len(lst)):\n        lst[i] *= 10\n    return lst"
    },
    {
        "instruction": "Complete the following JavaScript function so that it reads the string parameter and prints all the uppercase letters. function print_uppercase_letters(string) {\n  \n}",
        "response": "function print_uppercase_letters(string) {\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (char === char.toUpperCase()) {\n      console.log(char);\n    }\n  }\n}"
    },
    {
        "instruction": "Create a user-defined type in Python to store information about a person. ",
        "response": "class Person:\n    def __init__(self, firstname, lastname, age):\n        self.firstname = firstname\n        self.lastname = lastname\n        self.age = age\n\nperson1 = Person('John', 'Smith', 25)"
    },
    {
        "instruction": "Define a JavaScript class to store information about a circle. ",
        "response": "class Circle {\n  constructor(radius) {\n    this.radius = radius;\n    this.diameter = radius * 2;\n  }\n  \n  area() {\n    return Math.PI * this.radius * this.radius;\n  }\n  \n  circumference() {\n    return Math.PI * this.diameter;\n  }\n}"
    },
    {
        "instruction": "Use a template in HTML and JavaScript to create a table with 10 columns. ",
        "response": "<table>\n  <thead>\n    <tr>\n      <th>Col1</th>\n      <th>Col2</th>\n      <th>Col3</th>\n      <th>Col4</th>\n      <th>Col5</th>\n      <th>Col6</th>\n      <th>Col7</th>\n      <th>Col8</th>\n      <th>Col9</th>\n      <th>Col10</th>\n    </tr>\n  </thead>\n  <tbody>\n    <script>\n      for (var i = 0; i < 10; i++){\n        document.write(\"<tr><td>\" + i + \"</td></tr>\");\n      }\n    </script>\n  </tbody>\n</table>"
    },
    {
        "instruction": "Implement the bottom up cut rod algorithm in Python. ",
        "response": "def bottomUpCutRod(prices, n): \n \n    # Create an array of size n+1 \n    temp_array = [0 for i in range(n+1)] \n    for i in range(1, n+1): \n        tempval = -float('inf') \n        for j in range(i): \n            tempval = max(tempval, prices[j] + temp_array[i-j-1]) \n        temp_array[i] = tempval \n  \n    return temp_array[n]"
    },
    {
        "instruction": "How can you handle errors in Python? ",
        "response": "Python provides two ways to handle errors: \n\n1. The try and except statement, and \n2. The raise statement.\n\nThe try and except statement is used to catch and handle exceptions, while the raise statement is used to explicitly raise an exception."
    },
    {
        "instruction": "Create a correlation heatmap in Python using a given dataset. import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))",
        "response": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr = data.corr()\n\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)\nplt.show()"
    },
    {
        "instruction": "Generate the Fibonacci sequence in a given range in Python. n = 8",
        "response": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \nFibonacci(n)"
    },
    {
        "instruction": "Write code to convert a given string to all uppercase letters in Python. ",
        "response": "string_org = \"convert this to uppercase\"\nstring_uppercase = string_org.upper() \nprint(string_uppercase) \n# OUTPUT: CONVERT THIS TO UPPERCASE"
    },
    {
        "instruction": "Create a url parser in JavaScript that can return the path from a given url. ",
        "response": "function getPathFromURL(url) {\n  const urlObj = new URL(url);\n  const path = urlObj.pathname;\n  return path;\n}"
    },
    {
        "instruction": "Write a code to print out a multiplication table of a number in Python. ",
        "response": "def print_multiplication_table(num): \n    for i in range(1,11):  \n       print(num,'x',i,'=',num*i)\n\nprint_multiplication_table(5) \n# OUTPUT: 5 x 1 = 5\n        5 x 2 = 10\n        5 x 3 = 15\n        5 x 4 = 20\n        5 x 5 = 25\n        5 x 6 = 30\n        5 x 7 = 35\n        5 x 8 = 40\n        5 x 9 = 45\n        5 x 10 = 50"
    },
    {
        "instruction": "Are string and array objects mutable or immutable in JavaScript? ",
        "response": "In JavaScript, strings and arrays are both mutable objects. This means that these objects can be changed after they have been created, and can be modified in place. Other primitive data types, such as numbers and booleans, are immutable and cannot be changed after they have been created."
    },
    {
        "instruction": "Modify the code to make it compatible with Python 3. mylist = range(20)\n\nfor i in mylist:\n    print i",
        "response": "mylist = list(range(20))\n\nfor i in mylist: \n    print(i)"
    },
    {
        "instruction": "Write a python program to replace the character ‘e' with the character ‘E' for strings of length more than 5 text = \"Hello world!\"",
        "response": "def replace_char(text):\n    if len(text) > 5:\n        return text.replace('e','E')\n    else:\n        return text"
    },
    {
        "instruction": "Write a Python function to split a list of items into groups of n. list = [\"red\", \"green\", \"orange\", \"blue\", \"pink\", \"purple\"]",
        "response": "def split_list(data, n):\n    output = [data[i:i+n] for i in range(0, len(data), n)]\n    return output"
    },
    {
        "instruction": "Write a Python program to check if a list contains a specific item. data = [3, 4, 5, 6, 7]",
        "response": "def contains_item(data, item):\n    return item in data"
    },
    {
        "instruction": "What does a function call statement look like in JavaScript? ",
        "response": "A function call statement in JavaScript looks like: functionName(parameter1, parameter2, ...);"
    },
    {
        "instruction": "Using JavaScript, write a function that takes a string as an argument and prints out whether the string is a Palindrome. str = \"racecar\"",
        "response": "function isPalindrome(str) {\n    var i;\n    var len = str.length;\n\n    for (i = 0; i < len/2; i++) {\n        if (str[i] !== str[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Write a Python program to create a random string of size 10 consisting of alphabets and digits. ",
        "response": "import random \n  \ndef randomString(stringLength=10): \n    lettersAndDigits = string.ascii_letters + string.digits \n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))"
    },
    {
        "instruction": "Create a function in Python to replace a specified element in a given list ",
        "response": "def replace_in_list(list, old_element, new_element):\n  for i, element in enumerate(list):\n    if element == old_element:\n      list[i] = new_element\n  return list"
    },
    {
        "instruction": "Store the following information in a JavaScript object Name: John, Age: 24",
        "response": "let john = {\n  name: \"John\",\n  age: 24\n};"
    },
    {
        "instruction": "Write a Python class to print the sum of an array elements ",
        "response": "class ArraySum: \n    def __init__(self, arr):\n        self.arr = arr\n\n    def sum(self):\n        total = 0\n        for i in self.arr:\n            total += i\n        return total"
    },
    {
        "instruction": "Convert a given JSON string to its Python dictionary equivalent. json_string = '{\"name\":\"John\",\"age\":30}'",
        "response": "import json\npython_dict = json.loads(json_string)"
    },
    {
        "instruction": "What do we mean by immutability in Python? ",
        "response": "Immutability in Python refers to the concept of objects that are unable to be modified. Immutable objects are specified when they are created and cannot be changed beyond that point. For example, tuples and strings are always immutable."
    },
    {
        "instruction": "Edit the following Python code to print out “The answer is X” print(\"X + 5 = 10\")",
        "response": "print(\"The answer is \" + str(10 - 5))"
    },
    {
        "instruction": "Create a rectangle using the turtle library in Python ",
        "response": "import turtle\nt = turtle.Turtle() \nt.forward(100) \nt.left(90) \nt.forward(50) \nt.left(90) \nt.forward(100) \nt.left(90) \nt.forward(50) \nt.left(90)"
    },
    {
        "instruction": "Use JavaScript to illustrate the concept of inheritance with an example. ",
        "response": "In JavaScript, inheritance is an object-oriented programming concept where an object inherits the properties and methods from its parent object. To illustrate this concept, consider the example of a Person being a parent object and a Student being the child object. The Person object would have properties such as age, name, and gender, while the Student object would inherit all of those properties and have additional properties such as grade and student_ID."
    },
    {
        "instruction": "Write a JavaScript code to calculate the remainder when the variable ``num`` is divided by ``5``. let num = 10;",
        "response": "let remainder = num % 5; // remainder is equal to 0"
    },
    {
        "instruction": "Make a function in javascript that takes two parameters ``name1`` and ``name2`` and returns both of the names together with a dash between them. let name1 = 'John', name2 = 'Smith';",
        "response": "function combineNames(name1, name2) {\n  return name1 + '-' + name2;\n}"
    },
    {
        "instruction": "Define a python function called ``string_length`` that can take a string as an argument and output the length of that string. ",
        "response": "def string_length(str):\n  return len(str)"
    },
    {
        "instruction": "Create an if/else statement in JavaScript that checks if a variable ``age`` is greater than 18 and prints \"Adult\" if it is, and \"Minor\" if it isn't. let age = 22;",
        "response": "if (age > 18) {\n  console.log('Adult');\n} else {\n  console.log('Minor');\n}"
    },
    {
        "instruction": "Find an element in a JavaScript array called ``names`` using the index position 3. let names = ['John', 'Jane', 'Emily', 'Michael', 'David'];",
        "response": "let element = names[3]; // element is equal to 'Michael'"
    },
    {
        "instruction": "Create an array filtering function using JavaScript ",
        "response": "function filterArray(array){\n   let newArray = [];\n   for(let i=0; i<array.length; i++){\n      if(array[i] >= 0){\n         newArray.push(array[i]);\n      }\n   }\n   return newArray;\n}"
    },
    {
        "instruction": "Write a python code to print every key and its corresponding value in a dictionary. {\"Name\": \"John\", \"Age\": 20, \"Country\": \"USA\"}",
        "response": "dic = {\"Name\": \"John\", \"Age\": 20, \"Country\": \"USA\"} \nfor key, value in dic.items():  \n    print(key + \" : \" + str(value))"
    },
    {
        "instruction": "Create a function in Javascript to convert hour in 24-hours format to hour in 12-hours format. 14",
        "response": "function convert24HourFormatTo12HourFormat(hours) {\n    if (hours > 12) {\n      return (hours - 12) + \"PM\";\n    } else if (hours == 12) {\n      return hours + \"PM\";\n    } else if (hours == 0) {\n        return 12 + \"AM\";\n    } else {\n      return hours + \"AM\";\n    }   \n}"
    },
    {
        "instruction": "Suggest a way to serialize a binary tree in python. ",
        "response": "def serializeBinaryTree(root):\n    if root == None:\n        return \"#\"\n    \n    serializedTree = \"\"\n    serializedTree += str(root.val) + ','\n    serializedTree += serializeBinaryTree(root.left) + ','\n    serializedTree += serializeBinaryTree(root.right)\n\n    return serializedTree"
    },
    {
        "instruction": "Suggest a python code to print a 2D board with 'X' and 'O'. [['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]",
        "response": "board = [['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]\n\nfor row in board:\n    for cell in row:\n        print(cell, end=\" \")\n    print()"
    },
    {
        "instruction": "How would you print \"Goodbye\" ten times in Python? ",
        "response": "for i in range(10):\n print(\"Goodbye\")"
    },
    {
        "instruction": "Create an object method to calculate the area of a triangle in Python. ",
        "response": "def calculate_area(self):\n  return (self.base * self.height) / 2"
    },
    {
        "instruction": "Name five different Python libraries used for visualization. ",
        "response": "Matplotlib, Seaborn, Bokeh, Plotly, and Altair."
    },
    {
        "instruction": "Compare two Python lists having integers and write a function to output the differences list_a = [1, 2, 3]\nlist_b = [2, 3, 4]",
        "response": "def get_diff(list_a, list_b):\n  diff = list_a\n  for i in list_b:\n    if i in list_a:\n      diff.remove(i)   \n  return diff"
    },
    {
        "instruction": "Write a Python code to convert a binary tree to its mirror tree ",
        "response": "def mirror_tree(root): \n    if root is None: \n        return\n  \n    # Do the postorder traversal to traverse down to leaf nodes \n    mirror_tree(root.left) \n    mirror_tree(root.right) \n  \n    # Swap the pointers in this node \n    root.left, root.right = root.right, root.left"
    },
    {
        "instruction": "Develop a Python script to sum up all the individual digits of a given number 354",
        "response": "def sum_digits(input_number):\n \n    sum_of_digits = 0\n    while input_number > 0:\n        last_digit = input_number % 10\n        sum_of_digits += last_digit\n        input_number //= 10\n \n    return sum_of_digits\n \nsum_digits(354)"
    },
    {
        "instruction": "How could you read a specific compression format such as .zip in Python? ",
        "response": "Python has a built-in zipfile module which provides support for reading and writing zip archives in native Python code. The module provides a ZipFile object with methods to read and extract contents of the archive, as well as a class representing individual entries such as files and directories.\n\nFor example, to extract an archive using the ZipFile object, you can do the following:\n\nimport zipfile\n\nwith zipfile.ZipFile(\"path/to/archive.zip\", \"r\") as zf:\n zf.extractall(\"path/to/destination/directory\")"
    },
    {
        "instruction": "Create a class in Python that contains the following methods: ",
        "response": "class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n\n    def getName(self):\n        return self.name\n\n    def getGrade(self):\n        return self.grade"
    },
    {
        "instruction": "Edit the following JavaScript function to throw an error when the user enters a negative number. function printSquare(num) {\n    console.log(num * num);\n}",
        "response": "function printSquare(num){\n    if (num < 0){\n        throw new Error('Negative number is not allowed');\n    }\n    console.log(num * num);\n}"
    },
    {
        "instruction": "What type of sorting algorithm does the following Python code implement?\n\ndef sort(nums):\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[j] < nums[i]:\n        nums[j], nums[i] = nums[i], nums[j] ",
        "response": "The code implements Bubble Sort, which is a type of comparison sorting algorithm. It works by repeatedly swapping adjacent elements if they are in the wrong order."
    },
    {
        "instruction": "What is the output of the following JavaScript code?\n \nlet x = 0;\nwhile(x <= 5) {\n   console.log(x);\n   x++;\n} ",
        "response": "The output of the code will be 0, 1, 2, 3, 4, 5. The loop will run until the condition (x <= 5) is satisfied and print out the current value of x each time."
    },
    {
        "instruction": "Find the runtime complexity of this Python program. def EvenOrOdd(items):\n    if len(items) == 0:\n        return 0\n\n    even_count = 0\n    for item in items:\n        if item % 2 == 0:\n            even_count += 1\n\n    return even_count",
        "response": "This program has a runtime complexity of O(n), where n is the number of items in the list. This is because the time taken to complete the program increases linearly with the number of items in the list."
    },
    {
        "instruction": "Build a function in Python for selecting all rows from a Pandas DataFrame where a column value is equal to a given value. df = pd.DataFrame({'A':[1, 2, 3, 4, 5],\n                   'B':[2, 3, 4, 5, 6],\n                   'C':[3, 4, 5, 6, 7],\n                   'D':[4, 5, 6, 7, 8]})\ncol_1 = 'A' \nvalue = 3",
        "response": "def select_rows(df, col_1, value): \n    return df[df[col_1] == value]"
    },
    {
        "instruction": "Merge two sorted lists of integers using Python. list_1 = [2, 5, 9]\nlist_2 = [1, 4, 6, 7]",
        "response": "def merge_lists(list_1, list_2):\n    merged_list = []\n    l1, l2 = 0, 0\n\n    while l1 < len(list_1) and l2 < len(list_2):\n        if list_1[l1] <= list_2[l2]:\n            merged_list.append(list_1[l1])\n            l1 += 1\n        else:\n            merged_list.append(list_2[l2])\n            l2 += 1\n\n    merged_list += list_1[l1:]\n    merged_list += list_2[l2:]\n\n    return merged_list"
    },
    {
        "instruction": "Create a neural network class in Python using NumPy. ",
        "response": "import numpy as np\n\nclass NeuralNetwork():\n    \n    def __init__(self):\n        np.random.seed(1)\n\n        self.weights = 2 * np.random.random((3,1)) - 1\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(self, x):\n        return x * (1 - x)\n\n    def train(self, training_inputs, training_outputs, training_iterations):\n        for iteration in range(training_iterations):\n            output = self.think(training_inputs)\n            error = training_outputs - output\n            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))\n            self.weights += adjustments\n\n    def think(self, inputs):\n        inputs = inputs.astype(float)\n        output = self.sigmoid(np.dot(inputs, self.weights))\n        return output"
    },
    {
        "instruction": "Update the following JavaScript code to add a new item to the end of an array using the push() method. let myArr = ['a', 'b', 'c']",
        "response": "let myArr = ['a', 'b', 'c'];\nmyArr.push('d');"
    },
    {
        "instruction": "Create a Python variable a with value 5. ",
        "response": "a = 5"
    },
    {
        "instruction": "Given a variable arr containing integers, write python code to remove all duplicate elements from the array and return the new array. arr = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6]",
        "response": "arr = list(set(arr)) # [1, 2, 3, 4, 5, 6]"
    },
    {
        "instruction": "In Python, how could you print a list from the last element to the first element? ",
        "response": "for element in reversed(my_list):\n    print(element)"
    },
    {
        "instruction": "Create a dictionary in Python whose keys are the integers from 1 to 10 and whose values are the squares of the keys. ",
        "response": "d = {i: i*i for i in range(1, 11)} # {1:1, 2:4, etc.}"
    },
    {
        "instruction": "Write an algorithm to find the missing number in an array of n consecutive integers in Python. arr = [1, 2, 3, 5, 6, 7, 8]",
        "response": "def find_missing_num(arr):\n    missing = 0\n    for i in range(arr[0], arr[-1] + 1):\n        if i not in arr:\n            missing = i\n    return missing  # 4"
    },
    {
        "instruction": "Count the number of occurrences of a given string in another string in Python. string1 = 'A quick brown fox jumps over the lazy dog.'\nstring2 = 'dog'",
        "response": "string1.count(string2) # 1"
    },
    {
        "instruction": "Given a list of strings, write a program to return a new list of all strings which have length greater than 4 in Python. lst = ['cat', 'dog', 'apple', 'banana']",
        "response": "new_lst = [x for x in lst if len(x) > 4] # ['apple', 'banana']"
    },
    {
        "instruction": "Generate a while loop in python to find out the sum of first 5 even numbers. ",
        "response": "i = 2\nsum = 0\n\nwhile i < 10:\n    sum += i\n    i += 2\n\nprint(\"The sum of first 5 even numbers is: \", sum)"
    },
    {
        "instruction": "You need to generate a Javascript program that prints \"Hello World\". ",
        "response": "console.log(\"Hello World\");"
    },
    {
        "instruction": "Write a Python program that prints out the magnitude of the three-dimensional vector with the following components: (x, y, z). (1, 2, 3)",
        "response": "import math\n\ndef magnitude(x, y, z):\n    return math.sqrt(x * x + y * y + z * z)\n\nprint(magnitude(1, 2, 3))"
    },
    {
        "instruction": "How to decode a Base64 string to its corresponding string representation in Python? base64_string = \"SGVsbG8gV29ybGQ=\"",
        "response": "import base64\nstring = base64.b64decode(base64_string).decode(\"utf-8\")"
    },
    {
        "instruction": "How to remove the last character of a string in Python? word = \"Hello\"",
        "response": "word = word[:len(word)-1]"
    },
    {
        "instruction": "Write a Javascript code to add four numbers and print the result. numbers = [1, 2, 3, 4]",
        "response": "let numbers = [1, 2, 3, 4];\nlet result = numbers.reduce((a, b) => a + b);\nconsole.log(\"Result: \" + result);"
    },
    {
        "instruction": "Generate a correct Python code for a data structure which supports the following operations - insert(key, value)\nget(key)\ndelete(key)",
        "response": "class Map(object):\n    \n    def __init__(self): \n        # a dictionary-based data structure \n        # to store (key, value) pairs \n        self.data = {} \n  \n    # insert the given value with the given key \n    def insert(self, key, value): \n        self.data[key] = value     \n  \n    # get the value for the given key \n    def get(self, key): \n        return self.data[key] \n  \n    # delete the datapoint with the given key \n    def delete(self, key): \n        self.data.pop(key)"
    },
    {
        "instruction": "Modify the following Python program to contain an input. num1 = 10\nnum2 = 20\nsum = num1 + num2\n\nprint(\"The sum of two numbers is\",sum)",
        "response": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\nsum = num1 + num2\n\nprint(\"The sum of the two numbers is\", sum)"
    },
    {
        "instruction": "Write a Python function to analyze the performance of different sorting algorithms. List = [6, 8, 0, 1, 4, 5, 7, 3, 2, 9]",
        "response": "def analyze_sorting_performance(list):\n    \"\"\"\n    Analyze the performance of different sorting algorithms \n    on the given list. \n    \"\"\"\n    insertion_sort_list = list.copy()\n    insertion_sort(insertion_sort_list)\n    bubble_sort_list = list.copy()\n    bubble_sort(bubble_sort_list)\n    merge_sort_list = list.copy()\n    merge_sort(merge_sort_list)\n    quick_sort_list = list.copy()\n    quick_sort(quick_sort_list)\n    \n    print(\"Insertion Sort: {}\".format(insertion_sort_list))\n    print(\"Bubble Sort: {}\".format(bubble_sort_list))\n    print(\"Merge Sort: {}\".format(merge_sort_list))\n    print(\"Quick Sort: {}\".format(quick_sort_list))"
    },
    {
        "instruction": "Create a class in Python that can be used to store the details of a student. ",
        "response": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def set_details(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def get_details(self):\n        return f'Name: {self.name}, Age: {self.age}, Gender: {self.gender}'"
    },
    {
        "instruction": "Implement a binary search algorithm in Python for searching for a specific element in a given list of numbers. list = [1, 3, 5, 7, 9, 11 ] and target number =7",
        "response": "def binary_search(lst, target):\n\n    \"\"\"\n    Implements a binary search algorithm \n    in Python for searching for a specific \n    element in the given list of numbers.\n    \"\"\"\n    low = 0\n    high = len(lst)-1\n\n    while low <= high:\n        mid = (low + high)//2\n        if lst[mid] == target:\n            return mid\n\n        elif lst[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "instruction": "Write a regular expression in Python to find all words that start with \"A\". ",
        "response": "import re\n\nwords = re.findall(r'\\bA\\w+', text)"
    },
    {
        "instruction": "Write a JavaScript statement to switch the value of two variables. ",
        "response": "[a, b] = [b, a];"
    },
    {
        "instruction": "Construct a Python class to save details of student. ",
        "response": "class Student():\n    def __init__(self, name, age, year):\n        self.name = name\n        self.age = age\n        self.year = year\n  \n    def get_name(self):\n        return self.name\n  \n    def get_age(self):\n        return self.age\n  \n    def get_year(self):\n        return self.year"
    },
    {
        "instruction": "Using JavaScript, create an interactive web page that displays a list of strings taken from the user's inputs. ",
        "response": "// JavaScript Code\nlet list = [];\nconst addToList = (str) => {\n list.push(str);\n}\n\nconst createList = () => {\nlet html = \"<ul>\\n\";\n for(let i = 0; i < list.length; i++) {\n html += `<li>${list[i]}</li>\\n`;\n }\nhtml += \"</ul>\";\n document.getElementById('list').innerHTML = html;\n}"
    },
    {
        "instruction": "Given a JSON object, write a JavaScript function to flatten the object keys. {\n    \"name\": {\n        \"first\": \"John\",\n        \"last\": \"Smith\"\n    },\n    \"age\": 25\n}",
        "response": "// JavaScript Code\nfunction flattenKeys(obj) {\n let flattened = {};\n for (let key in obj) {\n if (typeof obj[key] === 'object') {\n for (let subkey in obj[key]) {\n flattened[`${key}_${subkey}`] = obj[key][subkey];\n }\n } else {\n flattened[key] = obj[key];\n }\n }\n return flattened;\n}"
    },
    {
        "instruction": "Create a Python program that takes a comma-separated string and outputs a dictionary of words and the frequency of their occurrences. apple, banana, apple, orange",
        "response": "def get_word_frequency(string):\n words = string.split(', ')\n frequencies = {}\n for word in words:\n if word in frequencies:\n frequencies[word] += 1\n else:\n frequencies[word] = 1\n return frequencies"
    },
    {
        "instruction": "Using JavaScript, create a program to check whether two given strings are an anagram or not. ",
        "response": "// JavaScript Code\nfunction checkAnagrams(str1, str2) {\n const s1 = str1.split('').sort().join('');\n const s2 = str2.split('').sort().join('');\n return s1 === s2;\n}"
    },
    {
        "instruction": "Write a Python function to calculate the sum of the areas of a given list of circles, where each circle is defined as a dictionary containing 'radius' and 'x' as keys. [{'radius': 3, 'x': 5}, {'radius': 4, 'x': 7}, {'radius': 5, 'x': 9}]",
        "response": "def sum_areas(circles):\n total = 0\n for circle in circles:\n area = 3.14 * circle['radius'] ** 2\n total += area\n return total"
    },
    {
        "instruction": "Write a Python program to delete a given key from a dictionary. ",
        "response": "def delete_key(d, key):\n if key in d:\n del d[key]\n\nd = {'a':1, 'b':2}\ndelete_key(d, 'a')"
    },
    {
        "instruction": "Write a function in JavaScript to partition the array into even and odd numbers. ",
        "response": "function partitionArray(arr) {\n  const evenArr = [];\n  const oddArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 == 0) {\n      evenArr.push(arr[i]);\n    } else {\n      oddArr.push(arr[i]);\n    }\n  }\n  return [evenArr, oddArr];\n}"
    },
    {
        "instruction": "Implement a function in Python that prints out the grade for a student, given their marks in a particular subject. marks = 90",
        "response": "def get_grade(marks):\n    if marks>=90:\n        return \"A\"\n    elif marks>=80 and marks<90:\n        return \"B\"\n    elif marks>=70 and marks<80:\n        return \"C\"\n    elif marks>=60 and marks<70:\n        return \"D\"\n    else:\n        return \"F\"\n\nprint(get_grade(marks))"
    },
    {
        "instruction": "Generate a python class for calculating prime numbers up to n. n = 10",
        "response": "class PrimeCalculator:\n    def __init__(self, n):\n        self.n = n\n    \n    def get_primes(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n        return primes"
    },
    {
        "instruction": "Explain why using \"For\" loops can be a better choice than using \"While\" loops in Python. ",
        "response": "For loops are better than while loops in Python because they provide a clearer syntax and are easier to debug due to their predictable and structured behavior. For loops are also more efficient than while loops since they don't require explicit initialization and condition checking, while while loops need to check if a condition is true on each iteration. This makes for loops faster and more memory-efficient, as it requires fewer operations compared to while loops."
    },
    {
        "instruction": "Rewrite the given code to use JavaScript Promises instead of callbacks. function doSomething(callback) {\n  // do something\n  callback(\"Done!\");\n}\n\nfunction main() {\n  doSomething(function(result) {\n    console.log(result);\n  });\n}\n\nmain();",
        "response": "function doSomething() {\n  return new Promise((resolve, reject) => {\n    // do something\n    resolve(\"Done!\");\n  });\n}\n\nfunction main() {\n  doSomething()\n    .then((result) => {\n      console.log(result);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n}\n\nmain();"
    },
    {
        "instruction": "Create a class in python to store a collection of words and their frequency count. ",
        "response": "class FreqCollection(object):\n\n    def __init__(self):\n        self.words = {}\n\n    def add_word(self, word):\n        if word in self.words:\n            self.words[word] += 1\n        else:\n            self.words[word] = 1\n\n    def get_word_freq(self, word):\n        if word in self.words:\n            return self.words[word]\n        return 0"
    },
    {
        "instruction": "Create a JavaScript function that reverse alphabetically sort an array of numbers. [9, 2, 8, 4, 7]",
        "response": "function reverseSort(array){\n  return array.sort(function(a, b){\n    return b - a;\n  });\n}\n\nreverseSort([9,2,8,4,7]);\n// Output: [9,8,7,4,2]"
    },
    {
        "instruction": "How would you create a for-loop in Python to iterate through all the integers from 1 to 10? ",
        "response": "for i in range(1,11):\n  print(i)"
    },
    {
        "instruction": "Calculate the sum of the following numbers using JavaScript. [1, 4, 8, 10]",
        "response": "let sum = 0;\nfor(i = 0; i < arr.length; i++){\n  sum += arr[i];\n}\n\nconsole.log(sum); // Output: 23"
    },
    {
        "instruction": "Generate a ternary tree data structure in Python. ",
        "response": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.center = None\n        self.right = None"
    },
    {
        "instruction": "Create a list of strings in Python with 4 elements. ",
        "response": "mylist = ['Hello', 'World', 'This', 'Is']"
    },
    {
        "instruction": "How can we sort an array of numbers in ascending order in Python? ",
        "response": "sorted_numbers = sorted(numbers)  # returns a sorted list of numbers in ascending order."
    },
    {
        "instruction": "Transform the following array into a string of comma-separated values in Python. [1, 2, 3, 4]",
        "response": "','.join([str(i) for i in [1, 2, 3, 4]]) # returns \"1,2,3,4\""
    },
    {
        "instruction": "Transform the following string in Python into a dictionary whose keys are the names of the colors and the values are the hex codes for the colors. \"red #FF0000, blue #0000FF, green #00FF00\"",
        "response": "colors = 'red #FF0000, blue #0000FF, green #00FF00'\n\ndict_colors = {i.split()[0]:i.split()[1] for i in colors.split(', ')} # returns {'red': '#FF0000', 'blue': '#0000FF', 'green': '#00FF00'}"
    },
    {
        "instruction": "Edit the following HTML code to include a JavaScript alert that appears when a user clicks the button. <button>Click Me!</button>",
        "response": "<button onclick=\"alert('You have clicked the button!')\">Click Me!</button>"
    },
    {
        "instruction": "Write a JavaScript function that takes two numbers and a mathematical operator as parameters and returns the result of the specified operation. x = 6, y = 3, operator = '*'",
        "response": "function calculate(x, operator, y) {\n switch (operator) {\n  case '+':\n   return x + y;\n  case '-':\n   return x - y;\n  case '*':\n   return x * y;\n  case '/':\n   return x / y;\n  case '%':\n   return x % y;\n  default:\n   return NaN;\n }\n}\n\nlet result = calculate(6, '*', 3);\nconsole.log(result); // 18"
    },
    {
        "instruction": "Create a Python script that sets the value of a variable from the command-line. ",
        "response": "import sys\n\n# Set a variable\nvariableName = sys.argv[1]\n\n# Get a value from command line argument\nvalue = sys.argv[2]\n\n# Set the value of the variable\nexec(variableName + \"=\" + value)\n\nprint(variableName)"
    },
    {
        "instruction": "Create a header comment for the following python script. def add(x, y):\n    return x + y",
        "response": "\"\"\"\nThis python script contains a function which takes in two arguments and \nreturns the sum of the two arguments.\n\"\"\"\n\ndef add(x, y):\n    return x + y"
    },
    {
        "instruction": "Modify the given code to handle errors in the following Python script. num = int(input('Enter a number'))\nprint(num * 5)",
        "response": "try:\n    num = int(input('Enter a number'))\n    print(num * 5)\nexcept Exception as e:\n    print(\"Error: {}\".format(e))"
    },
    {
        "instruction": "Create a function that takes a string representation of a JSON object and converts it into a Python dictionary. ",
        "response": "def json_to_dict(json_str):\n    return json.loads(json_str)"
    },
    {
        "instruction": "Write a JavaScript function that checks if a given parameter is a leap year. ",
        "response": "function isLeapYear(year) { \n    return (year % 400 === 0) || ((year % 4 === 0) && (year % 100 != 0)); \n}"
    },
    {
        "instruction": "Implement a quicksort algorithm in Python to sort a list of 6 integers [52,85,23,6,37,77]. [52,85,23,6,37,77]",
        "response": "def quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nprint(quicksort([52,85,23,6,37,77]))"
    },
    {
        "instruction": "Construct an if/else statement in Javascript to display a message depending on the value of a variable called \"age\". let age = 17",
        "response": "if (age < 18) {\n console.log(\"You are not old enough to access this page.\");\n}\nelse {\n console.log(\"Welcome to the page!\");\n}"
    },
    {
        "instruction": "Find an example of a sorting algorithm in Python. ",
        "response": "Example of a sorting algorithm in Python:\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        # Find the minimum element in remaining\n        # unsorted array\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n \n        # Swap the found minimum element with\n        # the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]"
    },
    {
        "instruction": "You need to code a function in JavaScript that takes in a string and checks if the length of string is greater than 5 characters. ",
        "response": "function checkStringLength(str) {\n  return str.length > 5;\n}"
    },
    {
        "instruction": "Modify the Python code so that it can be used to find the GCD of 3 numbers. def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n\n    return a",
        "response": "def gcd(a, b, c): \n    if(b==0 and c==0): \n        return a \n    if(c==0): \n        return gcd(b, a % b) \n    return gcd(gcd(a, b), c)"
    },
    {
        "instruction": "Write a script in Python to remove the characters from the given string which are not in the alphabet. string=\"!!He##ll%o W..or##ld!!\"",
        "response": "new_string = \"\"\nfor char in string:\n    if char.isalpha():\n        new_string += char\n\nprint (new_string)"
    },
    {
        "instruction": "Modify the following python program to return the sum of even numbers from the input list. def sum_list(input):\n    sum = 0\n    for num in input:\n        sum += num\n    return sum",
        "response": "def sum_list(input):\n    sum = 0\n    for num in input:\n        if num % 2 == 0:\n            sum += num\n    return sum"
    },
    {
        "instruction": "Create an object in JavaScript to store the name, age, and email address of a person. ",
        "response": "let person = {\n    name: \"John Doe\",\n    age: 25,\n    email: \"john.doe@example.com\"\n}"
    },
    {
        "instruction": "Removes all elements from an array in JavaScript. let arr = [1, 2, 3, 4, 5];",
        "response": "arr.length = 0;"
    },
    {
        "instruction": "Using python, limit the number of characters printed in the following statement to only 10: statement = \"Hello, World!\"",
        "response": "statement = \"Hello, World!\"\n\nprint(statement[:10])"
    },
    {
        "instruction": "Given the following code in Python, identify the mistake and fix it. name = input(\"What is your name? \"",
        "response": "name = input(\"What is your name? \") # Missing closing quotation mark"
    },
    {
        "instruction": "Create a list in Python called \"my_list\" and populate it with five integers ranging from 0 to 5. ",
        "response": "my_list = [0, 1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Write a JavaScript Object that contains employee data such as name, age and contact number. ",
        "response": "let employeeDetails = { \n  name: \"John Smith\", \n  age: 26, \n  contactNumber: \"123-456-7890\"\n};"
    },
    {
        "instruction": "Develop a DFS algorithm in Python. ",
        "response": "def dfs(graph, start, end):\n    # create a visited array\n    visited = [False] * len(graph)\n\n    # create a stack\n    stack = []\n\n    # mark the starting node as visited and push it in the stack\n    stack.append(start)\n\n    while stack:\n        # get the current node\n        node = stack.pop()\n\n        # if the node hasn't been visited\n        if not visited[node]:\n            # mark the node as visited\n            visited[node] = True\n\n            # check for the end node\n            if node == end:\n                return True\n\n            # append the neighbors of the node to the stack\n            neighbors = graph[node]\n            for neighbor in neighbors:\n                stack.append(neighbor)\n\n    # end node not found\n    return False"
    },
    {
        "instruction": "Develop a program to accept one number from the user and display its factorial using a Python function. 5",
        "response": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num-1) \n    \nnum = int(input('Enter number to find factorial: '))\nfactorial = factorial(num)\nprint('Factorial of', num, 'is', factorial)"
    },
    {
        "instruction": "Create a function in JavaScript to convert RGB values to HEX values. ",
        "response": "function rgbToHex(arr) {\n  let hex = '#';\n  for (let i = 0; i < 3; i++) {\n    let val = arr[i];\n    if (val < 16) {\n      hex += '0';\n    }\n    hex += val.toString(16);\n  }\n  return hex;\n}"
    },
    {
        "instruction": "Develop a function in Python to filter out all negative numbers in a given list. [2, 3, -1, 4, -5, 6]",
        "response": "def filter_negative_numbers(nums):\n    # return only positive numbers\n    return [num for num in nums if num >= 0]\n\nprint(filter_negative_numbers([2, 3, -1, 4, -5, 6]))"
    },
    {
        "instruction": "Write a function in JavaScript that returns the longest item in the array. [\"a\", \"ab\", \"abc\", \"abcd\"]",
        "response": "function longestItem(arr) {\n    // Initializing the longest item to the first item in the array for comparison\n    let longest = arr[0];\n    for (let item of arr) {\n        // Comparing the length of each item to the longest\n        if (item.length > longest.length) {\n            longest = item;\n        }\n    }\n\n    return longest;\n}\n\nconsole.log(longestItem([\"a\", \"ab\", \"abc\", \"abcd\"]));"
    },
    {
        "instruction": "Create a python function that takes a single integer as an argument and prints out the corresponding multiplication table. ",
        "response": "def print_table(n):\n    for i in range(1, 11):\n        table = n * i\n        print(f\"{n} X {i} = {table}\")"
    },
    {
        "instruction": "Create an identifier in Python that starts with an underscore followed by the letter 'a'. ",
        "response": "_a"
    },
    {
        "instruction": "How do you retrieve the 3rd element of a set in Python? ",
        "response": "In Python, you can retrieve the 3rd element of a set by using the index operator []. The 3rd element of a set can be accessed by using the syntax set[2]. Note that the indexing in Python starts from 0, so the 3rd element will have index 2."
    },
    {
        "instruction": "Create a function in Python that takes three numerical inputs and returns the maximum value. ",
        "response": "def max_value(num1, num2, num3):\n    max_num = max(num1, num2, num3)\n    return max_num"
    },
    {
        "instruction": "Construct a JavaScript program that displays the current date and time. ",
        "response": "let date = new Date();\ndocument.write(date);"
    },
    {
        "instruction": "Write a Python program to print the right angled triangle using asterisk. ",
        "response": "for i in range(0, 6): \n\tfor j in range(0, i + 1): \n\t\tprint(\"* \", end=\"\")\n\tprint(\"\\r\")"
    },
    {
        "instruction": "Create a function to sort items in a list alphabetically in Python. ",
        "response": "def alphabetical_sort(lst):\n    sorted_list = sorted(lst, key=lambda x: x.lower())\n    return sorted_list"
    },
    {
        "instruction": "Suggest an appropriate approach to sort an array of numbers using JavaScript. ",
        "response": "A popular sorting approach for an array of numbers using JavaScript is the Quicksort algorithm. This algorithm partitions an array into two smaller subarrays and then recursively applies the same partitioning process on the subarrays. The Quicksort algorithm is an efficient sorting algorithm with a time complexity of O(nlogn)."
    },
    {
        "instruction": "Given a text string, generate a Python code snippet to find the number of occurrences of a given word The quick brown fox jumped over the lazy dog",
        "response": "def num_occurrences(text, word):\n    count = 0\n    words = text.split()\n    for w in words:\n        if w == word:\n            count += 1\n    return count"
    },
    {
        "instruction": "Using the provided input, calculate the SHA256 checksum in Python. string = \"Hello World!\"",
        "response": "import hashlib\n \ndef sha256_calc(string):\n    \"\"\"\n    Calculate SHA256 checksum in Python.\n    \"\"\"\n    sha_signature = hashlib.sha256(string.encode()).hexdigest()\n    return sha_signature"
    },
    {
        "instruction": "Edit the following JavaScript code to add a new object to an array let array = [{ id: 1, name: 'Fred'}, {id: 2, name: 'Terry'}]",
        "response": "let array = [{ id: 1, name: 'Fred'}, {id: 2, name: 'Terry'}, {id: 3, name: 'Marc'}]"
    },
    {
        "instruction": "In Python, define a class for a rectangle object. ",
        "response": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def __str__(self):\n        return f\"This is a rectangle with width of {self.width} and height of {self.height}.\""
    },
    {
        "instruction": "How do you use the built-in function filter() in  Python? ",
        "response": "The filter() function in Python takes a function and an iterable as input arguments. The filter() function filters out elements from the given iterable (for example, a list) that don't satisfy the given condition determined by the function. It returns an iterator containing the filtered elements. Syntax: filter(function, iterable) Example: my_list = [1,4,5,6,7] filtered_list = filter(lambda x: x % 2 == 0, my_list) print(list(filtered_list)) Output: [4, 6]"
    },
    {
        "instruction": "Create a Python script to add a new field of “car color” to the given JSON object. {\n\"id\": \"12345\",\n\"model\": \"Honda\",\n\"year\": 2021\n}",
        "response": "import json\n\ndata = [\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021\n    }\n]\n\ndata[0][\"color\"] = \"red\"\n\njson_object = json.dumps(data, indent = 4)\nprint(json_object)\n\nOutput: \n[\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021,\n        \"color\": \"red\"\n    }\n]"
    },
    {
        "instruction": "Create a Python script to convert the given JSON object into an XML document. {\n \"username\": \"John123\", \n \"age\": 23,\n \"country\": \"USA\"\n}",
        "response": "import xmltodict\nimport json\n\njson_object = {\n \"username\": \"John123\", \n \"age\": 23,\n \"country\": \"USA\"\n}\n\nxml_message = xmltodict.unparse(json.loads(json.dumps(json_object)), pretty=True)\n\nprint(xml_message)\n\nOutput:\n<root>\n  <username>John123</username>\n  <age>23</age>\n  <country>USA</country>\n</root>"
    },
    {
        "instruction": "Given the following list of JavaScript objects and a particular key, write a function to return an array of the values corresponding to that key. [\n  {\n    \"name\": \"John\",\n    \"age\": 25\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 28\n  },\n  {\n    \"name\": \"Dave\",\n    \"age\": 31\n  }\n ],\nkey = 'age'",
        "response": "function getValues(objList, key) {\n  let results = [];\n  objList.forEach(function(obj) {\n    if (obj.hasOwnProperty(key)) {\n      results.push(obj[key]);\n    }\n  });\n  return results;\n}\n\nlet ages = getValues(objList, 'age');\nconsole.log(ages);\n\nOutput:\n[25, 28, 31]"
    },
    {
        "instruction": "Create a Python program to find the average of the given numbers in the list ",
        "response": "my_list = [2, 4, 10, 20]\n\ndef average(nums):\n    return sum(nums) / len(nums)\n\nprint(average(my_list))\n\nOutput:\n8.0"
    },
    {
        "instruction": "Explain this JavaScript code snippet. function sayHello(name) {\n    console.log('Hello ' + name);\n}",
        "response": "This code snippet is a function declaration named sayHello() which takes one argument, 'name'. It prints a string containing the word \"Hello\" and the value of the 'name' argument to the console. It is a common way to communicate with the user through console messages."
    },
    {
        "instruction": "How do we create an object in JavaScript using the object literal notation? ",
        "response": "The object literal notation is a way to create an object in JavaScript by wrapping the set of comma-separated key: value pairs in curly braces. For example, to create an object containing two properties, you can write: \n\nvar obj = {\n    name: 'John',\n    age: 22\n};"
    },
    {
        "instruction": "Write a JavaScript code snippet to add an event listener to a button with the ID 'submitButton'. ",
        "response": "document.getElementById('submitButton').addEventListener('click', function() {\n    // code to run when button is clicked\n});"
    },
    {
        "instruction": "Show a way to iterate through an object in JavaScript. ",
        "response": "The most common way to iterate through an object in JavaScript is to use a for-in loop. It will loop through the object's properties and execute the code within the loop for each property. For example: \n\nlet obj = { a: 1, b: 2, c: 3 }; \nfor (let property in obj) {\n    console.log(property + ':' obj[property]);\n}\n\n// Output: a:1, b:2, c:3"
    },
    {
        "instruction": "Explain how proxy objects work in JavaScript. ",
        "response": "Proxy objects in JavaScript enable developers to intercept and customize operations performed on objects. It acts as a bridge between the concept of direct object property access and the actual implementation behind the scenes. The proxy wraps the incoming object and observes all operations performed on the object. An appropriate handler can be provided for various operations, such as getting a property value, setting a property value, or making a method call. The handler can then be used to customize the operation by providing the desired output."
    },
    {
        "instruction": "Write a JavaScript function that takes in two arrays of equal length, and returns a third array with elements from both arrays. [1, 2, 3], [10, 20, 30]",
        "response": "function combine(arr1, arr2) {\n    const combinedArr = [];\n    for(let i=0; i<arr1.length; i++) {\n        combinedArr.push(arr1[i], arr2[i]);\n    }\n    return combinedArr;\n}"
    },
    {
        "instruction": "Create a basic python object that stores the length and width of an rectangle. ",
        "response": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width"
    },
    {
        "instruction": "Write a JavaScript program that will console log the first 10 numbers of the Fibonacci sequence. ",
        "response": "let x = 0;\nlet y = 1;\n\nfor (let i = 0; i < 10; i++) {\n let z = x + y;\n console.log(z);\n x = y;\n y = z;\n}"
    },
    {
        "instruction": "You need to create a JavaScript program that will find the factorial of a given number stored in the variable x. ",
        "response": "let x = 5;\nlet factorial = 1;\n\nwhile (x > 0) {\n factorial *= x;\n x--;\n}\n\nconsole.log(factorial);"
    },
    {
        "instruction": "Create a JavaScript function that validates a given number as an integer. Input: 653",
        "response": "function checkInt(number){\n\tif(number % 1 === 0){\n\t\treturn true;\n\t}\n\treturn false;\n}\ncheckInt(653); // returns true"
    },
    {
        "instruction": "Create a Python class called \"Car\" which has the \"model\" and \"year\" parameters. ",
        "response": "class Car:\n  def __init__(self, model, year):\n    self.model = model\n    self.year = year"
    },
    {
        "instruction": "Rewrite the following Python function to include a try/except block. def multiply(num1, num2):\n\tresult = num1 * num2\n\treturn result",
        "response": "def multiply(num1, num2):\n\ttry:\n\t\tresult = num1 * num2\n\t\treturn result\n\texcept TypeError:\n\t\tprint(\"Error: Inputs must be numbers\")"
    },
    {
        "instruction": "Modify the below JavaScript code to add two items to an array. var items = [];",
        "response": "var items = []; \nitems.push('Item 1');\nitems.push('Item 2');"
    },
    {
        "instruction": "Run the following code in Python 3. num1 = 10\nnum2 = 20",
        "response": "num1 = 10\nnum2 = 20\n\nresult = num1 + num2\n\nprint(result)\n\n# Output\n30"
    },
    {
        "instruction": "Generate python code to replace each character in a string with the next character in the alphabet. ",
        "response": "def replace_with_next_char(string):\n    output = \"\"\n    for char in string:\n        output += chr(ord(char) + 1)\n    return output"
    },
    {
        "instruction": "Write a function in Python which takes the information from the following dictionary and prints out the total price of all the items in it.\n §§ 1020 my_dict = {\n  'item1': {'price': 20, 'quantity': 5},\n  'item2': {'price': 10, 'quantity': 3},\n}",
        "response": "def get_total(my_dict):\n  total = 0\n  for item in my_dict.values():\n    total += item['price'] * item['quantity']\n  return total\n\nprint(get_total(my_dict)) // 90"
    },
    {
        "instruction": "Generate a random phone number using random numbers in Python. ",
        "response": "import random\n\ndef generatePhoneNumber():\n  nums = [str(random.randint(0, 9) for _ in range(10))]\n  return '-'.join([''.join(nums[:3]), ''.join(nums[3:6]), ''.join(nums[6:])])\n\nprint(generatePhoneNumber() // \"567-444-0116\""
    },
    {
        "instruction": "What is the best way to store user input in JavaScript? ",
        "response": "The best way to store user input in JavaScript is to use the localStorage object. The localStorage object is part of the web storage API and provides a way to store data on the user's computer. The data is stored in key/value pairs and is accessible even after the browser is closed and reopened. The syntax to set the value is: \nlocalStorage.setItem(key, value); \nWhere the key is the name of the entry and the value is the data you want to store. To retrieve the value, you can use the getItem() method:\nlocalStorage.getItem(key);"
    },
    {
        "instruction": "Construct a Python loop to display the elements in the following list. my_list = [1, 2, 3, 4]",
        "response": "for element in my_list: \n    print(element)"
    },
    {
        "instruction": "Suggest a method in JavaScript for finding the maximum of two numbers. ",
        "response": "function findMax(num1, num2) {\n return Math.max(num1, num2); \n}"
    },
    {
        "instruction": "Create a program in Python for converting Fahrenheit to Celsius. ",
        "response": "def fahrenheit_to_celsius(temp): \n    return (temp - 32) * 5/9;  \n  \n# Driver code \ntemperature = float(input(\"The temperature in Fahrenheit: \")) \nprint(\"Temperature in Celsius: {}\".format( fahrenheit_to_celsius(temperature)))"
    },
    {
        "instruction": "Implement a game of Hangman in Python. ",
        "response": "import random\n\n# list of words\nword_list = [\"python\", \"java\", \"computer\", \"programming\", \"hangman\"]\n\n# randomly select a word\nword = random.choice(word_list)\n\n# set initial lives\nlives = 6\n\n# write your code here\ndef hangman(word, lives):\n  return # write your code here"
    },
    {
        "instruction": "How can you check the memory used by a Python object? ",
        "response": "You can use the sys module’s \"getsizeof()\" function to check the memory used by an object. The getsizeof() method returns the memory size of the specified object in bytes. For example, sys.getsizeof(data) will return the size of the data object in bytes."
    },
    {
        "instruction": "Write a JavaScript program to check whether a particular character is present in a given string or not String: 'Hello World!'\nCharacter: 'l'",
        "response": "function checkChar(str, char) {\n    if (str.indexOf(char) > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nif (checkChar('Hello World!', 'l')) {\n    console.log('Character is present in the string');\n} else {\n    console.log('Character is not present in the string');\n}"
    },
    {
        "instruction": "Edit an existing Python script to read a 3D array of size 3 x 3 x 3 ",
        "response": "arr = [[[0 for x in range(3)] for y in range(3)] for z in range(3)]\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            arr[x][y][z] = int(input())"
    },
    {
        "instruction": "Create a class in Python for a student which should include the following fields: first name, last name, age, and grade. ",
        "response": "class Student:\n    def __init__(self, first_name, last_name, age, grade):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.grade = grade"
    },
    {
        "instruction": "Provide a syntax for an if-else statement in Javascript. ",
        "response": "if (condition) {\n  // statements when condition is true\n} else {\n  // statements when condition is false\n}"
    },
    {
        "instruction": "Create a Python code for a basic for loop. ",
        "response": "\"\"\"\nA Python code for a basic for loop\n\"\"\"\n\nfor i in range(10):\n    print(i)"
    },
    {
        "instruction": "What is the difference between Python 2 and Python 3? ",
        "response": "\"\"\"\nThe main difference between Python 2 and Python 3 is in how strings are treated. In Python 2, strings are written in byte strings or fully Unicode strings; in Python 3, strings are written in Unicode by default. Other differences include the import statement, integer division, integer in range function, function print, raising and catching exceptions, binary revisers, and many more.\n\"\"\""
    },
    {
        "instruction": "How can you create a string of all random characters of length 10 in Python? ",
        "response": "import random\nrandom_string = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(10))"
    },
    {
        "instruction": "What should be written in place of \"___\" to make the following code a valid if-else statement in Python? if x >= 0:\n ___",
        "response": "if x >= 0:\n    print(\"x is positive\")"
    },
    {
        "instruction": "How can you print the following pattern in JavaScript? ",
        "response": "for (let i=1; i<=5; i++) {\n for (let j=5; j>=i; j--) {\n    document.write(\"*\");\n  }\n document.write(\"<br>\");\n}"
    },
    {
        "instruction": "Implement a method in JavaScript to concatenate two strings together. ",
        "response": "function concatenate(string1, string2) {\n   return string1 + string2;\n}"
    },
    {
        "instruction": "Create a dockerfile to deploy a python app. ",
        "response": "FROM python:3.7-alpine\n\nWORKDIR /app\n\n# Copy and install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy application source\nCOPY src ./src\n\n# Set environment variables\nENV DJANGO_SETTINGS_MODULE=app.settings\n\nEXPOSE 8000\n\n# Run server\nENTRYPOINT [\"python\", \"src/manage.py\"]\nCMD [\"runserver\", \"0.0.0.0:8000\"]"
    },
    {
        "instruction": "Create a python program to return a new list with each item multiplied by 2 in an existing list. [1, 2, 3, 4, 5]",
        "response": "def mult_by_two(nums):\n    \"\"\"\n    Returns a new list with each item multiplied by 2 in an existing list\n    :param nums: a list of numbers\n    :return: a list of numbers with each item multiplied by 2\n    \"\"\"\n    new_list = []\n    for num in nums:\n        new_list.append(num * 2)\n    return new_list\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(mult_by_two(nums))"
    },
    {
        "instruction": "Reverse a given string using recursive function in Python. ",
        "response": "def reverse_string(str):\n    if len(str) == 0: \n        return str \n    else:\n        return reverse_string(str[1:]) + str[0]"
    },
    {
        "instruction": "Write a JavaScript program to remove all the occurrences of a specified character from a string. The quick brown fox",
        "response": "function removeChar(str, char){\n  return str.replace(new RegExp(char, 'g'), '');\n}"
    },
    {
        "instruction": "Implement a function in Python that calculates the Levenshtein Distance of two strings. str1 = \"hackathon\"\nstr2 = \"hack\"",
        "response": "def calculate_levenshtein_distance(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n    return distances[len(str1), len(str2)]"
    },
    {
        "instruction": "Create a function in Python that takes two parameters and returns the sum of squares of all numbers between them ",
        "response": "def sum_of_square_range(a, b):\n    sum = 0\n    for i in range(a, b+1):\n        sum += i * i\n    return sum"
    },
    {
        "instruction": "Given a list of numbers, design a function in Python to check if all numbers in the list are even ",
        "response": "def all_even(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return False\n    return True"
    },
    {
        "instruction": "Create a dictionary in Python whose keys are strings and values are integers ",
        "response": "my_dict = {\n  \"one\": 1,\n  \"two\": 2,\n  \"three\": 3\n}"
    },
    {
        "instruction": "Create a program in Python to return the first n elements from an array ",
        "response": "def first_n_elements(array, n):\n    return array[:n]"
    },
    {
        "instruction": "Given a list of numbers, write a Python function to count how many numbers in the list are greater than 10. ",
        "response": "def count_greater_than_ten(nums):\n    return len([n for n in nums if n > 10])"
    },
    {
        "instruction": "Given a dictionary, write a Python function to print all the key-value pairs in the dictionary. ",
        "response": "def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")"
    },
    {
        "instruction": "Given a string and an integer N, write a Python function to construct the Nth palindromic string. ",
        "response": "def construct_palindrome(string, N):\n    length = len(string)\n    mid = length // 2\n\n    left = string[:mid]\n    right = left[::-1]\n\n    if length % 2 == 0:\n        left = string[:mid - (N - 1)]\n        right = left[::-1]\n    else:\n        left = string[:mid - N]\n        right = string[mid + 1:(mid + 1) + N][::-1]\n\n    return left + string[mid] + right"
    },
    {
        "instruction": "How can we delete all the elements of a list in Python? ",
        "response": "def delete_all_elements(lst):\n    del lst[:]"
    },
    {
        "instruction": "Write a Python function to convert an array of integers into their respective strings. arr = [1, 2, 3]",
        "response": "def array_int_string(arr):\n    \"\"\"Converts an array of integers into strings.\"\"\"\n    return [str(num) for num in arr]\n\narray_int_string(arr)  # returns [\"1\", \"2\", \"3\"]"
    },
    {
        "instruction": "Create a JavaScript object representing a book, with properties such as title, author and pages. ",
        "response": "let book = {\n  title: \"The Cat in the Hat\",\n  author: \"Dr. Seuss\",\n  pages: 60\n};"
    },
    {
        "instruction": "How can you remove all blank spaces from a given string in Python? ",
        "response": "You can remove all blank spaces from a given string in Python using the replace() function. This function takes two arguments, the first is the substring to be replaced and the second is the substring to be inserted in its place. In this case, you can use an empty string as the second argument to remove any instance of the white space from the string. \n\nFor example:\n\nstring_with_spaces = \"   Hello  World  \" \nno_spaces = string_with_spaces.replace(\" \", \"\") \nprint(no_spaces)  # Output: \"HelloWorld\""
    },
    {
        "instruction": "Write a Python program to create a dictionary with three elements. ",
        "response": "d = { \n    \"one\" : 1, \n    \"two\" : 2, \n    \"three\" : 3\n}"
    },
    {
        "instruction": "Write a JavaScript expression that prints the value of the array at index 2. let arr = [2, 4, 6, 8, 10];",
        "response": "console.log(arr[2]);"
    },
    {
        "instruction": "Write a function in Python to get the IPv6 address of a given domain name. ",
        "response": "import socket\n\ndef get_IPv6_address(domain_name):\n    \"\"\"\n    Function to get the IPv6 address of a given domain name\n    \"\"\"\n\n    # get the ip_addres\n    ip_address = socket.getaddrinfo(domain_name, 0, socket.AF_INET6)\n\n    # return the ip address\n    return ip_address[0][4][0]"
    },
    {
        "instruction": "How to check if an item exists in a list in Python? my_list = [1, 2, 3, 4]",
        "response": "# Check if item exists in list \nif 4 in my_list: \n    print(\"Exists\") \nelse: \n    print(\"Doesn't Exist\")"
    },
    {
        "instruction": "What would be the JavaScript code to remove duplicate values from an array? [1, 2, 3, 4, 4, 2, 5]",
        "response": "const inputArray = [1, 2, 3, 4, 4, 2, 5];\n\nconst outputArray = inputArray.filter((arrayVal, indexVal) => {\n  return inputArray.indexOf(arrayVal) === indexVal;\n});\n\nconsole.log(outputArray); // [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Identify the differences between Java and JavaScript languages. ",
        "response": "Java is a compiled language while JavaScript is interpreted. Java is a class-based language while JavaScript is a prototype-based language. Java is statically typed while JavaScript is dynamically typed. Java supports method overloading while JavaScript does not."
    },
    {
        "instruction": "Develop a JavaScript function to reverse an array. [1, 2, 3]",
        "response": "function reverseArray (arr) {\n    return arr.reverse();\n}\n\nreverseArray([1, 2, 3]); // => [3, 2, 1]"
    },
    {
        "instruction": "Create a Python program that prints all numbers in the range 1-10. ",
        "response": "for number in range(1, 11):\n print(number)"
    },
    {
        "instruction": "Write a web scraper in Python to get all the external links from a webpage. url = 'https://en.wikipedia.org/wiki/Web_scraping'",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Web_scraping'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\nlinks = [link.get('href') for link in soup.find_all('a') if 'http' in link.get('href')]\nprint(links)"
    },
    {
        "instruction": "Output an array of even numbers from 0 to 20 using a for loop in Python. ",
        "response": "even_nums = []\nfor num in range(0, 21):\n    if num % 2 == 0:\n        even_nums.append(num)\nprint(even_nums)"
    },
    {
        "instruction": "Create a Python script to parse a JSON string and print the value corresponding to the key 'name'. {\"name\": \"John Doe\", \"age\": 25}",
        "response": "import json\n\ndata = '{\"name\": \"John Doe\", \"age\": 25}'\n\ndata = json.loads(data) \n\nprint(data[\"name\"])"
    },
    {
        "instruction": "Write a python script to convert a given number to a string. num = 1234",
        "response": "def num_to_str(num):\n    return str(num)"
    },
    {
        "instruction": "Write a JavaScript code to list each item of a given array into a new array in reverse order. arr = [1, 2, 3, 4, 5]",
        "response": "newArr = arr.reverse()\nconsole.log(newArr)"
    },
    {
        "instruction": "Fill in the blanks to write a code in JavaScript that calls a function two times. function sayHello() {\n  console.log('Hello');\n}",
        "response": "for (let i = 0; i < 2; i++) {\n  sayHello();\n}"
    },
    {
        "instruction": "Write a JavaScript code to rotate an array by n position to the left. arr = [1, 2, 3, 4, 5]\npos = 2",
        "response": "function rotateLeft(arr, pos) {\n    for (let i = 0; i < pos; i++) {\n        var remove = arr.shift(); \n        arr.push(remove); \n    } \n    return arr;\n}\n\nconsole.log(rotateLeft(arr, pos));"
    },
    {
        "instruction": "Write a function in Python to convert miles to kilometers. 7",
        "response": "def miles_to_km(miles):\n return miles * 1.609\n\nconverted_km = miles_to_km(7)\nprint(converted_km)"
    },
    {
        "instruction": "Write a JavaScript program to find the maximum number from the given three numbers. 5, 10, 3",
        "response": "let num1 = 5;\nlet num2 = 10;\nlet num3 = 3;\n\nlet maxNum = Math.max(num1, num2, num3);\n\nconsole.log(\"The maximum number of the three numbers given is \" + maxNum);"
    },
    {
        "instruction": "Create a list in Python of all integers from -5 to 10. ",
        "response": "list_nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "instruction": "Produce a Python script that generates a random string of length 10 ",
        "response": "import random\nimport string\n\ndef get_random_string(stringLength=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nrandomString = get_random_string()\nprint(randomString) # outputs a random string of length 10"
    },
    {
        "instruction": "Convert the following code to Python and make it object-oriented. function celsius_to_fahrenheit(celsius) { \n  let fahrenheit = (celsius * 9/5) + 32\n  return fahrenheit \n}",
        "response": "class TemperatureConverter:\n    def celsius_to_fahrenheit(self, celsius):\n        fahrenheit = (celsius * 9/5) + 32\n        return fahrenheit"
    },
    {
        "instruction": "Create a class \"MyDict\" that inherits from the Python built-in \"dict\" class. ",
        "response": "class MyDict(dict):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def __getitem__(self, key): \n        if key in self:\n            return super().__getitem__(key)\n        else: \n            return None"
    },
    {
        "instruction": "Given a string s, write a Python function that returns the longest substring of the given string that is a palindrome. s = \"abcbabcd\"",
        "response": "def longest_palindrome_substring(s):\n n = len(s)\n if n == 0:\n return \"\"\n dp = [[False for _ in range(n)] for _ in range(n)]\n start = 0\n max_length = 1\n # All substrings of length 1 are palindrome\n for i in range(n):\n  dp[i][i] = True\n # Check for substring of length 2. \n for i in range(n-1):\n  if s[i] == s[i+1]:\n   dp[i][i+1] = True\n   start = i\n   max_length = 2\n # Check for lengths greater than 2\n # k is length of substring\n for k in range(3, n+1):\n  # Fix the starting index \n  for i in range(n-k+1):\n   # Get the ending index of substring from\n   # starting index i and length k\n   j = i + k - 1\n   # checking for sub-string from ith index to\n   # jth index iff str[i+1] to str[j-1] is a\n   # palindrome\n   if dp[i+1][j-1] and s[i] == s[j]:\n    dp[i][j] = True\n    if k > max_length:\n     start = i\n     max_length = k\n # return the longest palindromic substring\n return s[start:start+max_length]"
    },
    {
        "instruction": "Create a simple chatbot using Python. ",
        "response": "print(\"Hello, I am your chatbot!\")\n\nwhile True:\n user_input = input(\"What would you like to talk about?\\n\")\n\n if user_input == \"bye\":\n  print(\"Bye! It was nice talking to you.\")\n  break\n\n if user_input == \"weather\":\n  print(\"It is sunny outside!\")\n else:\n  print(\"I am sorry, I don't understand your query.\")"
    },
    {
        "instruction": "Convert the following range to list elements in Python. range(2, 8)",
        "response": "list(range(2, 8)) # [2, 3, 4, 5, 6, 7]"
    },
    {
        "instruction": "Reverse the following string without using in-built functions in Python. Hello World",
        "response": "dlroW olleH"
    },
    {
        "instruction": "Write a JavaScript function to find the first element of an array that passes a given test. const arr = [10, 20, 9, 5];",
        "response": "const findElement = (arr, test) => {\n  for(let element of arr){\n    if(test(element)){\n      return element;\n    }\n  }\n};"
    },
    {
        "instruction": "Generate a list of distinct dates between two given dates using JavaScript. startdate = \"01/20/2020\"\nenddate = \"05/17/2020\"",
        "response": "function generateDates(startdate, enddate) {\n    const dates=[],\n          start=new Date(startdate),\n          end=new Date(enddate);\n\n    while (start <= end) {\n        const newdate = new Date(start);\n        const formatteddate = `${newdate.getDate()}/${newdate.getMonth()+1}/${newdate.getFullYear()}`;\n        if(!dates.includes(formatteddate)) dates.push(formatteddate)\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}"
    },
    {
        "instruction": "Write a Python script to check for syntactic correctness of an algorithm. Algorithm = \"1. Read input\n2. Initialize variables\n3. Process input\n4. Output result\"",
        "response": "def is_algorithm_syntactically_correct(algorithm):\n    algorithm = algorithm.replace('\\n', ' ').replace('\\t ', ' ').lower()\n    \n    required_words = ['read', 'input', 'initialize', 'variables', 'process', 'output', 'result']\n    for word in required_words:\n        if word not in algorithm:\n            return False\n    return True"
    },
    {
        "instruction": "Given a JSON object, code a JavaScript function to convert the object into a query string. let obj = {\n    name: 'John',\n    age: 25,\n    job: 'developer'\n}",
        "response": "function jsonToQueryString(jsonObject) {\n    let queryString = '';\n    for(let key in jsonObject) {\n        queryString += key + '=' + jsonObject[key] + '&';\n    }\n    return queryString.substring(0, queryString.length-1);\n}\n\nconsole.log(jsonToQueryString(obj)); // prints \"name=John&age=25&job=developer\""
    },
    {
        "instruction": "Given an array of strings and a search keyword, code a JavaScript function to check if the keyword exists in the array. let arrWords = [\"cat\", \"dog\", \"dog\", \"fish\"]\nlet keyword = 'dog'",
        "response": "function keywordExists(arr, keyword){\n    return arr.includes(keyword);\n}\n\nconsole.log(keywordExists(arrWords, keyword)); // prints true"
    },
    {
        "instruction": "Using Python, write a code to generate the Fibonacci series up to the given number. num = 10",
        "response": "def generateFibonacciSeries(num): \n    series = [0, 1] \n    for i in range(2, num): \n        series.append(series[i - 2] + series[i - 1]) \n    return series\n\nprint(generateFibonacciSeries(num)) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
    },
    {
        "instruction": "You are given a string array. Code a JavaScript function to remove duplicate strings from the array. let arrStrings = [\"apple\", \"orange\", \"apple\", \"banana\"]",
        "response": "function removeduplicates(arr){\n    let arrDupRemoved = [];\n    for (let i = 0; i < arr.length; i++){\n      if(arrDupRemoved.indexOf(arr[i]) === -1){\n        arrDupRemoved.push(arr[i]);\n      }\n    }\n    return arrDupRemoved;\n  }\n\nconsole.log(removeduplicates(arrStrings)) // prints [\"apple\", \"orange\", \"banana\"]"
    },
    {
        "instruction": "Write Javascript code to select all div elements with the class \"container\". ",
        "response": "let containers = document.querySelectorAll('div.container');"
    },
    {
        "instruction": "Write a Python function that takes as input an array of numbers and returns the maximum positive number. arr = [3, -2, -1, 7, 12]",
        "response": "def find_max_positive(arr):\n    max_num = 0\n    for num in arr:\n        if num > 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "instruction": "Create a JavaScript object literal with two properties: a key of name with a value of 'Bob' and a key of age with a value of 30. ",
        "response": "let bob = {\n    name: 'Bob',\n    age: 30\n};"
    },
    {
        "instruction": "Create a hashtable in Python of size 8 and insert five elements. ",
        "response": "class HashTable:\n    def __init__(self, size):\n        self.size = size\n        self.table = [None] * size\n\n    def insert(self, key, value):\n        hash_value = hash(key)\n        index = hash_value%self.size\n        if self.table[index] == None:\n            self.table[index] = [key, value]\n        else:\n            self.table[index].append([key,value])\n\n    # Other methods go here\n\n# Create a hashtable\nht = HashTable(8)\n\n# Insert elements\nht.insert('apple', 5)\nht.insert('banana', 8)\nht.insert('strawberry', 11)\nht.insert('kiwi', 2)\nht.insert('mango', 6)"
    },
    {
        "instruction": "Create a function in JavaScript to get the value of a key from a JSON object. ",
        "response": "function getValue(obj, key) {\n  return obj[key];\n}"
    },
    {
        "instruction": "Create a loop in Python with the given requirements. Print out the numbers from 1 to 10, inclusive",
        "response": "for x in range(1, 11):\n  print(x)"
    },
    {
        "instruction": "Write a function in JavaScript that takes two strings as arguments and checks if the characters in the first string form a subsequence of the characters in the second string. ",
        "response": "function isSubsequence(str1, str2) {\n  let i = 0;\n  let j = 0;\n  while (i < str1.length && j < str2.length) {\n    if (str2[j] === str1[i]) {\n      i++;\n    }\n    j++;\n  }\n  return i === str1.length;\n}"
    },
    {
        "instruction": "Generate multiple Fibonacci numbers in Python. ",
        "response": "def Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\") \n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n  return b\n\nfor i in range(10):\n  print(Fibonacci(i))"
    },
    {
        "instruction": "How to get the current date and time in a JavaScript program? ",
        "response": "let date = new Date();\nlet current_datetime = date.getDate() + \"/\"\n                    + (date.getMonth()+1)  + \"/\" \n                    + date.getFullYear() + \" @ \"  \n                    + date.getHours() + \":\"  \n                    + date.getMinutes() + \":\" \n                    + date.getSeconds();"
    },
    {
        "instruction": "Write a JavaScript function that accepts a string argument and returns its capitalized value. ",
        "response": "function capitalize(str) {\n return str.charAt(0).toUpperCase() + str.slice(1);\n}"
    },
    {
        "instruction": "Write a Python function that prints the square of a given number. ",
        "response": "def square(num):\n  return num ** 2"
    },
    {
        "instruction": "Given a text string, write a function in Python to identify all the words that have more than 3 characters. text = \"Python is an easy to learn language\"",
        "response": "def longer_words(text):\n words = text.split()\n longer = [word for word in words if len(word) > 3]\n return longer"
    },
    {
        "instruction": "Given two arrays of integers, write a Python function which is able to identify common elements. arr1 = [1,2,3,4,5]\narr2 = [3,4,5,6,7]",
        "response": "def common_elements(arr1, arr2):\n  return [x for x in arr1 if x in arr2]"
    },
    {
        "instruction": "Create an HTML page that renders two checkboxes and a button using JavaScript. ",
        "response": "<html>\n    <head>\n        <script>\n            function renderCheckboxes() {\n                var checkboxes = document.createElement(\"input\");\n                checkboxes.type = \"checkbox\";\n                checkboxes.name = \"checkbox\";\n                checkboxes.value = \"1\";\n           \n                document.body.appendChild(checkboxes);\n                var checkboxes2 = document.createElement(\"input\");\n                checkboxes2.type = \"checkbox\";\n                checkboxes2.name = \"checkbox2\";\n                checkboxes2.value = \"2\";\n               \n                document.body.appendChild(checkboxes2);\n                var btn = document.createElement(\"BUTTON\");\n                btn.innerHTML = \"Submit\";\n                document.body.appendChild(btn);\n            }\n       </script>\n   </head>\n   <body onLoad=\"renderCheckboxes()\">\n   </body>\n</html>"
    },
    {
        "instruction": "Using string functions, capitalize each word in the given sentence. sentence = \"python is a programming language\"",
        "response": "sentence = \"python is a programming language\"\n\n# split the sentence into individual words\nwords = sentence.split(\" \")\n\n# capitalize each word in the sentence\ncapitalized_words = [word.capitalize() for word in words]\n\n# join the words back together\ncapitalized_sentence = \" \".join(capitalized_words)\n\nprint(capitalized_sentence) # prints \"Python Is A Programming Language\""
    },
    {
        "instruction": "Write a code in Python to count the number of words in the sentence \"Hello World\". ",
        "response": "# Count the number of words in the sentence\nsentence = \"Hello World\"\n\nnum_words = len(sentence.split())\n\nprint(num_words) # prints 2"
    },
    {
        "instruction": "Construct a JavaScript object with 5 key-value pairs. ",
        "response": "let obj = {\n key1: 'value1',\n key2: 'value2',\n key3: 'value3',\n key4: 'value4',\n key5: 'value5'\n};"
    },
    {
        "instruction": "Write a JavaScript code snippet to convert a string of uppercase characters to lowercase characters. input_string = \"HELLO WORLD\"",
        "response": "let input_string = \"HELLO WORLD\";\nlet output_string = input_string.toLowerCase();\nconsole.log(output_string);"
    },
    {
        "instruction": "Use Python to generate a random string of length 8 using lowercase alphabetic characters. ",
        "response": "import random\n\ndef random_string():\n  chars = 'abcdefghijklmnopqrstuvwxyz'\n  return ''.join(random.choice(chars) for i in range(8))\n\nrandom_string() // 'fldmgnkd'"
    },
    {
        "instruction": "Why is a dictionary in Python often called an associative array? ",
        "response": "A dictionary in Python is often called an associative array because of the manner in which it stores data. The structure of a dictionary maps keys (strings, numbers, etc.) to their associated values in an associative manner, as in a mathematical mapping or function. This makes dictionaries an ideal choice for storing key-value pairs or to associate an item of data with a particular value."
    },
    {
        "instruction": "Import a module in Python and store it in a variable named “import_module”. ",
        "response": "import_module = importlib.import_module(\"<module name>\")"
    },
    {
        "instruction": "Write a Python function to print a string of given length n filled with asterisks. ",
        "response": "def print_asterisks(n):\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print(\"\")"
    },
    {
        "instruction": "Create a Python class for a product that includes data fields for name, description, and price. ",
        "response": "class Product:\n  def __init__(self, name, description, price):\n    self.name = name\n    self.description = description\n    self.price = price\n\n  def __str__(self):\n    return f\"Name: {self.name}\\nDescription: {self.description}\\nPrice: {self.price}\""
    },
    {
        "instruction": "Using a try-except statement, write a Python code to handle a ValueError which arises if the input is not a number. ",
        "response": "try:\n  input_num = int(input(\"Enter a number: \"))\nexcept ValueError:\n  print(\"Please enter a valid number\")"
    },
    {
        "instruction": "Write a Python script that converts the number 122 to binary. ",
        "response": "def dec_to_bin(n):\n binary_num = bin(n) \n print(binary_num[2:])\ndec_to_bin(122)"
    },
    {
        "instruction": "Create a JavaScript function that can take a string and reverse it. ",
        "response": "function reverseString(str) {\n let reversed = \"\"\n for (let i = str.length-1; i >= 0; i--) {\n  reversed += str[i]\n }\n return reversed\n}"
    },
    {
        "instruction": "Create a Python dictionary that includes the keys \"name\", \"age\", and \"location\", and set the values to your name, age, and location. ",
        "response": "my_dict = {\n \"name\": \"John Smith\",\n \"age\": 28,\n \"location\": \"New York\"\n}"
    },
    {
        "instruction": "Write a python script to identify a palindrome from a given input string inputString = \"abacab\"",
        "response": "def checkPalindrome(inputString): \n  \n    # reverse the given string \n    reverseString = inputString[::-1] \n  \n    # check if the string is equal to its reverse \n    if (inputString == reverseString): \n        return True\n    else: \n        return False\n  \n# Driver code \nif __name__ == \"__main__\": \n    inputString = \"abacab\"\n    print(checkPalindrome(inputString))"
    },
    {
        "instruction": "Write a JavaScript program to check if a given string contains equal number of P and T characters. ",
        "response": "function equalNumberOfPAndTCharacters(str){\n    let countP = 0;\n    let countT = 0;\n    \n    for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) == 'P') {\n            countP++;\n        } else if (str.charAt(i) == 'T') {\n            countT++;\n        }\n    }\n\n    if(countP == countT){\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//testing\nconsole.log(equalNumberOfPAndTCharacters(\"PPTTPT\")); //true"
    },
    {
        "instruction": "Create a JavaScript program to convert the following date format into MM/DD/YYYY. dateString = \"October 5, 2020\"",
        "response": "let dateString = \"October 5, 2020\";\nlet newDateString = dateString.substring(0, 3) + \"/\" + dateString.substring(8, 10) + \"/\" + dateString.substring(11);\n\nconsole.log(newDateString);\n//Output: 10/05/2020"
    },
    {
        "instruction": "Construct a Python script to print a specific character from a string. str = \"Hello world!\"\nindex = 5",
        "response": "testString = \"Hello world!\"\nprint(testString[index])\n# Output will be: w"
    },
    {
        "instruction": "Write the code to print a given table format in Python. Table with 4 columns and 5 rows",
        "response": "for i in range(1,6):\n    print('{:<10}{:<10}{:<10}{:<10}'.format(i, i**2, i**3, i**4))"
    },
    {
        "instruction": "Use Python to sort a given list of strings. myList = [\"bananas\", \"oranges\", \"apples\", \"peaches\"]",
        "response": "sortedList = sorted(myList)\nprint(sortedList)"
    },
    {
        "instruction": "Create a Python class to store a customer's name, address, and phone number. ",
        "response": "class Customer:\n    def __init__(self, name, address, phone):\n        self.name = name\n        self.address = address\n        self.phone = phone"
    },
    {
        "instruction": "Create a function in Python to insert a new item into an existing list. new_item = 5\nexisting_list = [1, 2, 3, 4]",
        "response": "def insert_new_item(new_item, existing_list):\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n        list: List with the new item inserted.\n    \"\"\"\n    existing_list.append(new_item)\n    return existing_list"
    },
    {
        "instruction": "Write a JavaScript code to capitalize every word in a sentence. sentence = 'hello world!'",
        "response": "// This function takes a string and capitalizes every word in the string \nfunction capitalizeSentence(sentence) {\n  // Split the sentence into individual words\n  let words = sentence.split(' ');\n\n  // Initialize the capitalized string\n  let capitalized = '';\n\n  // Iterate through the words\n  for (let word of words) {\n    // Uppercase the first letter of the word \n    let capitalizedWord = word[0].toUpperCase() + word.slice(1); \n\n    // Append the capitalized word to the string\n    capitalized += capitalizedWord + ' ';\n  }\n\n  // Return the capitalized string\n  return capitalized;\n}\n\n// Print the capitalized sentence\nconsole.log(capitalizeSentence(sentence));\n\n// Output: 'Hello World!'"
    },
    {
        "instruction": "Suggest a way to complete the following Python program which takes two strings as input and prints out the longer string. first_str = 'hello'\nsecond_str = 'world'",
        "response": "if len(first_str) == len(second_str):\n    print('The two strings are of equal length.')\nelif len(first_str) > len(second_str):\n    print(first_str)\nelse:\n    print(second_str)"
    },
    {
        "instruction": "Edit the following JavaScript code snippet to add an event listener to the button such that when it is clicked, an alert message is shown. let button = document.querySelector(\"#button\");",
        "response": "let button = document.querySelector(\"#button\");\nbutton.addEventListener(\"click\", function(){\n alert(\"Button was clicked!\");\n});"
    },
    {
        "instruction": "Modify the given JavaScript code to delete an element from an array. arr = [1, 2, 3]",
        "response": "function delElement(arr, el) { \n    var index = arr.indexOf(el);\n    if (index > -1) {\n      arr.splice(index, 1); \n    } \n    return arr;\n} \n\ndelElement(arr, 3)\n\n# Output\n[1, 2]"
    },
    {
        "instruction": "Translate the following Python programme into JavaScript. num1 = 8\nnum2 = 0\n\nif num1 > num2:\n  print(\"num1 is greater than num2\")\nelse:\n  print(\"num2 is greater than num1\")",
        "response": "let num1 = 8;\nlet num2 = 0;\n\nif (num1 > num2) {\n  console.log(\"num1 is greater than num2\");\n} else {\n  console.log(\"num2 is greater than num1\");\n}"
    },
    {
        "instruction": "Write a Python code that prints out the first 5 elements of a tuple. ",
        "response": "tup=(1,2,3,4,5,6,7,8,9,10)\n\nfor i in range(0,5): \n    print (tup[i])"
    },
    {
        "instruction": "How do you calculate the sum of a list of numbers in Python? ",
        "response": "The sum of a list of numbers in Python can be calculated using the built-in sum() function. This function takes an iterable object (such as a list or tuple) containing numbers as its argument and returns the sum of all the elements in the object. For example, sum([1,2,3]) will return 6."
    },
    {
        "instruction": "Create a JavaScript function to find the length of the longest common substring between \"apple\" and \"pineapple\". ",
        "response": "function longestCommonSubstring(str1, str2) {\n  let longestSubstring = '';\n  let longestStringLength = 0;\n\n  for (let i = 0; i < str1.length; i++) {\n    for (let j = 0; j < str2.length; j++) {\n      let tempSubstring = '';\n      let k = i;\n\n      while (str1[k] === str2[j]) {\n        tempSubstring += str1[k++];\n        j++;\n      }\n      \n      if (tempSubstring.length > longestStringLength) {\n        longestStringLength = tempSubstring.length;\n        longestSubstring = tempSubstring;\n      }\n    }\n  }\n  \n  return longestSubstring;\n}\n\nlongestCommonSubstring(\"apple\", \"pineapple\"); // output -> \"apple\""
    },
    {
        "instruction": "Create a new Python dictionary with numbers 1-10 as keys and their corresponding squares as values. ",
        "response": "squares = {1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64, 9:81, 10:100}"
    },
    {
        "instruction": "Write a Python function that takes an array of strings as an argument and returns a boolean. ",
        "response": "def check_array(arr):\n  if len(arr) == 0:\n    return False\n\n  for str in arr:\n    if len(str) == 0:\n      return False\n   \n  return True"
    },
    {
        "instruction": "Create an array of objects in JavaScript that contains five objects, each representing a different programming language. ",
        "response": "var languages = [\n    {langName: \"JavaScript\", creator: \"Brendan Eich\", releaseYear: 1995},\n    {langName: \"Python\", creator: \"Guido van Rossum\", releaseYear: 1991},\n    {langName: \"C\", creator: \"Dennis Ritchie\", releaseYear: 1972},\n    {langName: \"Java\", creator: \"James Gosling\", releaseYear: 1995},\n    {langName: \"C++\", creator: \"Bjarne Stroustrup\", releaseYear: 1985}\n]"
    },
    {
        "instruction": "Develop an algorithm in Python to determine whether two strings are anagrams. ",
        "response": "def is_anagram(string1, string2):\n    # Create a dictionaries for strings\n    string1_dict = {}\n    string2_dict = {}\n  \n    # Add the chars from each string to the dictionaries\n    for char in string1:\n        if char not in string1_dict:\n            string1_dict[char] = 1\n        else:\n            string1_dict[char] += 1\n    \n    for char in string2:\n        if char not in string2_dict:\n            string2_dict[char] = 1\n        else:\n            string2_dict[char] += 1\n    \n    # Check if the dictionaries have the same entries\n    for key in string1_dict:\n        if key not in string2_dict:\n            return False\n        elif string1_dict[key] != string2_dict[key]:\n            return False\n    \n    return True\n  \n# Test the algorithm\nstring1 = \"listen\"\nstring2 = \"silent\"\n\nif(is_anagram(string1, string2)):\n    print(\"The strings are anagrams\")\nelse:\n    print(\"The strings are not anagrams\")"
    },
    {
        "instruction": "Suggest a solution to store years in ISO 8601 format in Python. ",
        "response": "We can use the datetime.date class to store dates in ISO 8601 format. We just need to create an instance of datetime.date using the year, month and day. Then, we can convert it to the ISO 8601 format string using isoformat() method of datetime.date. For example:\nimport datetime\ndate = datetime.date(2016, 1, 1)\niso_date = date.isoformat()\nprint(iso_date) // Output: '2016-01-01'"
    },
    {
        "instruction": "Create a function in Python which takes a string as an argument and returns the first character of the string in upper case. ",
        "response": "def first_upper_char(input_string):\n    if len(input_string) == 0:\n        return ''\n    else:\n        return input_string[0].upper()"
    },
    {
        "instruction": "Create a script in Python which takes a number as an argument and prints its corresponding nth Fibonacci number. ",
        "response": "def fibonacci(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"
    },
    {
        "instruction": "Suggest a method in Python for sorting a list of strings on the basis of their length in ascending order. ",
        "response": "We can use the built-in sorted() function to sort the list of strings on the basis of their length in ascending order. The syntax for sorting is as follows:\n\nsorted(list_of_strings, key=len)\n\nwhere 'list_of_strings' is the list of strings we want to sort and 'len' is the length function for getting the length of each string."
    },
    {
        "instruction": "Explain how to detect prime numbers in Python. ",
        "response": "We can detect prime numbers in Python by using a for loop. The for loop will iterate over all numbers from 2 up to the given number. For each number we loop through, we check to see if the number is divisible by any other number greater than 1. If the number is divisible by any other number, then we know it is not a prime number. If the number is only divisible by 1 and itself, then we know it is a prime number."
    },
    {
        "instruction": "Write a class in Python to represent a division with two integers and the following operations: addition, subtraction, multiplication and division. ",
        "response": "class Division():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self):\n        return self.x + self.y\n    \n    def subtract(self):\n        return self.x - self.y\n    \n    def multiply(self):\n        return self.x * self.y\n    \n    def divide(self):\n        return self.x / self.y\n    \n    \ndiv = Division(10, 5)\nprint(\"Addition of the two numbers:\", div.add())\nprint(\"Subtraction of the two numbers:\", div.subtract())\nprint(\"Multiplication of the two numbers:\", div.multiply())\nprint(\"Division of the two numbers:\", div.divide())"
    },
    {
        "instruction": "Implement a Fibonacci series generator using Python. ",
        "response": "def generate_fibonacci(n):\n a, b = 0, 1\n fibonacci_series = [a]\n for i in range(n-1):\n a, b = b, a+b\n fibonacci_series.append(b)\n return fibonacci_series"
    },
    {
        "instruction": "Identify the Python command to search a string for a specific keyword. ",
        "response": "string.find('keyword') or string.index('keyword')"
    },
    {
        "instruction": "Write an expression in JavaScript to calculate the perimeter of a triangle with sides 3, 4 and 5. ",
        "response": "var a = 3;\nvar b = 4;\nvar c = 5;\n\nvar perimeter = a + b + c; // 12"
    },
    {
        "instruction": "Create a JavaScript function to retrieve a value from an object with a given key. ",
        "response": "// Create a JavaScript function to retrieve a value from an object with a given key\nfunction getValue(obj, key) {\n  return obj[key];\n}"
    },
    {
        "instruction": "Write a Python program to create a dictionary containing students and their scores. ",
        "response": "# Declare an empty dictionary\nscores = {}\n\n# Enter some students and their scores\nscores['student1'] = 90\nscores['student2'] = 85\nscores['student3'] = 100\n\n# Print the scores\nprint(scores)\n\n# Output - {'student1': 90, 'student2': 85, 'student3': 100}"
    },
    {
        "instruction": "What type of loop can be used to iterate through the items of a list in Python? ",
        "response": "The most common type of loop for iterating through the items of a list in Python is the for loop. This loop iterates through each item in the list one by one, allowing the programmer to perform operations on each item in the list. For example:\n\nmy_list = [1, 2, 3]\nfor item in my_list:\n    print(item)\n\n# Output\n# 1\n# 2\n# 3"
    },
    {
        "instruction": "Rank the following programming languages according to the year of their initial release.\n  \nJavaScript, Java, Python, C++ ",
        "response": "C++ (1985), Java (1995), JavaScript (1995), Python (1991)"
    },
    {
        "instruction": "Write a JavaScript code snippet to track the mouse movement. ",
        "response": "document.addEventListener(\"mousemove\", function(e) {\n   console.log(\"mouse is at x:\" + e.clientX + \" y:\" + e.clientY);\n});"
    },
    {
        "instruction": "You are given two matrices, M1 and M2. Write a python code to multiply them. M1 : \n[[2, 3], \n [5, 6]]\n\nM2 : \n[[1, 2], \n [3, 4]]",
        "response": "def matrix_multiply(M1, M2):\n    M3 = [[0, 0], [0, 0]]\n    for i in range(len(M1)):\n        for j in range(len(M2[0])):\n            for k in range(len(M2)):\n                M3[i][j] += M1[i][k] * M2[k][j]\n    \n    return M3"
    },
    {
        "instruction": "Write a Python program that parses a JSON object and returns only the values of a specific key. JSON object: {\n    \"name\": \"John\",\n    \"age\": 42,\n    \"location\": \"New York\"\n}\n\nKey: \"name\"",
        "response": "import json\n\n# Load JSON data\ndata_str = '''\n{\n    \"name\": \"John\",\n    \"age\": 42,\n    \"location\": \"New York\"\n}\n'''\ndata_dict = json.loads(data_str)\n\n# Get the value of the given key\nname = data_dict.get('name') # John"
    },
    {
        "instruction": "Write a python code to find median of two sorted arrays. A = [1,4,6,7]B = [3,5,8,9]",
        "response": "def find_median(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\nif __name__ == '__main__':\n    A = [1,4,6,7]\n    B = [3,5,8,9]\n    median = find_median(A, B)\n    print(median)"
    },
    {
        "instruction": "Create a dictionary of items with the corresponding price in Python. items = ['book', 'pen', 'chair']\nprices = [10, 2, 5]",
        "response": "prices_dict = dict(zip(items, prices))\n# prices_dict = {'book': 10, 'pen': 2, 'chair': 5}"
    },
    {
        "instruction": "Generate a JavaScript code to console log the elements in a given array for each iteration. let my_array = [1, 2, 3]",
        "response": "for (let i = 0; i < my_array.length; i++) {\n    console.log(my_array[i]);\n}\n# Output:\n# 1\n# 2\n# 3"
    },
    {
        "instruction": "Generate a Python code to add two numbers using a lambda expression. num1 = 10\nnum2 = 25",
        "response": "add = lambda num1, num2: num1 + num2\n\nprint(add(num1, num2))  # Output: 35"
    },
    {
        "instruction": "Construct a for loop in Python to print the array in descending order. my_array = [4, 3, 5, 7, 1]",
        "response": "for i in sorted(my_array, reverse=True):\n  print(i)\n\n# Output:\n# 7\n# 5\n# 4\n# 3\n# 1"
    },
    {
        "instruction": "Create a JavaScript function to format a given number with commas. num = 1000",
        "response": "function commaFormatting(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nconsole.log(commaFormatting(num))  // Output: 1,000"
    },
    {
        "instruction": "Write a Python algorithm to find the most common value in an array. arr = [1, 2, 3, 3, 3, 3, 4, 4, 5]",
        "response": "def most_common(arr):\n    freq = {}\n    \n    # Count the frequency of each element\n    for el in arr:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n            \n    # Find the maximum frequency\n    max_freq = -1\n    for el, freq in freq.items():\n        max_freq = max(max_freq, freq)\n    \n    # Find the element with maximum frequency\n    most_common_el = None\n    for el, freq in freq.items():\n        if freq == max_freq:\n            most_common_el = el\n    \n    return most_common_el"
    },
    {
        "instruction": "Rewrite the following code snippet so that it is compatible with Python 3 sum = 0\nfor num in range(10):\n   sum = sum + num\nprint sum",
        "response": "sum = 0\nfor num in range(10):\n   sum += num\n\nprint(sum)"
    },
    {
        "instruction": "Write a user authentication code in Python ",
        "response": "def authentication(username,password): \n    if username == \"username\" and password == \"password\": \n        print (\"Login successful\") \n    else: \n        print (\"Incorrect username or password\") \n\nusername = input(\"Enter your username: \")\npassword = input(\"Enter your password: \")\n\nauthentication(username, password)"
    },
    {
        "instruction": "Code a solution in Python to replace all the occurences of a specific word in a string. sentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"",
        "response": "def replace_word(sentence, word, replacement):\n    words = sentence.split(\" \")\n    new_sentence = \"\"\n    for w in words:\n        if w == word:\n            w = replacement\n        new_sentence += w + \" \"\n    return new_sentence\n\nsentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"\n\nprint(replace_word(sentence, word, replacement))"
    },
    {
        "instruction": "Create a softmax activation function in Python. ",
        "response": "def softmax(x):\n  \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n  e_x = np.exp(x - np.max(x))\n  return e_x / e_x.sum(axis=0)"
    },
    {
        "instruction": "Create a for loop in Python for the range between 0 and 10. ",
        "response": "for i in range(0,11):\n\tprint(i)"
    },
    {
        "instruction": "Write an API call in Python using the request module to get data from a URL. https://www.example.com",
        "response": "import requests \n\nr = requests.get(url = \"https://www.example.com\") \ndata = r.json()"
    },
    {
        "instruction": "Create a nested For loop in Python with the outer loop counting from 0  to 3 and the inner loop counting from 5 to 10. ",
        "response": "for i in range(0,4):\n  for j in range(5,11):\n    print(\"outer loop at: \"+str(i)+\" inner loop at: \"+str(j))"
    },
    {
        "instruction": "Create a hash table in Python using a dictionary. ",
        "response": "h = {}\n\n# Add key:value pairs\nh['key1'] = 'value1'\nh['key2'] = 'value2'\nh['key3'] = 'value3'"
    },
    {
        "instruction": "Edit the following JavaScript code to remove any warnings given by the linter. let favoriteNumber = [7,9,42];\nconst printNumber = (number) => console.log(number);\n\nfor (let idx = 0; idx < favoriteNumber.length; idx +=1) {\n  printNumber(favoriteNumber[idx])\n}",
        "response": "let favoriteNumber = [7, 9, 42];\nconst printNumber = (number) => console.log(number);\n\nfor (let idx = 0; idx < favoriteNumber.length; idx += 1) {\n  printNumber(favoriteNumber[idx]);\n}"
    },
    {
        "instruction": "Create a JavaScript class with 3 methods and a constructor ",
        "response": "class Person {\n\n    // constructor\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // method to get the name\n    getName() {\n        return this.name;\n    }\n\n    // method to get the age\n    getAge() {\n        return this.age;\n    }\n\n    // method to set the age\n    setAge(age) {\n        this.age = age;\n    }\n}"
    },
    {
        "instruction": "Create a function in Python that takes two strings and checks if the characters in the second string exist in the first string. s1 = \"hello world\"\ns2 = \"llo\"",
        "response": "def char_exists_in_string(s1, s2):\n    for char in s2:\n        if char not in s1:\n            return False\n    \n    return True\n\nif __name__ == '__main__':\n    s1 = \"hello world\"\n    s2 = \"llo\"\n    print(char_exists_in_string(s1, s2))"
    },
    {
        "instruction": "Create an array in JavaScript of objects, each with a name key and a value of a random number. ",
        "response": "let array = [];\n\nfor (let i = 0; i < 10; i++) {\n    let randomNumber = Math.floor(Math.random() * 100);\n    let obj = { name: `element ${i + 1}`, value: randomNumber };\n    array.push(obj);\n}\n\nconsole.log(array);"
    },
    {
        "instruction": "Compare two dates in JavaScript and return 1 if the first date is after the second date. date1 = new Date('August 19, 2025');\ndate2 = new Date('August 20, 2025');",
        "response": "function compareDates(date1, date2) {\n    const timeDifference = date1.getTime() - date2.getTime(); \n    if(timeDifference > 0) {\n        // date1 is after date2\n        return 1;\n    } else {\n        // date2 is after date1\n        return 0;\n    }       \n}\n\nif __name__ == '__main__':\n    date1 = new Date('August 19, 2025');\n    date2 = new Date('August 20, 2025');\n    print(compareDates(date1, date2))"
    },
    {
        "instruction": "Write a JavaScript code to filter the values of an array which are greater than a given number. array = [1, 2, 4, 5, 6, 8];\n value = 5;",
        "response": "function filterArrayValues(array, value) {\n    return array.filter(x => x > value);\n}\n\nif __name__ == '__main__':\n    array = [1, 2, 4, 5, 6, 8];\n    value = 5;\n    print(filterArrayValues(array, value))"
    },
    {
        "instruction": "Write Python code to print the last three elements from a given list. [2, 4, 6, 8, 10, 12]",
        "response": "my_list = [2, 4, 6, 8, 10, 12]\nprint(my_list[-3:]) # Output: [10, 12]"
    },
    {
        "instruction": "Create a Python class with an instance method that prints the number of objects created. ",
        "response": "class Person:\n     num_objects = 0\n\n     def __init__(self):\n          Person.num_objects += 1\n    \n     def print_num_objects(self):\n          print(Person.num_objects)"
    },
    {
        "instruction": "Create a Python dictionary with three elements and print the key-value pairs. ",
        "response": "my_dict = {\n    'name': 'John',\n    'age': 30,\n    'city': 'New York'\n}\n\nfor key, value in my_dict.items():\n    print(f'{key}: {value}')"
    },
    {
        "instruction": "Take the following string and read it into a list in Python. \"apple, banana, peach, orange\"",
        "response": "list = [x.strip() for x in \"apple, banana, peach, orange\".split(\",\")]"
    },
    {
        "instruction": "Suggest a JavaScript code to make an AJAX request to fetch data from a server. ",
        "response": "var XHR = new XMLHttpRequest();\n\nXHR.onreadystatechange = function () {\n    if (XHR.readyState == 4 && XHR.status == 200) {\n        var data = JSON.parse(XHR.responseText);\n        // Handle the response data here\n    }\n};\n\nXHR.open(\"GET\", url);\nXHR.send();"
    },
    {
        "instruction": "Create a class in Python which models a bank account using the concept of class and object. ",
        "response": "class BankAccount: \n def __init__(self, name, balance): \n  self.name = name \n  self.balance = balance \n def deposit(self, amount): \n  self.balance += amount \n def withdraw(self, amount): \n  self.balance -= amount"
    },
    {
        "instruction": "Create a Javascript object that stores the number of cats and dogs in a given location. ",
        "response": "const pets = {\n  cats: 10,\n  dogs: 12\n};"
    },
    {
        "instruction": "Create an array in Javascript that contains elements of different datatypes. ",
        "response": "let array = [1, \"String\", true, { key: \"value\" }, [1,2]];"
    },
    {
        "instruction": "Develop a program in Python that takes two array elements as input and finds their product Array1: [1, 5, 8, 9]\nArray2: [2, 3, 4, 6]",
        "response": "import numpy as np\n\narr1 = np.array([1,5,8,9])\narr2 = np.array([2,3,4,6])\n\nresult = arr1 * arr2\n\nprint(f'Product of the two arrays: {result}')"
    },
    {
        "instruction": "Write an iterator in Python to iterate through the given list and output each element myList = ['Hi', 'Bye', 'Hello', 'World']",
        "response": "def iterateMyList(myList):\n    iterator = iter(myList)\n    while True:\n        try: \n            print(next(iterator))\n        except StopIteration: \n            break"
    },
    {
        "instruction": "Implement a web scraper in Python to fetch all the URLs from a given website. The website URL is https://www.example.com",
        "response": "import re\nimport requests\n\nurls = set()\n \ndef get_urls(url):\n    website = requests.get(url)\n    content = website.text\n    links = re.findall(r'<a .*?href=[\\'\"](.*?)[\\'\"].*?>', content)\n \n    for i in links:\n        if i.startswith(\"/\"):\n            base_url = url\n            i = base_url + i\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n        elif url in i:\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n \nif __name__ == \"__main__\":\n    get_urls(\"https://www.example.com\")\n    for i in urls:\n        print(i)"
    },
    {
        "instruction": "Build a state machine in Python to process incoming keyboard events ",
        "response": "# Define a StateMachine class\nclass StateMachine: \n    def __init__(self): \n        self.handlers = {} \n        self.startState = None\n        self.endStates = [] \n  \n    def add_state(self, state): \n        self.handlers[state.name] = state\n  \n    def set_start(self, name): \n        self.startState = name\n  \n    def set_end(self, name): \n        self.endStates.append(name) \n  \n    def run(self): \n        try: \n            handler = self.handlers[self.startState] \n        except: \n            raise(Exception, \"Must call .set_start() before .run()\")\n        while True:\n            # Get the next keyboard event\n            event = get_event()\n            if event:\n                newState = handler.run(event) \n            if newState.name in self.endStates: \n                break \n            else: \n                handler = self.handlers[newState.name]"
    },
    {
        "instruction": "Convert this Python data structure into a valid JSON string. data = {\n    \"key1\" : [1,2,3],\n    \"key2\" : {\n        'subkey1' : True,\n        'subkey2' : 'Hello World'\n    }\n}",
        "response": "json_string = json.dumps(data)"
    },
    {
        "instruction": "Create a Python function and call it split_string that takes a string and a delimiter as arguments and returns a list containing the string split by the delimiter. my_string = \"hello, world\"\ndelimiter = ','",
        "response": "def split_string(string, delimiter):\n    strList = string.split(delimiter)\n    return strList"
    },
    {
        "instruction": "Given a string, write an algorithm to remove all occurrences of a given letter. my_string = \"Python is a popular programming language\"\nletter = 'o'",
        "response": "def remove_letter(string, letter):\n    output = \"\"\n    for s in string:\n        if s != letter:\n            output += s\n    return output"
    },
    {
        "instruction": "Write a function in Python to check if two lists have the same elements regardless of their order. list1 = [\"cat\", \"dog\", \"mouse\"]\nlist2 = [\"mouse\", \"dog\", \"cat\"]",
        "response": "def is_similar(list_1, list_2):\n  if len(list_1) != len(list_2):\n    return False\n  list_1.sort()\n  list_2.sort()\n  for i, j in zip(list_1, list_2):\n    if i != j:\n      return False\n  return True"
    },
    {
        "instruction": "Train a Naive Bayes model in Python to classify emails into spam and non-spam classes. ",
        "response": "# import libraries \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in the data \ndata = pd.read_csv('email_data.csv')\n\n# split into training and test data\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.33, random_state=42)\n\n# create vectorizer and transform training data\ncount_vector = CountVectorizer()\ncount_train = count_vector.fit_transform(X_train)\n\n# create and train a Naive Bayes model\nNB_classifier = MultinomialNB()\nNB_classifier.fit(count_train,y_train)\n\n# transform test data\ncount_test = count_vector.transform(X_test)\n\n# predict test labels\npreds = NB_classifier.predict(count_test)"
    },
    {
        "instruction": "Implement a queue following the classic FIFO (First-in-first-out) principle using Python. ",
        "response": "class Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, val):\n        self.queue.append(val)\n\n    def dequeue(self):\n        if self.queue:\n            return self.queue.pop(0)\n        else:\n            return None\n\n    def peek(self):\n        if self.queue:\n            return self.queue[0]\n        else:\n            return None"
    },
    {
        "instruction": "Write a Python function to generate a random password with length 8 containing any combination of upper and lowercase letters, numbers, and symbols. ",
        "response": "import string \nimport random \n\ndef generate_password(): \n\tletter_lower = string.ascii_lowercase\n\tletter_upper = string.ascii_uppercase\n\tsymbols = string.punctuation\n\tdigits = string.digits\n\tpassword = ''.join(random.choice(letter_lower + letter_upper + symbols + digits) for i in range(8))\n\treturn password\n\npassword = generate_password()\nprint(password)"
    },
    {
        "instruction": "Create a KMP algorithm in Python to find a pattern in a given text. Text: abcabdababd\nPattern:abd",
        "response": "def KMPSearch(pat, txt): \n    M = len(pat) \n    N = len(txt) \n  \n    # create lps[] that will hold the longest prefix suffix  \n    # values for pattern \n    lps = [0]*M \n    j = 0 # index for pat[] \n  \n    # Preprocess the pattern (calculate lps[] array) \n    computeLPSArray(pat, M, lps) \n  \n    i = 0 # index for txt[] \n    while i < N: \n        if pat[j] == txt[i]: \n            i += 1\n            j += 1\n  \n        if j == M: \n            print(\"Found pattern at index \" + str(i-j)) \n            j = lps[j-1] \n  \n        # mismatch after j matches \n        elif i < N and pat[j] != txt[i]: \n            # Do not match lps[0..lps[j-1]] characters, \n            # they will match anyway \n            if j != 0: \n                j = lps[j-1] \n            else: \n                i += 1\n        \ndef computeLPSArray(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n                i += 1"
    },
    {
        "instruction": "Create a JavaScript program to generate Fibonacci series up to a given number. ",
        "response": "function printFibonacciSeries(n) \n{ \n    let a = 0, b = 1;\n\n  // Iterate through the series and print the \n  // value for every number \n  for (let i = 1; i <= n; i++) { \n    console.log(a); \n    let sum = a + b; \n    a = b; \n    b = sum; \n  } \n} \n\n// Driver code \nlet n = 10;\nprintFibonacciSeries(n);"
    },
    {
        "instruction": "Write a function in Python to remove all 'null' values from a nested dictionary. ",
        "response": "def remove_nulls(dictionary):\n    if isinstance(dictionary, dict):\n        return {key: remove_nulls(value) \n        for key, value in dictionary.items() if not value == None}\n    else:\n        return dictionary"
    },
    {
        "instruction": "Write a Python function that takes a list of integers and returns True if any of the integers is divisible by 7. ",
        "response": "def is_divisible_by_seven(ints):\n    return any(num % 7 == 0 for num in ints)"
    },
    {
        "instruction": "Write a JavaScript function to create a new object from the given object. obj = {\n    \"name\": \"John\",\n    \"age\": 30\n}",
        "response": "function cloneObject(obj){\n    let newObj = {}\n \n    for (let key in obj){\n        if (obj.hasOwnProperty(key)){\n            newObj[key] = obj[key]\n        }\n    }\n    return newObj\n}"
    },
    {
        "instruction": "Write a Python function to calculate the power of a number raised to the nth power. ",
        "response": "def calculate_power(base, power):\n    if power == 0:\n        return 1\n    else:\n        return base * calculate_power(base, power - 1)"
    },
    {
        "instruction": "Write a Python function to convert a given Unix timestamp to a readable format like \"day, month, date, hours:minutes:seconds, year\". ",
        "response": "import datetime\n\ndef timestamp_to_readable(unix_timestamp):\n    return datetime.datetime.fromtimestamp(unix_timestamp).strftime(\"%A, %B %d, %H:%M:%S, %Y\")"
    },
    {
        "instruction": "Define a class in Python that represents a currency. ",
        "response": "class Currency:\n    def __init__(self, currency_name, currency_symbol, currency_value):\n        self.name = currency_name\n        self.symbol = currency_symbol\n        self.value = currency_value\n        \n    def __str__(self):\n        return f\"{self.name}: {self.symbol}{self.value}\""
    },
    {
        "instruction": "Arrange the following characters in a valid Python expression. <, 1, %, (",
        "response": "(1 % <)"
    },
    {
        "instruction": "Write a Python Function to implement the game of Tic-Tac-Toe. ",
        "response": "class GameState:\n    def __init__(self):\n        self.board = [[None, None, None],\n                      [None, None, None],\n                      [None, None, None]\n        ]\n    \n    def is_game_over(self):\n        b = self.board\n        # Check if a player won\n        if b[0][0] == b[0][1] == b[0][2] != None or b[1][0] == b[1][1] == b[1][2] != None or b[2][0] == b[2][1] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][0] == b[2][0] != None or b[0][1] == b[1][1] == b[2][1] != None or b[0][2] == b[1][2] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][1] == b[2][2] != None or b[0][2] == b[1][1] == b[2][0] != None:\n            return True\n        # Check if the board is full\n        elif any(None in row for row in b):\n            return False\n        # All positions filled, no winner\n        else:\n            return True"
    },
    {
        "instruction": "Analyze an object-oriented program written in Python and suggest changes to improve its technical quality. def main():\n  my_list = [1,2,3,4] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()",
        "response": "The program can be improved to make use of better data structure, such as a list comprehension. This would allow faster iteration over the list and reduce duplicate lines of code.\n\ndef main():\n  my_list = [1,2,3,4] \n\n  my_list = [element for element in my_list] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()"
    },
    {
        "instruction": "Write a function in JavaScript to flatten the given array. [1, [[2, 3], 4], 5, [6]]",
        "response": "function flatten(arr) {\n  const flattened = [];\n  // Call the function recursively\n  const flattenHelper = (a) => {\n    for (let i = 0; i < a.length; i++) {\n      Array.isArray(a[i]) ? flattenHelper(a[i]) : flattened.push(a[i]);\n    }\n  };\n\n  flattenHelper(arr);\n  return flattened;\n}"
    },
    {
        "instruction": "Given the following Python code, identify if it is syntactically correct or not. def add(a\nb):\nreturn a+b",
        "response": "false"
    },
    {
        "instruction": "Given a string in Python, generate a new string with the same set of characters but in the reverse order. str = \"abcdefg\"",
        "response": "str = \"gfedcba\""
    },
    {
        "instruction": "Create a Python script to print out all prime numbers up to and including a given number n. ",
        "response": "def print_prime_numbers(n):  \n    for num in range(2, n + 1):  \n        is_prime = True \n        for i in range(2, num):  \n            if (num % i) == 0:  \n                is_prime = False\n                break\n        if is_prime:\n            print(num)"
    },
    {
        "instruction": "Write a Python script to check if two string variables are anagrams or not. ",
        "response": "def is_anagram(str1, str2):\n    # removing all whitespace from strings \n    str1 = ''.join(str1.split())\n    str2 = ''.join(str2.split()) \n\n    # create list for each string \n    list_str1 = list(str1.upper()) \n    list_str2 = list(str2.upper()) \n\n    # sort the list \n    list_str1.sort() \n    list_str2.sort() \n\n    # checking if both lists are identical or not \n    if (list_str1 == list_str2): \n        return True\n    else: \n        return False"
    },
    {
        "instruction": "Replace the following PHP code with an equivalent JavaScript code $someNumber = 10;",
        "response": "let someNumber = 10;"
    },
    {
        "instruction": "Generate a web service function in Python to return the current date and time. ",
        "response": "import datetime\n\ndef get_current_time():\n    now = datetime.datetime.now()\n    return now.strftime(\"%Y-%m-%d %H:%M:%S\")"
    },
    {
        "instruction": "Design a JavaScript class to instantiate objects for student records. The student records should store the student name, age, and score of the last test.",
        "response": "class Student {\n  constructor(name, age, lastScore) {\n    this.name = name;\n    this.age = age;\n    this.lastScore = lastScore;\n  }\n}"
    },
    {
        "instruction": "Manipulate a 2D array in Python such that it consists of the maximum value of each column. array = [[1, 2, 3], \n        [4, 5, 6], \n        [7, 8, 9]]",
        "response": "array = [[7, 8, 9], \n        [7, 8, 9], \n        [7, 8, 9]]\n\ndef max_columns(array): \n    for col in range(len(array[0])): \n        m = array[0][col] \n        for row in array:\n            if row[col] > m: \n                m = row[col]\n        for row in range(len(array)):\n            array[row][col] = m \n    return array"
    },
    {
        "instruction": "Create an object in JavaScript which produces some random number when the object is called. ",
        "response": "let randomNumber = {\n    getNumber: function() {\n        return Math.floor(Math.random() * 10);\n    }\n}\n\nlet myNum = randomNumber.getNumber(); // Possible output: 5"
    },
    {
        "instruction": "Create a function which prints out squares of all numbers from 1 to a given number in JavaScript. ",
        "response": "function printSquares(n) {\n    for (let i = 1; i <= n; i++) {\n        console.log(i*i)\n    }\n}"
    },
    {
        "instruction": "Describe in English the function of this Javascript code. function addUser(username, age) {\n const user = {\n name: username,\n age: age\n };\n \n return user;\n}",
        "response": "This Javascript code defines a function called 'addUser' which takes two parameters: username and age. It creates a 'user' object with the username and age as its properties and returns the object."
    },
    {
        "instruction": "Propose an algorithm in Python for sorting a given list of numbers in descending order. ",
        "response": "One possible solution would be to use a variation of the bubble sort algorithm, where the elements are being swapped from the last element to the first element.\n\ndef sort_numbers_descending(elements):\n  n = len(elements)\n  # Traverse through all elements\n  for i in range(n-1):\n    # Last i elements are already in place\n    for j in range(n-1-i):\n      # Swap if the element found is greater\n      # than the next element\n      if elements[j] < elements[j+1]:\n        temp = elements[j]\n        elements[j] = elements[j+1]\n        elements[j+1] = temp\n  return elements"
    },
    {
        "instruction": "Explain in plain English the difference between the set() and list() methods in Python. ",
        "response": "The main difference between sets and lists in Python is the way the elements are stored. Lists store the elements in an ordered sequence, whereas sets store the elements in an unordered set. Sets are faster in terms of performance because they do not have duplicate elements. This means that when checking if an element exists in a set, the process is faster than checking for elements in a list. Furthermore, sets also do not allow for indexing, as the elements are unordered."
    },
    {
        "instruction": "Create a function in Python to find all pairs of integers that sum up to k. ",
        "response": "def find_pair(arr,k):\n  pairs = []\n  found_elements = set()\n  for num in arr:\n    diff = k - num\n    if diff in found_elements:\n      pairs.append([min(num,diff), max(num,diff)])\n    found_elements.add(num)\n  return pairs"
    },
    {
        "instruction": "Design an algorithm in Python to retrieve all elements in a given array that occur only once. ",
        "response": "def singleOccurence(arr): \n    ans = []\n    for i in range(len(arr)): \n        count = 0\n        for j in range(len(arr)): \n            if arr[i] == arr[j]: \n                count+=1\n        if count == 1: \n            ans.append(arr[i]) \n    return ans"
    },
    {
        "instruction": "Create a program in Javascript that takes an array of numbers and an integer and returns an array containing only the numbers that are larger than the given integer. Array of numbers: [4, 8, 12, 7, 3]  \nInteger: 7",
        "response": "function filterBiggerThan(arr, num) {\n  return arr.filter(n => n > num);\n}"
    },
    {
        "instruction": "Create a Python dictionary object {'a':1, 'b':2, 'c':3}",
        "response": "mydict = {'a':1, 'b':2, 'c':3}"
    },
    {
        "instruction": "Write a JavaScript program to clone a given object. ",
        "response": "function clone(obj) {\n    let cloneobj = {}; \n    \n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            cloneobj[key] = obj[key]; \n        }\n    }\n \n    return cloneobj; \n}"
    },
    {
        "instruction": "Write a Python function to remove punctuation from a given sentence. The quick brown fox jumps over the lazy dog!",
        "response": "def remove_punctuation(sentence):\n punctuation_marks = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n new_sentence = \"\"\n for char in sentence:\n if char not in punctuation_marks:\n new_sentence += char\n return new_sentence"
    },
    {
        "instruction": "Write a Python function to generate a list of Fibonacci numbers up to the given limit n. ",
        "response": "def generate_fibonacci(n):\n fibonacci_list = [0, 1]\n for i in range(2, n+1):\n fibonacci_list.append(fibonacci_list[i-2] + fibonacci_list[i-1])\n return fibonacci_list"
    },
    {
        "instruction": "Write a Python script that randomly shuffles the elements of a given array. list = [1, 2, 3, 4, 5]",
        "response": "import random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr\n\nresult = shuffle([1, 2, 3, 4, 5])\nprint(result)"
    },
    {
        "instruction": "Convert the given code in Java to an equivalent expression in Python. int x = 10;",
        "response": "x = 10"
    },
    {
        "instruction": "Construct a for loop in JavaScript to iterate through an array of strings and print out each one. ",
        "response": "let strArray = [\"Hello\", \"World\", \"!\"];\nfor(let i = 0; i < strArray.length; i++) {\n    console.log(strArray[i]);\n}"
    },
    {
        "instruction": "Write a Python program to analyze the sentiment of a given text. The restaurant food was terrible.",
        "response": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsia = SentimentIntensityAnalyzer()\nsentiment = sia.polarity_scores(input_text)\nprint(sentiment)\n# {'neg': 0.404, 'neu': 0.596, 'pos': 0.0, 'compound': -0.7424}"
    },
    {
        "instruction": "Create a functional programming paradigm in Python. ",
        "response": "def functional_programming(lst):\n    return list(map(lambda x : x*2, filter(lambda x : x % 2 == 0, lst)))\n \nprint(functional_programming([1,2,3,4,5]))      \n# Output: [4, 8]"
    },
    {
        "instruction": "Design an algorithm in JavaScript to find maximum element within an array. [4,7,2,1,0,6,5]",
        "response": "function findMax(arr) { \n\n    let max = arr[0]; \n \n    // Loop through array elements \n    // and compare with max \n    for (let i = 1; i < arr.length; i++) \n        if (arr[i] > max) \n            max = arr[i]; \n  \n    // return max element \n    return max; \n} \n\n// let arr = [4,7,2,1,0,6,5]\n// console.log(findMax(arr)) # returns 7"
    },
    {
        "instruction": "In Python, write a script that prints out the elements of a list. list = [1, 2, 3, 4, 5]",
        "response": "list = [1, 2, 3, 4, 5]\n\nfor x in list:\n    print(x)"
    },
    {
        "instruction": "Parse this JSON data using JavaScript. {\n  \"name\": \"John Smith\",\n  \"age\": 35,\n  \"location\": \"Online\"\n}",
        "response": "let data = {\n  \"name\": \"John Smith\",\n  \"age\": 35,\n  \"location\": \"Online\"\n};\n\nlet name = data.name;\nlet age = data.age;\nlet location = data.location;\n\nconsole.log(name); // Outputs: John Smith\nconsole.log(age); // Outputs: 35\nconsole.log(location); // Outputs: Online"
    },
    {
        "instruction": "Write a JavaScript function to check if a number is in the Fibonacci sequence. ",
        "response": "function isFibonacci(num) { \n\tlet a = 0,\n\t\tb = 1;\n\twhile (a <= num) { \n\t\tif (a == num) \n\t\t\treturn true; \n\t\tlet c = a + b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn false; \n} \n\nconsole.log(isFibonacci(5)); // Outputs: true"
    },
    {
        "instruction": "Implemet a JavaScript function to print all the leap year between 2014 and 2050. ",
        "response": "function leapYears() {\n\tfor (let year = 2014; year <= 2050; year++) {\n\t\tif (year % 4 == 0) {\n\t\t\tconsole.log(year);\n\t\t}\n\t}\n}\n\nleapYears();"
    },
    {
        "instruction": "Re-implement this Ruby code in Python def fibonacci(n)\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2)\nend",
        "response": "def fibonacci(n): \n    if n < 2: \n        return n \n    return fibonacci(n - 1) + fibonacci(n - 2) \n  \nprint(fibonacci(7)) # Outputs: 13"
    },
    {
        "instruction": "Is this JavaScript condition valid? if (a === b)",
        "response": "true"
    },
    {
        "instruction": "Create a logic using Python that checks if a string contains only alphabetical characters or not. ",
        "response": "def checkAlphabet(string): \n\n   alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n   for i in string: \n      if i not in alphabets: \n         return False\n   return True"
    },
    {
        "instruction": "Write a Python code to find the largest and the second largest numbers in a list. List: [2, 9, 12, 45, 10, 20]",
        "response": "def getLargestTwo(l):\n    first_largest = second_largest = float('-inf')\n    for num in l:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif num > second_largest and num != first_largest:\n            second_largest = num\n    return (first_largest, second_largest)"
    },
    {
        "instruction": "Create a one line solution in Python to remove all vowels from a string. ",
        "response": "my_string = 'This is a sentence without any vowels'\nnew_string = ''.join([i for i in my_string if i not in 'aeiouAEIOU']) \nprint(new_string)"
    },
    {
        "instruction": "Create an algorithm in Python to combine two sorted lists into a single sorted list. list1 = [3, 5, 7]\nlist2 = [1, 2, 4]",
        "response": "def merge_lists(lst1, lst2): \n  sorted_list = []\n  i=j=0\n  while (i<len(lst1) and j<len(lst2)):\n    if lst1[i] <= lst2[j]:\n      sorted_list.append(lst1[i])\n      i+=1\n    else:\n      sorted_list.append(lst2[j])\n      j+=1\n\n  sorted_list  += lst1[i:]\n  sorted_list += lst2[j:]\n \n  return sorted_list\n\nlist1 = [3, 5, 7]\nlist2 = [1, 2, 4]\n \nprint(merge_lists(list1, list2))"
    },
    {
        "instruction": "Create a function in Python to return the approximate value of sin(x) using degrees ",
        "response": "import math\ndef sin_deg(x):\n   \"\"\"\n   Returns the approximate value of the sine of x, given in degrees.\n   \"\"\"\n   return math.sin(math.radians(x))"
    },
    {
        "instruction": "Write a Python code to calculate the sum of three given numbers, if the values are equal, then return triple their sum ",
        "response": "def sumThree(n1, n2, n3):\n    \"\"\"\n    This function returns the sum of three numbers\n\tIf the values are equal, it will return triple their sum\n    \"\"\"\n    if n1 == n2 == n3:\n        return 3 * (n1 + n2 + n3)\n    else:\n        return n1 + n2 + n3"
    },
    {
        "instruction": "Given the python code below, reverse the order of the lines to form a valid program. def myFunc(): \n    print(1) \n    return \nprint(2)",
        "response": "def myFunc(): \n    print(2) \n    return \nprint(1)"
    },
    {
        "instruction": "Create an array of 15 random floats in Python between 0 and 1. ",
        "response": "import random\n\nrandom_floats = [random.uniform(0, 1) for _ in range(15)]"
    },
    {
        "instruction": "Implement a custom promise-based JavaScript library. ",
        "response": "const Promise = (() => {\n  let resolveCallbacks = [];\n  let rejectCallbacks = [];\n\n  const promise = (executor) => {\n   executor((data) => {\n     resolveCallbacks.forEach(callback => {\n       callback(data);\n     });\n   }, (error) => {\n     rejectCallbacks.forEach(callback => {\n       callback(error);\n     });\n   });\n\n   return {\n     then: (resolve, reject) => {\n       resolveCallbacks.push(resolve);\n       rejectCallbacks.push(reject);\n     }\n   };\n  };\n\n  return promise;\n})();"
    },
    {
        "instruction": "Design a function in Python to calculate the Fibonacci sequence up to a particular number. ",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nfor i in range(1, n+1):\n    print(fibonacci(i))"
    },
    {
        "instruction": "Write a Python code to calculate the number of unique combinations of three digits from 0 to 9. ",
        "response": "def combinations(n, k):\n    from itertools import combinations\n    return len(list(combinations(range(n), k)))\n \ncomb = combinations(10, 3)\nprint(comb)"
    },
    {
        "instruction": "Write a Python code to print a Pascal's triangle with five rows. ",
        "response": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow = [ l + r for l, r in zip(trow + y, y + trow)] \n        if(x > 0):\n            trow.append(1)\n    return n >= 1\npascal_triangle(5)"
    },
    {
        "instruction": "Classify the following statement as either true or false. Java and JavaScript are the same language. ",
        "response": "False. Java and JavaScript are two different programming languages. Java is a statically typed, strong-typing, object-oriented language while JavaScript is an interpreted language and is used mainly in web development."
    },
    {
        "instruction": "Convert a linked list to an array in JavaScript. function LinkedList() {\n    this.head = null;\n    this.tail = null;\n}  \n  \nfunction Node(value, next, prev) {\n    this.value = value;\n    this.next = next;\n    this.prev = prev;\n}\n\nlet list = new LinkedList();\nlist.head = new Node(1, new Node(2, new Node(3, new Node(4, null, null), null), null), null);\nlist.tail = new Node(4, null, new Node(3, null, new Node(2, null, new Node(1, null, null))))",
        "response": "function linkedListToArray(list) {\n    const array = [];\n    let currentNode = list.head;\n    while (currentNode) {\n        array.push(currentNode.value);\n        currentNode = currentNode.next;\n    }\n    return array;\n} \n\nconsole.log(linkedListToArray(list));"
    },
    {
        "instruction": "Write a code in Python to toggle all characters in a string. The string is: \"Hello World!\"",
        "response": "s = \"Hello World!\" \nres = \"\" \nfor char in s: \n    if char.islower():\n        res += char.upper() \n    elif char.isupper():\n        res += char.lower()\nprint(res)"
    },
    {
        "instruction": "Generate a Python function to generate Fibonacci sequence given a number n. n = 5",
        "response": "def Fibonacci(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    {
        "instruction": "Generate a code in Python to generate a list containing multiplication table up to 10. ",
        "response": "multiplication_table = []\nfor i in range(1, 11):\n    multiplication_table.append([x*i for x in range(1, 11)])\nprint(multiplication_table)"
    },
    {
        "instruction": "Describe the feature of \"promise\" in JavaScript. ",
        "response": "Promises in JavaScript are objects that represent the eventual completion or failure of an asynchronous operation. They allow us to structure contingencies within our code, and to take actions based on the eventual result of asynchronous tasks."
    },
    {
        "instruction": "Develop a Python code that takes a string as input and converts it to all uppercase. string = \"Hello World\"",
        "response": "def toUpperCase(string):\n    return string.upper()"
    },
    {
        "instruction": "Write a JavaScript code to pop up a window that says \"Hello, World!\" when you open up the webpage. ",
        "response": "<script>\nwindow.onload = function(){\n alert(\"Hello, World!\");\n}\n</script>"
    },
    {
        "instruction": "Create a Python class object to store data about a basketball player. ",
        "response": "class BasketballPlayer:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight"
    },
    {
        "instruction": "Use the requests library to write a Python program that sends an HTTP GET request. url = \"http://example.com\"",
        "response": "import requests\n\nresponse = requests.get(url)"
    },
    {
        "instruction": "Create a JavaScript object literal for a student with properties (name, age, grade). ",
        "response": "let student = {\n    name: \"John\",\n    age: 25,\n    grade: \"A\"\n};"
    },
    {
        "instruction": "Write a JavaScript function to find the number of matching items in two arrays. arr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]",
        "response": "function countMatchingItems(arr1, arr2) {\n return arr1.filter(num => arr2.includes(num)).length;\n}\n\ncount = countMatchingItems(arr1, arr2); \nconsole.log(count); // Output: 2"
    },
    {
        "instruction": "Create an API endpoint in Python with Flask that requires authentication. users = {\"John\": \"123456\", \"Jenny\": \"456789\"}",
        "response": "from flask import Flask, request\n\napp = Flask(__name__)\n\nusers = {\"John\": \"123456\", \"Jenny\": \"456789\"}\n\n@app.route('/', methods=['GET'])\ndef root():\n    if request.authorization and request.authorization.username in users \\\n            and request.authorization.password == users[request.authorization.username]:\n        return 'Authentication successful!' \n    else:\n        return 'Authentication failed!'\n        \nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Create a JavaScript class called \"Vehicle\" with two properties: brand and model. ",
        "response": "class Vehicle {\n    constructor(brand, model) {\n        this.brand = brand;\n        this.model = model;\n    }\n}"
    },
    {
        "instruction": "Complete the following javascript code to perform a task. const items = [\n  { company: 'A', date: '02-09-19' },\n  { company: 'B', date: '18-4-19' },\n  { company: 'C', date: '03-12-19' },\n  { company: 'A', date: '29-07-18' },\n];\n\n// Complete code here",
        "response": "const items = [\n  { company: 'A', date: '02-09-19' },\n  { company: 'B', date: '18-4-19' },\n  { company: 'C', date: '03-12-19' },\n  { company: 'A', date: '29-07-18' },\n];\n\n// Complete code here\nfunction latestDateForCompany(items, company) {\n  let latestDate;\n  for (let item of items) {\n    const { company: c, date } = item;\n    if (c === company) {\n      if (!latestDate) {\n        latestDate = date;\n        continue;\n      }\n      if (new Date(latestDate) < new Date(date)) {\n        latestDate = date;\n      }\n    }\n  }\n  return latestDate;\n}\n\nconsole.log(latestDateForCompany(items, 'A')); // 02-09-19"
    },
    {
        "instruction": "Given a Python list, write a program to convert all its numbers to strings. lst = [1, 2, 3, 4]",
        "response": "lst = [str(x) for x in lst]"
    },
    {
        "instruction": "Suggest an elegant way to print out a list of numbers without using a loop in Python. lst = [1, 2, 3, 4]",
        "response": "print(*lst) # 1 2 3 4"
    },
    {
        "instruction": "Edit this piece of Python code to make sure that the decimal is rounded off correctly. a = round(0.54678, 2)",
        "response": "a = round(0.54678, 2)  # rounds off to 2 decimal places"
    },
    {
        "instruction": "Given a list of integers, write a Python program to create a new list that contains the square of every element in the original list. ",
        "response": "def square_numbers(nums):\n  return [num**2 for num in nums]"
    },
    {
        "instruction": "Create a JavaScript code snippet to check the validity of a credit card number. credit_card_number = ‘1234567891234567’",
        "response": "function validateCardNumber(credit_card_number) {\n  // remove any non-digits\n  var card_number = credit_card_number.replace(/\\D/g, '');\n\n   // add odd digits in even length strings or even digits in odd length strings\n  var sum = 0;\n  for (var i = 0; i < card_number.length; i++) {\n    var intVal = parseInt(card_number.substr(i, 1));\n    if (i % 2 == 0) {\n      intVal *= 2;\n      if (intVal > 9) {\n        intVal = 1 + (intVal % 10);\n      }\n    }\n    sum += intVal;\n  }\n  // If the result is divisible by 10, the card number is valid\n  return (sum % 10 == 0);\n}\n\nconsole.log(validateCardNumber(credit_card_number))"
    },
    {
        "instruction": "Write a Python program to fill a matrix with random numbers. rows = 4 \ncolumns = 3",
        "response": "matrix = [[randint(0, 99) for x in range(columns)] for y in range(rows)]"
    },
    {
        "instruction": "Generate a function that takes a given list of strings and orders them by their lengths. words = [\"Python\", \"programming\", \"language\"]",
        "response": "def sort_by_length(words):\n return sorted(words, key=len) \n\nprint(sort_by_length(words))"
    },
    {
        "instruction": "Develop a program that picks a random item from a given list of strings. words = [\"Python\", \"programming\", \"language\"]",
        "response": "import random\ndef random_word(words):\n return random.choice(words)\n \nprint(random_word(words))"
    },
    {
        "instruction": "Write a Python program to calculate the sum of two numbers entered by the user. ",
        "response": "num1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Adding two numbers\nsum = num1 + num2\n\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))"
    },
    {
        "instruction": "Create a JavaScript object that keeps track of event data such as time, attendees, and location. ",
        "response": "var event = {\n  time: \"12pm\",\n  attendees: [\"John\", \"Jane\", \"Jack\"],\n  location: \"New York\"\n};"
    },
    {
        "instruction": "Write a class in Python for representing a rectangle. This class should store the length and width of the rectangle, and be able to compute its area. ",
        "response": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n \n    def area(self):\n        return self.length * self.width"
    },
    {
        "instruction": "Write a function to calculate the standard deviation of data points in Python. ",
        "response": "def stdev(data):\n    avg = sum(data) / len(data)\n    total = 0\n    for x in data:\n        total += (x - avg) ** 2\n    return (total / (len(data) - 1)) ** 0.5"
    },
    {
        "instruction": "How would you convert a binary number to decimal in JavaScript? ",
        "response": "const binaryToDecimal = binaryString => parseInt(binaryString, 2);"
    },
    {
        "instruction": "Write a code in Python that takes two lists of equal lengths and generates a new list with the elements of both lists combined. list1 = [1, 2, 3]\nlist2 = [4, 5, 6]",
        "response": "list3 = []\n\nfor i in range(len(list1)):\n    list3.append(list1[i])\n    list3.append(list2[i])"
    },
    {
        "instruction": "Slice a string after the nth character. Python",
        "response": "def slice_string(string, n):\n    return string[n:]\n\ninput_string = 'Python'\nprint(slice_string(input_string, 3)) # hon"
    },
    {
        "instruction": "Create a for loop in Python that iterates through the list [1,2,3,4,5]. ",
        "response": "for item in [1,2,3,4,5]:\n    print(item)"
    },
    {
        "instruction": "Write a JavaScript code that prints out even numbers between 0 and 50. ",
        "response": "for (let i = 0; i <= 50; i++) {\n  if (i % 2 == 0) {\n    console.log(i);\n  }\n}"
    },
    {
        "instruction": "Create a program in Python that takes two strings as input and determines if they are anagrams of each other string1=\"listen\";\nstring2=\"silent\";",
        "response": "def isAnagram(str1, str2): \n\n # convert both strings into lowercase \n str1 = str1.lower()\n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str1)) \n sortedStr2 = ''.join(sorted(str2)) \n  \n # check if sorted strings are equal \n if sortedStr1 == sortedStr2: \n     return True\n else: \n     return False\n\nresult = isAnagram(string1, string2)\nprint(result)"
    },
    {
        "instruction": "Update the following JavaScript code to use object-oriented programming. const calculator = {\n  number1: 0,\n  number2: 0,\n  add(num1, num2) {\n    return num1 + num2;\n  },\n  subtract(num1, num2) {\n    return num1 - num2;\n  },\n  multiply(num1, num2) {\n    return num1 * num2;\n  },\n  divide(num1, num2) {\n    return num1 / num2;\n  }\n}",
        "response": "class Calculator {\n  constructor(num1, num2) {\n    this.num1 = num1;\n    this.num2 = num2;\n  }\n  add() {\n    return this.num1 + this.num2;\n  }\n  subtract() {\n    return this.num1 - this.num2;\n  }\n  multiply() {\n    return this.num1 * this.num2;\n  }\n  divide() {\n    return this.num1 / this.num2;\n  }\n}"
    },
    {
        "instruction": "Create a JavaScript function to traverse an array and return true if the given element exists in the array. Array: [5, 8, 2, 6, 9]\nElement: 8",
        "response": "function containsElement(array, element) {\n  for(var i = 0; i < array.length; i++) {\n    if(array[i] === element) {\n      return true;\n    }\n  }\n  return false;\n}"
    },
    {
        "instruction": "How to create a basic HTML page in JavaScript? ",
        "response": "We can create a basic HTML page using the document.write() method. The syntax to create an HTML page using document.write() is as follows:\n\ndocument.write(\"<html>\"); \ndocument.write(\"<head>\");\ndocument.write(\"<title>My Page</title>\");\ndocument.write(\"</head>\"); \ndocument.write(\"<body>\");\ndocument.write(\"My first web page with JavaScript\");\ndocument.write(\"</body>\");\ndocument.write(\"</html>\");"
    },
    {
        "instruction": "Create a Python script to print the 3rd element in a given list. [1,2,3,4,5,6]",
        "response": "list = [1,2,3,4,5,6]\n\nprint(list[2]) # Output: 3"
    },
    {
        "instruction": "Create a function in JavaScript to find the longest substring in a given string without repeating characters. String: \"abcabcbb\"",
        "response": "function findLongestSubstring(s) {\n  let longest = 0;\n  let seen = {};\n  let start = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (seen[char]) {\n      start = Math.max(start, seen[char]);\n    }\n    // index - beginning of substring + 1 (to include current in count)\n    longest = Math.max(longest, i - start + 1);\n    // store the index of the next char so as to not double count\n    seen[char] = i + 1;\n  }\n  return longest;\n}"
    },
    {
        "instruction": "Name all the built-in functions in Python ",
        "response": "abs(), all(), any(), ascii(), bin(), bool(), bytearray(), calls(), chr(), dir(), divmod(), enumerate(), eval(), filter(), float(), format(), frozenset(), hex(), int(), isinstance(), len(), list(), map(), max(), min(), oct(), open(), ord(), pow(), print(), range(), reversed(), round(), set(), slice(), sorted(), str(), sum(), tuple(), type(), zip()"
    },
    {
        "instruction": "Edit the existing code to focus the cursor in the input field. <html>\n    <body>\n        <input type=\"text\" id=\"myInput\" />\n        <script type=\"text/javascript\">\n            document.getElementById('myInput').focus();\n        </script>\n    </body>\n</html>",
        "response": "<html>\n    <body>\n        <input type=\"text\" id=\"myInput\" autofocus />\n        <script type=\"text/javascript\">\n            document.getElementById('myInput').focus();\n        </script>\n    </body>\n</html>"
    },
    {
        "instruction": "Edit the following Python code to print a date in a human-readable form. print(date.today())",
        "response": "from datetime import date \nprint(date.today().strftime(\"%B %d, %Y\"))"
    },
    {
        "instruction": "Compare two strings to check if they are identical using the JavaScript language. str1 = 'Testing'\nstr2 = 'Testing'",
        "response": "let identical = str1 === str2; \nif (identical) { \n    console.log(\"Strings are identical\"); \n} else { \n    console.log(\"Strings are not identical\"); \n}"
    },
    {
        "instruction": "Define a class named \"Day\" in Python to represent a day of the week. ",
        "response": "class Day:\n    def __init__(self):\n        self.day = \"\"\n\n    def set_day(self, day):\n        self.day = day\n\n    def get_day(self):\n        return self.day"
    },
    {
        "instruction": "Given a list of strings, use Python to print the count of strings that start with the letter 'a'. string_list = [\"apple\",\"mango\",\"banana\",\"avocado\"]",
        "response": "count = 0\nfor string in string_list:\n    if string.startswith(\"a\"):\n        count += 1\n \nprint(\"The count of strings starting with 'a' is:\", count)"
    },
    {
        "instruction": "Generate a piece of code that defines and calls a function in Python. ",
        "response": "def myFunction():\n   print(\"Hello World\")\nmyFunction()"
    },
    {
        "instruction": "Write a line of JavaScript code to create a variable `x` and assign the number `7` to it. ",
        "response": "let x = 7;"
    },
    {
        "instruction": "Design a JavaScript program to validate forms. ",
        "response": "function validateForm() {\n  // check if each form element has a valid value\n  if (formElement1.value == '' || formElement2.value == '') {\n    alert('Please fill out all the fields!');\n    return false;\n  } else {\n    return true;\n  }\n}"
    },
    {
        "instruction": "Compute the natural logarithm of 500 using Python. ",
        "response": "import math\n \nprint(math.log(500))"
    },
    {
        "instruction": "Write a function in Python to compute average of the numbers in a given list. [2, 4, 5, 7]",
        "response": "def compute_avg(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total/len(numbers)"
    },
    {
        "instruction": "Implement a decision tree as a class in Python. ",
        "response": "class DecisionTree:\n    def __init__(self,X,y):\n        self.X = X\n        self.y = y\n\n    def fit(self, X,y):\n        # Implement decision tree fitting algorithm\n\n    def predict(self,X):\n        # Implement decision tree prediction algorithm"
    },
    {
        "instruction": "Given a Python list, display the total number of elements in the list. mylist = [1, 2, 3, 4, 5]",
        "response": "The total number of elements in the list is 5."
    },
    {
        "instruction": "Create a JavaScript function that takes two strings of equal length and returns the positions of the characters which don't match. \"abcdefg\", \"hijklmn\"",
        "response": "function findNonMatchingPos(str1, str2) {\n  let positions = [];\n  if(str1.length != str2.length) {\n    return -1; //handle unequal lengths\n  }\n  for(let i = 0; i < str1.length; i++) {\n    if(str1.charAt(i) !== str2.charAt(i)) {\n      positions.push(i);\n    }\n  }\n  return positions;\n}"
    },
    {
        "instruction": "Write a function in Javascript that takes two numbers and combines them in order to calculate their sum. ",
        "response": "function sum(a, b) {\n  return a + b;\n}"
    },
    {
        "instruction": "Given a matrix, write a program that finds its determinant in Python. [[a, b],  [c, d]]",
        "response": "def determinant(matrix): \n  a = matrix[0][0]\n  b = matrix[0][1]\n  c = matrix[1][0]\n  d = matrix[1][1]\n  return a*d - b*c"
    },
    {
        "instruction": "Write a JavaScript function to convert an array to a string separated by key-pair value separator such as \"|\". const array1 = [1,2,3,4,5];",
        "response": "function arrayToString(arr, separator=\"|\") {\n    return arr.join(separator);\n}\n\narrayToString(array1); // returns \"1|2|3|4|5\""
    },
    {
        "instruction": "Write a Python code to remove the characters 'a', 'b', and 'c' from a given string. String: abcabcabc",
        "response": "def remove_chars(string):\n    for char in \"abc\":\n        string = string.replace(char, '')\n    return string"
    },
    {
        "instruction": "What are the similarities between dictionaries and Lists in Python? ",
        "response": "Both dictionaries and lists are container data structures in Python which allow for the storage and retrieval of data. They are both mutable, meaning the contents can be updated, changed and manipulated. They also both contain an ordered sequence of elements, allowing for indexing into each one. However, dictionaries use a key:value pair, whereas lists contain only values."
    },
    {
        "instruction": "Write a Python code to sort the names into ascending order. names = [\"Vladimir Putin\",\"Joe Biden\",\"Xi Jinping\"]",
        "response": "names.sort()"
    },
    {
        "instruction": "Develop a machine learning model in Python to classify emails as either important or not important. ",
        "response": "import numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the dataset\ndata = pd.read_csv('emails.csv')\n\n# Pre-process the dataset for label encoding and feature extraction\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(data.category.values)\n\ntfidf_vectorizer = TfidfVectorizer(stop_words='english', min_df=2)\nX = tfidf_vectorizer.fit_transform(data.body.values)\n\n# Split the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the Multinomial Naive Bayes model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint('Test accuracy: ', score)"
    },
    {
        "instruction": "Create a Python function that takes an object as an input and returns its names and values. Input: {\"name\": \"John\", \"age\": 25, \"cities\": [\"New York\", \"Boston\"]}",
        "response": "def get_object_details(input_obj):\n    output = []\n    for key, value in input_obj.items():\n        if type(value) == list:\n            value = \", \".join(value)\n        output.append(f\"{key}: {value}\")\n    return \"\\n\".join(output)"
    },
    {
        "instruction": "Construct a for loop in Python to iterate through the list [3, 2, 5, 4, 6] in reverse order. ",
        "response": "for num in reversed([3, 2, 5, 4, 6]):\n    print(num)"
    },
    {
        "instruction": "Given a two-dimensional array, write a Python code to sum each row in the array and store it in a new array. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "response": "def sum_row_in_2d_array(arr):\n    result = []\n    # iterating through array\n    for sub_arr in arr:\n        sum=0\n        # iterating through sub array\n        for element in sub_arr:\n            sum += element\n        # Adding sum to result list\n        result.append(sum)\n \n    return result"
    },
    {
        "instruction": "Write a code to extract the odd numbers from a given array in JavaScript. [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "function oddNumbers(arr) {\n   let oddNumbers = arr.filter(function(element) {\n      return element % 2 !== 0;\n   });\n   return oddNumbers;\n}"
    },
    {
        "instruction": "Solve the following Problem and display the answer using JavaScript: What is 3+4*2? ",
        "response": "let x = 3 + 4 * 2;\nconsole.log(x);"
    },
    {
        "instruction": "Write a Python program to check if a substring is present in a set of strings substring: \"abc\"\nstrings: [\"hoabcll\", \"aaabcbc\", \"abcbal\"]",
        "response": "True"
    },
    {
        "instruction": "Use Python to filter out all the numbers divisible by 3 from a given list. numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def filter_list(numbers):\n    return [x for x in numbers if x % 3 == 0]\n\nfilter_list(numbers) # Output: [3, 6, 9]"
    },
    {
        "instruction": "Check if the following statement is a valid python syntax Statement: for x in range(0, len(listname))",
        "response": "Yes, the statement is a valid Python syntax."
    },
    {
        "instruction": "Create a JavaScript function for finding two largest numbers among a given array of numbers Array of numbers: [3, 6, 8, 5, 9, 1]",
        "response": "function findLargest(numArray) {\n  var largest = numArray[0];\n  var secondLargest;\n \n  for( var i = 1; i < numArray.length; i++ ) {\n    if( numArray[i] > largest ) {\n      secondLargest = largest;\n      largest = numArray[i];\n    }\n    else if ( numArray[i] > secondLargest ) {\n      secondLargest = numArray[i];\n    }\n  }\n \n  return [largest, secondLargest];\n}\n\nUsage:\nvar largest2 = findLargest([3, 6, 8, 5, 9, 1]);\n\nOutput:\n[9, 8]"
    },
    {
        "instruction": "Write a different style of a given JavaScript code snippet. function sum(a, b) {\n  return a + b;\n}",
        "response": "function addVals(x, y) {\n    return x + y;\n}"
    },
    {
        "instruction": "Write a basic script in Python that counts from 0 to 10. ",
        "response": "for i in range(11):\n    print(i)"
    },
    {
        "instruction": "How would you display the following message as an error in JavaScript?\n\n\"Username and password do not match.\" ",
        "response": "console.error(\"Username and password do not match.\")"
    },
    {
        "instruction": "Write a JavaScript code to reverse the following string. \"Hello World!\"",
        "response": "let str = \"Hello World!\";\nlet reversedStr = str.split(\"\").reverse().join(\"\");\nconsole.log(reversedStr);"
    },
    {
        "instruction": "Write a short piece of code in Python to calculate the area of a triangle with the sides 6 cm, 8 cm, and 10 cm. ",
        "response": "def calculate_triangle_area(side1, side2, side3):\n    '''This function calculates the area of a triangle given three sides.'''\n    s = (side1 + side2 + side3) / 2\n    return ((s*(s-side1)*(s-side2)*(s-side3))**0.5)\n\narea = calculate_triangle_area(6,8,10)\nprint(f\"The area of the triangle is {area} cm2\")"
    },
    {
        "instruction": "How would you use a for loop in Python to print the sum of all even numbers between 50 and 100? ",
        "response": "total = 0\nfor i in range(50, 101):\n    if i % 2 == 0:\n        total += i\nprint(f\"The sum of all even numbers between 50 and 100 is {total}\")"
    },
    {
        "instruction": "In Python, construct a function to fit a curve to a given set of data points. xdata = [0, 1, 2, 4, 11, 18]\nydata = [2, 3, 4, 6, 12, 17]",
        "response": "from scipy.optimize import curve_fit\n\ndef func(x, a, b, c):\n    return a*x**2 + b*x + c\n\nxdata = [0, 1, 2, 4, 11, 18]\nydata = [2, 3, 4, 6, 12, 17]\n\npopt, pcov = curve_fit(func, xdata, ydata)"
    },
    {
        "instruction": "In JavaScript, construct a function to count the occurence of an element in an array. var array = [1, 2, 3, 4, 1];\nint element = 1;",
        "response": "function countOccurence(array, element) {\n    let count = 0;\n    array.forEach(el => {\n        if(el === element) \n            count++\n    });\n    return count;\n}\n\nvar array = [1, 2, 3, 4, 1];\nlet element = 1;\n\nconsole.log(countOccurence(array, element)); // 2"
    },
    {
        "instruction": "Create a function in Python that performs a web scrape and returns the most frequent words from the resulting text. ",
        "response": "def scrape_frequent_words(url):\n    try:\n        from bs4 import BeautifulSoup\n        from collections import Counter\n    \n        # Get html from the given url\n        html_content = requests.get(url).text\n        # Parse the html\n        soup = BeautifulSoup(html_content)\n        \n        # Get all text from the page\n        all_texts = soup.find_all(text=True)\n\n        # Extract only words\n        words = [word for text in all_texts for word in text.split()]\n\n        # Calculate frequency \n        frequency = dict(Counter(words))\n        \n        # Return the word with most frequency \n        return max(frequency, key=frequency.get)"
    },
    {
        "instruction": "Create a React component in JavaScript which displays the given string as a status update. ",
        "response": "import React from 'react';\n\nconst StatusUpdate = ({ statusText }) => {\n  return (\n    <div>\n      <p>{statusText}</p>\n    </div>\n  );\n};\n\nexport default StatusUpdate;"
    },
    {
        "instruction": "Create a class in Python that implements the __len__ method to return the length of a given string. ",
        "response": "class StringLength:\n    def __len__(self, string):\n        return len(string)"
    },
    {
        "instruction": "Develop a new class in Python to represent a Rectangle object with getArea() and getPerimeter() methods. ",
        "response": "class Rectangle: \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    def getArea(self): \n        return self.length * self.width \n\n    def getPerimeter(self): \n        return 2 * (self.length + self.width)"
    },
    {
        "instruction": "Write a Python function that takes in a string and outputs a dictionary where the keys are the characters in the string and the values are the frequency of the characters in the string. ",
        "response": "def freq_dict(string):\n freq = {}\n for c in string:\n if c in freq:\n freq[c] += 1\n else:\n freq[c] = 1\n return freq"
    },
    {
        "instruction": "Write a Python function to decode a given string (with special characters) to its original form. ",
        "response": "def decode_string(string):\n return string.encode().decode('unicode_escape')"
    },
    {
        "instruction": "Write a Python program to test whether all elements of a given list are equal or not. [3,3,3]",
        "response": "def all_elements_equal(lst):\n return lst[1:] == lst[:-1]"
    },
    {
        "instruction": "Create a function in JavaScript to convert a number to its equivalent string format. 123",
        "response": "function numberToString(num){\n    return num.toString();\n}"
    },
    {
        "instruction": "Create a JavaScript object which will contain data about a person. ",
        "response": "var person = {\n    name: \"John Doe\",\n    age: 30,\n    gender: \"Male\"\n};"
    },
    {
        "instruction": "Create an if statement in JavaScript that prints \"Your number is bigger than 10\" if a given number is bigger than 10. ",
        "response": "if (number > 10) {\n  console.log(\"Your number is bigger than 10\");\n}"
    },
    {
        "instruction": "Which keyword is used to define a function in Python? ",
        "response": "The keyword used to define a function in Python is \"def\"."
    },
    {
        "instruction": "Write a Python program to abbreviate a name. name = \"John Smith\"",
        "response": "def abbreviateName(name): \n    split_name = name.split(' '); \n    abbrev_name = str(split_name[0][0] + '.' + split_name[1]); \n    return abbrev_name;"
    },
    {
        "instruction": "Write a JavaScript function that removes duplicates from an array. array = [1, 2, 3, 1, 4, 5, 6, 2, 8]",
        "response": "function removeDuplicates(array) { \n    let uniqueArray = [];\n    for (let i = 0; i < array.length; i++) { \n        if (uniqueArray.indexOf(array[i]) === -1) { \n            uniqueArray.push(array[i])\n        } \n    } \n    return uniqueArray;\n}\n\nremoveDuplicates(array); // [1, 2, 3, 4, 5, 6, 8]"
    },
    {
        "instruction": "Given two linked list, write a Python program to compare them and output true if they are equal, false if not head1 -> 20 -> 40 -> 60 -> 90\nhead2 -> 60 -> 20 -> 90 -> 70",
        "response": "false"
    },
    {
        "instruction": "Write a Swift program to convert a Python dictionary to a Swift dictionary. py_dict = {\"a\": 1, \"b\": 2, \"c\": 3}",
        "response": "let sw_dict = py_dict as! [String: Int]"
    },
    {
        "instruction": "Write a JavaScript function to check if a given input number is perfect or not. A perfect number is a number whose sum of divisors equals the number itself. ",
        "response": "function isPerfect(n) { \n    let sum = 0; \n    for (let i = 1; i < n; i++) { \n        if (n % i == 0) {\n            sum += i; \n        }\n    }\n    return sum === n;\n}"
    },
    {
        "instruction": "Create a lambda function in Python to fetch the age of a person from their given DOB. ",
        "response": "import datetime\n\ncalculate_age = lambda dob: int((datetime.date.today() - dob).days / 365.25)"
    },
    {
        "instruction": "Generate a Python program to perform matrix multiplication. ",
        "response": "# Python program to multiply two matrices \n# 3x3 matrix \nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n# 3x4 matrix\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n# result is 3x4\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nfor r in result:\n   print(r)"
    },
    {
        "instruction": "Create a JavaScript program to print out a pattern of some kind. ",
        "response": "for (let i=1; i<=4; i++){\n  let output = '';\n  for (let j=4; j>=i; j--){\n    output += '*';\n  }\n  console.log(output);\n}"
    },
    {
        "instruction": "Write a function that parses a json string into a Python dict. ",
        "response": "def parse_json_to_dict(json_string):\n    return json.loads(json_string)"
    },
    {
        "instruction": "Complete the following Python program for converting the given list into a dictionary. list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\ndef to_dict(list1, list2):\n    ???",
        "response": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\ndef to_dict(list1, list2):\n    return dict(zip(list1, list2))"
    },
    {
        "instruction": "Write a Python program to find the simple interest. principle = 1000, rate of interest = 5%, time duration = 5 years",
        "response": "# Simple Interest\n\nprinciple = 1000; \nrate = 5; \ntime = 5; \n\n# Calculate simple interest \nSimple_Interest = (principle*time*rate)/100; \n\nprint(\"Simple Interest = %.2f\" %Simple_Interest);"
    },
    {
        "instruction": "Find a Python solution for this leetcode problem. Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.",
        "response": "def twoSum(nums, target):\n    numDict = dict()\n    for index, num in enumerate(nums):\n        if num in numDict.keys():\n            return [numDict[num], index]\n        else:\n            numDict[target-num] = index"
    },
    {
        "instruction": "Import the pandas library in Python. ",
        "response": "import pandas as pd"
    },
    {
        "instruction": "Create a function to swap two elements of an array in JavaScript. <x=[1, 2, 3, 4] >",
        "response": "function swapElements(x) {\n  let temp = x[0];\n  x[0] = x[1];\n  x[1] = temp;\n}"
    },
    {
        "instruction": "Write a code in JavaScript to make all letters in a string upper case. <input_str=\"Hello World\" >",
        "response": "def makeUpperCase(input_str): \n  return input_str.upper()\n\nresult = makeUpperCase(\"Hello World\")\nprint(result)"
    },
    {
        "instruction": "Write a Python code snippet to find the index of the second occurrence of a substring in a given string. \"Python is an interpreted, high-level, general-purpose programming language.\"\n\"general-purpose\"",
        "response": "import re \n  \nstring = \"Python is an interpreted, high-level, general-purpose programming language.\"\nsubstring = \"general-purpose\"\n\nsecond_occurrence = [(m.start(0)) for m in re.finditer(substring, string)][1]\nprint('The second occurrence of the substring starts at index:', second_occurrence)"
    },
    {
        "instruction": "Write a JavaScript code to delete an item from an array. let arr = [1, 2, 3, 4, 5];",
        "response": "function removeElement(arr, index) {\n    if (index >= 0 && index < arr.length) {\n        arr.splice(index, 1);\n    }\n    return arr;\n}\n// Usage\nremoveElement(arr, 2); // returns [1, 2, 4, 5]"
    },
    {
        "instruction": "Using the code given below, add JavaScript code to make the hyperlinks open in a new tab. <ul>\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>",
        "response": "<ul>\n  <li><a href=\"#\" target=\"_blank\">Home</a></li>\n  <li><a href=\"#\" target=\"_blank\">About</a></li>\n  <li><a href=\"#\" target=\"_blank\">Contact</a></li>\n</ul>"
    },
    {
        "instruction": "Using the code snippet given below, write a JavaScript code to make the background color of the paragraphs \"#f0f0f0\". <p>Paragraph 1</p>\n<p>Paragraph 2</p>",
        "response": "<script>\ndocument.querySelectorAll('p').forEach(el => {\n el.style.backgroundColor = \"#f0f0f0\"; \n});\n</script>\n<p>Paragraph 1</p>\n<p>Paragraph 2</p>"
    },
    {
        "instruction": "Suggest a better design for the following JavaScript code to match the DRY principle. let calorie_per_apple = 100;\nlet calorie_per_banana = 200;\nlet calorie_per_pear = 150;\n\nlet total_calorie = calorie_per_apple + calorie_per_banana + calorie_per_pear;",
        "response": "let fruits = {\n  \"apple\": 100,\n  \"banana\": 200,\n  \"pear\": 150\n}\n\nlet total_calorie = 0;\nObject.values(fruits).forEach(calorie => {\n  total_calorie += calorie;\n})"
    },
    {
        "instruction": "Create a class in Python that keeps the track records of animals in the zoo. ",
        "response": "class Zoo:\n    def __init__(self):\n        self.records = {}\n\n    def add_record(self, animal, count):\n        if animal in self.records:\n            self.records[animal] += count\n        else:\n            self.records[animal] = count\n\n    def get_count(self, animal):\n        if animal in self.records:\n            return self.records[animal]\n        else:\n            return 0"
    },
    {
        "instruction": "Suggest how would you use a Set in the following JavaScript code. let users = {\n  \"John\": true, \n  \"Sandy\": true, \n  \"Stephen\": true\n}",
        "response": "let users = new Set([\"John\", \"Sandy\", \"Stephen\"]);\n\nif (users.has(\"John\")) {\n    console.log(\"John is present!\");\n}"
    },
    {
        "instruction": "Underline the correct option regarding the statement below\nA Python code to print the first 5 Fibonacci numbers is: ",
        "response": "A. print(1, 1, 2, 3, 5) \nB. print(0, 1, 2, 3, 5) \nC. print(1, 1, 3, 5, 8) \nD. print(0, 1, 1, 2, 3)\n\nD. print(0, 1, 1, 2, 3)"
    },
    {
        "instruction": "Create a Boolean expression in Python to check if a number is a multiple of 5. ",
        "response": "# Boolean expression\n# Checks to see if x is a multiple of 5\ndef is_multiple_of_5(x):\n    return x % 5 == 0"
    },
    {
        "instruction": "Manipulate a given list in Python where every element in the list has to be doubled. my_list = [1, 2, 3, 4]",
        "response": "my_list = [2, 4, 6, 8]"
    },
    {
        "instruction": "Generate a Python function to get the index of a given string from a list of strings. list_of_strings = [\"apple\", \"banana\", \"cherry\"]",
        "response": "def find_index(list_of_strings, target_string):\n    for i, string in enumerate(list_of_strings):\n        if string == target_string:\n            return i\n    return -1"
    },
    {
        "instruction": "Create a Python script that converts temperatures from Fahrenheit to Celsius. ",
        "response": "def fahrenheit_to_celsius(temperature):\n    \"\"\"\n    This function converts temperatures in Fahrenheit to Celsius.\n    \"\"\"\n    celsius = (temperature - 32) * 5/9 \n    return celsius\n\nif __name__ == '__main__':\n    temperature = float(input('Enter temperature in Fahrenheit: '))\n    print('Temperature in Celcius is: {:.2f}'.format(fahrenheit_to_celsius(temperature)))"
    },
    {
        "instruction": "Parse an XML document using Python. ",
        "response": "import xml.etree.ElementTree as ET\n\ntree = ET.parse(\"file.xml\")\nroot = tree.getroot()\n\nfor child in root:\n    print(f\"{child.tag}: {child.text}\")"
    },
    {
        "instruction": "Transform the following Ruby code into its JavaScript equivalent. books = [\"Learn Ruby\", \"Learn JavaScript\"]\n\nbooks.each do |book|\n puts book\nend",
        "response": "var books = [\"Learn Ruby\", \"Learn JavaScript\"];\n\nbooks.forEach(function(book) {\n console.log(book);\n});"
    },
    {
        "instruction": "Write a function in Python to generate a random alphanumeric string with a length of 5 characters. ",
        "response": "import random\nimport string\n\ndef generate_random_str():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(5))"
    },
    {
        "instruction": "Write code in Python to retrieve the top 10 Rated Movies in IMDB. ",
        "response": "import requests\nimport json\n\nurl = 'https://imdb-api.com/documentation/top-rated/all}'\nresponse = requests.get(url)\ndata = json.loads(response.text)\nmovies = data['results'][:10]\n\nfor movie in movies:\n    title = movie['title']\n    rating = movie['rating']\n    print(f\"{title}: {rating}\")"
    },
    {
        "instruction": "Edit the code in Python so that the function returns the highest odd number in the list. def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return number",
        "response": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return highest"
    },
    {
        "instruction": "Create a program in Python to generate a random string using the given characters. characters = 'abcdefghijklmnopqrstuvwxyz'",
        "response": "import random\n\ndef generate_random_string(characters):\n    random_string = \"\"\n    for i in range(10):\n        random_string += random.choice(characters)\n    return random_string\n\ncharacters = 'abcdefghijklmnopqrstuvwxyz'\nprint(generate_random_string(characters))"
    },
    {
        "instruction": "Write code in Python to create a dictionary with names as keys and phone numbers as values. names = [\"Alice\", \"Bob\", \"Peter\", \"John\"]\nphone_numbers = [\"1234567\", \"7654321\", \"246810\", \"13579\"]",
        "response": "names = [\"Alice\", \"Bob\", \"Peter\", \"John\"]\nphone_numbers = [\"1234567\", \"7654321\", \"246810\", \"13579\"]\n\nname_and_phone = dict(zip(names, phone_numbers))\nprint(name_and_phone)"
    },
    {
        "instruction": "Reorganize the given Python code such that two functions are created. def greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    # assert name is a string\n    assert isinstance(name, str), \"name must be a string\"\n    print(\"Hello, \" + name + \"!\")",
        "response": "def check_name(name):\n    \"\"\"Check whether the name is a string\"\"\"\n    assert isinstance(name, str), \"name must be a string\"\n\ndef greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    check_name(name)\n    print(\"Hello, \" + name + \"!\")"
    },
    {
        "instruction": "Write a JavaScript code snippet to open a pop-up window with a width of 600px and a height of 400px. ",
        "response": "var popupWindow = window.open(\"\", \"\", \"width=600,height=400\");"
    },
    {
        "instruction": "Write an efficient Python program to reverse a string. testString = \"Hello World\"",
        "response": "def reverseString(testString): \n    reversedString = \"\"\n    for char in testString: \n        reversedString = char + reversedString\n    return reversedString\n\nprint(reverseString(testString))"
    },
    {
        "instruction": "Replace the “TODO” comment in the code with the proper code to print each element of the list on a new line using Python. input_list = [10, 15, 20, 25, 30]",
        "response": "for element in input_list:\n    print(element)"
    },
    {
        "instruction": "Construct an object in Python containing three elements. ",
        "response": "my_object = {\n  'element1': 1,\n  'element2': 2,\n  'element3': 3\n}"
    },
    {
        "instruction": "Convert this JSON string into a dictionary in Python: {\"Name\": \"John\", \"Age\": 35}. {\"Name\": \"John\", \"Age\": 35}",
        "response": "my_dictionary = {\n  'Name': 'John',\n  'Age': 35\n  }"
    },
    {
        "instruction": "Construct an array in JavaScript containing five elements. ",
        "response": "my_array = [1,2,3,4,5]"
    },
    {
        "instruction": "Construct an API call in Python that returns information about a given book. ",
        "response": "import requests\n\nurl = \"http://openlibrary.org/api/books\"\n \nquerystring = {\"bibkeys\":\"ISBN:0201558025\",\"format\":\"json\",\"jscmd\":\"data\"}\n\nheaders = {\n    'cache-control': \"no-cache\",\n    }\n \nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n \nprint(response.text)"
    },
    {
        "instruction": "Construct an object in JavaScript with the following format: {\"Name\": \"John\", \"Age\": 35}. ",
        "response": "my_object = {\n  \"Name\": \"John\",\n  \"Age\": 35\n}"
    },
    {
        "instruction": "Design a password validation system using Python code. ",
        "response": "import re\n\nMIN_LENGTH = 8\nMAX_LENGTH = 15\n\ndef is_valid_password(password):\n    \n    #check password length\n    if len(password) < MIN_LENGTH or len(password) > MAX_LENGTH:\n        return False\n\n    #check for at least one digit\n    if re.search(r\"[0-9]\",password) is None:\n        return False\n    \n    #check for at least one uppercase letter\n    if re.search(r\"[A-Z]\",password) is None:\n        return False\n    \n    #check for at least one lowercase letter\n    if re.search(r\"[a-z]\",password) is None:\n        return False\n    \n    #check for at least one special character  \n    if re.search(r\"[!#$%&'()*+,-./:;<=>?@[\\] ^_`{|}~]\",password) is None:\n        return False\n\n    #if all conditions are met, password is valid\n    return True"
    },
    {
        "instruction": "Write a code in Python to convert a string of text to its equivalent uppercase characters. str_lower_case = \"hello world\"",
        "response": "str_upper_case = str_lower_case.upper()"
    },
    {
        "instruction": "Create a class in Python to represent an employee and define the attributes. ",
        "response": "class Employee:\n    def __init__(self, id, name, salary, job_title):\n        self.id = id\n        self.name = name\n        self.salary = salary\n        self.job_title = job_title"
    },
    {
        "instruction": "Write a JavaScript program to calculate the sum of each individual index value from two given arrays of equal length. let array1 = [1, 0, 2, 3, 4];\nlet array2 = [3, 5, 2, 1, 4];",
        "response": "let sumArray = [];\n\nfor (let i = 0; i < array1.length; i++) {\n    sumArray.push(array1[i] + array2[i]);\n}\n\nconsole.log(sumArray); // Output: [4, 5, 4, 4, 8]"
    },
    {
        "instruction": "Given a list of strings, write a Python program to capitalize the first letter of each word. words = ['The', 'quick', 'brown', 'fox']",
        "response": "capitalized_words = [word.capitalize() for word in words]\nprint(capitalized_words) # Output: ['The', 'Quick', 'Brown', 'Fox']"
    },
    {
        "instruction": "How many types of methods are available in Python? ",
        "response": "There are two types of methods available in Python: instance methods and class methods."
    },
    {
        "instruction": "Describe a use case of the ternary operator in Python. ",
        "response": "The ternary operator can be used to conditionally assign a value. For example, the following code assigns max to the larger value of x and y:\n\nmax = x if x > y else y"
    },
    {
        "instruction": "How to convert a pandas DataFrame to a python list? ",
        "response": "The DataFrame can be converted to a list using the tolist() method. For example:\n\nimport pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\nmy_list = df.tolist()\nprint(my_list)\n\n# Output: [[1, 2], [3, 4], [5, 6]]"
    },
    {
        "instruction": "Create a function in Python that takes in a string as an argument and replaces all occurances of 'e' with an asterisk ('*'). mystring = 'hello world'",
        "response": "def replace_e(mystring):\n    return mystring.replace('e', '*')"
    },
    {
        "instruction": "Design a class in Python that creates objects based on user input. ",
        "response": "class UserInput:\n    def __init__(self):\n        self.data = None\n\n    def get_data(self):\n        self.data = input(\"Enter something: \")\n        return self.data"
    },
    {
        "instruction": "Create a Python program for identifying the common elements between two lists. list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 8]",
        "response": "def commonElements(list1, list2):\n    list1_set = set(list1) \n    list2_set = set(list2) \n    common_elements = list1_set.intersection(list2_set) \n    return common_elements"
    },
    {
        "instruction": "Design a JavaScript function for calculating the hypotenuse of a right triangle. a = 6;\nb = 8;",
        "response": "function getHypotenuse(a,b){\n    return Math.sqrt(a*a + b*b);\n}"
    },
    {
        "instruction": "Create a JavaScript object to store user data. The data includes name, email, and age. ",
        "response": "let user = {\n    name: \"John Doe\",\n    email: \"john@example.com\",\n    age: 32\n};"
    },
    {
        "instruction": "Convert the following HTML string to a DOM tree using JavaScript. <div><span>Hello World</span></div>",
        "response": "let parser = new DOMParser();\nlet div = parser.parseFromString('<div><span>Hello World</span></div>', 'text/html'); \nlet domTree = div.querySelector(\"div\");"
    },
    {
        "instruction": "Generate a JavaScript code snippet to toggle a given CSS class on an element with a given ID. element_id: \"button\", class_name: \"button--highlighted\"",
        "response": "let button = document.getElementById(\"button\");\nbutton.classList.toggle(\"button--highlighted\");"
    },
    {
        "instruction": "Suggest a code segment to render a greeting message in a terminal window using Python. ",
        "response": "print(\"Hello World!\")"
    },
    {
        "instruction": "Suggest an approach to debug a function written in Javascript that is not returning the expected result. ",
        "response": "One approach to debug the function would be to use console.log statements to print out the values of the variables inside the function. This would help identify where the problem is and what needs to be changed in order to get the expected result."
    },
    {
        "instruction": "Suggest a code segment to generate a random integer in the range of 0 to 100 using Python. ",
        "response": "import random\n\nrandom_int = random.randint(0, 100)"
    },
    {
        "instruction": "Where would you place the import statement when using the pandas library in Python? ",
        "response": "The import statement should be placed at the beginning of the program, before any other statements are executed. This ensures that the Pandas library is available when we write code referring to the Pandas library."
    },
    {
        "instruction": "Write a code statement to sort an array in ascending order using JavaScript. array = [3, 1, 5, 2, 4]",
        "response": "array.sort((a, b) => a - b);"
    },
    {
        "instruction": "Write a Python program that can accept an array and returns the column-wise sum of the given array. [[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]",
        "response": "def col_sum(arr):\n    col_sum_arr = []\n    for j in range(len(arr[0])):\n        s = 0\n        for i in range(len(arr)):\n            s += arr[i][j]\n        col_sum_arr.append(s)\n    return col_sum_arr\n\nprint(col_sum([[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]))\n# Output: [12, 15, 18]"
    },
    {
        "instruction": "Construct a binary tree using an array representation in Python. [4, 2, 6, 1, 3, 5, 7]",
        "response": "class TreeNode:\n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n      \ndef constructTree(arr): \n    root = TreeNode(arr[0])\n    root.left = TreeNode(arr[1])\n    root.right = TreeNode(arr[2])\n    root.left.left = TreeNode(arr[3])\n    root.left.right = TreeNode(arr[4])\n    root.right.left = TreeNode(arr[5])\n    root.right.right = TreeNode(arr[6])\n    return root"
    },
    {
        "instruction": "Generate an HTML page with a table containing all the elements of an array in JavaScript. [1, 2, 3, 4]",
        "response": "<html>\n   <head>\n      <title>Array Table</title>\n   </head>\n   <body>\n      <table>\n         <tr>\n         <th>Element Value</th>\n         </tr>\n         <tr>\n            <td>1</td>\n         </tr>\n         <tr>\n            <td>2</td>\n         </tr>\n         <tr>\n            <td>3</td>\n         </tr>\n         <tr>\n            <td>4</td>\n         </tr>\n      </table>\n   </body>\n</html>"
    },
    {
        "instruction": "Use the list comprehension feature of Python to create a list of words with length more than 5 ",
        "response": "words_list = [word for word in words if len(word) > 5]"
    },
    {
        "instruction": "Write a JavaScript code snippet to query a given database table. Table Name: users",
        "response": "const query = \"SELECT * FROM users\""
    },
    {
        "instruction": "Provide output for given input using this Python code message = \"Hello World!\"\nfunction(message)\n\ndef function(x): \n    return x[::-1]",
        "response": "\"!dlroW olleH\""
    },
    {
        "instruction": "Create a JavaScript object which contains student information such as name, email and grades. Name: John \nEmail: john@example.com \nGrades: A, B, C",
        "response": "let student = {\n name: \"John\",\n email: \"john@example.com\",\n grades: [\"A\", \"B\", \"C\"]\n}"
    },
    {
        "instruction": "Design a Python script that takes an array of integers and finds the median. ",
        "response": "def find_median(arr): \n\tarr.sort() \n\tif len(arr) % 2 != 0: \n\t\treturn arr[len(arr)//2] \n\treturn (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2"
    },
    {
        "instruction": "Write a Python function using the Pandas library to filter out the rows with a missing value in the specified column. Dataframe:\n\nName\tAge\nJohn\t25\nJane\t\nMaria\t30\n\nColumn Name: Age",
        "response": "import pandas as pd \n   \n# Input Data \ndf = pd.DataFrame({'Name': ['John','Jane','Maria'], \n                   'Age': [25, None, 30]}) \n  \n# Filter the Data \nfiltered_df = df.loc[df['Age'].notnull()]\n\nprint(filtered_df)"
    },
    {
        "instruction": "Create a Python script to find the maximum value of a list containing both strings and numbers L = [1, 'a', 4, 3, 'b', 6, 'c']",
        "response": "L = [1, 'a', 4, 3, 'b', 6, 'c']\n\ndef Max_in_List(L):\n    max_num = 0\n    for item in L:\n        if type(item) == int and item > max_num:\n            max_num = item\n    return max_num\n\nprint(Max_in_List(L))"
    },
    {
        "instruction": "Generate a Python generator to produce a sequence of the first N numbers 5",
        "response": "def my_generator(N):\n    for i in range(N):\n        yield i\n\ng = my_generator(5)\nprint(list(g)) # [0, 1, 2, 3, 4]"
    },
    {
        "instruction": "Create a python script to filter a list of words, and return only those with even length characters. word_list = [\"Python\", \"C++\", \"Java\", \"JavaScript\", \"Ruby\"]",
        "response": "def even_length_words(word_list):\n    even_words = []\n    for word in word_list:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    return even_words\n    \nif __name__ == '__main__':\n    print(even_length_words(word_list))"
    },
    {
        "instruction": "Write a JavaScript code to fetch the current weather of any city. ",
        "response": "function fetchWeather(city){\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=YOUR_API_KEY`;\n    const response = fetch(url)\n      .then(res => res.json());\n    return response;\n}"
    },
    {
        "instruction": "Develop a code in JavaScript to sort an array of integers into descending order. elements = [9,6,5,1,3]",
        "response": "function descendingOrder(elements) {\n  elements.sort(function(a,b) {\n    return b - a; \n  });\n  return elements;\n}"
    },
    {
        "instruction": "Design an algorithm in Python that takes an array of classmates' age and returns the median age. ages = [10, 9, 12, 14, 11]",
        "response": "def median_age(ages):\n    ages.sort()\n    mid_index = len(ages)//2\n\n    if len(ages)%2 == 0:\n        return (ages[mid_index-1] + ages[mid_index])/2\n    else:\n        return ages[mid_index]"
    },
    {
        "instruction": "Write a code to compare two numbers in python num1= 5\nnum2 = 7",
        "response": "if num1 < num2: \n    print(\"num1 is smaller than num2\") \nelif num1 > num2: \n    print(\"num1 is greater than num2\") \nelse: \n    print(\"num1 is equal to num2\")"
    },
    {
        "instruction": "Implement a function in Python to compute the average of an array containing floating-point numbers. [1.5, 2.3, 3.8, 4.2]",
        "response": "import numpy as np\n\ndef calculate_average(arr):\n    return np.mean(arr)\n    \nprint(calculate_average([1.5, 2.3, 3.8, 4.2]))"
    },
    {
        "instruction": "Update this script in Python to print the number of months since an employee started working. start_date = \"1 March 2020\"",
        "response": "import datetime\n\nstart_date = datetime.datetime.strptime(\"1 March 2020\", \"%d %B %Y\")\n\ncurrent_date = datetime.datetime.now()\n\nnumber_of_months = current_date.month - start_date.month\n\nprint(\"The employee has been working for {} months\".format(number_of_months))"
    },
    {
        "instruction": "Convert this regular expression to JavaScript regex expression. /[A-Z][a-z]+/",
        "response": "/[A-Z][a-z]+/g"
    },
    {
        "instruction": "Print the first, second and third element of this array in JavaScript. [20, 40, 60, 80, 100]",
        "response": "let arr = [20, 40, 60, 80, 100];\nconsole.log(arr[0], arr[1], arr[2]);"
    },
    {
        "instruction": "Write a JavaScript function to safe an array at the local storage. [10, 20, 30]",
        "response": "function saveArrayToLocalStorage(arr) {\n  localStorage.setItem('array', JSON.stringify(arr));\n}"
    },
    {
        "instruction": "Write a code in JavaScript for iterating over an array and print each element. arr = [1, 2, 3, 4]",
        "response": "arr.forEach(function(el) {\n    console.log(el);\n});"
    },
    {
        "instruction": "Evaluate the following JavaScript expression: 15 * (3 + 7) ",
        "response": "The result of 15 * (3 + 7) is 150."
    },
    {
        "instruction": "Given a vector x containing N elements, write a Python function to compute and return the sum. x = [2, 3, 5, 7, 11]",
        "response": "def sum_vector(x):\n    \"\"\"Returns the sum of all elements in a vector x.\"\"\"\n    total = 0\n    for num in x:\n        total += num\n    return total\n\nsum_vector(x) # returns 28"
    },
    {
        "instruction": "Write a JavaScript function to filter all numbers in an array and return a new array containing only the even numbers. arr = [1, 2, 3, 4, 5, 6]",
        "response": "function evenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);\n}\n\nevenNumbers(arr) # returns [2, 4, 6]"
    },
    {
        "instruction": "Write a Python 3 script to print out all the words in the string 'I love coding'. ",
        "response": "words = \"I love coding\"\nfor word in words.split():\n    print(word)"
    },
    {
        "instruction": "Create a python class to represent a 3x3 matrix ",
        "response": "class Matrix:\n    def __init__(self, array):\n        self.array = array\n        self.rows = len(array)\n        self.cols = len(array[0])\n\n    def get_matrix(self):\n        return self.array\n\n    def set_matrix(self, array):\n        self.rows = len(array)\n        self.cols = len(array[0])\n        self.array = array\n\nif __name__ == '__main__':\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    m = Matrix(matrix)"
    },
    {
        "instruction": "Translate the following sentence to Python code. Input the hours, rate and the tax rate.",
        "response": "hours = float(input(\"Input the hours: \"))\nrate = float(input(\"Input the rate: \"))\ntax_rate = float(input(\"Input the tax rate: \"))"
    },
    {
        "instruction": "Write an algorithm in Python that takes an array as input and prints all the duplicate values in it. arr = [1, 4, 7, 2, 6, 1, 7, 2]",
        "response": "def find_duplicates(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\narr = [1, 4, 7, 2, 6, 1, 7, 2] \n  \nresult = find_duplicates(arr) \n  \nprint(result)"
    },
    {
        "instruction": "How would you use the ternary operator for comparing two values in JavaScript? ",
        "response": "The ternary operator can be used to compare two values in the following way: (condition) ? (value if condition is true) : (value if condition is false);"
    },
    {
        "instruction": "Write a function in Python that takes a number as input and prints out if the number is odd or even. Number = 23",
        "response": "def OddEven(num):\n    if num%2 == 0 :\n        print(\"{} is Even\".format(num))\n    else :\n        print(\"{} is Odd\".format(num))\n\nOddEven(23)"
    },
    {
        "instruction": "Create an HTML page demonstrating the application of \"for\" loop in JavaScript ",
        "response": "<html>\n<head>\n<script>\nfor(let i=0; i<5; i++){\n   console.log('loop ' + i);\n}\n</script>\n</head>\n<body>\n</body>\n</html>"
    },
    {
        "instruction": "Write a JavaScript function for summing up the number of hours and minutes. Hours: 2\nMinutes: 45",
        "response": "function sumTime(hrs, mins) {\n    return (hrs * 60 + mins);\n}\n\nconsole.log(sumTime(2, 45));\n\n# Output\n165"
    },
    {
        "instruction": "Create a list of 3 objects in Python. ",
        "response": "list = [1, \"hello\", {'name': 'John'}]"
    },
    {
        "instruction": "Create a JavaScript function to calculate the circle area given the radius. ",
        "response": "function circleArea(radius) {\n    return Math.PI * radius * radius;\n}"
    },
    {
        "instruction": "Write a Python program to remove the elements that occur only once from a given array. [1, 2, 2, 3, 3, 3, 4, 4]",
        "response": "def remove_once(arr): \n    freq_table  = {} \n    for num in arr: \n        if num in freq_table.keys(): \n            freq_table[num] += 1\n        else: \n            freq_table[num] = 1\n\n    filtered_array = [] \n    for num, freq in freq_table.items(): \n        if freq > 1: \n            filtered_array.append(num) \n    return filtered_array\n\nremove_once([1, 2, 2, 3, 3, 3, 4, 4])\n\n#Output: [2, 3, 4]"
    },
    {
        "instruction": "Given a JSON string, try to parse it into a Python dictionary. myJSON = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'",
        "response": "import json\n\nmyDict = json.loads(myJSON)\nprint(myDict)"
    },
    {
        "instruction": "Given the following input, suggest a python code for computing the Fibonacci number for n. ",
        "response": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return a \n    elif n==1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n    return b"
    },
    {
        "instruction": "Generate a python code to remove all the occurrences of the element x from a list y. ",
        "response": "def remove_x(x, y):  \n    while x in y: \n        y.remove(x) \n    return y"
    },
    {
        "instruction": "Suggest a python code that returns the average of all the elements in a list. ",
        "response": "def avg_list(lst): \n    return sum(lst) / len(lst)"
    },
    {
        "instruction": "Write a python code to generate permutations of an input string. \"abc\"",
        "response": "def permutations(string): \n    if len(string) == 0: \n        return [] \n  \n    if len(string) == 1: \n        return [string] \n  \n    l = [] \n    for i in range(len(string)): \n       m = string[i] \n       rem_string = string[:i] + string[i+1:] \n       for p in permutations(rem_string): \n           l.append(m + p) \n    return l"
    },
    {
        "instruction": "Create a JavaScript data structure to store a list of 3 books, where each book has a name and a page count. Book1: \"Computer Programming Essentials\", 230 pages\nBook2: \"Data Structures and Algorithms\", 180 pages\nBook3: \"Artificial Intelligence Fundamentals\", 282 pages",
        "response": "let books = [\n  { name: 'Computer Programming Essentials', pages: 230 },\n  { name: 'Data Structures and Algorithms', pages: 180 },\n  { name: 'Artificial Intelligence Fundamentals', pages: 282 }\n];"
    },
    {
        "instruction": "Write a Python snippet that prints out each item in a given list. list = [\"Apple\", \"Banana\", \"Cherry\"]",
        "response": "for item in list:\n  print(item)"
    },
    {
        "instruction": "Use JavaScript to encrypt a given string using MD5 algorithm. string = \"This is a test.\"",
        "response": "let encryptedString = CryptoJS.MD5(string).toString();"
    },
    {
        "instruction": "List the methods used by the os module in python. ",
        "response": "The methods used by the os module are: getcwd(), listdir(), mkdir(), rename(), chdir(), rmdir(), stat(), chmod(), remove(), chown(), and many more."
    },
    {
        "instruction": "Write a one-sentence JavaScript statement to make an AJAX call to a website. ",
        "response": "$.ajax({url: \"example.com\", method: \"GET\"});"
    },
    {
        "instruction": "Rewrite the following Python code to include proper exception handling. f = open(\"myfile.txt\")\ntext = f.read()",
        "response": "try:\n    f = open(\"myfile.txt\")\n    text = f.read()\nexcept IOError:\n    print(\"Error: Could not open file\")\nfinally:\n    f.close()"
    },
    {
        "instruction": "Create a JavaScript function which takes a number as an argument and calculates the factorial of that number. ",
        "response": "function factorial(n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Write a web page using HTML, CSS, and JavaScript that displays the following text: \"Welcome to my website!\". ",
        "response": "<!doctype html>\n<html>\n  <head>\n    <title>My website</title>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Welcome to my website!</h1>\n    </div>\n    <script>\n      console.log('Welcome to my website!');\n    </script>\n  </body>\n</html>"
    },
    {
        "instruction": "Write a Python script that can convert a string to pig latin ",
        "response": "def pig_latin(text):\n    words = text.split()\n    Latin_words = []\n    # loop through every word \n    for word in words:\n        # seperate consonants from vowels\n        firstletter = word[0]\n        if firstletter.lower() in 'aeiou':\n            Latin_word = word+'ay'\n        else:\n            Latin_word = word[1:]+firstletter+'ay'\n        Latin_words.append(Latin_word)\n    return \" \".join(Latin_words)"
    },
    {
        "instruction": "Complete the following Python code so it prints even numbers from 0 to 10. for num in range(0, 10):\n    if",
        "response": "for num in range(0, 10):\n    if num % 2 == 0:\n        print(num)"
    },
    {
        "instruction": "How would you remove duplicates from a Python list? ",
        "response": "The most straight-forward approach is to add the elements to a set while iterating over the original list and then build a new list out of the set.\n\nExample: \n\noriginal_list = [1,2,2,3,3,4] \n\nnew_list = list(set(original_list)) \n\nprint(new_list) \n# Output [1, 2, 3, 4]"
    },
    {
        "instruction": "Write a function that takes two lists as an argument and returns the elements that are common to both the lists in Python. list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]",
        "response": "def common_elements(list1, list2):\n    common_list = [element for element in list1 if element in list2]\n    return common_list"
    },
    {
        "instruction": "Write a JavaScript code snippet to round a number 3.7 to nearest integer. ",
        "response": "Math.round(3.7);"
    },
    {
        "instruction": "Construct a Javascript program to return the largest element of an array. ",
        "response": "function largestElement(arr){\n    var max = arr[0];\n    for(var i=1;i<arr.length;i++){\n        if(arr[i]>max){\n            max=arr[i];\n        }\n    }\n    return max;\n}"
    },
    {
        "instruction": "Create a Python program to merge two lists by alternating elements. list1 = [2, 3, 5, 7]; \nlist2 = [4, 8, 10];",
        "response": "def merge(list1, list2):\n    mergedList = []\n    for x,y in zip_longest(list1,list2): \n        mergedList.extend([x,y]) \n    return mergedList"
    },
    {
        "instruction": "Design a function in Javascript to filter out the values of an array that are greater than 10. [2, 10, 11, 19, 3, 4]",
        "response": "const filteredArray = arr => arr.filter(num => num <= 10);\nconsole.log(filteredArray([2, 10, 11, 19, 3, 4])); // Output: [2, 10, 3, 4]"
    },
    {
        "instruction": "Write an efficient Python program to remove duplicate characters from the given string. String: Hello world",
        "response": "He lwrd"
    },
    {
        "instruction": "Write a JavaScript program to validate the given input against a set of rules. Rules: Length should be equal to 7\nInput = 'example'",
        "response": "let input = 'example';\nif (input.length === 7) {\n console.log('Input is valid');\n} else {\n console.log('Input is not valid');\n}"
    },
    {
        "instruction": "Create a JavaScript function to merge two variables into a single object. var a = {name: 'John', age: 21};\nvar b = {surname: 'Doe', gender: 'male'};",
        "response": "function merge(a, b) { \n  return Object.assign({}, a, b); \n}\nlet result = merge(a, b); \nconsole.log(result); // {name: 'John', age: 21, surname: 'Doe', gender: 'male'}"
    },
    {
        "instruction": "Write a Python program to fetch and print the top five headlines from a given news website. News Website: CNN",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'http://www.cnn.com/'\nresponse = requests.get(url)\nhtml_content = response.text\n \nsoup = BeautifulSoup(html_content, \"lxml\")\ntop_headlines = soup.find_all('h3',{'class':'cd__headline'})\n \nfor headline in top_headlines[:5]:\n print(headline.text)"
    },
    {
        "instruction": "Construct a JavaScript object with three properties: name, age, and profession. ",
        "response": "const person = {\n  name: 'John Doe',\n  age: 36,\n  profession: 'developer'\n};"
    },
    {
        "instruction": "Create a tree structure using the provided Python dictionary. dict = {\n  1: {\n    'parent': 0,\n    'children': [2, 3, 4]\n  },\n  2: {\n    'parent': 1,\n    'children': []\n  },\n  3: {\n    'parent': 1,\n    'children': [5, 6]\n  },\n  4: {\n    'parent': 1,\n    'children': [7]\n  },\n  5: {\n    'parent': 3,\n    'children': []\n  },\n  6: {\n    'parent': 3,\n    'children': []\n  }\n  7: {\n    'parent': 4,\n    'children': []\n  }\n}",
        "response": "\"\"\"\nCreate a tree structure using the Python dictionary provided\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, value=None, parent=None, children=None):\n        self.value = value\n        self.parent = parent\n        self.children = children if children is not None else []\n    \n    def __repr__(self):\n        return f\"TreeNode({self.value}, {self.parent.value}, {[c.value for c in self.children]})\"\n    \n    def __str__(self):\n        return self.__repr__()\n\ndef create_tree_structure(data):\n    tree = dict()\n    for k, v in data.items():\n        parent = v[\"parent\"]\n        tree[k] = TreeNode(value=k, parent=tree.get(parent), children=list())\n        if parent in tree:\n            tree[parent].children.append(tree[k])\n    return tree\n\nif __name__ == \"__main__\":\n    dict = {\n        1: {\n            'parent': 0,\n            'children': [2, 3, 4]\n        },\n        2: {\n            'parent': 1,\n            'children': []\n        },\n        3: {\n            'parent': 1,\n            'children': [5, 6]\n        },\n        4: {\n            'parent': 1,\n            'children': [7]\n        },\n        5: {\n            'parent': 3,\n            'children': []\n        },\n        6: {\n            'parent': 3,\n            'children': []\n        },\n        7: {\n            'parent': 4,\n            'children': []\n        }\n    }\n    tree = create_tree_structure(dict)\n    print(tree)"
    },
    {
        "instruction": "Write a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast. forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]",
        "response": "\"\"\"\nWrite a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast\n\"\"\"\n\nimport datetime\n\ndef get_max_temperature_today(forecast):\n    today = datetime.datetime.today().weekday()\n    \n    max_temp = None\n    for day in forecast:\n        if day['day'] == today:\n            max_temp = max(max_temp, day['temperature'])\n    \n    return max_temp\n  \nif __name__ == \"__main__\":\n    forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]\n\nprint(get_max_temperature_today(forecast))"
    },
    {
        "instruction": "Write a Python program to group the values of a given list of elements based on the size of the elements. ",
        "response": "\"\"\"\nWrite a Python program to group the values of a given list of elements based on the size of the elements.\n\"\"\"\n\ndef group_values(values):\n    result = {}\n    for value in values:\n        size = len(value)\n        if size not in result:\n            result[size] = []\n        result[size].append(value)\n    return result\n\nif __name__ == \"__main__\":\n    values = ['cat', 'dog', 'monkey', 'elephant', 'giraffe']\n    print(group_values(values))"
    },
    {
        "instruction": "Edit the provided JavaScript code such that it outputs the first and last element in an array. array = ['a', 'b', 'c', 'd', 'e']",
        "response": "\"\"\"\nEdit the provided JavaScript code such that it outputs the first and last element in an array.\n\"\"\"\n\nlet array = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconsole.log(`First element: ${array[0]}, Last element: ${array[array.length - 1]}`);"
    },
    {
        "instruction": "Add the following Python function to generate a Fibonacci sequence. def fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"",
        "response": "def fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"\n    result = []\n\n    first, second = 0, 1\n    while first < n:\n        result.append(first)\n        first, second = second, first + second\n    \n    return result"
    },
    {
        "instruction": "Rewrite the following Python code so that it uses a for loop instead of a while loop. i = 0\nwhile i < 11:\n    print(i)\n    i += 1",
        "response": "for i in range(11):\n    print(i)"
    },
    {
        "instruction": "Create an object in Python which will store the following information Name: John Doe\nAge: 34\nGender: Male",
        "response": "person = {\n  'name': 'John Doe',\n  'age': 34,\n  'gender': 'Male'\n}"
    },
    {
        "instruction": "Draft a Python code to sort an array containing 3 integers in ascending order. Array=[5,2,8]",
        "response": "Array.sort()\nprint(Array) # prints [2,5,8]"
    },
    {
        "instruction": "How can you execute the following Python code to get the output printed? def greeting():\n    print(\"Hello World!\")",
        "response": "The code can be executed by calling the function greeting:\n\ngreeting() #prints \"Hello World!\""
    },
    {
        "instruction": "Provide an example of a JSON structure which has the same data as the following Python dictionary. user_info = {\n    'name': 'John',\n    'age': 42,\n    'address': {\n        'street': '123 Main Street',\n        'city': 'San Francisco',\n        'state': 'CA'\n    }\n}",
        "response": "{\n    \"name\": \"John\",\n    \"age\": 42,\n    \"address\": {\n        \"street\": \"123 Main Street\",\n        \"city\": \"San Francisco\",\n        \"state\": \"CA\"\n    }\n}"
    },
    {
        "instruction": "Create a Python function to swap key-value pairs in a dictionary. ",
        "response": "def swap_dict_keys(d):\n    return {v: k for k, v in d.items()}"
    },
    {
        "instruction": "Construct a JavaScript function to reverse the characters of a string. ",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "Write a function in Python that should take two lists and return the intersection. list_a = [1, 2, 3, 4, 5]\nlist_b = [2, 5, 7, 10]",
        "response": "def intersection(list_a, list_b):\n    return [element for element in list_a if element in list_b]"
    },
    {
        "instruction": "Suggest an algorithm in Python for sorting an array of integers from smallest to largest. nums = [3, 7, 5, 6, 1]",
        "response": "def sortInts(nums): \n    # Traverse through all array elements \n    for i in range(len(nums)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(nums)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if nums[j] > nums[j+1] : \n                nums[j], nums[j+1] = nums[j+1], nums[j] \n                \n    return nums"
    },
    {
        "instruction": "Build a classifier in Python using the Scikit-learn library. ",
        "response": "# Load the libraries\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\n\n# Split the data\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)\n\n# Train the model\nsvm_model = SVC(gamma='auto')\nsvm_model.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_predictions = svm_model.predict(X_test)\n\n# Evaluate Model Performance\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_predictions))"
    },
    {
        "instruction": "Using data from the Wikipedia API, write a Python program to list the population of India. ",
        "response": "import json\nimport requests\n\nurl = 'https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&titles=India'\nresponse = requests.get(url)\ndata = json.loads(response.text)\npopulation = data['query']['pages']['571045']['revisions'][0]['*'].split('\\n')[3].split('=')[1].strip().split('|')[0]\nprint('The population of India is', population)"
    },
    {
        "instruction": "Write a code to replace a substring inside a string with another substring. string = \"I am coding in python\"\nsubstring1 = \"coding\"\nsubstring2 = \"hacking\"",
        "response": "def replaceSubstring(string, substring1, substring2): \n    string = string.replace(substring1, substring2) \n    return string  \n  \n# Driver code\nstring = \"I am coding in python\"\nsubstring1 = \"coding\"\nsubstring2 = \"hacking\"\nprint(\"String after replacement is:\", replaceSubstring(string, substring1, substring2))"
    },
    {
        "instruction": "Generate a function in Python to print all prime numbers in a given range. ",
        "response": "def print_prime_numbers(start, end): \n      \n    for i in range(start, end + 1): \n        if is_prime_number(i): \n            print(i, end = \" \")\n  \ndef is_prime_number(num): \n      \n    if num > 1: \n          \n        # Iterate from 2 to n / 2  \n        for i in range(2, num//2):  \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False"
    },
    {
        "instruction": "Write a JavaScript program that logs a message to the console. \"Hello!\"",
        "response": "console.log(\"Hello!\");"
    },
    {
        "instruction": "Write a JavaScript function that returns 'true' if a given string is a palindrome, and 'false' otherwise. ",
        "response": "function isPalindrome(word){\n  return word == word.split(\"\").reverse().join(\"\");\n}"
    },
    {
        "instruction": "Write code to identify the first vowel in a string in JavaScript. ",
        "response": "function findFirstVowel(str) { \n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(var i = 0; i < str.length; i++) {\n        if(vowels.indexOf(str[i].toLowerCase()) !== -1)\n            return i;\n    } \n    return -1; \n}"
    },
    {
        "instruction": "Show an example of using the Python module, os. ",
        "response": "import os\n\ndirectory = os.getcwd() \nprint(\"The current working directory is\", directory)\n\nfiles = os.listdir(directory) \nprint(\"The files in the current directory are\", files)\n\nfor file in files:\n    if file.endswith(\".py\"):\n        print(\"The Python script\", file, \"is in the current directory\")"
    },
    {
        "instruction": "Suggest a completion for the following Python code to find the depth of a given binary tree. class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\ndef maxDepth(node):",
        "response": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\ndef maxDepth(node):\n    if node is None:\n        return 0\n    else:\n        leftDepth = maxDepth(node.left)\n        rightDepth = maxDepth(node.right)\n\n        if leftDepth > rightDepth: \n            return leftDepth+1\n        else: \n            return rightDepth+1"
    },
    {
        "instruction": "Make the following Python function for generating powerset. ",
        "response": "def powerset(s):\n    result = [[]]\n    for x in s:\n        result.extend([y + [x] for y in result])\n    return result"
    },
    {
        "instruction": "Write a Python algorithm to search a list of numbers for the index of the given element. nums = [5,7,11,23,44,30]\nx = 11",
        "response": "def search(nums, x):\n    for i, n in enumerate(nums):\n        if n == x:\n            return i\n    return -1"
    },
    {
        "instruction": "Generate a random alphanumeric string of length 20 using JavaScript. ",
        "response": "const randomString = () => {\nlet randomText = '';\nconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nfor (let i = 0; i < 20; i++) {\n  randomText += possible.charAt(Math.floor(Math.random() * possible.length));\n}\nreturn randomText;\n}\n\nconsole.log(randomString());\n\nOutput:\nCIOzNAvOdJhFb3qBaGqD"
    },
    {
        "instruction": "Create a function in JavaScript that takes in a string and performs a bubble sort on it and returns the sorted string. string = \"hello world\"",
        "response": "function bubbleSort(str) {\n    let arr = str.split('');\n    let sorted = false;\n    \n    while (!sorted) {\n        sorted = true;\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > arr[i + 1]) {\n                let temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n                sorted = false;\n            }\n        }\n    }\n    \n    return arr.join('');\n}"
    },
    {
        "instruction": "Write a Python program that adds two numbers and multiplies them. 4, 6",
        "response": "num1 = 4\nnum2 = 6\n\nresult = (num1 + num2) * num2\n\nprint(result)"
    },
    {
        "instruction": "Write a JavaScript program that takes an array as input and prints its contents. ['Hello','World','!']",
        "response": "let inputArray = ['Hello', 'World', '!'];\n\nfor (let i = 0; i < inputArray.length; i++) {\n    console.log(inputArray[i])\n}"
    },
    {
        "instruction": "Write an expression in Python to remove all punctuation from a given string. string = \"This, is a test string!\"",
        "response": "import re\n\nstring = re.sub(r'[^\\w\\s]','',string)\n\nprint(string) # Output: This is a test string"
    },
    {
        "instruction": "Write a JavaScript function to get monday's date of a given week. week = 34",
        "response": "const getMonday = week => {\n  let now = new Date();\n  let day = now.getDay();\n  let diff = now.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n  let monday = new Date(now.setDate(diff + (week - 1) * 7));\n\t\n  return monday.toISOString();\n}\n  \nlet result = getMonday(week);\n\nconsole.log(result); // Output: 2019-08-19T00:00:00.000Z"
    },
    {
        "instruction": "Create an array containing the alphabet in lowercase in Python. ",
        "response": "Using the string.ascii_lowercase constant, an array containing the alphabet in lowercase can be created.\n\nExample:\n\nimport string \nalphabet_array = list(string.ascii_lowercase) \nprint(\"Array containing the alphabet in lowercase:\", alphabet_array) \n\n# Output: Array containing the alphabet in lowercase: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
    },
    {
        "instruction": "Convert the given string to a number in JavaScript. String: \"42\"",
        "response": "Using the parseInt() built-in method, the given string can be converted to a number in JavaScript.\n\nExample:\n\nlet str = \"42\"; \nlet num = parseInt(str); \nconsole.log(\"Number:\", num);\n\n// Output: Number: 42"
    },
    {
        "instruction": "Given a list of strings and a single character, write a Python function to return the count of strings containing that character. strings = [\"Hello\", \"World\", \"Cat\", \"Dog\", \"Elephant\"] \ncharacter = \"e\"",
        "response": "def count_character_in_strings(strings, character): \n  count = 0\n  for string in strings:\n    if character in string.lower():\n      count += 1\n  return count"
    },
    {
        "instruction": "Write a Python function to shuffle (randomly reorder) a list of numbers nums = [1, 2, 3, 4, 5]",
        "response": "def shuffle_nums(nums):\n    from random import shuffle\n    shuffle(nums) \n    return nums"
    },
    {
        "instruction": "Write a Python program to calculate the hypotenuse of a right triangle with base and Height of 8 and 6 respectively. ",
        "response": "base = 8\nheight = 6\nhypotenuse = (base**2 + height**2)**0.5\nprint(hypotenuse) // Output: 10.0"
    },
    {
        "instruction": "Create a JavaScript function to convert a date string of the form \"DD/MM/YYYY\" to a different string format, \"Weekday, Month dd yyyy\". \"14/08/2020\"",
        "response": "function formatDate(inputDate){ \n  let date = new Date(inputDate); \n  let weekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\",\"Thur\", \"Fri\",\"Sat\"];  \n  let day = weekday[date.getDay()];\n  let month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\",\"Oct\", \"Nov\", \"Dec\"]; \n  let monthName = month[date.getMonth()]; \n  let year = date.getFullYear();\n  let dayNumber = date.getDate(); \n \n  let result = day + ', ' + monthName + ' ' + dayNumber + ' ' + year;\n  return result;\n}\nconsole.log(formatDate(\"14/08/2020\")); // Output: Wed, Aug 14 2020"
    },
    {
        "instruction": "Using JavaScript, create a function to output all the divisors of a given number, without the number itself. 12",
        "response": "function divisors(num){\n  let result = [];\n  for (let i = 1; i <= num; i++){ // 1, 2, 3... num\n    if (num % i === 0){\n      if (i != num){\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(divisors(12)); //Output: [1, 2, 3, 4, 6]"
    },
    {
        "instruction": "Write a code in Python to output all the combinations of two given lists. list1 = [1, 2, 3]\nlist2 = [4, 5, 6]",
        "response": "combinations = []\nfor i in list1:\n    for j in list2:\n        combinations.append([i, j])\n\nprint(combinations)\n\n# Output: [[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]"
    },
    {
        "instruction": "Construct a Python class to model a circle. ",
        "response": "class Circle: \n    def __init__(self, radius, color): \n        self.radius = radius \n        self.color = color \n  \n    def getArea(self): \n        return 3.14 * self.radius * self.radius \n  \n    def getCircumference(self): \n        return 2 * 3.14 * self.radius"
    },
    {
        "instruction": "Generate a function in Python that takes a number and a list as input and finds the number of occurrences of the number in the list. ",
        "response": "def count_occurrence(number, input_list):\n    return input_list.count(number)"
    },
    {
        "instruction": "Create a script in Python to convert fahrenheit temperatures to celsius. ",
        "response": "def fahren_to_celsius(fahren):\n    celsius = (fahren - 32) * (5 / 9)\n    return celsius\n\nprint(fahren_to_celsius(50)) \n\n# Output: 10.0"
    },
    {
        "instruction": "Edit this Python program so that it logs a message whenever an error occurs. def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)",
        "response": "def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)\n        logging.error('An error occurred during division.')"
    },
    {
        "instruction": "Rewrite this function in Python to take advantage of list comprehensions. def double_list(original_list):\n    doubled_list = []\n    for item in original_list:\n        doubled_list.append(item * 2)\n    return doubled_list",
        "response": "def double_list(original_list):\n    return [item * 2 for item in original_list]"
    },
    {
        "instruction": "Explain what a Python dictionary is. ",
        "response": "\"\"\"\nExplain what a Python dictionary is.\n\"\"\"\n\nA Python dictionary is a collection of key-value pairs. Each key is associated with a single value, and each key is unique. Dictionaries are mutable, meaning that their values can be changed after they are created. Dictionaries are commonly used for storing data in a structured form, as well as for rapidly looking up values associated with a given key. They are also commonly used for storing metadata and other related information."
    },
    {
        "instruction": "Create a program in Python to print the first 5 multiples of a number Number: 7",
        "response": "for i in range(1, 6):\n    print(i * 7)"
    },
    {
        "instruction": "Construct a loop in Python that iterates through each row of a dataframe Dataframe: df",
        "response": "for index, row in df.iterrows(): \n    # do something with each row"
    },
    {
        "instruction": "Write a Python program to output an array with dimensions [N, M] filled with random numbers between 0 and 1 N = 5\nM = 4",
        "response": "import numpy as np\nnp.random.seed(0)\nnums=np.random.rand(N,M)\nprint(nums)"
    },
    {
        "instruction": "Write a Python program to print the Odd numbers from 1 to 50. ",
        "response": "for i in range(1, 51):\n    if i%2 == 1:\n        print(i)"
    },
    {
        "instruction": "Write a Python function to edit a given list by replacing an existing element with a new value. mylist = [\"Apple\", \"Banana\", \"Cherry\"]\nold_value = \"Banana\"\nnew_value = \"Strawberry\"",
        "response": "def replace_value(mylist, old_value, new_value):\n    if old_value in mylist:\n        mylist[mylist.index(old_value)] = new_value\n    return mylist"
    },
    {
        "instruction": "Write a Python function to calculate the hypotenuse of a right angled triangle given the length of the two sides. side1 = 7\nside2 = 5",
        "response": "import math\ndef calculate_hypotenuse(side1, side2):\n    hypotenuse = math.sqrt(side1**2 + side2**2)\n    return hypotenuse"
    },
    {
        "instruction": "Write a Python program to calculate the sum of all integers up to the given number. ",
        "response": "def sum_of_integers(num):\n    total = 0\n    for i in range(1, num + 1):\n        total += i\n    return total"
    },
    {
        "instruction": "Write a Python code to print the multiplication table upto 10. ",
        "response": "for i in range(1, 11): \n    for j in range(1, 11): \n     print(i*j, end=\"  \") \n    print()"
    },
    {
        "instruction": "Create a basic class in JavaScript that includes a constructor, a method for changing the greeting, and a method for saying the greeting. ",
        "response": "\"\"\"\nBasic class in JavaScript with a constructor, a method for changing the greeting and a method for saying the greeting\n\"\"\"\n\nclass GreetingGenerator {\n  constructor(greeting) {\n    this.greeting = greeting\n  }\n\n  setGreeting(greeting) {\n    this.greeting = greeting\n  }\n\n  sayGreeting() {\n    console.log(this.greeting)\n  }\n}\n\nconst greet = new GreetingGenerator('Hello World!')\ngreet.setGreeting('Good Morning!')\ngreet.sayGreeting() // 'Good Morning!'"
    },
    {
        "instruction": "Which of the following is a valid operator in Python? ",
        "response": "The following are valid Python operators: '+', '-', '*', '/', '%', '//', '**', '&', '|', '^', '<<', '>>'."
    },
    {
        "instruction": "Implement a function in Python to convert a given sentence into title case. This is a sentence.",
        "response": "def to_title_case(sentence):\n    words = sentence.split()\n    titlecase_words = []\n    for word in words:\n        titlecase_words.append(word.title())\n    return ' '.join(titlecase_words)"
    },
    {
        "instruction": "Design a JavaScript function to convert the given number in scientific notation. 1000.003",
        "response": "function toScientificNotation(number) {\n    return number.toExponential();\n}"
    },
    {
        "instruction": "Develop an algorithm in JavaScript to calculate the frequency of each character in a given string. Hello",
        "response": "function frequency(str) {\n    let count = {};\n    str.split(\"\").forEach(function(s) {\n        count[s] ? count[s]++ : count[s] = 1;\n    });\n    return count;\n}"
    },
    {
        "instruction": "Design a Python program to identify odd numbers in a given range. 10-20",
        "response": "# set a range for the numbers\nmin = 10\nmax = 20\n\n# iterate and print odd numbers\nfor num in range(min,max+1): \n    if num % 2 != 0: \n        print(num, end=\" \")"
    },
    {
        "instruction": "Construct a for loop in Python for summing up the elements of a given list. List of integers: [1, 2, 3, 4, 5]",
        "response": "total = 0\nfor i in [1, 2, 3, 4, 5]:\n total += i\nprint(total)\n\n# the output will be 15"
    },
    {
        "instruction": "Create a Python program to check if all items in a list are unique. list_items = [1,2,3,2,3]",
        "response": "def is_unique(list_items):\n  s = set(list_items)\n  if len(list_items) == len(s):\n    return True\n  else:\n    return False\n\nprint(is_unique(list_items))\n\n# The output will be False"
    },
    {
        "instruction": "How to extract numbers from a given string in Python? ",
        "response": "Using the regular expression library re in Python, you can extract numbers from a given string. For example,\n\nimport re\n\nstring = \"My age is 22 and my lucky number is 7\"\n\nmatches = re.findall(r'\\d+', string)\n# matches will be [22, 7]"
    },
    {
        "instruction": "Write a JavaScript code to create a web page with a navigation bar. ",
        "response": "const navBar = document.createElement('nav');\n\nnavBar.innerHTML = `\n<ul>\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>\n`;\n\ndocument.body.appendChild(navBar);"
    },
    {
        "instruction": "Create a JavaScript function to check if an integer n is a perfect square. ",
        "response": "function isPerfectSquare(n) {\n for (int i = 0; i <= n; i++) {\n  if (i * i == n) {\n   return true;\n  }\n }\n return false;\n}"
    },
    {
        "instruction": "Write a Python program to convert Fahrenheit to Celsius for a temperature of 56.4F. ",
        "response": "F = 56.4\nC = (F - 32) * 5/9\nprint(\"Fahrenheit to Celsius:\", C)"
    },
    {
        "instruction": "Write a Python script to find the area of a triangle with sides 18, 24, and 30. ",
        "response": "def triangle_area(a, b, c):\n    '''This function computes the area of a triangle given its side lengths.'''\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\nprint(\"The area of the triangle is:\", triangle_area(18, 24, 30))"
    },
    {
        "instruction": "Create a class in python with 4 functions. ",
        "response": "class MyClass:\n  def __init__(self):\n    pass\n\n  def function1(self):\n    pass\n\n  def function2(self):\n    pass\n  \n  def function3(self):\n    pass\n  \n  def function4(self):\n    pass"
    },
    {
        "instruction": "Using the 'arrays' library in Python, generate a random array of 10 numbers. ",
        "response": "import numpy as np\n\nrandom_array = np.random.random_integers(1,10,10)\nprint(random_array)"
    },
    {
        "instruction": "Create a Python function that takes two arguments: a list and an integer. The function should add the given integer to each element of the list and return the new list. list = [2, 3, 5]\ninteger = 4",
        "response": "def addToList(list, int):\n    new_list = []\n    for l in list:\n        new_list.append(l + int)\n    return new_list\n\nresult = addToList(list, integer)\nprint(result) # [6, 7, 9]"
    },
    {
        "instruction": "Create a function 'sum' in JavaScript with two parameters which adds the two numbers passed in. ",
        "response": "function sum(a, b) {\n  return a + b;\n}\n\nlet result = sum(5, 6); \nconsole.log(result); // 11"
    },
    {
        "instruction": "Create a Python function 'findPattern' with two parameters which takes two strings and returns 1 if the second string is a subsequence of the first string, otherwise 0. ",
        "response": "def findPattern(str1, str2): \n \n    ind = 0\n    for ch in str2: \n        if ch not in str1[ind:]: \n            return 0\n  \n        ind = str1.index(ch, ind) + 1\n \n    return 1\n  \n# Driver code \nif findPattern(\"timetopractice\", \"top\"): \n    print(\"Subsequence Found\") \nelse: \n    print(\"Subsequence Not Found\")"
    },
    {
        "instruction": "What is the data type of a variable that can only contain boolean values in Python? ",
        "response": "The data type of a variable that can only contain boolean values in Python is a bool."
    },
    {
        "instruction": "What is the difference between len() and index() methods in Python? ",
        "response": "The len() method returns the length of a string, while the index() method returns the index of a substring or character in the string. The len() method returns the number of characters or elements in the string, while the index() method returns the starting index of the substring in the string."
    },
    {
        "instruction": "Replace all occurence of the string 'Python' in a text with 'Java'. This text is about Python programming.",
        "response": "This text is about Java programming."
    },
    {
        "instruction": "How do you generate a random number between 0 and 10 in JavaScript? ",
        "response": "The easiest way to generate a random number between 0 and 10 in JavaScript is to use the Math.random() function. For example, the following example will generate a random number between 0 and 10 (inclusive): Math.random() * 10"
    },
    {
        "instruction": "Produce a JavaScript code snippet for opening a new browser window. ",
        "response": "window.open(\"\", \"_blank\");"
    },
    {
        "instruction": "Construct a Regex expression in Python to extract words from a given URL. ",
        "response": "import re\np = re.compile(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+')\nwords = p.findall(url)"
    },
    {
        "instruction": "Create a variable in Python to hold a list of numbers from 0 to 10 ",
        "response": "my_list = list(range(0,11))"
    },
    {
        "instruction": "Write a function in Python to convert a 2D array into a single column array. arr = [[0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8]]",
        "response": "def convert_to_single_column_array(arr):\n    single_column_arr = []\n\n    for sub_arr in arr:\n        for val in sub_arr:\n            single_column_arr.append(val)\n    \n    return single_column_arr"
    },
    {
        "instruction": "Use the HTML form below and provide the corresponding JavaScript code that will validate the form. <form>\n  <div class=\"form-row\">\n    <div class=\"form-group col-7 mb-0\"><label>Name</label>\n    <input type=\"text\" class=\"form-control\" placeholder=\"Your name\" name=\"name\"id=\"name\">\n    </div>\n  </div>\n  <div class=\"form-row text-center mt-3\">\n    <button type=\"submit\" class=\"btn btn-success\" id=\"submit\">Submit</button>\n  </div>\n</form>",
        "response": "const form = document.querySelector('form');\nconst nameInput = document.querySelector('#name');\n\nform.addEventListener('submit', event => {\n  event.preventDefault(); // prevent form submission\n  \n  const name = nameInput.value;\n  if (name.length === 0 ) { // invalid name\n    // show an error message\n    nameInput.setCustomValidity('Please enter your name.');\n    nameInput.reportValidity();\n  } else { // name is valid\n    // submit the form\n    form.submit();\n  }\n});"
    },
    {
        "instruction": "Write a Python code to fetch the top three trending topics from Twitter. ",
        "response": "import tweepy\n\n# create OAuth handler\nconsumer_key = \"YOUR_CONSUMER_KEY\"\nconsumer_secret = \"YOUR_CONSUMER_SECRET\"\naccess_token = \"YOUR_ACCESS_TOKEN\"\naccess_token_secret = \"YOUR_ACCESS_TOKEN_SECRET\"\n\n# authenticate \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \n  \n# overridable get method\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True) \n \n# results\ntrends = api.trends_place(1) \ndata = trends[0]\ntrends_list = data['trends']\n\n# top 3 trending topics \nfor i in range(3): \n    print(trends_list[i]['name'])"
    },
    {
        "instruction": "Write a JavaScript program to find the object has the largest number of properties. ",
        "response": "function maxProps(objects) {\n    let maxProps = 0; \n    let maxObject; \n\n    for (let i = 0; i < objects.length; i++) {\n        let size = Object.keys(objects[i]).length; \n        if (size > maxProps) {\n            maxProps = size; \n            maxObject = objects[i]; \n        }\n    }\n\n    return maxObject; \n}"
    },
    {
        "instruction": "Write a JavaScript code snippet to update the style color attribute of a HTML element. elementID = button1",
        "response": "document.getElementById('button1').style.color='blue';"
    },
    {
        "instruction": "Evaluate the expression \"7 + 4 * 3 - 6 / 2\" with JavaScript. ",
        "response": "// evaluate the expression\nlet expression = '7 + 4 * 3 - 6 / 2';\n\n// evaluate the expression\nlet result = eval(expression);\n\n// print the result\nconsole.log(result);\n// Output: 19"
    },
    {
        "instruction": "Create a parameterized query in Python to find the details of a person. ",
        "response": "# define the query\nquery = \"SELECT * FROM people WHERE name = %s AND age = %s\"\n\n# provide the parameters\nparams = ('John', 22)\n\n# execute the query\ncursor.execute(query, params)"
    },
    {
        "instruction": "Suggest a way to store a list of five items in a JavaScript variable. ",
        "response": "var items = ['item1', 'item2', 'item3', 'item4', 'item5'];"
    },
    {
        "instruction": "Write a JavaScript that changes the text of a paragraph element, from \"Hello, World!\" to \"Goodbye, World!\" ",
        "response": "document.getElementById(\"myParagraph\").innerHTML = \"Goodbye, World!\";"
    },
    {
        "instruction": "Suggest a way to create an interactive web page using HTML and JavaScript. ",
        "response": "Event listeners can be used to make the page interactive. For example, onclick listeners could be used to execute functions when a button is clicked, onsubmit listeners could be used to execute functions when a form is submitted, and onchange listeners could be used to execute functions when an element's contents are changed."
    },
    {
        "instruction": "Process the given JavaScript object and produce a string of the object's properties in alphabetical order. const obj = {\n  name: 'John Doe',\n  age: 40,\n  address: {\n    street: '123 Main Street',\n    city: 'Albany',\n    state: 'NY',\n  },\n};",
        "response": "\"\"\"\nProcess a JavaScript object and produce a string of its properties in alphabetical order\n\"\"\"\n\nconst obj = {\n  name: 'John Doe',\n  age: 40,\n  address: {\n    street: '123 Main Street',\n    city: 'Albany',\n    state: 'NY',\n  },\n};\n\nconst objKeys = Object.keys(obj);\n\n// Sort objKeys in alphabetical order\nobjKeys.sort();\n\n// Create an array to store the values of each property\nlet outputArray = [];\n\nobjKeys.forEach((key) => {\n  if (typeof obj[key] === 'object') {\n    // Extract the individual fields\n    const fields = Object.keys(obj[key]);\n    fields.sort();\n    // Push each field to the output array\n    fields.forEach((field) => outputArray.push(`${key}.${field}: ${obj[key][field]}`));\n  } else {\n    outputArray.push(`${key}: ${obj[key]}`);\n  }\n});\n\n// Construct the output string\nconst outputString = outputArray.join(', ');\n\nconsole.log(outputString);\n\n\"\"\"\nOutput: age: 40, address.city: Albany, address.state: NY, address.street: 123 Main Street, name: John Doe\n\"\"\""
    },
    {
        "instruction": "For the given Python dictionary, list all its keys and values in the following format. {\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}",
        "response": "\"\"\"\nFor the given dictionary, list all its keys and values in the following format\n\"\"\"\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}\n\nfor key, value in data.items():\n    print(f\"{key}: {value}\")\n    if isinstance(value, dict):\n        for k,v in value.items():\n            print(f\"  {k}: {v}\")\n\n\"\"\"\nOutput:\nname: John Doe\nage: 40\naddress: {'street': '123 Main Street', 'city': 'Albany', 'state': 'NY'}\n  street: 123 Main Street\n  city: Albany\n  state: NY\n\"\"\""
    },
    {
        "instruction": "Create a dictionary in Python and store the names of four countries and the cities within them. ",
        "response": "# Create a Dictionary \ndict = { \n    \"India\" : [\"Delhi\", \"Mumbai\", \"Chennai\"], \n    \"USA\" : [\"New York\", \"Washington\", \"Los Angeles\"],\n    \"Canada\" : [\"Toronto\", \"Vancouver\", \"Ottawa\"],\n    \"France\" : [\"Paris\", \"Marseille\", \"Lyon\"]\n} \n\n# Print the Dictionary \nprint(dict)"
    },
    {
        "instruction": "String concatenation is the process of combining two individual strings into one. Write a Python program to concatenate two strings using the + operator. str1 = 'Hello'\nstr2 = 'World'",
        "response": "def concatenate(str1, str2):\n    return str1 + str2\n\nprint (concatenate(str1, str2))"
    },
    {
        "instruction": "How can you search for and replace a string with a substring in Python? ",
        "response": "You can search for and replace a string with a substring in Python by using the \"replace\" method. The syntax would be: string.replace(\"string_to_be_replaced\", \"new_string\"). For example: \"Hello, world\".replace(\"world\", \"there\") would return \"Hello, there\"."
    },
    {
        "instruction": "What is the Python library used to parse a JSON string? ",
        "response": "The Python library used to parse a JSON string is json. The json library provides functions for encoding and decoding a JSON string. The syntax for decoding would be: json.loads(data). The syntax for encoding would be: json.dumps(data)."
    },
    {
        "instruction": "What is the most efficient way to iterate through a list of dictionaries in Python? ",
        "response": "The most efficient way to iterate through a list of dictionaries in Python is to use the \"for-in\" loop. This loop iterates over the elements of the list and accesses the values of the dictionary using the \"key\" argument. The syntax would be: for item in list: do_something(item[key])."
    },
    {
        "instruction": "Create a code to read a textfile line by line and print out the lines that have the word \"Python\". ",
        "response": "with open('textfile.txt') as f:\n    for line in f:\n        if 'Python' in line:\n            print(line)"
    },
    {
        "instruction": "Convert this Python list of dictionaries to JSON. list_of_dictionaries=[\n  { \n         \"name\" : \"John\", \n         \"age\" : 30, \n         \"city\" : \"New York\"\n     }, \n     { \n         \"name\" : \"Mike\", \n         \"age\" : 25, \n         \"city\" : \"California\"\n     }\n ]",
        "response": "[ \n    { \n        \"name\" : \"John\", \n        \"age\" : 30, \n        \"city\" : \"New York\"\n    }, \n    { \n        \"name\" : \"Mike\", \n        \"age\" : 25, \n        \"city\" : \"California\"\n    } \n]"
    },
    {
        "instruction": "Compose a JavaScript function to detect whether two strings are punctuated versions of the same word. String1: 'apple'\nString2: 'Apple'",
        "response": "function areSameWord(str1, str2) {\n    str1 = str1.toLowerCase();\n    str2 = str2.toLowerCase();\n    if (str1 === str2) {\n        return true;\n    } else {\n        return false;\n    }\n}"
    },
    {
        "instruction": "Compose a Python script to convert a string to an all-uppercase string. String: 'Experiment'",
        "response": "# converting the string to upper-case \nstring = \"Experiment\"\nprint(\"Old String:\", string) \nstring = string.upper() \nprint(\"New String:\", string)"
    },
    {
        "instruction": "Develop a JavaScript function to convert a date string from the ISO-8601 format to a human-readable format. Date String: '2020-06-15'",
        "response": "function convertISODate(ISOdateString) {\n    const date = new Date(ISOdateString);\n    const dateString = date.toLocaleString('default', {day: 'numeric', month: 'long', year:'numeric'});\n\n    return dateString;\n}\n\nconsole.log(convertISODate('2020-06-15'));\n// Output: June 15, 2020"
    },
    {
        "instruction": "Convert this string to a float in Python. string = \"1.25\"",
        "response": "string = \"1.25\"\nfloat_value = float(string)"
    },
    {
        "instruction": "Implement the Levenshtein distance algorithm in Python. ",
        "response": "\"\"\"\nImplementing the Levenshtein distance algorithm in Python\n\"\"\"\n\ndef levenshtein(word1, word2):\n    \"\"\"Calculate the Levenshtein distance between two words\"\"\"\n    size_x = len(word1) + 1\n    size_y = len(word2) + 1\n    matrix = [[0 for i in range(size_x)] for j in range(size_y)] \n    for x in range(size_x):\n        matrix[0][x] = x\n    for y in range(size_y):\n        matrix[y][0] = y\n\n    for x in range(1, size_x):\n        for y in range(1, size_y):\n            if word1[x-1] == word2[y-1]:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1],\n                    matrix[y][x-1] + 1\n                )\n            else:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1] + 1,\n                    matrix[y][x-1] + 1\n                )\n\n    return matrix[size_y-1][size_x-1]"
    },
    {
        "instruction": "Write the code to set a global variable in JavaScript. ",
        "response": "window.globalVariable = \"value\";"
    },
    {
        "instruction": "Create a Javascript function to convert an array of integers into a new array of strings. [3, 6, 9]",
        "response": "function intToString(arr){\n  var strings = [];\n  for(let i = 0; i < arr.length; i++) {\n    strings.push(arr[i].toString());\n  }\n   return strings;\n}"
    },
    {
        "instruction": "Compute 2 to the 3rd power using Python. ",
        "response": "result = 2 ** 3\nprint(result)  # Outputs 8"
    },
    {
        "instruction": "Make the following changes to a JavaScript program. let num1 = 10;\nlet num2 = 8;",
        "response": "let num1 = 10;\nlet num2 = 8;\nlet sum = num1 + num2;\nconsole.log(sum); // Output will be 18."
    },
    {
        "instruction": "Create a GraphQL API to serve data from a database in Python. ",
        "response": "The GraphQL API should use Python's Graphene library to create the schema. The API should have a root query and necessary fields, as well as a Global ID and Node interface for each of the database's tables. The API should also support CRUD operations, enabling the clients to query or modify the database tables."
    },
    {
        "instruction": "Create a simple Python script to print the first 10 prime numbers. ",
        "response": "prime_numbers = [] \nfor num in range(1, 11):   \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_numbers.append(num)\n  \nprint(prime_numbers)"
    },
    {
        "instruction": "Write a JavaScript function to get the current day of the month. ",
        "response": "//Function to get the current day of the month\nfunction getCurrentDay() {\n    let today = new Date();\n    return today.getDate();\n}\n\nconsole.log(getCurrentDay());"
    },
    {
        "instruction": "Write  a  JavaScript  function  to  extract  a  specified number of characters from a string. String: hello world\nNumber: 5",
        "response": "function extractChars(str, num){\n    return str.substring(0, num);\n}\n\nvar str = \"hello world\";\nvar output = extractChars(str, 5);\n\nconsole.log(output); // Output: hello"
    },
    {
        "instruction": "Write a Python function that prints out a staircase pattern. ",
        "response": "def staircase(n): \n    for i in range(1, n + 1): \n        for j in range(1, n + 1): \n            if (j <= (n - i)):   \n                print(end=\"\\t\") \n            else: \n                print(\"#\\t\", end=\"\") \n        print()"
    },
    {
        "instruction": "Create an object syntax in JavaScript to represent an animal. ",
        "response": "let animal = {\n    name: '',\n    type: '',\n    sound: ''\n}"
    },
    {
        "instruction": "Write a JavaScript code snippet to create a loop using an array. let arr = [1, 2, 3, 4, 5]",
        "response": "for (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}"
    },
    {
        "instruction": "Implement an algorithm in Python to find the size of a Binary tree. ",
        "response": "def size(node): \n    if node is None: \n        return 0\n    else: \n        return (size(node.left) + 1 + size(node.right))"
    },
    {
        "instruction": "Create a constructor object in JavaScript to represent a student. ",
        "response": "function Student(name,class,roll_no){\n    this.name=name;\n    this.class=class;\n    this.roll_no=roll_no;\n    \n    return this;\n}"
    },
    {
        "instruction": "Output all numbers between 1 to 5 except for 3 using Python. ",
        "response": "for x in range(1, 6):\n    if x != 3:\n        print(x)"
    },
    {
        "instruction": "Generate a JavaScript code which converts an array of integers to an array of Strings. [1,2,3,4,5]",
        "response": "let arr = [1,2,3,4,5];\nlet arrString = arr.map(String);  // ['1','2','3','4','5']"
    },
    {
        "instruction": "How can you check if a string is a substring of another string in Python? ",
        "response": "You can check if a string is a substring of another string in Python by using the \"in\" operator. For example, if you want to check if the string \"hello\" is a substring of a variable called \"my_string\", you can do:\n\nif 'hello' in my_string:\n    # do something"
    },
    {
        "instruction": "Generate JavaScript code which takes two numbers and returns the smaller one. ",
        "response": "function min(a,b) {\n    return (a < b) ? a : b;\n}"
    },
    {
        "instruction": "Given a string, write a Python program to remove all special characters from it. ",
        "response": "def remove_special_characters(string): \n    final_string = \"\" \n    for character in string: \n        if character.isalnum(): \n            final_string += character \n    return final_string"
    },
    {
        "instruction": "Write a function in the Python language to convert a string to a list. my_string = \"Welcome to the world of GPT models\"",
        "response": "def string_to_list(my_string):\n    return my_string.split()"
    },
    {
        "instruction": "Design a REST API in Python that would return a list of customer information. ",
        "response": "# Create a customer information API\n@app.route(\"/customers\", methods=[\"GET\"])\ndef customers():\n    # Get a list of customer data\n    customer_list = get_customers()\n    # Create a list of customer dictionaries\n    customer_info = [{'name': customer.name,\n                    'age': customer.age,\n                    'address': customer.address} \n                    for customer in customer_list]\n    # Return a json object with list of customer data\n    return jsonify(customer_info)"
    },
    {
        "instruction": "Write a Python program that generates a random integer between 1 and 5 and prints it out. ",
        "response": "import random\n\nrandom_integer = random.randint(1, 5)\n\nprint(random_integer)"
    },
    {
        "instruction": "How would you find the area of a rectangle in Python? ",
        "response": "\"\"\"\nFind the area of a rectangle in Python\n\"\"\"\n\ndef area_of_rectangle(width, height):\n    \"\"\"\n    Returns the area of a rectangle given its width and height.\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n   print(area_of_rectangle(2, 4))"
    },
    {
        "instruction": "Transform the following JSON object into a Python dictionary. { \"name\": \"John Doe\", \"age\": 25, \"address\": { \"street\": \"123 Main Street\", \"city\": \"Los Angeles\", \"state\": \"CA\", \"zip\": 90001}}",
        "response": "import json\n\ndef json_to_dict(json_str):\n   \n    return json.loads(json_str)\n\nif __name__ == \"__main__\":\n    json_str = \"\"\"\n    {\n        \"name\": \"John Doe\",\n        \"age\": 25,\n        \"address\": {\n            \"street\": \"123 Main Street\",\n            \"city\": \"Los Angeles\",\n            \"state\": \"CA\",\n            \"zip\": 90001\n        }\n    }\n    \"\"\"\n    \n    print(json_to_dict(json_str))"
    },
    {
        "instruction": "Compare and contrast the differences between sets and lists in Python. ",
        "response": "A set is an unordered collection of items while a list is an ordered collection of items. Sets have no duplicate elements so all the elements in a set must be unique. The elements inside a list may or may not be unique. Sets are faster when compared to lists for retrieving elements since lookups of items don't require continuous search whereas lists need linear search. The sets built-in functions such as union, intersection give us a quick way of performing mathematical set operations. The elements of set are unchangeable and once you create a set the element in the set remain the same. But, items in a list can be modified."
    },
    {
        "instruction": "Summarize the features and differences between Python and Java. ",
        "response": "Python and Java are two of the most popular programming languages in the world. Python is a high-level, interpreted, general-purpose programming language while Java is a statically-typed, object-oriented language. Python is primarily used for web development, scripting and data science while Java is used for enterprise software development and Android development. Python features an easy-to-read syntax, dynamic typing, interpreted execution, and built-in support for specific tasks. Java has a more structured approach, relies on a compiler, and has a wide range of third-party libraries. Python is generally easier to learn and use, while Java provides optimized performance."
    },
    {
        "instruction": "How to install the Python package called Pillow? ",
        "response": "The easiest way to install the Pillow package is through pip, the official package manager for Python. To install Pillow using pip, open the command line interface and type \"pip install Pillow\"."
    },
    {
        "instruction": "What is the result of the following operation in Python? x = 1\ny = 3\nz = 4\n\nx = y - z",
        "response": "x = -3"
    },
    {
        "instruction": "How to create a dictionary of length four in Python? ",
        "response": "The simplest way to create a dictionary of length four in Python is by using the built-in dict() function. For example:\n\nmyDict = dict(key1 = \"value1\", key2 = \"value2\", key3 = \"value3\", key4 = \"value4\")"
    },
    {
        "instruction": "Create a for loop in Python to print all elements in a given numpy array. import numpy as np \nmyArray = np.array([1, 2, 3, 4])",
        "response": "for element in myArray:\n print(element)"
    },
    {
        "instruction": "Create a loop in JavaScript to count from 1 to 10. ",
        "response": "for (var i=1; i <= 10; i++) {\n  console.log('Counting: ' + i);\n}"
    },
    {
        "instruction": "Create a program to list the 3 most frequent words in a string. string = \"I am learning Python programming language\"",
        "response": "def top_three_words(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] +=1\n        else:\n            word_dict[word] = 1\n    sorted_dict = sorted(word_dict.items(), key = lambda x: x[1], reverse = True)\n    top_three = [word[0] for word in sorted_dict[:3]]\n    return top_three"
    },
    {
        "instruction": "Write a Python script to detect if a given text contains any URL. ",
        "response": "import re\n\ndef has_url(text):\n  pattern = r\"(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?\"\n  matches = re.findall(pattern, text) \n  if matches:\n    return True\n  return False"
    },
    {
        "instruction": "Create a Python program that'll take two lists and return a combined list. list_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]",
        "response": "def combine_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]\n\nprint(combine_lists(list_1, list_2))"
    },
    {
        "instruction": "Design a class in python to find the reverse of a number. ",
        "response": "class ReverseNumber(): \n    def __init__(self): \n        pass\n    \n    def reverse_number(self, num): \n      \n        reverse = 0\n  \n        # Iterate over the given number \n        while(num > 0): \n            reminder = num % 10\n  \n            # Constructing the reverse number\n            reverse = (reverse * 10) + reminder \n  \n            # Floor division\n            num = num // 10\n  \n        return reverse \n  \n# Driver Code \nif __name__ == '__main__': \n    rev = ReverseNumber()\n    print(rev.reverse_number(123))"
    },
    {
        "instruction": "Create a JavaScript function to return the longest string from an array. arr = [\"Hi\", \"Hello\", \"Good Morning\"]",
        "response": "function longestString(arr) {\n  let longest = '';\n  arr.forEach(string => {\n    if (string.length > longest.length) {\n      longest = string;\n    }\n  });\n  return longest;\n}"
    },
    {
        "instruction": "Create a class in Python thattracks the number of objects created. ",
        "response": "class CountObjects:\n  count = 0\n  def __init__(self):\n    CountObjects.count += 1\n \n  @classmethod\n  def get_count(cls):\n    return cls.count"
    },
    {
        "instruction": "Write a JavaScript function to convert a CamelCase string to a snake_case string. CamelCaseStr",
        "response": "function camelCaseToSnakeCase(str){ \n  let result = str[0].toLowerCase(); \n  for (let i = 1; i < str.length; i++) { \n    if (str.charAt(i) === str.charAt(i).toUpperCase()) \n      result += \"_\" + str.charAt(i).toLowerCase(); \n    else\n      result += str.charAt(i); \n  } \n  return result; \n}"
    },
    {
        "instruction": "Write a REGEX pattern to only match valid JavaScript variable names. ",
        "response": "^[a-zA-Z_$][\\w$]*$"
    },
    {
        "instruction": "Add a class attribute to the given Python class. class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age",
        "response": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.grade = None"
    },
    {
        "instruction": "Create a loop to print \"I love Python\" five times ",
        "response": "for i in range(5):\n    print(\"I love Python\")"
    },
    {
        "instruction": "Create a JavaScript program to calculate the Fibonacci number for a given integer n ",
        "response": "function fibonacci(n) {\n  if (n == 0 || n == 1) {\n    return n;\n  }\n\n  let fibo = [0, 1];\n\n  for (let i = 2; i <= n; i++) {\n    let nextFibonacci = fibo[i - 1] + fibo[i - 2];\n    fibo.push(nextFibonacci);\n  }\n\n  return fibo[n];\n}"
    },
    {
        "instruction": "How do you generate a series of numbers from `10` to `41` in JavaScript? ",
        "response": "let series = [];\nfor (let i = 10; i <= 41; i++) {\n  series.push(i);\n}"
    },
    {
        "instruction": "Find the sum of two numbers stored in two different variables in JavaScript. let a = 5;\nlet b = 7;",
        "response": "let sum = a + b;\nconsole.log(sum);"
    },
    {
        "instruction": "Using a loop and a conditional statement in Python, check if the number is a prime number. let number = 13;",
        "response": "def is_prime(number):\n    if (number <= 1):\n        return False\n    if (number <= 3):\n        return True\n\n    if (number % 2 == 0 or number % 3 == 0):\n        return False\n\n    i = 5\n    while (i * i <= number):\n        if (number % i == 0 or number % (i + 2) == 0):\n            return False\n        i +=6\n\n    return True"
    },
    {
        "instruction": "Build a JavaScript program to compute the largest prime number less than a given number N ",
        "response": "function largestPrime(N){\n    let max_prime = -1;\n    for(let i = 2; i <= N; i++) {\n        if (isPrime(i) && i > max_prime)\n            max_prime = i;\n    } \n    return max_prime;\n}\n\nfunction isPrime(number){\n    for (let i = 2; i < Math.sqrt(number); i++) {\n        if (number % i == 0)\n            return false;\n    }\n    return true;\n}"
    },
    {
        "instruction": "Design a Python class structure for playing cards with two classes: Deck and Card. ",
        "response": "class Deck: \n    def __init__(self):\n        self.cards = []\n    \n    def populate(self):\n        suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']\n        numbers = [2,3,4,5,6,7,8,9,10,'Jack','Queen','King','Ace']\n\n        for suit in suits:\n            for number in numbers:\n                self.cards.append(Card(suit, number))\n\n    def shuffle(self):\n        random.shuffle(self.cards)\n        \n    def deal(self):\n        card = self.cards.pop()\n        return card\n \nclass Card:\n    def __init__(self, suit, number):\n        self.suit = suit\n        self.number = number"
    },
    {
        "instruction": "Suggest three methods for removing duplicate elements from an array in JavaScript. ",
        "response": "Three methods for removing duplicate elements from an array in JavaScript are:\n1. Using the Set object: The Set object lets you store unique values of any type, escluding duplicate values.\n2. Using the filter method: The filter method creates a new array with all elements that pass the test implemented by the provided function.\n3. Using the reduce method: The reduce method applies a function to each element in the array to reduce it to a single value. The function needs to return a new value every time it is called."
    },
    {
        "instruction": "Write a JavaScript function to find the first three common numbers in three arrays. Array A: [2, 3, 5, 6, 7, 9]\nArray B: [5, 7, 10, 11, 15]\nArray C: [7, 9, 10, 11, 12]",
        "response": "function findCommonNumbers(arrA, arrB, arrC) { \n  let common = []; \n  \n  for (let i=0; i < arrA.length; i++) { \n    if (arrB.includes(arrA[i]) && arrC.includes(arrA[i])) { \n      common.push(arrA[i]); \n    } \n    if (common.length === 3) { \n      break; \n    } \n  } \n  return common; \n} \n \nlet arrayA = [2, 3, 5, 6, 7, 9]\nlet arrayB = [5, 7, 10, 11, 15]\nlet arrayC = [7, 9, 10, 11, 12]\n  \nconsole.log(findCommonNumbers(arrayA, arrayB, arrayC)); \n// Output: [5, 7, 9]"
    },
    {
        "instruction": "Create a function to identify leap years in JavaScript. ",
        "response": "function isLeapYear(year) {\n  return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n}"
    },
    {
        "instruction": "Write a Python script to compare two lists and print out missing and same elements. list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]",
        "response": "same_elements = []\nmissing_elements = []\n\nfor i in list1:\n  if i in list2:\n   same_elements.append(i)\n  else:\n    missing_elements.append(i)\n\nfor i in list2:\n  if i not in list1:\n    missing_elements.append(i)\n\nprint(\"Same elements:\",same_elements)\nprint(\"Missing elements:\",missing_elements)\n# Output: Same elements: [2, 3, 4] \n#        Missing elements: [1, 5]"
    },
    {
        "instruction": "Write a Python script that prints out all of the letters of the alphabet one per line. ",
        "response": "for letter in 'abcdefghijklmnopqrstuvwxyz':\n    print(letter)"
    },
    {
        "instruction": "Create an object-oriented JavaScript class for a Person that stores a first and last name. ",
        "response": "class Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}"
    },
    {
        "instruction": "Put the following JavaScript snippet into Standard Form. onMouseOver=\"this.style.cursor='pointer'\"",
        "response": "this.addEventListener(\"mouseover\", function() {\n   this.style.cursor = \"pointer\";\n});"
    },
    {
        "instruction": "Using Node.js, create a function to take a JSON string and return a JavaScript object. ",
        "response": "function parseJSONString(jsonString) {\n  return JSON.parse(jsonString);\n}"
    },
    {
        "instruction": "Amend the following Python function to calculate the sum of all even numbers in the given range. def sum_even_numbers(n):\n    '''This function will calculate the sum of all numbers in the given range.'''\n    total = 0\n    for i in range(n):\n        total += i\n    return total",
        "response": "def sum_even_numbers(n):\n    '''This function will calculate the sum of all even numbers in the given range.'''\n    total = 0\n    for i in range(n):\n        if i%2==0:\n            total += i\n    return total"
    },
    {
        "instruction": "Amend the following Python code to add error handling to the function print_score. def print_score(score):\n    print(f'The score is {score}')",
        "response": "def print_score(score):\n    try:\n        score = int(score)\n        print(f'The score is {score}')\n    except ValueError:\n        print(\"The score must be an integer.\")"
    },
    {
        "instruction": "Add a method called “isEmpty” to the following Python class to check if the list is empty or not. class List:\n    def __init__(self, data):\n        self.data = data",
        "response": "class List:\n    def __init__(self, data):\n        self.data = data\n    \n    def isEmpty(self):\n        return not self.data"
    },
    {
        "instruction": "Write a Python function to find the maximum and minimum numbers from a sequence of numbers. ",
        "response": "def min_max(data):\n    min_value = min(data)\n    max_value = max(data)\n    return min_value, max_value"
    },
    {
        "instruction": "Write a JavaScript program to convert temperatures to and from Celsius, Fahrenheit. ",
        "response": "function convertToFahrenheit(celsius) {\n  return (celsius * 1.8) + 32;\n}\n\nfunction convertToCelsius(fahrenheit) {\n  return (fahrenheit - 32) / 1.8;\n}"
    },
    {
        "instruction": "Write a function to generate Fibonacci numbers in Python. ",
        "response": "def fibonacci(num):\n  fib_list = [0, 1]\n  if num == 0:\n    return []\n  elif num == 1:\n    return [0]\n  else:\n    for _ in range(2, num):\n      nxt_num = fib_list[-1] + fib_list[-2]\n      fib_list.append(nxt_num)\n    return fib_list"
    },
    {
        "instruction": "Write code for reversing a list in Python [1,2,3,4]",
        "response": "def reverse_list(l):\n    return l[::-1]"
    },
    {
        "instruction": "Convert the Python Dictionary given below into a valid JSON {\n    \"firstName\":  \"John\",\n    \"lastName\":  \"Doe\",\n    \"age\":  23\n}",
        "response": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 23\n}"
    },
    {
        "instruction": "Edit the given JavaScript code to alert a success message? console.log(\"Process started\");",
        "response": "console.log(\"Process started\");\nalert(\"Process Completed Successfully\");"
    },
    {
        "instruction": "How many arguments can be passed to a JavaScript function ",
        "response": "There is no limit to the number of arguments that can be passed to a JavaScript function. However, this limit depends on the browser and its implementation.\nIn Chrome and Firefox, the maximum number of arguments that can be passed to a function is limited only by the available memory."
    },
    {
        "instruction": "Create a JavaScript class for a circle that calculates its area and returns the result. ",
        "response": "class Circle { \n  constructor(radius) {\n    this.radius = radius;\n  }  \n  \n  get area() { \n    return Math.PI * this.radius * this.radius; \n  }  \n}"
    },
    {
        "instruction": "Edit the following JavaScript code to add two functions, one to increase the number of elements in the array and another to remove the last element in the array. let array = [1, 2, 3, 4];",
        "response": "let array = [1, 2, 3, 4];\n\nfunction addElement(element) {\n    array.push(element);\n}\n\nfunction removeElement() {\n    array.pop(array.length-1);\n}"
    },
    {
        "instruction": "How would you add elements from one list to another list in Python? ",
        "response": "You can add elements from one list to another list in Python using the extend() method, which adds all elements of one list to another list.\n\nFor example, if you have the lists list1 and list2, you can add all elements of list2 to list1 with the following code:\n\nlist1.extend(list2)\n\nAlternatively, you can use the list.append() method to add each element of list2 to list1 one-by-one. For example:\n\nfor element in list2:\n    list1.append(element)"
    },
    {
        "instruction": "Write a script in JavaScript to check if the value of a variable \"x\" is divisible by 7. let x = 21",
        "response": "if (x % 7 === 0) { \n  console.log('x is divisible by 7');\n} else {\n  console.log('x is NOT divisible by 7');\n}"
    },
    {
        "instruction": "Create a loop in Python to print the fibonacci sequence of the given number. n = 10",
        "response": "def fibonacci(n): \n    a = 0\n    b = 1\n    print(\"Fibonacci Series:\")\n    for i in range(n): \n        print(a, end = \" \")\n        c = a + b \n        a = b \n        b = c\n\nfibonacci(n)"
    },
    {
        "instruction": "Modify the following JavaScript code to return the result \"Hello World!\": let x = 'Hello';\nlet y = 'World';\n\nconsole.log(x + ' ' + y);",
        "response": "let x = 'Hello';\nlet y = 'World!';\n\nconsole.log(x + ' ' + y);"
    },
    {
        "instruction": "Design an algorithm in Python for reversing a linked list. ",
        "response": "def reverse(head): \n    prev = None\n    curr = head \n    while(curr is not None): \n        next = curr.next\n        curr.next = prev \n        prev = curr \n        curr = next\n    head = prev \n    return head"
    },
    {
        "instruction": "Write a function in JavaScript to create and return a copy of an object. ",
        "response": "function cloneObject(obj) {\n    let clone = {};\n    for (let key in obj) {\n        if (typeof obj[key] === 'object') {\n            clone[key] = cloneObject(obj[key]);\n        } else {\n            clone[key] = obj[key];\n        }\n    }\n    return clone;\n}"
    },
    {
        "instruction": "Generate a python code program that removes punctuation from a given string. ",
        "response": "def remove_punctuation(s):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    s_without_punct = \"\"\n    for char in s:\n        if char not in punctuations:\n            s_without_punct = s_without_punct + char\n    return s_without_punct"
    },
    {
        "instruction": "Use JavaScript to print out the string \"Hello, World!\". ",
        "response": "console.log(\"Hello, World!\");"
    },
    {
        "instruction": "Write a function in JavaScript to verify that a given email address is valid or not. ",
        "response": "function isValidEmail(email) { \n    // Regular expression for validating an email address \n    const re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/; \n    return re.test(String(email).toLowerCase()); \n}"
    },
    {
        "instruction": "Compute the sum of 2 numbers using Python code. a = 10\nb = 5",
        "response": "a + b = 15"
    },
    {
        "instruction": "Write a JavaScript function that will take a string and returns the reverse of that string ",
        "response": "function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n  }"
    },
    {
        "instruction": "Given a string, write a Python function that will remove all the vowels from it. ",
        "response": "def remove_vowels(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}  \n    return ''.join(c for c in string if c not in vowels)"
    },
    {
        "instruction": "Create a Python function that takes two arguments, a positive integer and a boolean, and return the word \"yes\" if the boolean is true and the number is even, else it should return the word \"no\". ",
        "response": "def check_number(number, condition):\n    if condition and number % 2 == 0:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "instruction": "Create a Python function to find the pair of numbers that have the highest product in an array of numbers [1, 2, 4, 8, 10]",
        "response": "def find_max_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      product = nums[i] * nums[j]\n      if product > max_product:\n        max_product = product\n  return max_product"
    },
    {
        "instruction": "Write a JavaScript function that takes a number as an argument and finds the sum of all the numbers in a given range (based on the given number). ",
        "response": "function sumOfNumInRange(n) {\n  let total = 0\n  for (let i=1; i<=n; i++) {\n    total += i;\n  }\n  return total;\n}"
    },
    {
        "instruction": "What is the syntax required to create an array of objects using JavaScript? ",
        "response": "An array of objects can be created using the syntax below:\n\nlet arrayOfObjects = [\n  { key1: 'value1', key2: 'value2' },\n  { key1: 'value3', key2: 'value4' },\n  { key1: 'value5', key2: 'value6' }\n];"
    },
    {
        "instruction": "Rewrite the following code to use the ternary operator in Python:\n\nif x > 0:\n    result = \"positive\"\nelse:\n    result = \"negative\" ",
        "response": "result = \"positive\" if x > 0 else \"negative\""
    },
    {
        "instruction": "Extend the following python code to include a new field 'type' with the value 'dog'. animal = {\n 'name': 'Rex',\n 'age': 10\n}",
        "response": "animal = {\n 'name': 'Rex',\n 'age': 10,\n 'type': 'dog'\n}"
    },
    {
        "instruction": "Write a JavaScript method to toggle font size on a webpage. ",
        "response": "function toggleFontSize(){\n  let fontSize = document.body.style.fontSize;\n  if(fontSize === \"\") {\n    document.body.style.fontSize = \"2rem\";\n  } else{\n    document.body.style.fontSize = \"\"\n  }\n}"
    },
    {
        "instruction": "Write a JavaScript method for validating a form. ",
        "response": "function validateForm(form){\n  let valid = true;\n  for(let i=0; i < form.length; i++){\n    let field = form[i];\n    if(field.value.trim() === ''){\n      valid = false;\n    }\n  }\n  return valid;\n}"
    },
    {
        "instruction": "Develop a function in Python which prints the name of the day (eg. \"Monday\") given any date as an argument. Date: October 13th, 2020",
        "response": "def get_day(date):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    day_index = date.weekday()\n    return days[day_index]\n\nprint(get_day(date(2020, 10, 13)))"
    },
    {
        "instruction": "Add the following line to the top of this Python code to make it syntactically correct. begin\ndef test_it();\n    print(\"This is a test\")",
        "response": "# Add the following line to the top of this Python code to make it syntactically correct.\ndef test_it():\n    print(\"This is a test\")"
    },
    {
        "instruction": "Construct an object in JavaScript where the key is an integer from 1 to 10 and the value is a boolean representing if it is an even number or not. ",
        "response": "let obj = {\n  1: false,\n  2: true,\n  3: false,\n  4: true,\n  5: false,\n  6: true,\n  7: false,\n  8: true,\n  9: false,\n  10: true\n};"
    },
    {
        "instruction": "Rewrite the following JavaScript code to use arrow functions instead of regular functions. function sum(a, b) {\n    return a + b;\n}",
        "response": "const sum = (a, b) => a + b;"
    },
    {
        "instruction": "How do you define a JavaScript class? ",
        "response": "In JavaScript, a class is defined using the class keyword. The class definition consists of a constructor method, which is called automatically when an instance of the class is created, and other methods which can be called on the instance.\n```\nclass MyClass{\n    constructor(){\n        //Constructor code\n    }\n    //Class methods\n}\n```"
    },
    {
        "instruction": "Suggest a completion for the following JavaScript to define a class. class Bird {",
        "response": "class Bird {\n    constructor(name, color) {\n        this.name = name;\n        this.color = color;\n    }\n\n    // Add another method or property\n    \n    fly() {\n        console.log(`${this.name} is flying`);\n    }\n}"
    },
    {
        "instruction": "Write a Python function to create a matrix of given size filled with zeros. 3",
        "response": "def create_matrix(size):\n    matrix = []\n    for i in range(size):\n        row = []\n        for j in range(size):\n            row.append(0)\n        matrix.append(row)\n    return matrix"
    },
    {
        "instruction": "Split a string into an array of characters in JavaScript. ",
        "response": "The JavaScript method split() can be used to split a string into an array of characters. It takes one parameter, the separator, which can be a single character or multiple characters. The following example splits a string into an array of characters using an empty string as a separator:\n\nvar str = \"Hello World!\";\nvar chars = str.split('');\nconsole.log(chars);\n    \n// Output: [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\", \"!\"]"
    },
    {
        "instruction": "Write a Python program to find the group of three numbers in a list that has the greatest product. list = [2, 3, -2, -3, 4, -5]",
        "response": "def find_greatest_product(lst):\n    products = []\n    for i in range(len(lst)-2):\n        for j in range(i+1, len(lst)-1):\n            for k in range(j+1, len(lst)):\n                products.append(lst[i] * lst[j] * lst[k])\n    return max(products)"
    },
    {
        "instruction": "Output the output of the following python script. Python Script:\n\nx = 5\ny = 7\n\ndef add(x, y):\n    return x + y\n\nadd(x, y)",
        "response": "12"
    },
    {
        "instruction": "Add a blank line between the two following lines of code. printf(\"Hello World!\");\nprintf(\"Hello Python!\");",
        "response": "printf(\"Hello World!\");\n\nprintf(\"Hello Python!\");"
    },
    {
        "instruction": "Produce a program to print out the frequency of characters in a word. Python",
        "response": "def character_frequency(word):\n    freq_dict = {}\n    for char in word:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    return freq_dict\n\nword = 'Python'\nprint(character_frequency(word))\n# {'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}"
    },
    {
        "instruction": "Suggest a Python code to create a list containing the first five positive numbers. ",
        "response": "numbers = []\nfor i in range(1, 6):\n numbers.append(i)\nprint(numbers)"
    },
    {
        "instruction": "Suggest a Python code to filter a list of numbers so that all even numbers are removed. ",
        "response": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\nnew_list = [num for num in numbers if num % 2 != 0]\nprint(new_list)"
    },
    {
        "instruction": "Suggest a JavaScript code to validate a username if it contains only alphabets and digits while ignoring the special characters. ",
        "response": "function validateUsername(username) { \n    const pattern = /^[a-zA-Z0-9]*$/;\n    return username.match(pattern);\n}"
    },
    {
        "instruction": "Suggest a Python code to match the substring \"is\" in the given string \"This is a programming task\". ",
        "response": "import re\n\nstring = \"This is a programming task\"\n\npattern = r\"is\"\n\nif re.search(pattern, string):\n  print(\"Match found\")\nelse:\n  print(\"No match found\")"
    },
    {
        "instruction": "Create an object in JavaScript that has four properties and four associated values. ",
        "response": "let obj = {\n    key1: \"value1\",\n    key2: \"value2\",\n    key3: \"value3\",\n    key4: \"value4\"\n};"
    },
    {
        "instruction": "Write a Python class for a Rectangle object with two instance attributes, length and width. ",
        "response": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length \n        self.width = width"
    },
    {
        "instruction": "Generate a random number between 10 and 35 in JavaScript. ",
        "response": "var min = 10; \nvar max = 35; \nvar randomNumber = Math.random() * (max - min) + min; \nconsole.log(randomNumber);"
    },
    {
        "instruction": "Find a tree traversal algorithm in Python. ",
        "response": "def tree_traversal(root): \n    if root is None: \n        return\n  \n    # First print the data of node \n    print(root.data) \n  \n    # Then recur on left child \n    tree_traversal(root.left) \n  \n    # Finally recur on right child \n    tree_traversal(root.right)"
    },
    {
        "instruction": "Construct an if/else statement in Python to print \"Welcome new user\" if the value of variable \"userID\" is greater than 0. userID = 5",
        "response": "if userID > 0:\n    print(\"Welcome new user\")\nelse:\n    print(\"User ID is invalid\")"
    },
    {
        "instruction": "How does Python handle data types? ",
        "response": "Python uses dynamic typing, meaning that the type of data in a variable is not explicitly declared, instead it is automatically determined by the interpreter when a value is assigned to a variable. This allows for data types to be changed throughout the course of a program."
    },
    {
        "instruction": "How do you remove an item from an array in JavaScript? ",
        "response": "In JavaScript, you can remove an item from an array using the \"splice()\" method. The method takes two parameters, the first is the index of the element to be removed and the second parameter is the number of elements to be removed."
    },
    {
        "instruction": "Write a JavaScript code to calculate the sum of two numbers and return the result. num1 = 5;\nnum2 = 7;",
        "response": "let result = num1 + num2;\nreturn result; // 12"
    },
    {
        "instruction": "Write code to create a function in JavaScript to reverse a given array. var input = [1, 2, 3, 4, 5];",
        "response": "function reverseArray(input) {\n    let result = [];\n    for (let i = input.length - 1; i >= 0; i--) {\n        result.push(input[i]);\n    }\n    return result;\n}"
    },
    {
        "instruction": "Write a function in Python that takes a number n as its parameter and returns the sum of the squares of the first n natural numbers ",
        "response": "def sum_of_squares(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += i**2\n    return result"
    },
    {
        "instruction": "What is the length of the array in this JavaScript line of code? var arr = [1,2,3,4,5,6];",
        "response": "var arr = [1,2,3,4,5,6];\n\nconsole.log(arr.length);\n#output: 6"
    },
    {
        "instruction": "List the type of loops in Python. ",
        "response": "In Python, there are two types of loops - for loop and while loop. A for loop is used to iterate over a sequence (list, tuple, string). A while loop is used to iterate until a condition is met."
    },
    {
        "instruction": "Write the code to sort a dictionary by values in Python. my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}",
        "response": "my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}\n\nsorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}\n\nprint(sorted_dict)\n#output: {\"b\": 5, \"a\": 10, \"c\": 15}"
    },
    {
        "instruction": "Write a loop in Python to create a multiplication table. ",
        "response": "for x in range(1, 11):\n   for y in range(1, 11):\n       print(x, 'x', y, '=', x*y)"
    },
    {
        "instruction": "Rewrite following C code into Python code int a[10] = {0,1,2,3,4,5,6,7,8,9};",
        "response": "a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "instruction": "Create a function in Python which takes a string and reverses it. ",
        "response": "def reverse_string(my_string):\n    return my_string[::-1]"
    },
    {
        "instruction": "Construct a while loop in Python which runs until user input is equal to 5. ",
        "response": "userInput = 0\nwhile userInput != 5:\n    userInput = int(input('Enter a number: '))"
    },
    {
        "instruction": "Write a JavaScript function to retrieve all users from an API endpoint. ",
        "response": "function getUsers() {\n    fetch('https://example.com/users')\n        .then(function(response) {\n            response.json().then(function(data) {\n                 console.log(data);\n            });\n        });\n}"
    },
    {
        "instruction": "Write a Python script to send an email using the smtplib module. ",
        "response": "import smtplib\n\nsender = 'from@example.com'\nrecipients = ['to@example.com']\n\nmessage = \"\"\"Subject: Test Email\n\nThis is a test email message.\n\"\"\"\n\nwith smtplib.SMTP('localhost') as server:\n  server.sendmail(sender, recipients, message)"
    },
    {
        "instruction": "Create a JavaScript function that iterates through a given array and returns the first value that is not a number. array = [3, 5, \"hello\", 10]",
        "response": "function firstNonNumber(array){\n    return array.find(el => typeof el !== 'number');\n}\n\nconsole.log(firstNonNumber([3, 5, \"hello\", 10]))  // Output: \"hello\""
    },
    {
        "instruction": "Write a Python function that takes in one argument and prints out the Fibonacci number for that argument. ",
        "response": "def Fibonacci(x): \n    if x == 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1)+Fibonacci(x-2) \n\nif __name__ == '__main__':\n    print(Fibonacci(5))  # Output: 5"
    },
    {
        "instruction": "What is the correct syntax to create a dictionary in Python? ",
        "response": "my_dict = {'key1':'value1','key2':'value2'}"
    },
    {
        "instruction": "Create a new class in JavaScript called 'Classroom'. ",
        "response": "class Classroom {\n    constructor(){\n        // Constructor code will go here\n    }\n}"
    },
    {
        "instruction": "Create an array of 10 numbers in JavaScript, each with a value of 0. ",
        "response": "let array = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];"
    },
    {
        "instruction": "Create a basic GUI with a button in Python. ",
        "response": "from tkinter import *\n\n# create GUI window\nroot = Tk()\n\n# create the button\nbtn = Button(root,text=\"Click me!\",width=10)\n\n# add the button to the window\nbtn.pack()\n\n# enter the mainloop\nroot.mainloop()"
    },
    {
        "instruction": "Write a Python code that turns the given input into a list of dictionaries. ['John,21', 'Jane,27', 'Jack,38']",
        "response": "[{'name': 'John', 'age': '21'},\n {'name': 'Jane', 'age': '27'},\n {'name': 'Jack', 'age': '38'}]"
    },
    {
        "instruction": "Using the given Python class, write a constructor and a method to display the details. class Customer:",
        "response": "class Customer:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n   \n    def display_details(self):\n        print(f\"Name: {self.name}\\nAge: {self.age}\\nAddress: {self.address}\")"
    },
    {
        "instruction": "Write a JavaScript function to flatten an array up to the given depth. [1, [2, [3, [4, 5], 6], 7], 8], 3",
        "response": "function flattenArray(arr, depth) {\n  let result = [];\n  \n  for (let item of arr) {\n    if (Array.isArray(item) && depth > 0) {\n      result.push(...flattenArray(item, depth - 1)); // Recursively flatten the array\n    } else {\n      result.push(item);\n    }\n  }\n  \n  return result;\n}"
    },
    {
        "instruction": "Create a constructor for the following class in Python. class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age",
        "response": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"
    },
    {
        "instruction": "Write a code snippet to query the following json object using JavaScript. const jsonObject = \n            {\n                \"name\": \"John\",\n                \"age\": 30,\n                \"city\": \"New York\"\n            }",
        "response": "let result = jsonObject.name;\n// result will be 'John'"
    },
    {
        "instruction": "Create a JavaScript function to print the following pattern. ",
        "response": "function printPattern() {\n    for (let i = 1; i <= 5; i++) {\n        let str = '';\n        for (let j = 1; j <= 5; j++) {\n            if (j <= i) {\n                str += j; \n            }\n        }\n        console.log(str);\n    }\n}"
    },
    {
        "instruction": "Identify the bugs in the following python code and fix them. def multiply_dicts(d1, d2):\n    for key in d1:\n        d1[key] = d2[d1[key]]",
        "response": "def multiply_dicts(d1, d2):\n    for key in d1:\n        if key in d2:\n            d1[key] = d2[key]"
    },
    {
        "instruction": "Create a class in Python for performing basic math calculations ",
        "response": "class MathCalculations:\n    \"\"\"\n    Class to perform math calculations \n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def add(self, num1, num2):\n        \"\"\"\n        Add two numbers\n        \"\"\"\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        \"\"\"\n        Subtract two numbers\n        \"\"\"\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        \"\"\"\n        Multiply two numbers\n        \"\"\"\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        \"\"\"\n        Divide two numbers\n        \"\"\"\n        return num1 / num2"
    },
    {
        "instruction": "How to create a loop in Python which will iterate over a list? ",
        "response": "#Iterate over a list \nlist = [1, 2, 3, 4, 5]\n\nfor item in list:\n    print(item)"
    },
    {
        "instruction": "Create a JavaScript code to represent a double-linked list ",
        "response": "// Create a class Node \nclass Node { \n  constructor(value) { \n    this.value = value; \n    this.next = null; \n    this.prev = null; \n  } \n} \n  \n// Create a class LinkedList \nclass DoublyLinkedList { \n  constructor() { \n    this.head = null; \n    this.tail = null; \n    this.length = 0; \n  } \n}"
    },
    {
        "instruction": "How to compare two lists in Python? ",
        "response": "def compare_lists(l1, l2):\n    if len(l1) != len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n\n    return True"
    },
    {
        "instruction": "How to sort an array of strings by length in JavaScript? ",
        "response": "function sortByLength(arr) {\n    arr.sort(function(a,b){\n        return a.length - b.length;\n     });\n    return arr;\n}"
    },
    {
        "instruction": "Design a function in Python to calculate the area of an equilateral triangle. ",
        "response": "def triangle_area(side):\n return side * (side ** 0.5) / 2"
    },
    {
        "instruction": "Which type of loops can be used in Python? ",
        "response": "Python supports for loops, while loops, and nested loops. Additionally, the loop statement can be used to construct an infinite loop."
    },
    {
        "instruction": "Write a JavaScript function to remove the last character of a string. ",
        "response": "function removeLastChar(str){\n    return str.substring(0,str.length-1);\n}"
    },
    {
        "instruction": "Create a script in JavaScript to remove the last character from a given string. \"This is a sentence.\"",
        "response": "let str = \"This is a sentence.\";\nstr = str.substring(0, str.length - 1);\nconsole.log(str);"
    },
    {
        "instruction": "Compile and Run this program in Python. a = 10\nb = 5\n\nprint(\"The sum of a and b is \", a + b)",
        "response": "The sum of a and b is 15"
    },
    {
        "instruction": "Create a string of length 100 using a Python loop and save it into a variable named 'string_100'. ",
        "response": "string_100 = ''\nfor i in range(100):\n string_100 += 'x'"
    },
    {
        "instruction": "Using the given snippet of code, create a compiler to check if a given string is valid Python code. ",
        "response": "import ast \ndef check_syntax(code): \n  try: \n    ast.parse(code) \n  except SyntaxError: \n    return False\n  else: \n    return True"
    },
    {
        "instruction": "Construct an if-else statement in JavaScript that prints the largest number among two input numbers. ",
        "response": "let x = 12;\nlet y = 5;\n\nif ( x > y ) {\n  console.log(x);\n} else {\n  console.log(y);\n}"
    },
    {
        "instruction": "Create a script to connect to a MySQL database using Python. ",
        "response": "import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  passwd=\"yourpassword\",\n  database=\"mydatabase\"\n)"
    },
    {
        "instruction": "Construct a matrix in Python containing 5 rows and 4 columns of random floating point numbers between 0 and 1. ",
        "response": "import numpy as np\n\nmatrix = np.random.uniform(0,1, (5,4))"
    },
    {
        "instruction": "Modify the given Python code to remove any punctuations from the given string. string = \"Hello, how are you?\"",
        "response": "import string\n\ndef remove_punctuation(string):\n    for punct in string.punctuation:\n        string = string.replace(punct, '')\n    return string\n\nstring = \"Hello, how are you?\"\nprint(remove_punctuation(string)) # output 'Hello how are you'"
    },
    {
        "instruction": "Edit the given Python code to remove duplicate items from the given list. my_list = [1, 2, 2, 3, 4, 5, 4]",
        "response": "def remove_duplicate(my_list):\n    return list(set(my_list))\n\nmy_list = [1, 2, 2, 3, 4, 5, 4]\nprint(remove_duplicate(my_list)) # Output [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Use an array method to remove duplicates from a given array in JavaScript. let myArr = [1, 2, 3, 1, 4, 3]",
        "response": "let myArr = [1, 2, 3, 4].filter((item, index, arr) => arr.indexOf(item) === index);"
    },
    {
        "instruction": "Create a web browser automation script in Python to scrape the data from a website. ",
        "response": "from selenium import webdriver\n\n# Create webdriver object\ndriver = webdriver.Chrome()\n\n# Put target website URL\nurl = 'https://www.example.com/'\n\n# Navigate to the website\ndriver.get(url)\n\n# Scrape the data\ndata = driver.find_elements_by_xpath('//*[@class=\"data-class\"]')\nfor element in data:\n    print(element.text)\n\n# Close the browser\ndriver.close()"
    },
    {
        "instruction": "Create a list of five randomly generated integers from 1 to 10 in Python. ",
        "response": "import random\n\nrandom_list = [random.randint(1, 10) for int_num in range(5)]\n\nprint(random_list)"
    },
    {
        "instruction": "Define a function to remove all the even numbers from a list in Python. sample_list = [1,2,3,4,5,6,7,8]",
        "response": "sample_list = [1,2,3,4,5,6,7,8]\n\ndef remove_even_numbers(lst):\n    for num in lst:\n        if num % 2 == 0:\n            lst.remove(num)\n    return lst\n\nprint(remove_even_numbers(sample_list))"
    },
    {
        "instruction": "Create a function to solve a quadratic equation in JavaScript. ",
        "response": "function quadraticEquation(a, b, c) {\n    let result;\n    let delta = (b * b) - (4 * a * c);\n    if (delta > 0) {\n      result = {\n        root1: (-b + Math.sqrt(delta)) / (2 * a),\n        root2: (-b - Math.sqrt(delta)) / (2 * a)\n      };\n    }\n    else if (delta == 0) {\n      result = {\n        root1: (-b + Math.sqrt(delta)) / (2 * a)\n      };\n    }\n    else {\n      result = {\n        root1: 'cannot calculate the roots'\n      };\n    }\n    return result;\n  }"
    },
    {
        "instruction": "Construct a function in JavaScript to find all the Perfect Numbers up to the given parameter n. ",
        "response": "function findPerfectNumbers(n) {\n  var perfects = [];\n\n  for(var i = 1; i<=n; i++){\n    var divisorsSum = 0;\n    for(var j = 1; j<i; j++){\n      if(i % j == 0){\n        divisorsSum += j;\n      }\n    }\n    if(divisorsSum == i){\n      perfects.push(i);\n    }\n  }\n\n  return perfects;\n}"
    },
    {
        "instruction": "Modify the code in Python to convert a lower case string to an upper case string. 'hello world'",
        "response": "string = 'hello world'\nstring = string.upper()\nprint(string)"
    },
    {
        "instruction": "Generate a general shopping list using Python. ",
        "response": "def generate_shopping_list():\n    list_items = ['Bread', 'Milk', 'Butter', 'Eggs', 'Cereal', 'Fruits', 'Veggies', 'Canned food', 'Frozen food', 'Cheese', 'Meat', 'Snacks', 'Coffee', 'Tea', 'Sugar', 'Salt', 'Herbs', 'Cooking oil', 'Detergent', 'Toilet paper']\n    return list_items"
    },
    {
        "instruction": "Create a calculator program using Python to do the following calculations. A = 30;\nB = 15;\nC = 4;",
        "response": "def calculator(A, B, C):\n    add = A + B\n    subtract = A - B\n    multiply = A * C\n    divide = A / B\n    remainder = A % B\n    return add, subtract, multiply, divide, remainder"
    },
    {
        "instruction": "Generate a python code that takes a list of integers, prints out an array that is all True if the values are in the input list and all False otherwise. list_of_numbers = [5, 7, 10, 2]",
        "response": "def boolean_search(list_of_numbers):\n    result_array = []\n    for elem in list_of_numbers:\n        result_array.append(elem in list_of_numbers)\n    return result_array"
    },
    {
        "instruction": "Implement a Python code that takes a string and reverses the characters in place. string = \"This is easy\"",
        "response": "def reverse_in_place(string):\n    return string[::-1]"
    },
    {
        "instruction": "Test the following Python code for any errors. def calculate_mean(numbers):\n    total_sum = 0;\n    for n in numbers:\n        total_sum += n\n    mean = total_sum / 10   # length of numbers",
        "response": "No errors have been found in the code."
    },
    {
        "instruction": "Develop a Python program to remove elements from a dictionary. my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}",
        "response": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# remove element 'd'\nmy_dict.pop('d', None)\n\n# print resulting dictionary\nprint(my_dict)\n\n# Output: {'a': 1, 'b': 2, 'c': 3}"
    },
    {
        "instruction": "Write a Python function to check whether a string is a palindrome or not, ignoring spaces and special characters. ",
        "response": "def is_palindrome_ignore_space(word):\n    filtered_word = [i.lower() for i in word if i.isalpha()] \n    return filtered_word == filtered_word[::-1]"
    },
    {
        "instruction": "Create a class in Python to build a Frequency Table from a given array of numbers. [1,1,1,2,2,3,3,3]",
        "response": "class FrequencyTable:\n    def __init__(self, arr):\n        self.table = {}\n        for num in arr:\n            if num in self.table:\n                self.table[num] += 1\n            else:\n                self.table[num] = 1\n    def query(self, num):\n        return self.table.get(num, 0)"
    },
    {
        "instruction": "Create a new object in JavaScript and assign it a property called \"name\". ",
        "response": "var obj = { name: ''};"
    },
    {
        "instruction": "Create a text-based game in Python. ",
        "response": "print(\"Welcome to the Text-Based Adventure Game!\") \n    \nplayer_name = input(\"What is your name? \") \n    \nprint(\"Hello \" + player_name + \", let's begin!\") \n    \nprint(\"You are walking through a dark forest, it is very quiet and there is a strange feeling of unease\") \n\nwhile True: \n    print(\"What do you want to do? (Enter 'help' for a list of commands)\") \n\n    player_action = input() \n\n    if player_action == 'help': \n        print(\"Here are the commands you can use: move, search, look, take, inventory\") \n    elif player_action == 'move': \n        print(\"Which direction do you want to move? Enter 'north', 'south', 'east' or 'west'\") \n    elif player_action == 'search':\n        print(\"You search the area and find a mysterious-looking object\") \n    elif player_action == 'look': \n        print(\"You look around and see nothing special\") \n    elif player_action == 'take': \n        print(\"You take the item and add it to your inventory\") \n    elif player_action == 'inventory': \n        print(\"You check your inventory and see the mysterious-looking object\") \n    else: \n        print(\"That command does not exist. Please enter 'help' for a list of commands\")"
    },
    {
        "instruction": "Describe how to use the reduce() function in Python. ",
        "response": "The reduce() function in Python is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along. This function is defined in the “functools” module. It applies the function in a manner that the resultant of the function of the current element and the next element is the new element, and so the process continues until the end of the list is reached. For example, to find the sum of all elements in a list:\n\nlist_nums = [2, 3, 4]\n\ndef list_sum(x, y):\n     return x + y\n\nlist_sum = reduce(list_sum, list_nums)\n\nprint(\"Output:\", list_sum)"
    },
    {
        "instruction": "Modify the JavaScript code given below to return the sum of all numbers from 0 to 10 (inclusive). function sum_(start, end) {\n    // TODO\n    return 0;\n}",
        "response": "function sum_(start, end) {\n    let sum = 0;\n\n    // iterate over the range and add the elements\n    // to the 'sum' variable\n    for (let i = start; i <= end; i++) {\n        sum += i;\n    }\n\n    return sum;\n}"
    },
    {
        "instruction": "Write a Python function that calculates the cosine distance between two vectors. vector1 = [1, 2, 3]\nvector2 = [4, 5, 6]",
        "response": "def cosine_distance(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ncosine_distance(vector1, vector2)"
    },
    {
        "instruction": "Parse a list of numbers from a string in Python. s = \"1, 2, 3, 4, 5, 6\"",
        "response": "import re\nlist = re.findall(r'\\d+', s)"
    },
    {
        "instruction": "Create a Python program to define a factorial of a given number. ",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "Write a short class in Python that will print a custom message when created. ",
        "response": "class CustomMessage:\n    def __init__(self):\n        print(\"This is a custom message!\")"
    },
    {
        "instruction": "Write a for loop in JavaScript that prints numbers from 0 to 5. ",
        "response": "for(let i=0; i<=5; i++) {\n    console.log(i);\n}"
    },
    {
        "instruction": "How can we handle multiple parameters in a single function in JavaScript? ",
        "response": "We can handle multiple parameters in a single function by using the spread operator (...) which will allow us to pass any number of arguments to the function."
    },
    {
        "instruction": "Using the arrays below, write a for loop in JavaScript to print out the sum of the two arrays. array1 = [1,2,3] \narray2 = [4,5,6]",
        "response": "let sum = 0;\nfor (let i = 0; i < array1.length; i++) {\n    sum += array1[i] + array2[i];\n}\nconsole.log(sum);"
    },
    {
        "instruction": "How can we create an exclusive truth table using the boolean operators in Python? ",
        "response": "truth_table = {\"p\": [True, False],\n               \"q\": [True, False], \n               \"p ⊕ q\": [(not(p) and q) or (p and not(q)) for p in truth_table[\"p\"] for q in truth_table[\"q\"]]}"
    },
    {
        "instruction": "Write a JavaScript function to replace all non-alphabetical characters in a string with the symbol ‘#’. Given string: \"Hello, world!\"",
        "response": "function replaceNonAlphabets(str){\n  return str.replace(/[^a-zA-Z]/g, '#');\n}"
    },
    {
        "instruction": "Build a Python program to generate a prime numbers list in a given range. ",
        "response": "def prime_numbers(start_num, end_num):\n    prime_nums_list = []\n    for num in range(start_num, end_num + 1):  \n        # all prime numbers are greater than 1  \n        if num > 1:  \n            for i in range(2,num):  \n                if (num % i) == 0:  \n                    break  \n            else:  \n                prime_nums_list.append(num)\n\n    return prime_nums_list"
    },
    {
        "instruction": "Write a shell script that download and install the latest version of Python 3. ",
        "response": "# Get the latest version of Python\nlatest_python=$(curl -s https://www.python.org/ftp/python/)\n# Get the filename from the link\npython_filename=\"${latest_python##*/}\"\n# Download the version\nwget https://www.python.org/ftp/python/$python_filename\n# Unpack the file\ntar -xzf $python_filename\n# Install Python\ncd $python_filename\n./configure --prefix=/usr/local/bin\nmake\nmake install"
    },
    {
        "instruction": "Write a class in JavaScript that can be used to create an instance of a Date. ",
        "response": "class DateInstance { \n    constructor() { \n        this.date = new Date(); \n    } \n  \n    getDate() { \n        return this.date; \n    } \n  \n    setDate(dateValue) { \n        this.date = dateValue; \n    } \n} \n  \n# Test \ndateInstance = new DateInstance(); \nprint(dateInstance.getDate()); \n# Output: Thu Jan 02 2020 16:30:24 GMT+0530 (India Standard Time)"
    },
    {
        "instruction": "Create an algorithm in Python to print the string “welcome” n times. ",
        "response": "def print_welcome(n):\n    for i in range(n):\n        print(\"Welcome\")"
    },
    {
        "instruction": "What is the output of the following Python code?\n\nstring = \"Hello World\"\nstring = string[::-1] ",
        "response": "dlroW olleH"
    },
    {
        "instruction": "Write a Python code to check if the given string contains only digits. string = \"12345\"",
        "response": "def checkDigits(string):\n    for char in string:\n        if char not in '1234567890':\n            return False\n    return True\n\nprint(checkDigits('12345'))\n\nOUTPUT:\nTrue"
    },
    {
        "instruction": "Create a Python function 'checkInteger' that takes a number and returns true if the number is an integer, false otherwise. number = 3.2",
        "response": "def checkInteger(number):\n    if number == int(number):\n        return True\n    else:\n        return False\n\nprint(checkInteger(3.2))\n\nOUTPUT:\nFalse"
    },
    {
        "instruction": "Write a JavaScript function 'formatDate' which takes a date as string in the format \"YYYYMMDD\" and returns it in the format \"MM/DD/YYYY\" date = \"20210320\"",
        "response": "function formatDate(date) {\n    let newDate = date.substr(0, 4) + \"/\" + date.substr(4, 2) + \"/\" + date.substr(6);\n    return newDate;\n}\n\nconsole.log(formatDate(\"20210320\"))\n\nOUTPUT:\n03/20/2021"
    },
    {
        "instruction": "Write a JavaScript code to filter an array of strings that begin with the letter `A` and have a length of 5. let arr = [\"Apple\", \"Banana\", \"Ant\", \"Cat\", \"Arson\"];",
        "response": "let result = arr.filter(str => str[0] === 'A' && str.length === 5);"
    },
    {
        "instruction": "Create a Python dictionary with the student's name as the key and marks as the value. data = {\n    \"Ann\": 78, \n    \"John\": 92,\n    \"Bob\": 67\n}",
        "response": "student_marks = {\n    \"Ann\": 78, \n    \"John\": 92,\n    \"Bob\": 67\n}"
    },
    {
        "instruction": "Write a `Python` program to parse an HTML document and store the tags in a list. ",
        "response": "from bs4 import BeautifulSoup \n  \n# data stored in a string \nhtml_doc = \"\"\" \n<html><head><title>Parser Demo</title></head> \n<body> \n<h1>This is Heading1</h1> \n<h2>This is Heading2</h2> \n</body></html> \n\"\"\"\n  \n# passing the html document to \n# BeautifulSoup() for parsing \nsoup = BeautifulSoup(html_doc, 'html.parser') \n  \n# parsing tags from the document \ntags = [tag.name for tag in soup.find_all()] \n\nprint(tags)"
    },
    {
        "instruction": "Create a `JavaScript` array containing 10 numbers from 10 to 19 in reverse order. ",
        "response": "let arr = [19, 18, 17, 16, 15, 14, 13, 12, 11, 10];"
    },
    {
        "instruction": "Edit the following JavaScript code so that it rounds a number to the nearest integer. function roundNumber(x) {\n return x + 0.5;\n}",
        "response": "function roundNumber(x) {\n return Math.round(x);\n}"
    },
    {
        "instruction": "Install Numpy in Python using pip. ",
        "response": "pip install numpy"
    },
    {
        "instruction": "Write a Python program for calculating the sum of a given array of numbers. [2, 3, 4, 5]",
        "response": "def calculateSum(arr): \n   sum = 0\n   for num in arr: \n      sum += num  \n   return sum \n\nprint(calculateSum([2, 3, 4, 5]))"
    },
    {
        "instruction": "How do you perform error handling in JavaScript? ",
        "response": "In JavaScript, error handling can be done with try...catch statements. The syntax of the try...catch statement consists of a try block followed by one or more catch clauses. The try block contains the code that may throw an error, whereas the catch block contains the code that will be executed if an error is thrown. The error object can be used to get information about the error."
    },
    {
        "instruction": "Edit the following JavaScript function to convert Celsius to Fahrenheit. function toFahrenheit(celsius) {\n  return celsius * 9/5 + 32;\n}",
        "response": "function toFahrenheit(celsius) {\n  return celsius * 9/5 + 32;\n}\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5/9;\n}"
    },
    {
        "instruction": "Define a function in Python that takes a number as an argument and returns its cube. ",
        "response": "def cube(number):\n    return number**3"
    },
    {
        "instruction": "Create an interface for a number guessing game using HTML, CSS, and JavaScript. ",
        "response": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Number Guessing Game</title>\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n        }\n        #guessing-game-container {\n            min-height: 100vh;\n            padding: 20px;\n            background: #f5f5f5;\n            text-align: center;\n        }\n        .form-group {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"guessing-game-container\">\n        <div>\n            <h1>Guess a number between 1 and 100!</h1>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"guess\">Guess:</label>\n            <input type=\"number\" id=\"guess\">\n        </div>\n        <button id=\"submit-guess-btn\">Submit</button>\n        <div id=\"guess-notification\">\n        </div>\n    </div>\n</body>\n<script>\n    const minNum = 1;\n    const maxNum = 100;\n    let correctNum = Math.floor(Math.random() * (maxNum - minNum + 1)) + minNum;\n    const submitBtn = document.getElementById(\"submit-guess-btn\");\n    const guessNotification = document.getElementById(\"guess-notification\");\n\n    submitBtn.addEventListener(\"click\", function() {\n        const guessInput = document.getElementById(\"guess\");\n        const guess = parseInt(guessInput.value);\n        if (Number.isNaN(guess)) {\n            guessNotification.innerHTML = \"Please enter a valid number\";\n        } else if (guess < minNum || guess > maxNum) {\n            guessNotification.innerHTML = `Number must be between ${minNum} and ${maxNum}`;\n        } else if (guess !== correctNum) {\n            guessNotification.innerHTML = `Guess is ${guess < correctNum ? \"too low\" : \"too high\"}`;\n        } else {\n            guessNotification.innerHTML = \"Correct!\";\n        }\n    });\n</script>\n</html>"
    },
    {
        "instruction": "Generate a random boolean value using JavaScript. ",
        "response": "# Using JavaScript:\nlet boolean = Math.random() >= 0.5;\nconsole.log(boolean);"
    },
    {
        "instruction": "Populate an array with numbers from 1 to 10 in Python. ",
        "response": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "instruction": "Construct a recursive function in JavaScript that calculates the total sum of an array. arr = [1, 2, 3, 4, 5, 6]",
        "response": "function sumArray(arr) { \n    if (arr.length === 0) { \n      return 0; \n    } \n    return arr[0] + sumArray(arr.slice(1)); \n} \nlet result = sumArray(arr); \nconsole.log(result); // 21"
    },
    {
        "instruction": "Determine the frequency of each word in a sentence using a hashmap in JavaScript. s = \"This is a test sentence\"",
        "response": "let string = \"This is a test sentence\";\nlet wordsArray = string.split(\" \"); \nlet frequencyMap = {};\nwordsArray.forEach(word => {\n    frequencyMap[word] = frequencyMap[word] ? frequencyMap[word] + 1 : 1;\n});\nconsole.log(frequencyMap);\n// Output: {This: 1, is: 1, a: 1, test: 1, sentence: 1}"
    },
    {
        "instruction": "Construct a bubblesort algorithm in Python. ",
        "response": "def bubbleSort(array): \n\tn = len(array) \n\tfor i in range (n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif array[j] > array[j+1] : \n\t\t\t\tarray[j], array[j+1] = array[j+1], array[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]),"
    },
    {
        "instruction": "Design a function in JavaScript to print all natural numbers between 1 to n. ",
        "response": "function printNumbers (n) {\n    for (let i = 1; i <= n; i++) {\n        console.log(i);\n    }\n}"
    },
    {
        "instruction": "Create a JavaScript function to get the last item of an array. ",
        "response": "function getLastItem(arr) {\n return arr[arr.length - 1];\n}"
    },
    {
        "instruction": "Rewrite the following JavaScript snippet to use a ternary statement. let x = 10;\n\nif (x > 0) {\n  x = x + 5;\n} else {\n  x = x - 5;\n}",
        "response": "let x = 10;\n\nx = x > 0 ? x + 5 : x - 5;"
    },
    {
        "instruction": "Suggest a data structure in Python to represent a binary search tree. ",
        "response": "A Binary Search Tree (BST) can be represented using the dictionary data structure in Python. Each node in the tree will be represented by a dictionary containing the keys: ‘value’, ‘left’, and ‘right’. ‘value’ refers to the numeric or string value of the node, ‘left’ refers to the dictionary representation of the left child and ‘right’ refers to the dictionary representation of the right child."
    },
    {
        "instruction": "Convert the following list into a dictionary in Python: [1, 2, 3, 4, 5]. ",
        "response": "my_dict = {1:1, 2:2, 3:3, 4:4, 5:5}"
    },
    {
        "instruction": "Write a Python program to find the sum of Fibonacci numbers till the number 7. ",
        "response": "def fibonacci(n): \n    f1 = 0\n    f2 = 1\n    sum_fib = 0\n    for i in range(2, n + 1): \n        next_term = f1 + f2 \n        sum_fib += next_term\n        f1 = f2\n        f2 = next_term \n    return sum_fib\n\nprint(fibonacci(7))"
    },
    {
        "instruction": "Write a Python program that uses the function \"get_name\" to ask the user for their full name and then prints it back to them. ",
        "response": "def get_name():\n    \"\"\"Gets a user's full name .\"\"\"\n    first_name = input(\"What is your first name? \")\n    last_name = input(\"What is your last name? \")\n    return first_name + \" \" + last_name\n\nif __name__ == '__main__':\n    name = get_name()\n    print(\"Your name is\", name)"
    },
    {
        "instruction": "Manipulate the string \"Hello, World!\" using the correct Python function that will replace the word \"Hello\" with \"Goodbye\". ",
        "response": "def goodbye_world(string):\n    \"\"\"Replaces the word Hello with Goodbye in the string.\"\"\"\n    return string.replace(\"Hello\", \"Goodbye\")"
    },
    {
        "instruction": "Write a Python program to create a Caesar Cipher encryption algorithm. ",
        "response": "def cipher(input_str, key):\n  output_str = \"\"\n\n  for char in input_str:\n    if char.isalpha():\n      # Encrypt each character\n      ascii_value = ord(char)\n      ascii_value = ascii_value + (key % 26)\n      if char.isupper():\n        if ascii_value > ord(\"Z\"):\n          ascii_value -= 26\n      elif char.islower():\n        if ascii_value > ord(\"z\"):\n          ascii_value -= 26  \n      output_str += chr(ascii_value)\n    else:\n      output_str += char\n\n  return output_str\n\nif __name__ == '__main__':\n  # Sample input\n  input_str = 'Hello World!'\n  key = 5\n  print('Original input: {}'.format(input_str))\n\n  # Encryting the string\n  cipher_str = cipher(input_str, key)\n  print('Encrypted input: {}'.format(cipher_str))\n\n  # Decrypting the string\n  plain_text = cipher(cipher_str, -key)\n  print('Decrypted input: {}'.format(plain_text))"
    },
    {
        "instruction": "What is the Python equivalent of the C++ code snippet? #include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n return 0;\n}",
        "response": "print(\"Hello, World!\")"
    },
    {
        "instruction": "Create a JavaScript function named 'calculateAge' that determines a person's age based on the birth year given. ",
        "response": "function calculateAge(birthYear) {\n  let age = 2019 - birthYear;\n  return age;\n}"
    },
    {
        "instruction": "Create a function in JavaScript that takes in a number and a power, and returns the result of the power operation on the number. num = 2, pow = 5",
        "response": "function power(num, pow) {\n    let result = 1;\n    for (let i = 1; i <= pow; i++) {\n        result *= num;\n    }\n    return result;\n}"
    },
    {
        "instruction": "Parse a given XML element. <root><book>Python for Dummies</book></root>",
        "response": "def parse_xml(element):\n    root = element.find('root')\n    book = root.find('book').text\n    return book"
    },
    {
        "instruction": "Write a JavaScript program for converting a two-dimensional array into a one-dimensional array. [\n    [1,2],\n    [3,4],\n    [5,6]\n]",
        "response": "function twoDToOneD(arr) {\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n            res.push(arr[i][j]);\n        }\n    }\n    return res;\n}"
    },
    {
        "instruction": "Write a code for creating multiple variables with a single statement in Python. ",
        "response": "x, y, z = 1, 2, 3"
    },
    {
        "instruction": "Use the reduce method in JavaScript to add a given array of numbers together. [1, 2, 3, 4, 5]",
        "response": "let sum = [1, 2, 3, 4, 5].reduce((acc, currentVal) => acc + currentVal, 0);"
    },
    {
        "instruction": "Design a function in JavaScript to take in two strings as parameters and return true if the strings are anagrams and false otherwise. ",
        "response": "function isAnagram(string1, string2) { \n  \n    // Convert both strings to lowercase \n    var s1 = string1.toLowerCase(); \n    var s2 = string2.toLowerCase(); \n  \n    // To sort the strings and \n    // remove all spaces \n    s1 = s1.replace(/ /g, '').split('').sort().join(''); \n    s2 = s2.replace(/ /g, '').split('').sort().join(''); \n  \n    if (s1 == s2) \n        return true; \n    else\n        return false; \n}"
    },
    {
        "instruction": "Write code in Python to extract all the words from a sentence and store them in an array. \"Hello World!\"",
        "response": "words = sentence.split(\" \")"
    },
    {
        "instruction": "Create an algorithm to traverse a binary tree in pre-order in Python. ",
        "response": "# A function to do preorder tree traversal\ndef preOrder(root):\n  \n    # Base Case\n    if root is None:\n        return\n \n    # First print the data of node\n    print(root.data),\n \n    # Then recur on left child\n    preOrder(root.left)\n \n    # Finally recur on right child\n    preOrder(root.right)"
    },
    {
        "instruction": "Use the reduce method in JavaScript to find the maximum value in a given array. [1, 2, 3, 4, 5]",
        "response": "let maxNum = [1, 2, 3, 4, 5].reduce(function(a, b){\n    return Math.max(a, b)\n});"
    },
    {
        "instruction": "Write a for loop in JavaScript that iterates 10 times and prints a message each time. ",
        "response": "for (let i = 0; i < 10; i++) {\n    console.log(`Iteration number ${i}`);\n}"
    },
    {
        "instruction": "Given two strings, sort them in alphabetically ascending order. \"javascript\"\n\"python\"",
        "response": "def sort_str(str1, str2): \n    # extract the words from the strings \n    str1_list = list (map (str, str1)) \n    str2_list = list (map (str, str2)) \n  \n    # sort the strings \n    str1_list.sort() \n    str2_list.sort() \n  \n    # join the chars of the strings \n    sorted_str1 = ''.join(str1_list) \n    sorted_str2 = ''.join(str2_list) \n  \n    # check if the words are the same \n    if (sorted_str1 == sorted_str2): \n        return True\n    else: \n        return False\n            \nprint(sort_str(\"javascript\", \"python\"))"
    },
    {
        "instruction": "Write a Python program to determine if an input string is a valid IP address. ",
        "response": "import re\ndef isValidIP(ip): \n    # check if the string is a valid IP address\n    regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)'''\n    # compile the regex \n    pattern = re.compile(regex) \n    \n    # Pass the string in search() method\n    if(pattern.search(ip)):  \n        return True\n    else:  \n        return False\n    \n# Driver Code\nprint(isValidIP(\"192.168.0.1\"))"
    },
    {
        "instruction": "Create a JavaScript loop with the condition i < 5. ",
        "response": "for (let i = 0; i < 5; i++) {\n  ...\n}"
    },
    {
        "instruction": "Write a function in Python to return the first n digits of the Fibonacci sequence. n = 5",
        "response": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nfibonacci(n)"
    },
    {
        "instruction": "Create a Python loop that iterates for 10 times. ",
        "response": "for i in range(10):\n    ..."
    },
    {
        "instruction": "Write a python script that takes user input and prints out the squares of the numbers ",
        "response": "# Take input from user\nnumbers = input(\"Enter numbers: \") \n  \n# split the string \nnumbers = list(map(int, numbers.split(' '))) \n  \n# Loop to print the squares of numbers\nfor number in numbers:\n    print(number*number)"
    },
    {
        "instruction": "Construct a while loop in Python to print all numbers less or equal to 10. ",
        "response": "i = 1\n\nwhile(i <= 10):\n  print(i)\n  i += 1"
    },
    {
        "instruction": "Write a function in Python to iterate over the items in a dictionary. dict = {'Apple':1, 'Orange':2, 'Mango':3}",
        "response": "def iterate_dictionary(dict): \n  for key in dict: \n    print(key, ':', dict[key]) \n\niterate_dictionary(dict)"
    },
    {
        "instruction": "Replace the following line of Javascript to appy the data-attribute to the element. document.getElementById(\"message\").append(\"My Message\");",
        "response": "document.getElementById(\"message\").setAttribute(\"data-text\", \"My Message\");"
    },
    {
        "instruction": "Provide an example of using Python's range() function to generate a range of numbers. ",
        "response": "# Print numbers from 0 to 9\nfor x in range(10):\n  print(x)\n\n# Print numbers from 3 to 8\nfor x in range(3, 9):\n  print(x)\n\n# Print numbers from 3 to 8 incrementing by 2\nfor x in range(3, 9, 2):\n  print(x)"
    },
    {
        "instruction": "Create a function in Python that will return the maximum difference between any two numbers present in an array. ",
        "response": "def max_difference(arr):\n    difference = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] > difference:\n                difference = arr[j] - arr[i]\n    return difference"
    },
    {
        "instruction": "Write a code in Python that will take a string as input and return it with the words in reverse order. ",
        "response": "def reverseWords(s):\n    words = s.split(\" \")\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "instruction": "Create a machine learning model in Python to predict the total surface area of a cube given its side length side_length = 3",
        "response": "import numpy as np\nfrom sklearn.linear_model import LinearRegression \n\n# Data\nX_train = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny_train = np.array([6, 12, 18, 24, 30])\n\n# Model \nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Prediction\nside_length = 3 \npred = model.predict([[side_length]])\nprint('The surface area for a cube with side length %.2f is %.2f' % (side_length, pred[0]))"
    },
    {
        "instruction": "Write a regular expression in JavaScript to check the validity of an email. ",
        "response": "/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/"
    },
    {
        "instruction": "Write a JavaScript statement to extract the last four characters from the string This is a sample string.",
        "response": "var lastFour = myString.slice(-4);"
    },
    {
        "instruction": "Create a function in Python that takes one parameter, a list, and outputs the list in reverse. myList = [1, 2, 3, 4]",
        "response": "def reverseList (list): \n  list.reverse() \n  return list\n  \nreverseList(myList) # Returns [4, 3, 2, 1]"
    },
    {
        "instruction": "Create a python dictionary consisting of the names of the seven dwarfs and a list of their ages. ",
        "response": "\"\"\"\nCreate a python dictionary consisting of the names of the seven dwarfs and a list of their ages\n\"\"\"\n\ndwarfs = {\"Doc\": 84, \n          \"Grumpy\": 67,\n          \"Happy\": 76,\n          \"Sleepy\": 75,\n          \"Sneezy\": 71,\n          \"Dopey\": 76,\n          \"Bashful\": 70}\nprint(dwarfs)"
    },
    {
        "instruction": "Create a lambda function in Python that collects all the numbers between 0 and 10 that are divisible by 3. ",
        "response": "lambda x: [x for x in range(0, 11) if x % 3 == 0]"
    },
    {
        "instruction": "Write a Python code snippet to generate a list of the first five powers of the number 2. ",
        "response": "[2**0, 2**1, 2**2, 2**3, 2**4]"
    },
    {
        "instruction": "Write a JavaScript function that takes a string as an argument and produces a new string with the duplicated characters removed. ",
        "response": "function removeDuplicates(str) {\n    let result = '';\n    let seen = new Set();\n\n    for (let char of str) {\n        if (!seen.has(char)) {\n            seen.add(char);\n            result += char;\n        }\n    }\n\n    return result;\n}"
    },
    {
        "instruction": "Create a JavaScript dictionary object using the following data. apple: red\norange: orange\nbanana: yellow",
        "response": "const fruits = {\n    apple: 'red',\n    orange: 'orange',\n    banana: 'yellow'\n};"
    },
    {
        "instruction": "Generate a random string containing 10 lowercase alphabets using JavaScript. ",
        "response": "let randomString = '';\nfor (let i=0;i<10;i++) {\n  randomString += String.fromCharCode(Math.floor(Math.random() * (122 - 97 + 1)) + 97);\n}\nconsole.log(randomString);"
    },
    {
        "instruction": "Generate a Python code to calculate the compound interest. Principal = 2000 \nRate of Interest = 0.09 \nTime = 5",
        "response": "# Python program to calculate compound interest \n\ndef compound_interest(principal, rate, time): \n\n    # Calculates compound interest \n    CI = principal * (pow((1 + rate / 100), time)) \n\n    print(\"Compound interest is\", CI) \n\n# Driver Code \ncompound_interest(2000, 0.09, 5)"
    },
    {
        "instruction": "Write the code to add a key-value pair to an existing dictionary in JavaScript. myDictionary = {\n \"name\": \"John\",\n \"age\" : 24\n}",
        "response": "myDictionary[\"location\"] = \"NY\";"
    },
    {
        "instruction": "Write the JavaScript code to create an array called fruits and add three values to it. ",
        "response": "const fruits = [\"apple\", \"banana\", \"orange\"];"
    },
    {
        "instruction": "Write the code to create a random number between 1 and 10 in JavaScript. ",
        "response": "Math.floor(Math.random() * 10) + 1;"
    },
    {
        "instruction": "Given a list of words, write a Python function to print the frequency of occurrence of each word in the list. ['foo', 'bar', 'foo', 'baz', 'bar']",
        "response": "def word_frequency(words):\n    freq = {}\n    for word in words:\n        if word not in freq:\n            freq[word] = 0\n        freq[word] += 1    \n    for word, count in freq.items():\n        print('{}: {}'.format(word, count))\n        \nword_frequency(['foo', 'bar', 'foo', 'baz', 'bar'])"
    },
    {
        "instruction": "Write a JavaScript program that given an array of integers, prints the maximum and minimum value of the array. numbers = [2, 3, 6, 9, 5]",
        "response": "// Code in JavaScript\n\nconst numbers = [2, 3, 6, 9, 5];\nlet max = numbers[0];\nlet min = numbers[0];\n\nfor(let i=0; i<numbers.length; i++){\n    if(numbers[i] > max){\n        max = numbers[i];\n    }\n    if(numbers[i] < min){\n        min = numbers[i];\n    }\n}\n \nconsole.log('Max value is', max);\nconsole.log('Min value is', min);"
    },
    {
        "instruction": "Implement a function in Python that calculates the median of a given input array. [5, 2, 6, 8, 10]",
        "response": "def calculateMedian(arr):\n    n = len(arr)\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n \n    return median\n \nprint(\"Median is: \" + str(calculateMedian([5, 2, 6, 8, 10])))"
    },
    {
        "instruction": "Extract the first 3 characters of an input string using Python. String = \"Hello World!\"",
        "response": "string = \"Hello World!\"\n\n#Extract first 3 characters \nfirst_3_characters = string[0:3]\n\nprint(first_3_characters)"
    },
    {
        "instruction": "How would you define a class in Python to represent a college student? ",
        "response": "class CollegeStudent:\n    def __init__(self, name, year, major):\n        self.name=name\n        self.year=year\n        self.major=major\n        \n    def get_name(self): \n       return self.name \n   \n    def get_year(self): \n       return self.year \n       \n    def get_major(self): \n       return self.major"
    },
    {
        "instruction": "Develop a Python function to calculate a Fibonacci number based on a given index. ",
        "response": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n        \n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    {
        "instruction": "In the given JavaScript class, add a method to calculate the area of a square. class Square {\n    constructor(length) {\n        this.length = length;\n    }\n}",
        "response": "class Square {\n    constructor(length) {\n        this.length = length;\n    }\n\n    calcArea() {\n        return this.length * this.length;\n    }\n}"
    },
    {
        "instruction": "Suppose you have a dictionary containing the records of some student marks. Write a Python program to calculate the average marks of all the students. student_mark_dict = {\n    'John': [50, 70, 60],\n    'Harry': [20, 60, 80],\n    'Tom': [90, 70, 80] \n}",
        "response": "def averageMarks(student_mark_dict):\n    total = 0\n    total_marks = 0\n    for key, value in student_mark_dict.items():\n        total += sum(value)\n        total_marks += len(value)\n        \n    return total/total_marks"
    },
    {
        "instruction": "Add a method in JavaScript for an object to find the sum of all its elements. class MyObject {\n    constructor(elements) {\n      this.elements = elements;\n    }\n}",
        "response": "class MyObject {\n    constructor(elements) {\n      this.elements = elements;\n    }\n    \n    sumElements() {\n        let sum = 0;\n        this.elements.forEach(element => {\n            sum += element;\n        });\n        return sum;\n    }\n}"
    },
    {
        "instruction": "Develop a function in Python to delete the duplicates of a given string. string = 'Hello World!'",
        "response": "def deleteDuplicates(string):\n    unique_string = ''\n    for i in string:\n        if i not in unique_string:\n            unique_string += i\n    return unique_string"
    },
    {
        "instruction": "Write a JavaScript code to loop over all elements in a given array. arr = [1,2,3]",
        "response": "for (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}"
    },
    {
        "instruction": "Create a function in Python that takes two lists as arguments and returns a dictionary with elements of the first list as keys and elements of the second list as values. list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]",
        "response": "def zip_lists(list1, list2):\n  zipped_dict = {}\n  for k, v in zip(list1, list2):\n    zipped_dict[k] = v\n  return zipped_dict\n\nprint(zip_lists(list1, list2))"
    },
    {
        "instruction": "Create a function in JavaScript that takes a string and a number as arguments, and returns a string with the first number of characters (specified by the number argument) replaced with the character '@'. string = 'Hello World'\nnumber = 4",
        "response": "function replaceWithAt(str, num){\n  let replaceString = '';\n  let i = 0;\n  while (i < num) {\n    replaceString += '@';\n    i++;\n  } \n  return str.replace(str.substring(0, num), replaceString);\n}\n\nconsole.log(replaceWithAt(string, number));"
    },
    {
        "instruction": "Edit the following JavaScript code to make an AJAX call to a specific URL. ",
        "response": "var xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/ajax_call', true);\nxhr.send();"
    },
    {
        "instruction": "Create a program in Python that sorts the following list and prints the sorted version of the list. mylist = [1, 5, 9, 2, 6, 8]",
        "response": "mylist = [1, 5, 9, 2, 6, 8]\nmylist.sort()\nprint(mylist)"
    },
    {
        "instruction": "Create a program in Python that takes two numbers as input and prints the result of the multiplication of those numbers. num_1 = 10\nnum_2 = 15",
        "response": "num_1 = 10\nnum_2 = 15\nprint(num_1 * num_2)"
    },
    {
        "instruction": "What is the command to delete all occurrences of the element \"5\" from a given Python array? ",
        "response": "arr = [3, 4, 5, 2, 5, 1, 5]\narr = [x for x in arr if x != 5]"
    },
    {
        "instruction": "Write JavaScript code to disable a form element with an id of 'name'. ",
        "response": "document.getElementById(\"name\").disabled = true;"
    },
    {
        "instruction": "Boil down a JavaScript object into an array of key-value pairs. object = {a: 1, b: 2, c: 3}",
        "response": "const kvPairs = Object.entries(object);\n// [['a', 1], ['b', 2], ['c', 3]]"
    },
    {
        "instruction": "Design a function in Python for computing the multiplication of 3 numbers. 4, 5, 6",
        "response": "def multiply_three(a, b, c):\n    return a * b * c\n\nmultiply_three(4, 5, 6) # returns 120"
    },
    {
        "instruction": "Develop a JavaScript object for storing the name and occupation of an employee. name = 'John Doe', occupation = 'Programmer'",
        "response": "const employee = {\n    name: 'John Doe',\n    occupation: 'Programmer'\n}"
    },
    {
        "instruction": "Write code in Python to calculate the area of a triangle given 3 sides. side1 = 12\nside2 = 15\nside3 = 10",
        "response": "def areaTriangle( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\n# Driver code \nside1 = 12\nside2 = 15\nside3 = 10\n\n# calculate area \narea = areaTriangle(side1, side2, side3) \n\n# print\nprint(\"Area of a triangle is :{0:0.2f}\".format(area))"
    },
    {
        "instruction": "Write a script in Python that can classify a sentence as positive or negative. The movie was terrible and boring.",
        "response": "import nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\n\nsentence = \"The movie was terrible and boring.\"\nanalysis = SentimentIntensityAnalyzer()\nscore = analysis.polarity_scores(sentence)\nif score[\"compound\"] >= 0.5:\n    output = \"positive\"\nelse:\n    output = \"negative\"\n\nprint(\"The sentiment of the sentence is:\", output)"
    },
    {
        "instruction": "Create an API by combining the given HTML and JavaScript code. <!DOCTYPE html>\n<html>\n<head>\n  <title>Test API</title>\n</head>\n\n<body>\n\n<div id=\"output\"></div>\n\n<script>  \n  let name = \"John\"; \n  document.getElementById(\"output\").innerHTML = `Hello, ${name}`;\n</script>\n\n</body>\n</html>",
        "response": "let getGreeting = (name) => {\n  return `Hello, ${name}`;\n}\n\nlet outputElement = document.getElementById(\"output\");\n\nlet getName = () => {\n  return \"John\";\n}\n\nconst render = (message, element) => {\n  element.innerHTML = message;\n}\n\nrender(getGreeting(getName()), outputElement);"
    },
    {
        "instruction": "Write Python code to group list elements into sublists of particular length. [1,2,3,4,5,6,7,8]",
        "response": "def group_by_length(arr, k): \n\tn = len(arr)\n\tgroups = [arr[i:i+k] for i in range(0, n, k)] \n\treturn groups\n\na = [1,2,3,4,5,6,7,8] \nk = 3\nprint(group_by_length(a, k))"
    },
    {
        "instruction": "Write a JavaScript code to print the pyramid pattern for a given number of rows. 7",
        "response": "function pyramid(n) { \n  for (let i = 0; i < n; i++) { \n      let str = '';  \n      for (let j = 0; j < n-i; j++) { \n        str = str + ' '; \n    } \n    for (let k = 0; k <= i; k++ ) { \n        str = str + '* '; \n    } \n    console.log(str); \n  } \n} \n  \npyramid(7);"
    },
    {
        "instruction": "Create a program in JavaScript to edit the existing string by replacing some of its character. string = \"Hello world!\"\nreplacement = \"Bye world!\"",
        "response": "let str = \"Hello world!\";\n\nlet changedStr = str.replace(\"Hello\", \"Bye\");\nconsole.log(changedStr); // Bye world!"
    },
    {
        "instruction": "Convert a number from decimal to octal in Python. number = 109",
        "response": "decimal  = 109    \noctal = format(decimal, 'o')  \n\nprint(\"Decimal:\", decimal)\nprint(\"Octal:\", octal)"
    },
    {
        "instruction": "Write a JavaScript expression to generate a random integer between 1 and 25. ",
        "response": "var randNumber = Math.floor(Math.random() * 25) + 1;"
    },
    {
        "instruction": "Write a function in JavaScript that takes 2 parameters of type string and concatenates them. param1 = \"hello\"\nparam2 = \"world\"",
        "response": "function concatenate(str1, str2){\n  return str1 + str2;\n}\n\nconsole.log(concatenate(param1,param2)); // \"helloworld\""
    },
    {
        "instruction": "Update the given Python program to reverse a string. def reverse_string(s): \n    #insert code here\n    return s",
        "response": "def reverse_string(s):\n    return s[::-1]"
    },
    {
        "instruction": "Construct a function to check for an anagram in Python. ",
        "response": "def anagram_check(s1, s2):\n    s1 = s1.replace(' ','').lower()\n    s2 = s2.replace(' ','').lower()\n    \n    if(sort(s1) == sort(s2)):\n        return True\n    \n    return False\n    \ndef sort(s):\n    return sorted(s)"
    },
    {
        "instruction": "Create an example of data visualization using Python's matplotlib library. ",
        "response": "\"\"\"\nExample of data visualization using Python's matplotlib library\n\"\"\"  \nimport matplotlib.pyplot as plt\n\n#Create two datasets\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 4, 9, 16, 25]\n\n#Plot the data\nplt.plot(x_values, y_values)\n\n#Label the axes\nplt.xlabel('x values')\nplt.ylabel('y values')\n\n#Show the plot\nplt.show()"
    },
    {
        "instruction": "Write a JavaScript function to create an array with given size and filled with the characters given in second argument. 3, \"*\"",
        "response": "```\nfunction createArray(size, character) {\n    let arr = []; \n    for (let i = 0; i < size; i++) { \n        arr[i] = character; \n    } \n    return arr; \n};\n```"
    },
    {
        "instruction": "Represent the function y = 3x + 4 in JavaScript. ",
        "response": "y = 3*x + 4;"
    },
    {
        "instruction": "Create a new class in Python that extends the existing class named 'Base'. ",
        "response": "Class NewClass (Base):\n  def __init__(self):\n    super().__init__()"
    },
    {
        "instruction": "In JavaScript, construct a function that takes two string arguments and returns the concatenation of the two strings. ",
        "response": "function concatStrings(str1, str2) {\n  return str1 + str2;\n}"
    },
    {
        "instruction": "Write a JavaScript function to compute the true false ratio of a given array. [0, 1, 1, 0, 0]",
        "response": "function trueFalseRatio(arr){\n    let trueCount = 0;\n    let falseCount = 0;\n    \n    arr.forEach(val => {\n        if(val === 0){\n            falseCount++;\n        } else {\n            trueCount++;\n        }\n    });\n    return {\n        true: trueCount, \n        false: falseCount\n    };\n}"
    },
    {
        "instruction": "Group the objects of an array into bunches of 3 using JavaScript. [1, 4, 7, 9, 12, 16, 19]",
        "response": "const groupOfThree = (arr) => {\n    const chunks = [];\n    let i;\n    for (i = 0; i < arr.length; i+=3) {\n        chunks.push(arr.slice(i, i+3));\n    }\n    return chunks;\n}\n\nconsole.log(groupOfThree([1, 4, 7, 9, 12, 16, 19]));\n// Output: [[1,4,7], [9,12,16], [19]]"
    },
    {
        "instruction": "Using the given JSON string, parse the string and convert it into an object or array in JavaScript { \"name\": \"John\", \"age\": 30, \"city\": \"New York\" }",
        "response": "const parsedObject = JSON.parse('{ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" }');\nconsole.log(parsedObject);\n// Output: {name: \"John\", age: 30, city: \"New York\"}"
    },
    {
        "instruction": "Generate a list of 10 numbers in Python where each number is a multiple of 7 and greater than 40 ",
        "response": "[x for x in range(41, 100) if x % 7 == 0]\n# Output: [42, 49, 56, 63, 70, 77, 84, 91, 98]"
    },
    {
        "instruction": "Reorganize the given list of strings into a dictionary in JavaScript. [ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" ]",
        "response": "const strList = [ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" ];\nconst strDict = {};\n\nfor (i = 0; i < strList.length; i++) {\n    const keyValue = strList[i].split(': ');\n    strDict[keyValue[0]] = keyValue[1];\n}\n\nconsole.log(strDict);\n// Output: { name: \"John\", age: 30, city: \"New York\" }"
    },
    {
        "instruction": "Write a JavaScript function to format a given number to HH:MM:SS. // Given a number of seconds input\nlet secs = 85",
        "response": "const formatTime = (secs) => {\n    let d = new Date(0);\n    d.setSeconds(secs);\n\n    let hh = d.getHours().toString().padStart(2, '0'); \n    let mm = d.getMinutes().toString().padStart(2, '0'); \n    let ss = d.getSeconds().toString().padStart(2, '0'); \n\n    return `${hh}:${mm}:${ss}`;\n}"
    },
    {
        "instruction": "Implement a Python class that prints a given given text when a certain condition is satisfied. Print a text \"Endless fun\" when the numbers given in a list equals to 10",
        "response": "class MyClass:\n    def __init__(self, given_list):\n        self.given_list = given_list\n    \n    def check_equal_to_10(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n        return True"
    },
    {
        "instruction": "Generate a JavaScript code to get the key names of an object. key names of the following object\nlet obj = {name: \"John\", age: 30, job: \"teacher\"};",
        "response": "let objKeyNames = Object.keys(obj); \nconsole.log(objKeyNames); // outputs [\"name\", \"age\", \"job\"]"
    },
    {
        "instruction": "Create a basic Python script to accept two numbers from the user and \nprint out the sum. ",
        "response": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# add two numbers\nsum = num1 + num2\n\n# display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))"
    },
    {
        "instruction": "Create a Python program to accept a string from the user and print out the number of vowels in the string. Hello World",
        "response": "def countVowels(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\n# Driver code \nstr = \"Hello World\"\nprint(\"Number of vowels are:\", countVowels(str))"
    },
    {
        "instruction": "Define a function in Python that saves the configuration for Extreme VDX. The function should take in three optional parameters: cmd, confirm, and confirm_response. The default values for cmd, confirm, and confirm_response are \"copy running-config startup-config\", True, and \"y\", respectively. The function should call the save_config method of the parent class, ExtremeNosSSH, and pass in the cmd, confirm, and confirm_response parameters. The parent class's save_config method should be returned. Please give the corresponding code according to the description. ",
        "response": "def save_config(\n        self,\n        cmd=\"copy running-config startup-config\",\n        confirm=True,\n        confirm_response=\"y\",\n    ):\n        \"\"\"Save Config for Extreme VDX.\"\"\"\n        return super(ExtremeNosSSH, self).save_config(\n            cmd=cmd, confirm=confirm, confirm_response=confirm_response\n        )"
    },
    {
        "instruction": "In Python, define a method named `mark_all_as_done` that marks all todos as done. It takes in `**kwargs` as extra options to send to the server. If authentication is not correct, raise a `GitlabAuthenticationError`. If the server fails to perform the request, raise a `GitlabTodoError`. The method returns an integer that represents the number of todos marked done. Please give the corresponding code according to the description. ",
        "response": "def mark_all_as_done(self, **kwargs):\n        \"\"\"Mark all the todos as done.\n\n        Args:\n            **kwargs: Extra options to send to the server (e.g. sudo)\n\n        Raises:\n            GitlabAuthenticationError: If authentication is not correct\n            GitlabTodoError: If the server failed to perform the request\n\n        Returns:\n            int: The number of todos maked done\n        \"\"\"\n        result = self.gitlab.http_post('/todos/mark_as_done', **kwargs)\n        try:\n            return int(result)\n        except ValueError:\n            return 0"
    },
    {
        "instruction": "In Python, define a function that opens a file and searches for any magic incantations. If a line in the file starts with a '' character, check if the comment starts with \"~~~~* \", \"----* \", or \"====* \". If it does, extract the spell by removing the first 5 characters and return it as a tuple. If no magic is found, return None. Please give the corresponding code according to the description. ",
        "response": "def find_magic_in_file(filename):\n    \"\"\"\n    Search the file for any magic incantations.\n\n    :param filename: file to search\n    :returns: a tuple containing the spell and then maybe some extra words (or None if no magic present)\n    \"\"\"\n    with open(filename, \"rt\", encoding=\"utf-8\") as f:\n        for line in f:\n            if line.startswith(\"#\"):\n                comment = line[1:].strip()\n                if comment.startswith(\"~~~~* \") or comment.startswith(\"----* \") or comment.startswith(\"====* \"):\n                    spell = comment[5:].strip()\n                    return tuple(spell.split())\n            else:\n                break\n    return None"
    },
    {
        "instruction": "In Python, the function `updateEditor` updates the editor based on the current selection. It assigns the rule operators to the choice list, gets the editor type, and deletes the current widget. If the editor type is different from the current widget, it creates a new editor. If the new widget is a `QLineEdit`, it sets the completer to `XQueryCompleter`. Finally, it sets the widget and the text. Please give the corresponding code according to the description. ",
        "response": "def updateEditor( self ):\n        \"\"\"\n        Updates the editor based on the current selection.\n        \"\"\"\n        \n        # assignt the rule operators to the choice list\n        rule        = self.currentRule()\n        operator    = self.currentOperator()\n        widget      = self.uiWidgetAREA.widget()\n        editorType  = None\n        text        = ''\n        \n        if ( rule ):\n            editorType = rule.editorType(operator)\n        \n        # no change in types\n        if ( widget and editorType and type(widget) == editorType ):\n            return\n            \n        elif ( widget ):\n            if ( type(widget) != QWidget ):\n                text = widget.text()\n            \n            widget.setParent(None)\n            widget.deleteLater()\n        \n        self.uiWidgetAREA.setWidget(None)\n        \n        # create the new editor\n        if ( editorType ):\n            widget = editorType(self)\n            \n            if ( isinstance(widget, QLineEdit) ):\n                terms  = rule.completionTerms()\n                if ( not terms ):\n                    qwidget = self.queryBuilderWidget()\n                    if ( qwidget ):\n                        terms = qwidget.completionTerms()\n                \n                if ( terms ):\n                    widget.setCompleter(XQueryCompleter(terms, widget))\n            \n            self.uiWidgetAREA.setWidget(widget)\n            \n            if ( type(widget) != QWidget ):\n                widget.setText(text)"
    },
    {
        "instruction": "In Python, this function reads a number token from the source file and returns either a float or an int depending on whether a decimal point appears. It first checks if the number is negative and then checks if the number starts with a zero followed by a digit. If so, it raises an error. It then reads the digits before and after the decimal point (if there is one) and checks for scientific notation. Finally, it returns a Token object with the appropriate token kind (float or int), start and end positions, line and column numbers, and the token value as a string. Please give the corresponding code according to the description. ",
        "response": "def read_number(\n        self, start: int, char: str, line: int, col: int, prev: Token\n    ) -> Token:\n        \"\"\"Reads a number token from the source file.\n\n        Either a float or an int depending on whether a decimal point appears.\n        \"\"\"\n        source = self.source\n        body = source.body\n        position = start\n        is_float = False\n        if char == \"-\":\n            position += 1\n            char = body[position : position + 1]\n        if char == \"0\":\n            position += 1\n            char = body[position : position + 1]\n            if \"0\" <= char <= \"9\":\n                raise GraphQLSyntaxError(\n                    source,\n                    position,\n                    f\"Invalid number, unexpected digit after 0: {print_char(char)}.\",\n                )\n        else:\n            position = self.read_digits(position, char)\n            char = body[position : position + 1]\n        if char == \".\":\n            is_float = True\n            position += 1\n            char = body[position : position + 1]\n            position = self.read_digits(position, char)\n            char = body[position : position + 1]\n        if char and char in \"Ee\":\n            is_float = True\n            position += 1\n            char = body[position : position + 1]\n            if char and char in \"+-\":\n                position += 1\n                char = body[position : position + 1]\n            position = self.read_digits(position, char)\n        return Token(\n            TokenKind.FLOAT if is_float else TokenKind.INT,\n            start,\n            position,\n            line,\n            col,\n            prev,\n            body[start:position],\n        )"
    },
    {
        "instruction": "In Python, given a set of data points X, a set of centers, an oversampling factor, and a random state, this function samples points independently with probability proportional to the square of the distance between each point and the centers. It then returns the indices of the sampled points. Please give the corresponding code according to the description. ",
        "response": "def _sample_points(X, centers, oversampling_factor, random_state):\n    r\"\"\"\n    Sample points independently with probability\n\n\n    .. math::\n\n       p_x = \\frac{\\ell \\cdot d^2(x, \\mathcal{C})}{\\phi_X(\\mathcal{C})}\n\n    \"\"\"\n    # re-implement evaluate_cost here, to avoid redundant computation\n    distances = pairwise_distances(X, centers).min(1) ** 2\n    denom = distances.sum()\n    p = oversampling_factor * distances / denom\n\n    draws = random_state.uniform(size=len(p), chunks=p.chunks)\n    picked = p > draws\n\n    new_idxs, = da.where(picked)\n    return new_idxs"
    },
    {
        "instruction": "In Python, this function loads a value by passing it to the bound load method of a given typedef. It looks up the load function bound to the engine for the given typedef and returns the result of passing the given value and any context to that function. If the input typedef is not bound to this engine, it raises a KeyError. The function takes a TypeDefinition object, a value, and any context as input, and returns the loaded value. Please give the corresponding code according to the description. ",
        "response": "def load(self, typedef, value, **kwargs):\n        \"\"\"\n        Return the result of the bound load method for a typedef\n\n        Looks up the load function that was bound to the engine for a typedef,\n        and return the result of passing the given `value` and any `context`\n        to that function.\n\n        Parameters\n        ----------\n        typedef : :class:`~TypeDefinition`\n            The typedef whose bound load method should be used\n        value : object\n            The value to be passed into the bound load method\n        **kwargs : kwargs\n            Context for the value being loaded\n\n        Returns\n        -------\n        loaded_value : object\n            The return value of the load function for the input value\n\n        Raises\n        ------\n        exc : :class:`KeyError`\n            If the input typedef is not bound to this engine\n\n        Example\n        -------\n\n        .. code-block:: python\n\n            class Account(TypeDefinition):\n                prefix = \"::account\"\n                def load(self, value, **context):\n                    return value + Account.prefix\n\n                def dump(self, value, **context):\n                    return value[:-len(Account.prefix)]\n\n            typedef = Account()\n            engine = TypeEngine(\"accounts\")\n            engine.register(typedef)\n            engine.bind()\n            assert engine.dump(typedef, \"Jill::account\") == \"Jill\"\n\n        \"\"\"\n        try:\n            bound_type = self.bound_types[typedef]\n        except KeyError:\n            raise DeclareException(\n                \"Can't load unknown type {}\".format(typedef))\n        else:\n            # Don't need to try/catch since load/dump are bound together\n            return bound_type[\"load\"](value, **kwargs)"
    },
    {
        "instruction": "Python: Retrieve a queryset of published entries that are associated with a specific tag. If the tag is not found, raise a Http404 error. Please give the corresponding code according to the description. ",
        "response": "def get_queryset(self):\n        \"\"\"\n        Retrieve the tag by his name and\n        build a queryset of his published entries.\n        \"\"\"\n        self.tag = get_tag(self.kwargs['tag'])\n        if self.tag is None:\n            raise Http404(_('No Tag found matching \"%s\".') %\n                          self.kwargs['tag'])\n        return TaggedItem.objects.get_by_model(\n            Entry.published.all(), self.tag)"
    },
    {
        "instruction": "In Python, define a function called \"do_zen\" that takes in two parameters: \"self\" and \"line\". This function will print an inspiring quote randomly chosen from a list of quotes called \"QUOTES\". The quote will be printed in a dim style, followed by the author's name in a bright style. Please give the corresponding code according to the description. ",
        "response": "def do_zen(self, line):\n        \"\"\"Inspiring quotes for the working ontologist\"\"\"\n        _quote = random.choice(QUOTES)\n        # print(_quote['source'])\n        print(Style.DIM + unicode(_quote['text']))\n        print(Style.BRIGHT + unicode(_quote['source']) + Style.RESET_ALL)"
    },
    {
        "instruction": "This Python function creates an attribute assertion response. It takes in a dictionary of attributes and values, a session identifier of the request, a destination URL, the entity identifier of the service provider, an identifier of the user, the identifier of the subject, the status of the response, the issuer of the response, a boolean value indicating whether the assertion should be signed or not, a boolean value indicating whether the whole response should be signed or not, a list of attributes, and some extra keyword arguments. It returns a response instance. Please give the corresponding code according to the description. ",
        "response": "def create_attribute_response(self, identity, in_response_to, destination,\n                                  sp_entity_id, userid=\"\", name_id=None,\n                                  status=None, issuer=None,\n                                  sign_assertion=False, sign_response=False,\n                                  attributes=None, sign_alg=None,\n                                  digest_alg=None, farg=None, **kwargs):\n        \"\"\" Create an attribute assertion response.\n\n        :param identity: A dictionary with attributes and values that are\n            expected to be the bases for the assertion in the response.\n        :param in_response_to: The session identifier of the request\n        :param destination: The URL which should receive the response\n        :param sp_entity_id: The entity identifier of the SP\n        :param userid: A identifier of the user\n        :param name_id: The identifier of the subject\n        :param status: The status of the response\n        :param issuer: The issuer of the response\n        :param sign_assertion: Whether the assertion should be signed or not\n        :param sign_response: Whether the whole response should be signed\n        :param attributes:\n        :param kwargs: To catch extra keyword arguments\n        :return: A response instance\n        \"\"\"\n\n        policy = self.config.getattr(\"policy\", \"aa\")\n\n        if not name_id and userid:\n            try:\n                name_id = self.ident.construct_nameid(userid, policy,\n                                                      sp_entity_id)\n                logger.warning(\"Unspecified NameID format\")\n            except Exception:\n                pass\n\n        to_sign = []\n\n        if identity:\n            farg = self.update_farg(in_response_to, sp_entity_id, farg=farg)\n\n            _issuer = self._issuer(issuer)\n            ast = Assertion(identity)\n            if policy:\n                ast.apply_policy(sp_entity_id, policy, self.metadata)\n            else:\n                policy = Policy()\n\n            if attributes:\n                restr = restriction_from_attribute_spec(attributes)\n                ast = filter_attribute_value_assertions(ast)\n\n            assertion = ast.construct(\n                sp_entity_id, self.config.attribute_converters, policy,\n                issuer=_issuer, name_id=name_id,\n                farg=farg['assertion'])\n\n            if sign_assertion:\n                assertion.signature = pre_signature_part(assertion.id,\n                                                         self.sec.my_cert, 1,\n                                                         sign_alg=sign_alg,\n                                                         digest_alg=digest_alg)\n                # Just the assertion or the response and the assertion ?\n                to_sign = [(class_name(assertion), assertion.id)]\n                kwargs['sign_assertion'] = True\n\n            kwargs[\"assertion\"] = assertion\n\n        if sp_entity_id:\n            kwargs['sp_entity_id'] = sp_entity_id\n\n        return self._response(in_response_to, destination, status, issuer,\n                              sign_response, to_sign, sign_alg=sign_alg,\n                              digest_alg=digest_alg, **kwargs)"
    },
    {
        "instruction": "In Python, this function finds objects that match a given template pattern. The function takes a list of attribute tuples (attribute, value) as input. If no template is given, all objects are returned. The function initializes a search for objects with the given template, and returns a list of object ids that match the search criteria. The search is performed in batches of 10 objects by default, to balance speed and memory usage. The function raises a PyKCS11Error if any errors occur during the search. Please give the corresponding code according to the description. ",
        "response": "def findObjects(self, template=()):\n        \"\"\"\n        find the objects matching the template pattern\n\n        :param template: list of attributes tuples (attribute,value).\n          The default value is () and all the objects are returned\n        :type template: list\n        :return: a list of object ids\n        :rtype: list\n        \"\"\"\n        t = self._template2ckattrlist(template)\n\n        # we search for 10 objects by default. speed/memory tradeoff\n        result = PyKCS11.LowLevel.ckobjlist(10)\n\n        rv = self.lib.C_FindObjectsInit(self.session, t)\n        if rv != CKR_OK:\n            raise PyKCS11Error(rv)\n\n        res = []\n        while True:\n            rv = self.lib.C_FindObjects(self.session, result)\n            if rv != CKR_OK:\n                raise PyKCS11Error(rv)\n            for x in result:\n                # make a copy of the handle: the original value get\n                # corrupted (!!)\n                a = CK_OBJECT_HANDLE(self)\n                a.assign(x.value())\n                res.append(a)\n            if len(result) == 0:\n                break\n\n        rv = self.lib.C_FindObjectsFinal(self.session)\n        if rv != CKR_OK:\n            raise PyKCS11Error(rv)\n        return res"
    },
    {
        "instruction": "Add an instruction to the Python function `start` that checks if the `call` parameter is equal to the string \"action\". If it is not, raise a `SaltCloudSystemExit` exception with the message \"The instance action must be called with -a or --action. \" Otherwise, log the message \"Starting machine: {name}\" to the console, start the virtual machine with the given `name`, remove the `name` key from the `machine` dictionary, and return the result of the `treat_machine_dict` function applied to the modified `machine` dictionary. Please give the corresponding code according to the description. ",
        "response": "def start(name, call=None):\n    '''\n    Start a machine.\n    @param name: Machine to start\n    @type name: str\n    @param call: Must be \"action\"\n    @type call: str\n    '''\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The instance action must be called with -a or --action.'\n        )\n\n    log.info(\"Starting machine: %s\", name)\n    vb_start_vm(name)\n    machine = vb_get_machine(name)\n    del machine[\"name\"]\n    return treat_machine_dict(machine)"
    },
    {
        "instruction": "Load a Survey Simulator model file as an array of ephem EllipticalBody objects. Read the file, split it by new line character and iterate over each line. If the line is empty or starts with , skip it. Otherwise, create a new ephem EllipticalBody object and set its properties using the values from the line. Append the created object to the list of kbos. Finally, return the list of kbos. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _kbos_from_survey_sym_model_input_file(model_file):\n    \"\"\"\n    Load a Survey Simulator model file as an array of ephem EllipticalBody objects.\n    @param model_file:\n    @return:\n    \"\"\"\n    lines = storage.open_vos_or_local(model_file).read().split('\\n')\n    kbos = []\n    for line in lines:\n        if len(line) == 0 or line[0] == '#':  # skip initial column descriptors and the final blank line\n            continue\n        kbo = ephem.EllipticalBody()\n        values = line.split()\n        kbo.name = values[8]\n        kbo.j = values[9]\n        kbo.k = values[10]\n        kbo._a = float(values[0])\n        kbo._e = float(values[1])\n        kbo._inc = float(values[2])\n        kbo._Om = float(values[3])\n        kbo._om = float(values[4])\n        kbo._M = float(values[5])\n        kbo._H = float(values[6])\n        epoch = ephem.date(2453157.50000 - ephem.julian_date(0))\n        kbo._epoch_M = epoch\n        kbo._epoch = epoch\n        kbos.append(kbo)\n    return kbos"
    },
    {
        "instruction": "This Python function, `adjust_tuning`, loads an audio file, separates its harmonic component, estimates the tuning, applies pitch correction, and saves the result to a new file. It prints out information about the process, including the tuning estimate and the pitch-correction applied. The instruction is to call `adjust_tuning` with the file paths of the input and output files as arguments. Please give the corresponding code according to the description. ",
        "response": "def adjust_tuning(input_file, output_file):\n    '''Load audio, estimate tuning, apply pitch correction, and save.'''\n    print('Loading ', input_file)\n    y, sr = librosa.load(input_file)\n\n    print('Separating harmonic component ... ')\n    y_harm = librosa.effects.harmonic(y)\n\n    print('Estimating tuning ... ')\n    # Just track the pitches associated with high magnitude\n    tuning = librosa.estimate_tuning(y=y_harm, sr=sr)\n\n    print('{:+0.2f} cents'.format(100 * tuning))\n    print('Applying pitch-correction of {:+0.2f} cents'.format(-100 * tuning))\n    y_tuned = librosa.effects.pitch_shift(y, sr, -tuning)\n\n    print('Saving tuned audio to: ', output_file)\n    librosa.output.write_wav(output_file, y_tuned, sr)"
    },
    {
        "instruction": "In Python, this function centers the input result within the input window. If the axis provided is larger than the number of dimensions of the result, a ValueError is raised. If the offset of the window is greater than 0, the result is sliced and shifted by the negative offset. If the result is not an ABCSeries or ABCDataFrame, it is copied and sliced using the lead_indexer. The centered result is then returned. Please give the corresponding code according to the description. ",
        "response": "def _center_window(self, result, window):\n        \"\"\"\n        Center the result in the window.\n        \"\"\"\n        if self.axis > result.ndim - 1:\n            raise ValueError(\"Requested axis is larger then no. of argument \"\n                             \"dimensions\")\n\n        offset = _offset(window, True)\n        if offset > 0:\n            if isinstance(result, (ABCSeries, ABCDataFrame)):\n                result = result.slice_shift(-offset, axis=self.axis)\n            else:\n                lead_indexer = [slice(None)] * result.ndim\n                lead_indexer[self.axis] = slice(offset, None)\n                result = np.copy(result[tuple(lead_indexer)])\n        return result"
    },
    {
        "instruction": "Write a function in Python that takes a filename, image data as a numpy array, and a delimiter as input. The function should write the image data to a CSV file with the given filename and delimiter. Use the csv. writer() function to write each line of the image data to the CSV file. Please give the corresponding code according to the description. ",
        "response": "def write_csv(filename, data, delimiter=CSV_DELIMITER):\n    \"\"\" Write image data to CSV file\n\n    :param filename: name of CSV file to write data to\n    :type filename: str\n    :param data: image data to write to CSV file\n    :type data: numpy array\n    :param delimiter: delimiter used in CSV file. Default is ``;``\n    :type delimiter: str\n    \"\"\"\n    with open(filename, 'w') as file:\n        csv_writer = csv.writer(file, delimiter=delimiter)\n        for line in data:\n            csv_writer.writerow(line)"
    },
    {
        "instruction": "In Python, this function reads data from a SPI device using the FTDI chip. It checks if the specified length of bytes is within the hardware limit of the chip, builds a command to read SPI data, computes the length of the data, sends the command and length to the chip, and reads the response bytes. If an odd length is requested, it rounds up the length to the nearest even number. Please give the corresponding code according to the description. ",
        "response": "def read(self, length):\n        \"\"\"Half-duplex SPI read.  The specified length of bytes will be clocked\n        in the MISO line and returned as a bytearray object.\n        \"\"\"\n        #check for hardware limit of FT232H and similar MPSSE chips\n        if (1 > length > 65536):\n            print('the FTDI chip is limited to 65536 bytes (64 KB) of input/output per command!')\n            print('use for loops for larger reads')\n            exit(1)\n        # Build command to read SPI data.\n        command = 0x20 | (self.lsbfirst << 3) | (self.read_clock_ve << 2)\n        logger.debug('SPI read with command {0:2X}.'.format(command))\n        # Compute length low and high bytes.\n        # NOTE: Must actually send length minus one because the MPSSE engine\n        # considers 0 a length of 1 and FFFF a length of 65536\n\t#force odd numbers to round up instead of down\n\tlengthR = length\n\tif length % 2 == 1:\n\t    lengthR += 1\n\tlengthR = lengthR/2\n\t#when odd length requested, get the remainder instead of the same number\n\tlenremain = length - lengthR\n        len_low  = (lengthR - 1) & 0xFF\n        len_high = ((lengthR - 1) >> 8) & 0xFF\n        self._assert_cs()\n        # Send command and length.\n        # Perform twice to prevent error from hardware defect/limits\n        self._ft232h._write(str(bytearray((command, len_low, len_high))))\n        payload1 = self._ft232h._poll_read(lengthR)\n        self._ft232h._write(str(bytearray((command, len_low, len_high))))\n        payload2 = self._ft232h._poll_read(lenremain)\n        self._deassert_cs()\n        # Read response bytes\n        return bytearray(payload1 + payload2)"
    },
    {
        "instruction": "In Python, this function returns the next LexToken. If there are tokens in the queue, it pops the first one and sets it as the last token. Otherwise, it gets the next token from the lexer. If the token is a MultiToken, it adds all tokens to the queue. If the token is None and there are still indents, it creates a NEWLINE token and DEDENT tokens to match the number of indents and adds them to the queue. Finally, it returns the last token. Please give the corresponding code according to the description. ",
        "response": "def token(self):\n        \"\"\"\n        Returns the next LexToken. Returns None when all tokens have been\n        exhausted.\n        \"\"\"\n\n        if self.tokens_queue:\n            self.last_token = self.tokens_queue.pop(0)\n        else:\n            r = self.lex.token()\n            if isinstance(r, MultiToken):\n                self.tokens_queue.extend(r.tokens)\n                self.last_token = self.tokens_queue.pop(0)\n            else:\n                if r is None and self.cur_indent > 0:\n                    if (self.last_token and\n                            self.last_token.type not in ('NEWLINE', 'LINE')):\n                        newline_token = _create_token(\n                            'NEWLINE', '\\n', self.lex.lineno, self.lex.lexpos)\n                        self.tokens_queue.append(newline_token)\n                    dedent_count = self.cur_indent\n                    dedent_token = _create_token(\n                        'DEDENT', '\\t', self.lex.lineno, self.lex.lexpos)\n                    self.tokens_queue.extend([dedent_token] * dedent_count)\n\n                    self.cur_indent = 0\n                    self.last_token = self.tokens_queue.pop(0)\n                else:\n                    self.last_token = r\n        return self.last_token"
    },
    {
        "instruction": "In Python, this function returns all issues in a given repository based on the search options. The function takes in various parameters such as the repository name, profile name, milestone, state, assignee, creator, mentioned, labels, sort, direction, since, output, and per_page. The function builds API arguments based on the parameters passed in and returns the information for all issues in the repository. The function also has a CLI example that shows how to use the function to get issues from a GitHub repository. Please give the corresponding code according to the description. ",
        "response": "def get_issues(repo_name=None,\n               profile='github',\n               milestone=None,\n               state='open',\n               assignee=None,\n               creator=None,\n               mentioned=None,\n               labels=None,\n               sort='created',\n               direction='desc',\n               since=None,\n               output='min',\n               per_page=None):\n    '''\n    Returns information for all issues in a given repository, based on the search options.\n\n    .. versionadded:: 2016.11.0\n\n    repo_name\n        The name of the repository for which to list issues. This argument is\n        required, either passed via the CLI, or defined in the configured\n        profile. A ``repo_name`` passed as a CLI argument will override the\n        repo_name defined in the configured profile, if provided.\n\n    profile\n        The name of the profile configuration to use. Defaults to ``github``.\n\n    milestone\n        The number of a GitHub milestone, or a string of either ``*`` or\n        ``none``.\n\n        If a number is passed, it should refer to a milestone by its number\n        field. Use the ``github.get_milestone`` function to obtain a milestone's\n        number.\n\n        If the string ``*`` is passed, issues with any milestone are\n        accepted. If the string ``none`` is passed, issues without milestones\n        are returned.\n\n    state\n        Indicates the state of the issues to return. Can be either ``open``,\n        ``closed``, or ``all``. Default is ``open``.\n\n    assignee\n        Can be the name of a user. Pass in ``none`` (as a string) for issues\n        with no assigned user or ``*`` for issues assigned to any user.\n\n    creator\n        The user that created the issue.\n\n    mentioned\n        A user that's mentioned in the issue.\n\n    labels\n        A string of comma separated label names. For example, ``bug,ui,@high``.\n\n    sort\n        What to sort results by. Can be either ``created``, ``updated``, or\n        ``comments``. Default is ``created``.\n\n    direction\n        The direction of the sort. Can be either ``asc`` or ``desc``. Default\n        is ``desc``.\n\n    since\n        Only issues updated at or after this time are returned. This is a\n        timestamp in ISO 8601 format: ``YYYY-MM-DDTHH:MM:SSZ``.\n\n    output\n        The amount of data returned by each issue. Defaults to ``min``. Change\n        to ``full`` to see all issue output.\n\n    per_page\n        GitHub paginates data in their API calls. Use this value to increase or\n        decrease the number of issues gathered from GitHub, per page. If not set,\n        GitHub defaults are used. Maximum is 100.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion github.get_issues my-github-repo\n    '''\n    org_name = _get_config_value(profile, 'org_name')\n    if repo_name is None:\n        repo_name = _get_config_value(profile, 'repo_name')\n\n    action = '/'.join(['repos', org_name, repo_name])\n    args = {}\n\n    # Build API arguments, as necessary.\n    if milestone:\n        args['milestone'] = milestone\n    if assignee:\n        args['assignee'] = assignee\n    if creator:\n        args['creator'] = creator\n    if mentioned:\n        args['mentioned'] = mentioned\n    if labels:\n        args['labels'] = labels\n    if since:\n        args['since'] = since\n    if per_page:\n        args['per_page'] = per_page\n\n    # Only pass the following API args if they're not the defaults listed.\n    if state and state != 'open':\n        args['state'] = state\n    if sort and sort != 'created':\n        args['sort'] = sort\n    if direction and direction != 'desc':\n        args['direction'] = direction\n\n    ret = {}\n    issues = _query(profile, action=action, command='issues', args=args)\n\n    for issue in issues:\n        # Pull requests are included in the issue list from GitHub\n        # Let's not include those in the return.\n        if issue.get('pull_request'):\n            continue\n        issue_id = issue.get('id')\n        if output == 'full':\n            ret[issue_id] = issue\n        else:\n            ret[issue_id] = _format_issue(issue)\n\n    return ret"
    },
    {
        "instruction": "Send an authorized request to the Google Reader token URL and return the token value. If the request fails, raise an IOError with the message \"Error getting the Reader token. \" This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _getToken(self):\n        \"\"\"\n        Second step in authorizing with Reader.\n        Sends authorized request to Reader token URL and returns a token value.\n\n        Returns token or raises IOError on error.\n        \"\"\"\n        headers = {'Authorization':'GoogleLogin auth=%s' % self.auth_token}\n        req = requests.get(ReaderUrl.API_URL + 'token', headers=headers)\n        if req.status_code != 200:\n            raise IOError(\"Error getting the Reader token.\")\n        return req.content"
    },
    {
        "instruction": "Python: Define a method named \"resolve\" that creates a filter for a specific node of the filter tree. If the filter does not contain 'or', 'and', or 'not', assign the value of the node to a variable named \"value\". If the value is a dictionary, create a new Node object with the related model, value, resource, and related schema, then call the resolve method on the new object. If the filter name contains '__', split the name by '__' and assign the second part of the split to a key in a new dictionary with the value from the \"value\" variable. If the value is a dictionary, call the appropriate method on the \"column\" attribute with the operator and value as keyword arguments. Otherwise, call the appropriate method on the \"column\" attribute with the value as an argument. If the filter contains 'or', return a boolean \"or\" of the resolve method called on each filter in the 'or' list. If the filter contains 'and', return a boolean \"and\" of the resolve method called on each filter in the 'and' list. If the filter contains 'not', return the boolean \"not\" of the resolve method called on the 'not' filter. Please give the corresponding code according to the description. ",
        "response": "def resolve(self):\n        \"\"\"Create filter for a particular node of the filter tree\"\"\"\n        if 'or' not in self.filter_ and 'and' not in self.filter_ and 'not' not in self.filter_:\n            value = self.value\n\n            if isinstance(value, dict):\n                value = Node(self.related_model, value, self.resource, self.related_schema).resolve()\n\n            if '__' in self.filter_.get('name', ''):\n                value = {self.filter_['name'].split('__')[1]: value}\n\n            if isinstance(value, dict):\n                return getattr(self.column, self.operator)(**value)\n            else:\n                return getattr(self.column, self.operator)(value)\n\n        if 'or' in self.filter_:\n            return or_(Node(self.model, filt, self.resource, self.schema).resolve() for filt in self.filter_['or'])\n        if 'and' in self.filter_:\n            return and_(Node(self.model, filt, self.resource, self.schema).resolve() for filt in self.filter_['and'])\n        if 'not' in self.filter_:\n            return not_(Node(self.model, self.filter_['not'], self.resource, self.schema).resolve())"
    },
    {
        "instruction": "In Python, define a method called cssText that returns a string representation of a CSS rule. Check if the CSS style exists and return the selector text and style in a formatted string if it does. Otherwise, return an empty string. Please give the corresponding code according to the description. ",
        "response": "def cssText(self) -> str:\n        \"\"\"Return string representation of this rule.\"\"\"\n        _style = self.style.cssText\n        if _style:\n            return '{0} {{{1}}}'.format(self.selectorText, _style)\n        return ''"
    },
    {
        "instruction": "This is a Python function that normalizes data for InfluxDB's data model. It accepts three parameters: name, columns, and points. It iterates through each point and checks if it is a supported type. If it is None, the point is ignored. If it is a float, it is converted to a float. If it is not a float, it is converted to a string. The function then returns a list of dictionaries that contain the measurement name, parsed tags, and a dictionary of fields with their corresponding points. Please give the corresponding code according to the description. ",
        "response": "def _normalize(self, name, columns, points):\n        \"\"\"Normalize data for the InfluxDB's data model.\"\"\"\n\n        for i, _ in enumerate(points):\n            # Supported type:\n            # https://docs.influxdata.com/influxdb/v1.5/write_protocols/line_protocol_reference/\n            if points[i] is None:\n                # Ignore points with None value\n                del(points[i])\n                del(columns[i])\n                continue\n            try:\n                points[i] = float(points[i])\n            except (TypeError, ValueError):\n                pass\n            else:\n                continue\n            try:\n                points[i] = str(points[i])\n            except (TypeError, ValueError):\n                pass\n            else:\n                continue\n\n        return [{'measurement': name,\n                 'tags': self.parse_tags(self.tags),\n                 'fields': dict(zip(columns, points))}]"
    },
    {
        "instruction": "Decode the response of each agent given by a bulk function. If the response has a \"status\" key and its value is 201, create a dictionary with \"id\" and \"message\" keys and append it to the response list. If the response has a \"status\" key but its value is not 201, create a dictionary with \"error\" key and its value obtained from the \"_get_error_from_status\" function. If the \"id\" key is present in the response, add it to the dictionary. If the response does not have a \"status\" key, append it to the response list. Finally, return the decoded response as a list of dictionaries. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _decode_response_bulk(response_bulk):\n    \"\"\"Decode the response of each agent given by a bulk function.\n\n    :param list response_bulk: list of dictionnary which represents\n    the response for an agent.\n\n    :return: decoded response.\n    :rtype: list of dict.\n    \"\"\"\n    resp = []\n    for response in response_bulk:\n      if (\"status\" in response) and (response.get(\"status\") == 201):\n        agent = {\"id\": response[\"id\"],\n                 \"message\": response[\"message\"]}\n        resp.append(agent)\n      elif \"status\" in response:\n        status_code = response[\"status\"]\n        message = response[\"message\"]\n        agent = {\"error\": CraftAIClient._get_error_from_status(status_code, message)}\n        try:\n          agent[\"id\"] = response[\"id\"]\n        except KeyError:\n          pass\n        resp.append(agent)\n\n      else:\n        resp.append(response)\n\n    return resp"
    },
    {
        "instruction": "This Python function takes a dictionary of values and applies the to_auto function to each key-value pair. The resulting dictionary is returned. Please give the corresponding code according to the description. ",
        "response": "def to_auto_dict(values, source='auto', convert_to_human=True):\n    '''\n    Pass an entire dictionary to to_auto\n\n    .. note::\n        The key will be passed as the name\n    '''\n    for name, value in values.items():\n        values[name] = to_auto(name, value, source, convert_to_human)\n\n    return values"
    },
    {
        "instruction": "Given a string of text and an optional prefix, copy the text to a label. Replace any unsupported characters with an underscore. Return the label. (Python)Please give the corresponding code according to the description. ",
        "response": "def CopyTextToLabel(cls, text, prefix=''):\n    \"\"\"Copies a string to a label.\n\n    A label only supports a limited set of characters therefore\n    unsupported characters are replaced with an underscore.\n\n    Args:\n      text (str): label text.\n      prefix (Optional[str]): label prefix.\n\n    Returns:\n      str: label.\n    \"\"\"\n    text = '{0:s}{1:s}'.format(prefix, text)\n    return cls._INVALID_LABEL_CHARACTERS_REGEX.sub('_', text)"
    },
    {
        "instruction": "In Python, given a URI, read the capability list to find the resource list. If the capability list is not found, raise a `ClientError`. If the capability list is found but does not describe a resource list, raise a `ClientFatalError`. Return the URL of the resource list by joining the URI and the resource list URI. Log the reading of the capability list. Please give the corresponding code according to the description. ",
        "response": "def find_resource_list_from_capability_list(self, uri):\n        \"\"\"Read capability list to find resource list.\n\n        Raises a ClientError in cases where the client might look for a\n        capability list in another location, but a ClientFatalError if\n        a capability list is found but there is some problem using it.\n        \"\"\"\n        self.logger.info(\"Reading capability list %s\" % (uri))\n        try:\n            cl = CapabilityList()\n            cl.read(uri=uri)\n        except Exception as e:\n            raise ClientError(\n                \"Can't read capability list from %s (%s)\" %\n                (uri, str(e)))\n        if (not cl.has_capability('resourcelist')):\n            raise ClientFatalError(\n                \"Capability list %s does not describe a resource list\" % (uri))\n        rluri = cl.capability_info('resourcelist').uri\n        return(urljoin(uri, rluri))"
    },
    {
        "instruction": "This Python function retrieves the name of an action based on the number of items and a boolean flag indicating if the action took place in the past. If the `items` parameter is not provided, it is assumed that the function is called for a single item. The function then uses the `action_present` or `action_past` attribute of the object to determine the action name based on the count of items and the `past` flag. The resulting action name is returned. Please give the corresponding code according to the description. ",
        "response": "def _get_action_name(self, items=None, past=False):\n        \"\"\"Retreive action name based on the number of items and `past` flag.\n\n        :param items:\n\n            A list or tuple of items (or container with a __len__ method) to\n            count the number of concerned items for which this method is\n            called.\n            When this method is called for a single item (by the BatchAction\n            itself), this parameter can be omitted and the number of items\n            will be considered as \"one\".\n            If we want to evaluate to \"zero\" this parameter must not be omitted\n            (and should be an empty container).\n\n        :param past:\n\n            Boolean flag indicating if the action took place in the past.\n            By default a present action is considered.\n        \"\"\"\n        action_type = \"past\" if past else \"present\"\n        if items is None:\n            # Called without items parameter (by a single instance.)\n            count = 1\n        else:\n            count = len(items)\n\n        action_attr = getattr(self, \"action_%s\" % action_type)(count)\n        if isinstance(action_attr, (six.string_types, Promise)):\n            action = action_attr\n        else:\n            toggle_selection = getattr(self, \"current_%s_action\" % action_type)\n            action = action_attr[toggle_selection]\n\n        return action"
    },
    {
        "instruction": "In Python, this function processes an operation stream, which contains various types of operations such as messages, actions, sync, viewlock, and savedchapter. It iterates through the stream and performs different actions based on the type of operation. For example, if the operation is an action, it updates a counter to keep track of the number of times a player has performed that action. If the operation is a chat message, it parses the message and yields it. The function can also filter the types of operations to yield based on the op_types parameter. Please give the corresponding code according to the description. ",
        "response": "def operations(self, op_types=None):\n        \"\"\"Process operation stream.\"\"\"\n        if not op_types:\n            op_types = ['message', 'action', 'sync', 'viewlock', 'savedchapter']\n        while self._handle.tell() < self._eof:\n            current_time = mgz.util.convert_to_timestamp(self._time / 1000)\n            try:\n                operation = mgz.body.operation.parse_stream(self._handle)\n            except (ConstructError, ValueError):\n                raise MgzError('failed to parse body operation')\n            if operation.type == 'action':\n                if operation.action.type in ACTIONS_WITH_PLAYER_ID:\n                    counter = self._actions_by_player[operation.action.player_id]\n                    counter.update([operation.action.type])\n                else:\n                    self._actions_without_player.update([operation.action.type])\n            if operation.type == 'action' and isinstance(operation.action.type, int):\n                print(operation.action)\n            if operation.type == 'sync':\n                self._time += operation.time_increment\n            if operation.type == 'action' and operation.action.type == 'postgame':\n                self._postgame = operation\n            if operation.type == 'action':\n                action = Action(operation, current_time)\n                self._parse_action(action, current_time)\n            if operation.type == 'savedchapter':\n                # fix: Don't load messages we already saw in header or prev saved chapters\n                self._parse_lobby_chat(operation.lobby.messages, 'save', current_time)\n            if operation.type == 'viewlock':\n                if operation.type in op_types:\n                    yield Viewlock(operation)\n            elif operation.type == 'action' and operation.action.type != 'postgame':\n                if operation.type in op_types:\n                    yield Action(operation, current_time)\n            elif ((operation.type == 'message' or operation.type == 'embedded')\n                  and operation.subtype == 'chat'):\n                chat = ChatMessage(operation.data.text, current_time,\n                                   self._players(), self._diplomacy['type'], 'game')\n                self._parse_chat(chat)\n                if operation.type in op_types:\n                    yield chat"
    },
    {
        "instruction": "This Python function deletes specified keys from either the public or secret keyrings. The function takes in a single key ID or a list of multiple IDs and a boolean flag indicating whether to delete secret keys. The function executes a command that removes the specified keys using the GnuPG command-line tool. The function returns a `DeleteResult` object. Please give the corresponding code according to the description. ",
        "response": "def delete_keys(self, keys, secret=False):\n        '''\n        Remove keys from the public or secret keyrings.\n\n        :param keys: Single key ID or list of mutiple IDs\n        :param secret: Delete secret keys\n        :rtype: DeleteResult\n        '''\n        return self.execute(\n            DeleteResult(),\n            ['--batch', '--yes', '--delete-secret-key' if secret else '--delete-key'] + list(make_list(keys))\n        )"
    },
    {
        "instruction": "This function takes in a text string and encodes it into a sequence of esc-pos code page change instructions and character declarations. It first tries to decode the input text string as utf-8 and if it fails, it tries to decode it as utf-16. The encoded string is then checked for extra characters and double spaces, which are removed to prevent printing alignment issues. The final encoded string is then printed as Utf8 encoded alpha-numeric text. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def text(self,txt):\n        \"\"\" Print Utf8 encoded alpha-numeric text \"\"\"\n        if not txt:\n            return\n        try:\n            txt = txt.decode('utf-8')\n        except:\n            try:\n                txt = txt.decode('utf-16')\n            except:\n                pass\n\n        self.extra_chars = 0\n        \n        def encode_char(char):  \n            \"\"\" \n            Encodes a single utf-8 character into a sequence of \n            esc-pos code page change instructions and character declarations \n            \"\"\" \n            char_utf8 = char.encode('utf-8')\n            encoded  = ''\n            encoding = self.encoding # we reuse the last encoding to prevent code page switches at every character\n            encodings = {\n                    # TODO use ordering to prevent useless switches\n                    # TODO Support other encodings not natively supported by python ( Thai, Khazakh, Kanjis )\n                    'cp437': TXT_ENC_PC437,\n                    'cp850': TXT_ENC_PC850,\n                    'cp852': TXT_ENC_PC852,\n                    'cp857': TXT_ENC_PC857,\n                    'cp858': TXT_ENC_PC858,\n                    'cp860': TXT_ENC_PC860,\n                    'cp863': TXT_ENC_PC863,\n                    'cp865': TXT_ENC_PC865,\n                    'cp866': TXT_ENC_PC866,\n                    'cp862': TXT_ENC_PC862,\n                    'cp720': TXT_ENC_PC720,\n                    'cp936': TXT_ENC_PC936,\n                    'iso8859_2': TXT_ENC_8859_2,\n                    'iso8859_7': TXT_ENC_8859_7,\n                    'iso8859_9': TXT_ENC_8859_9,\n                    'cp1254'   : TXT_ENC_WPC1254,\n                    'cp1255'   : TXT_ENC_WPC1255,\n                    'cp1256'   : TXT_ENC_WPC1256,\n                    'cp1257'   : TXT_ENC_WPC1257,\n                    'cp1258'   : TXT_ENC_WPC1258,\n                    'katakana' : TXT_ENC_KATAKANA,\n            }\n            remaining = copy.copy(encodings)\n\n            if not encoding :\n                encoding = 'cp437'\n\n            while True: # Trying all encoding until one succeeds\n                try:\n                    if encoding == 'katakana': # Japanese characters\n                        if jcconv:\n                            # try to convert japanese text to a half-katakanas \n                            kata = jcconv.kata2half(jcconv.hira2kata(char_utf8))\n                            if kata != char_utf8:\n                                self.extra_chars += len(kata.decode('utf-8')) - 1\n                                # the conversion may result in multiple characters\n                                return encode_str(kata.decode('utf-8')) \n                        else:\n                             kata = char_utf8\n                        \n                        if kata in TXT_ENC_KATAKANA_MAP:\n                            encoded = TXT_ENC_KATAKANA_MAP[kata]\n                            break\n                        else: \n                            raise ValueError()\n                    else:\n                        encoded = char.encode(encoding)\n                        break\n\n                except ValueError: #the encoding failed, select another one and retry\n                    if encoding in remaining:\n                        del remaining[encoding]\n                    if len(remaining) >= 1:\n                        encoding = remaining.items()[0][0]\n                    else:\n                        encoding = 'cp437'\n                        encoded  = '\\xb1'    # could not encode, output error character\n                        break;\n\n            if encoding != self.encoding:\n                # if the encoding changed, remember it and prefix the character with\n                # the esc-pos encoding change sequence\n                self.encoding = encoding\n                encoded = encodings[encoding] + encoded\n\n            return encoded\n        \n        def encode_str(txt):\n            buffer = ''\n            for c in txt:\n                buffer += encode_char(c)\n            return buffer\n\n        txt = encode_str(txt)\n\n        # if the utf-8 -> codepage conversion inserted extra characters, \n        # remove double spaces to try to restore the original string length\n        # and prevent printing alignment issues\n        while self.extra_chars > 0: \n            dspace = txt.find('  ')\n            if dspace > 0:\n                txt = txt[:dspace] + txt[dspace+1:]\n                self.extra_chars -= 1\n            else:\n                break\n\n        self._raw(txt)"
    },
    {
        "instruction": "This Python function deletes a setting from an object's storage. It first checks if the key exists in the write cache, and if so, it deletes the key and its corresponding value. Next, it checks if the key exists in the cache, and if so, it deletes it. Finally, it flushes the external cache. Please give the corresponding code according to the description. ",
        "response": "def delete(self, key: str) -> None:\n        \"\"\"\n        Deletes a setting from this object's storage.\n        \n        The write to the database is performed immediately and the cache in the cache backend is flushed.\n        The cache within this object will be updated correctly.\n        \"\"\"\n        if key in self._write_cache():\n            self._write_cache()[key].delete()\n            del self._write_cache()[key]\n\n        if key in self._cache():\n            del self._cache()[key]\n\n        self._flush_external_cache()"
    },
    {
        "instruction": "Define a function named \"log_every_n\" that takes in four parameters: \"n\" which is an integer representing the number of calls before a message is logged, \"level\" which is a string representing the logging level, \"message\" which is a string representing the message to be logged, and \"*args\" which is a variable-length argument list. The function should call another function named \"_log_every_n_to_logger\" passing in the same parameters as \"log_every_n\" with an additional \"None\" parameter. The function should return the result of this call. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def log_every_n(n, level, message, *args):  # pylint: disable=invalid-name\n  \"\"\"Logs a message every n calls. See _log_every_n_to_logger.\"\"\"\n  return _log_every_n_to_logger(n, None, level, message, *args)"
    },
    {
        "instruction": "In Python, this function `get_socket` returns a connected socket from a pool. It should be used with a `with` statement and can raise `ConnectionFailure` or `OperationFailure`. The socket is logged in or out as needed to match `all_credentials` using the correct authentication mechanism for the server's wire protocol version. If `checkout` is `False`, the socket is returned to the pool after use. Please give the corresponding code according to the description. ",
        "response": "def get_socket(self, all_credentials, checkout=False):\n        \"\"\"Get a socket from the pool. Use with a \"with\" statement.\n\n        Returns a :class:`SocketInfo` object wrapping a connected\n        :class:`socket.socket`.\n\n        This method should always be used in a with-statement::\n\n            with pool.get_socket(credentials, checkout) as socket_info:\n                socket_info.send_message(msg)\n                data = socket_info.receive_message(op_code, request_id)\n\n        The socket is logged in or out as needed to match ``all_credentials``\n        using the correct authentication mechanism for the server's wire\n        protocol version.\n\n        Can raise ConnectionFailure or OperationFailure.\n\n        :Parameters:\n          - `all_credentials`: dict, maps auth source to MongoCredential.\n          - `checkout` (optional): keep socket checked out.\n        \"\"\"\n        # First get a socket, then attempt authentication. Simplifies\n        # semaphore management in the face of network errors during auth.\n        sock_info = self._get_socket_no_auth()\n        try:\n            sock_info.check_auth(all_credentials)\n            yield sock_info\n        except:\n            # Exception in caller. Decrement semaphore.\n            self.return_socket(sock_info)\n            raise\n        else:\n            if not checkout:\n                self.return_socket(sock_info)"
    },
    {
        "instruction": "In Python, create a function that takes in a key and a value, and returns a dictionary with the 'place' key mapped to the value associated with the 'a' key in the value parameter, the 'publisher' key mapped to the value associated with the 'b' key in the value parameter, and the 'date' key mapped to the result of passing the value associated with the 'c' key in the value parameter through the 'normalize_date_aggressively' function. This function populates the 'imprints' key. Please give the corresponding code according to the description. ",
        "response": "def imprints(self, key, value):\n    \"\"\"Populate the ``imprints`` key.\"\"\"\n    return {\n        'place': value.get('a'),\n        'publisher': value.get('b'),\n        'date': normalize_date_aggressively(value.get('c')),\n    }"
    },
    {
        "instruction": "In Python, define a function that predicts the effect of a goal. The function takes an order vector compatible with self. Mfeats as an argument, and returns the same order if it is a list, tuple, or pandas. Series, otherwise it returns a tuple. The function uses the input order to predict the effect of the goal by calling the predict_y method of the fmodel attribute of the imodel attribute of the function. The result is then passed through the _post_y method of the function with the input order as an argument, and the output of this method is returned. Please give the corresponding code according to the description. ",
        "response": "def predict_effect(self, order, **kwargs):\n        \"\"\"Predict the effect of a goal.\n\n        :arg order:  an order vector compatible with self.Mfeats\n        :rtype:  same as order (if list, tuple, or pandas.Series, else tuple)\n        \"\"\"\n        y = self.imodel.fmodel.predict_y(np.array(self._pre_x(order)), **kwargs)\n        return self._post_y(y, order)"
    },
    {
        "instruction": "Given an authentication object and a username, this Python function retrieves the user with the specified username from a Gogs server. It returns a `GogsUser` object representing the user. If there is an error communicating with the server, a `NetworkFailure` is raised. If the request cannot be serviced, an `ApiFailure` is raised. Please give the corresponding code according to the description. ",
        "response": "def get_user(self, auth, username):\n        \"\"\"\n        Returns a representing the user with username ``username``.\n\n        :param auth.Authentication auth: authentication object, can be ``None``\n        :param str username: username of user to get\n        :return: the retrieved user\n        :rtype: GogsUser\n        :raises NetworkFailure: if there is an error communicating with the server\n        :raises ApiFailure: if the request cannot be serviced\n        \"\"\"\n        path = \"/users/{}\".format(username)\n        response = self.get(path, auth=auth)\n        return GogsUser.from_json(response.json())"
    },
    {
        "instruction": "This Python function populates the \"502\" MARC field by extracting values from the input dictionary. It also populates the \"500\" MARC field by appending a dictionary to it. The function first defines a nested function `_get_b_value` to extract the degree type from the input dictionary and map it to a corresponding value. Then, it extracts the defense date from the input dictionary and appends it to the \"500\" MARC field. Finally, it populates the \"502\" MARC field with the degree type, institution name, and date from the input dictionary. Please give the corresponding code according to the description. ",
        "response": "def thesis_info2marc(self, key, value):\n    \"\"\"Populate the ``502`` MARC field.\n\n    Also populates the ``500`` MARC field through side effects.\n    \"\"\"\n    def _get_b_value(value):\n        DEGREE_TYPES_MAP = {\n            'bachelor': 'Bachelor',\n            'diploma': 'Diploma',\n            'habilitation': 'Habilitation',\n            'laurea': 'Laurea',\n            'master': 'Master',\n            'other': 'Thesis',\n            'phd': 'PhD',\n        }\n\n        degree_type = value.get('degree_type')\n        if degree_type:\n            return DEGREE_TYPES_MAP.get(degree_type)\n\n    result_500 = self.get('500', [])\n    result_502 = self.get('502', {})\n\n    if value.get('defense_date'):\n        result_500.append({\n            'a': u'Presented on {}'.format(value.get('defense_date')),\n        })\n\n    result_502 = {\n        'b': _get_b_value(value),\n        'c': [el['name'] for el in force_list(value.get('institutions'))],\n        'd': value.get('date'),\n    }\n\n    self['500'] = result_500\n    return result_502"
    },
    {
        "instruction": "This Python function extracts messages from Jinja templates using Babel. It takes in a file-like object, a list of keywords to recognize as translation functions, a list of translator tags to search for and include in the results, and a dictionary of additional options. It returns an iterator over ``(lineno, funcname, message, comments)`` tuples. It also adds basic support for translation comments. If `comment_tags` is set to a list of keywords for extraction, the extractor will try to find the best preceding comment that begins with one of the keywords. Please give the corresponding code according to the description. ",
        "response": "def babel_extract(fileobj, keywords, comment_tags, options):\n    \"\"\"Babel extraction method for Jinja templates.\n\n    .. versionchanged:: 2.3\n       Basic support for translation comments was added.  If `comment_tags`\n       is now set to a list of keywords for extraction, the extractor will\n       try to find the best preceeding comment that begins with one of the\n       keywords.  For best results, make sure to not have more than one\n       gettext call in one line of code and the matching comment in the\n       same line or the line before.\n\n    :param fileobj: the file-like object the messages should be extracted from\n    :param keywords: a list of keywords (i.e. function names) that should be\n                     recognized as translation functions\n    :param comment_tags: a list of translator tags to search for and include\n                         in the results.\n    :param options: a dictionary of additional options (optional)\n    :return: an iterator over ``(lineno, funcname, message, comments)`` tuples.\n             (comments will be empty currently)\n    \"\"\"\n    extensions = set()\n    for extension in options.get('extensions', '').split(','):\n        extension = extension.strip()\n        if not extension:\n            continue\n        extensions.add(import_string(extension))\n    if InternationalizationExtension not in extensions:\n        extensions.add(InternationalizationExtension)\n\n    environment = get_spontaneous_environment(\n        options.get('block_start_string', BLOCK_START_STRING),\n        options.get('block_end_string', BLOCK_END_STRING),\n        options.get('variable_start_string', VARIABLE_START_STRING),\n        options.get('variable_end_string', VARIABLE_END_STRING),\n        options.get('comment_start_string', COMMENT_START_STRING),\n        options.get('comment_end_string', COMMENT_END_STRING),\n        options.get('line_statement_prefix') or LINE_STATEMENT_PREFIX,\n        options.get('line_comment_prefix') or LINE_COMMENT_PREFIX,\n        str(options.get('trim_blocks', TRIM_BLOCKS)).lower() in \\\n            ('1', 'on', 'yes', 'true'),\n        NEWLINE_SEQUENCE, frozenset(extensions),\n        # fill with defaults so that environments are shared\n        # with other spontaneus environments.  The rest of the\n        # arguments are optimizer, undefined, finalize, autoescape,\n        # loader, cache size, auto reloading setting and the\n        # bytecode cache\n        True, Undefined, None, False, None, 0, False, None\n    )\n\n    source = fileobj.read().decode(options.get('encoding', 'utf-8'))\n    try:\n        node = environment.parse(source)\n        tokens = list(environment.lex(environment.preprocess(source)))\n    except TemplateSyntaxError as e:\n        # skip templates with syntax errors\n        return\n\n    finder = _CommentFinder(tokens, comment_tags)\n    for lineno, func, message in extract_from_ast(node, keywords):\n        yield lineno, func, message, finder.find_comments(lineno)"
    },
    {
        "instruction": "This Python function sets values in a configuration file. If the `aadb` parameter is provided, it sets the asset allocation database path in the configuration file. If the `cur` parameter is provided, it sets the default currency in the configuration file. If either parameter is set, the function prints a message indicating the change that was made, and sets the `edited` flag to `True`. If any changes were made, the function prints a message indicating that the changes were saved. If no changes were made, the function prints a message indicating that no changes were made and suggests using the `--help` parameter for more information. Please give the corresponding code according to the description. ",
        "response": "def set(aadb, cur):\n    \"\"\" Sets the values in the config file \"\"\"\n    cfg = Config()\n    edited = False\n\n    if aadb:\n        cfg.set(ConfigKeys.asset_allocation_database_path, aadb)\n        print(f\"The database has been set to {aadb}.\")\n        edited = True\n    \n    if cur:\n        cfg.set(ConfigKeys.default_currency, cur)\n        edited = True\n\n    if edited:\n        print(f\"Changes saved.\")\n    else:\n        print(f\"No changes were made.\")\n        print(f\"Use --help parameter for more information.\")"
    },
    {
        "instruction": "Python: Define a function named \"get_generator\" that takes in a tweet object or dictionary as input. The function returns a dictionary with keys 'link' and 'name', which are the web link and the name of the application that generated the tweet. If the tweet is in the original format, the function uses a GeneratorHTMLParser to extract the generator link and name from the tweet's source. Otherwise, it retrieves the generator link and display name from the tweet's generator dictionary. Please give the corresponding code according to the description. ",
        "response": "def get_generator(tweet):\n    \"\"\"\n    Get information about the application that generated the Tweet\n\n    Args:\n        tweet (Tweet): A Tweet object (or a dictionary)\n\n    Returns:\n        dict: keys are 'link' and 'name', the web link and the name\n        of the application\n\n    Example:\n        >>> from tweet_parser.getter_methods.tweet_generator import get_generator\n        >>> original_format_dict = {\n        ...             \"created_at\": \"Wed May 24 20:17:19 +0000 2017\",\n        ...             \"source\": '<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>'\n        ...            }\n        >>> get_generator(original_format_dict)\n        {'link': 'http://twitter.com', 'name': 'Twitter Web Client'}\n\n        >>> activity_streams_format_dict = {\n        ...             \"postedTime\": \"2017-05-24T20:17:19.000Z\",\n        ...             \"generator\":\n        ...              {\"link\": \"http://twitter.com\",\n        ...               \"displayName\": \"Twitter Web Client\"}\n        ...             }\n        >>> get_generator(activity_streams_format_dict)\n        {'link': 'http://twitter.com', 'name': 'Twitter Web Client'}\n    \"\"\"\n    if is_original_format(tweet):\n        if sys.version_info[0] == 3 and sys.version_info[1] >= 4:\n            parser = GeneratorHTMLParser(convert_charrefs=True)\n        else:\n            parser = GeneratorHTMLParser()\n        parser.feed(tweet[\"source\"])\n        return {\"link\": parser.generator_link,\n                \"name\": parser.generator_name}\n    else:\n        return {\"link\": tweet[\"generator\"][\"link\"],\n                \"name\": tweet[\"generator\"][\"displayName\"]}"
    },
    {
        "instruction": "In Python, define a private method called `_update_session_expiration` that updates a Redis item to expire later since it has been interacted with recently. The method should check if `session_time` is set in `oz. settings`, and if so, it should call the `expire` method on the Redis instance with the session key and the session time as arguments. Please give the corresponding code according to the description. ",
        "response": "def _update_session_expiration(self):\n        \"\"\"\n        Updates a redis item to expire later since it has been interacted with\n        recently\n        \"\"\"\n\n        session_time = oz.settings[\"session_time\"]\n\n        if session_time:\n            self.redis().expire(self._session_key, session_time)"
    },
    {
        "instruction": "In Python, define a method called \"image\" that returns an image of the structure of a compound. Use the requests library to get the image from a URL specified by the \"image_url\" attribute of the object. Ensure that the request is successful by calling \"raise_for_status()\". Finally, return the binary image data by reading the raw response content. Please give the corresponding code according to the description. ",
        "response": "def image(self):\n        '''Return an image of the structure of the compound'''\n        r = requests.get(self.image_url, stream=True)\n        r.raise_for_status()\n        return r.raw.read()"
    },
    {
        "instruction": "In Python, create a function called \"get_image_uri\" that takes in three parameters: \"region_name\" (a string), \"repo_name\" (a string), and \"repo_version\" (an integer with a default value of 1). The function should return a string that represents the URI of an algorithm image in the given AWS region, using the provided repository name and version. The URI should be constructed by concatenating the result of calling the \"registry\" function with the \"region_name\" and \"repo_name\" parameters, with the \"repo\" string (constructed by concatenating \"repo_name\" and \"repo_version\") appended to the end. Please give the corresponding code according to the description. ",
        "response": "def get_image_uri(region_name, repo_name, repo_version=1):\n    \"\"\"Return algorithm image URI for the given AWS region, repository name, and repository version\"\"\"\n    repo = '{}:{}'.format(repo_name, repo_version)\n    return '{}/{}'.format(registry(region_name, repo_name), repo)"
    },
    {
        "instruction": "In Python, this function `get_attributes` returns a dictionary of attributes for a form. It includes the form method, style, tag, and error settings, as well as the label and field classes, and the media. If using the Bootstrap 4 template pack, it will also add checkbox offsets. It then adds any additional attributes such as the form action, ID, class, and error titles. Finally, it adds any other attributes that were not already included in the dictionary. Please give the corresponding code according to the description. ",
        "response": "def get_attributes(self, template_pack=TEMPLATE_PACK):\n        \"\"\"\n        Used by crispy_forms_tags to get helper attributes\n        \"\"\"\n        items = {\n            'form_method': self.form_method.strip(),\n            'form_tag': self.form_tag,\n            'form_style': self.form_style.strip(),\n            'form_show_errors': self.form_show_errors,\n            'help_text_inline': self.help_text_inline,\n            'error_text_inline': self.error_text_inline,\n            'html5_required': self.html5_required,\n            'form_show_labels': self.form_show_labels,\n            'disable_csrf': self.disable_csrf,\n            'label_class': self.label_class,\n            'field_class': self.field_class,\n            'include_media': self.include_media\n        }\n        \n        if template_pack == 'bootstrap4':\n            bootstrap_size_match = re.findall('col-(xl|lg|md|sm)-(\\d+)', self.label_class)\n            if bootstrap_size_match:\n                if template_pack == 'bootstrap4':\n                    offset_pattern = 'offset-%s-%s'\n                else:\n                    offset_pattern = 'col-%s-offset-%s'\n                items['bootstrap_checkbox_offsets'] = [offset_pattern % m for m in bootstrap_size_match]\n        else:\n            bootstrap_size_match = re.findall('col-(lg|md|sm|xs)-(\\d+)', self.label_class)\n            if bootstrap_size_match:\n                if template_pack == 'bootstrap4':\n                    offset_pattern = 'offset-%s-%s'\n                else:\n                    offset_pattern = 'col-%s-offset-%s'\n                items['bootstrap_checkbox_offsets'] = [offset_pattern % m for m in bootstrap_size_match]\n\n        items['attrs'] = {}\n        if self.attrs:\n            items['attrs'] = self.attrs.copy()\n        if self.form_action:\n            items['attrs']['action'] = self.form_action.strip()\n        if self.form_id:\n            items['attrs']['id'] = self.form_id.strip()\n        if self.form_class:\n            # uni_form TEMPLATE PACK has a uniForm class by default\n            if template_pack == 'uni_form':\n                items['attrs']['class'] = \"uniForm %s\" % self.form_class.strip()\n            else:\n                items['attrs']['class'] = self.form_class.strip()\n        else:\n            if template_pack == 'uni_form':\n                items['attrs']['class'] = self.attrs.get('class', '') + \" uniForm\"\n        if self.form_group_wrapper_class:\n            items['attrs']['form_group_wrapper_class'] = self.form_group_wrapper_class\n\n        items['flat_attrs'] = flatatt(items['attrs'])\n\n        if self.inputs:\n            items['inputs'] = self.inputs\n        if self.form_error_title:\n            items['form_error_title'] = self.form_error_title.strip()\n        if self.formset_error_title:\n            items['formset_error_title'] = self.formset_error_title.strip()\n\n        for attribute_name, value in self.__dict__.items():\n            if attribute_name not in items and attribute_name not in ['layout', 'inputs'] and not attribute_name.startswith('_'):\n                items[attribute_name] = value\n\n        return items"
    },
    {
        "instruction": "In Python, create a class method that takes in a byte string \"UserComment\" value from exif and converts it to a Unicode string. The method should first check if the byte string conforms to the EXIF specification and raise a ValueError if it does not. Then, it should extract the prefix and body of the byte string and determine the appropriate encoding based on the prefix. Finally, it should decode the body using the determined encoding and return the resulting Unicode string. If the encoding is unsupported, raise a ValueError. Please give the corresponding code according to the description. ",
        "response": "def load(cls, data):\n        \"\"\"\n        Convert \"UserComment\" value in exif format to str.\n\n        :param bytes data: \"UserComment\" value from exif\n        :return: u\"foobar\"\n        :rtype: str(Unicode)\n        :raises: ValueError if the data does not conform to the EXIF specification,\n        or the encoding is unsupported.\n        \"\"\"\n        if len(data) < cls._PREFIX_SIZE:\n            raise ValueError('not enough data to decode UserComment')\n        prefix = data[:cls._PREFIX_SIZE]\n        body = data[cls._PREFIX_SIZE:]\n        if prefix == cls._UNDEFINED_PREFIX:\n            raise ValueError('prefix is UNDEFINED, unable to decode UserComment')\n        try:\n            encoding = {\n                cls._ASCII_PREFIX: cls.ASCII, cls._JIS_PREFIX: cls._JIS, cls._UNICODE_PREFIX: cls._UNICODE,\n            }[prefix]\n        except KeyError:\n            raise ValueError('unable to determine appropriate encoding')\n        return body.decode(encoding, errors='replace')"
    },
    {
        "instruction": "Create a Python generator function that loads one mdtraj trajectory at a time and yields it. The function uses the `preload_tops` function to preload the topology files and then iterates through each row in the metadata dataframe. For each row, the function loads the trajectory using `md. iterload`, joins it using `md. join`, and yields the trajectory along with its index. The `stride` parameter can be used to skip frames in the trajectory. Please give the corresponding code according to the description. ",
        "response": "def itertrajs(meta, stride=1):\n    \"\"\"Load one mdtraj trajectory at a time and yield it.\n\n    MDTraj does striding badly. It reads in the whole trajectory and\n    then performs a stride. We join(iterload) to conserve memory.\n    \"\"\"\n\n    tops = preload_tops(meta)\n    for i, row in meta.iterrows():\n        yield i, md.join(md.iterload(row['traj_fn'],\n                                     top=tops[row['top_fn']],\n                                     stride=stride),\n                         discard_overlapping_frames=False,\n                         check_topology=False)"
    },
    {
        "instruction": "In Python, define a function that reads data from a transport and tries to parse it as a protobuf message. If the parsing is successful, return a protobuf object. If there is no data available to be read, return None. If the parsing fails or there is no data, return None. Please give the corresponding code according to the description. ",
        "response": "def read(self):\n        \"\"\"\n        If there is data available to be read from the transport, reads the data and tries to parse it as a protobuf message.  If the parsing succeeds, return a protobuf object.\n        Otherwise, returns None.\n        \"\"\"\n        if not self.ready_to_read():\n            return None\n\n        data = self._read()\n        if data is None:\n            return None\n\n        return self._parse_message(data)"
    },
    {
        "instruction": "In Python, given a class object with a `_future` attribute and a `seek()` method, create a method `rev_after()` that takes an integer `rev` as input and returns the earliest future revision on which the value will change. The method should first call `seek()` with the `rev` argument, then check if `_future` is not empty. If it is not empty, return the first element of the last tuple in `_future`. Please give the corresponding code according to the description. ",
        "response": "def rev_after(self, rev: int) -> int:\n        \"\"\"Return the earliest future rev on which the value will change.\"\"\"\n        self.seek(rev)\n        if self._future:\n            return self._future[-1][0]"
    },
    {
        "instruction": "Plot the voltages in the MV grid on a grid topology plot. The voltage values should be available from the power flow analysis as `pfa_v_mag_pu`. If the `pypsa` representation of the MV grid is available, call the function `edisgo. tools. plots. mv_grid_topology` with the following parameters: `pypsa` object, `config` object, `timestep`, `node_color` set to 'voltage', `filename`, `grid_district_geom`, `background_map`, `voltage` set to the voltage values obtained from power flow analysis, `limits_cb_nodes`, `xlim`, `ylim`, and `title`. If `pypsa` is not available, log a warning message. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def plot_mv_voltages(self, **kwargs):\n        \"\"\"\n        Plots voltages in MV grid on grid topology plot.\n\n        For more information see :func:`edisgo.tools.plots.mv_grid_topology`.\n\n        \"\"\"\n        if self.network.pypsa is not None:\n            try:\n                v_res = self.network.results.v_res()\n            except:\n                logging.warning(\"Voltages `pfa_v_mag_pu` from power flow \"\n                                \"analysis must be available to plot them.\")\n                return\n            plots.mv_grid_topology(\n                self.network.pypsa, self.network.config,\n                timestep=kwargs.get('timestep', None),\n                node_color='voltage',\n                filename=kwargs.get('filename', None),\n                grid_district_geom=kwargs.get('grid_district_geom', True),\n                background_map=kwargs.get('background_map', True),\n                voltage=v_res,\n                limits_cb_nodes=kwargs.get('limits_cb_nodes', None),\n                xlim=kwargs.get('xlim', None), ylim=kwargs.get('ylim', None),\n                title=kwargs.get('title', ''))\n        else:\n            logging.warning(\"pypsa representation of MV grid needed to \"\n                            \"plot voltages.\")"
    },
    {
        "instruction": "In Python, the function has_aligned_reads() checks if the aligned BAM file has any reads in the specified region. The region can be a chromosome string, a tuple region or a file of regions. If a region is specified, it is parsed and converted into a list of regions. The function then uses pysam to open the BAM file and iterate over its contents. If a region is specified, it checks if any reads overlap with the region. If no region is specified, it checks if any reads are present in the BAM file. The function returns True if reads are found, and False otherwise. Please give the corresponding code according to the description. ",
        "response": "def has_aligned_reads(align_bam, region=None):\n    \"\"\"Check if the aligned BAM file has any reads in the region.\n\n    region can be a chromosome string (\"chr22\"),\n    a tuple region ((\"chr22\", 1, 100)) or a file of regions.\n    \"\"\"\n    import pybedtools\n    if region is not None:\n        if isinstance(region, six.string_types) and os.path.isfile(region):\n            regions = [tuple(r) for r in pybedtools.BedTool(region)]\n        else:\n            regions = [region]\n    with pysam.Samfile(align_bam, \"rb\") as cur_bam:\n        if region is not None:\n            for region in regions:\n                if isinstance(region, six.string_types):\n                    for item in cur_bam.fetch(str(region)):\n                        return True\n                else:\n                    for item in cur_bam.fetch(str(region[0]), int(region[1]), int(region[2])):\n                        return True\n        else:\n            for item in cur_bam:\n                if not item.is_unmapped:\n                    return True\n    return False"
    },
    {
        "instruction": "This Python function generates a list of prime numbers between start and end (inclusive). It uses the Sieve of Eratosthenes algorithm to find the primes. The function initializes a sieve of size (end  2 - 1) if end is even, or (end  2) if end is odd. It then iterates over the sieve, marking non-prime numbers as False. Finally, it returns a sublist of the primes found that are greater than or equal to start. Please give the corresponding code according to the description. ",
        "response": "def primes(start: int = 1, end: int = 999) -> List[int]:\n        \"\"\"Generate a list of prime numbers.\n\n        :param start: First value of range.\n        :param end: Last value of range.\n        :return: A list of prime numbers from start to end.\n        \"\"\"\n        # TODO: It should generate random primes with passed length.\n        sieve_size = (end // 2 - 1) if end % 2 == 0 else (end // 2)\n        sieve = [True] * sieve_size\n\n        primes = []  # list of primes\n        # add 2 to the list if it's in the given range\n        if end >= 2:\n            primes.append(2)\n        for i in range(sieve_size):\n            if sieve[i]:\n                value_at_i = i * 2 + 3\n                primes.append(value_at_i)\n                for j in range(i, sieve_size, value_at_i):\n                    sieve[j] = False\n\n        chop_index = 0\n        for i in range(len(primes)):\n            if primes[i] >= start:\n                chop_index = i\n                break\n        return primes[chop_index:]"
    },
    {
        "instruction": "Add a function that retrieves event logs based on the provided date range, object event, object id, object type, UTC offset, metadata, and limit. The function should display the event, object, type, date, and username columns. If metadata is included, the metadata column should also be displayed. The function should return the number of rows specified by the limit parameter, or all rows if limit is set to -1. The function is written in Python and uses the SoftLayer API. Please give the corresponding code according to the description. ",
        "response": "def cli(env, date_min, date_max, obj_event, obj_id, obj_type, utc_offset, metadata, limit):\n    \"\"\"Get Event Logs\n\n    Example:\n        slcli event-log get -d 01/01/2019 -D 02/01/2019 -t User -l 10\n    \"\"\"\n    columns = ['Event', 'Object', 'Type', 'Date', 'Username']\n\n    event_mgr = SoftLayer.EventLogManager(env.client)\n    user_mgr = SoftLayer.UserManager(env.client)\n    request_filter = event_mgr.build_filter(date_min, date_max, obj_event, obj_id, obj_type, utc_offset)\n    logs = event_mgr.get_event_logs(request_filter)\n    log_time = \"%Y-%m-%dT%H:%M:%S.%f%z\"\n    user_data = {}\n\n    if metadata:\n        columns.append('Metadata')\n\n    row_count = 0\n    click.secho(\", \".join(columns))\n    for log in logs:\n        if log is None:\n            click.secho('No logs available for filter %s.' % request_filter, fg='red')\n            return\n\n        user = log['userType']\n        label = log.get('label', '')\n        if user == \"CUSTOMER\":\n            username = user_data.get(log['userId'])\n            if username is None:\n                username = user_mgr.get_user(log['userId'], \"mask[username]\")['username']\n                user_data[log['userId']] = username\n            user = username\n\n        if metadata:\n            metadata_data = log['metaData'].strip(\"\\n\\t\")\n\n            click.secho(\"'{0}','{1}','{2}','{3}','{4}','{5}'\".format(\n                log['eventName'],\n                label,\n                log['objectName'],\n                utils.clean_time(log['eventCreateDate'], in_format=log_time),\n                user,\n                metadata_data))\n        else:\n            click.secho(\"'{0}','{1}','{2}','{3}','{4}'\".format(\n                log['eventName'],\n                label,\n                log['objectName'],\n                utils.clean_time(log['eventCreateDate'], in_format=log_time),\n                user))\n\n        row_count = row_count + 1\n        if row_count >= limit and limit != -1:\n            return"
    },
    {
        "instruction": "In Python, use the CoreAudio library to get the number of frames in the source file. This is done by calling the `ExtAudioFileGetProperty` function with the `PROP_LENGTH` property, and passing in the size of a `c_long` and a pointer to a `c_long` object to store the result. Finally, return the value of the `c_long` object. Please give the corresponding code according to the description. ",
        "response": "def nframes(self):\n        \"\"\"Gets the number of frames in the source file.\"\"\"\n        length = ctypes.c_long()\n        size = ctypes.c_int(ctypes.sizeof(length))\n        check(_coreaudio.ExtAudioFileGetProperty(\n            self._obj, PROP_LENGTH, ctypes.byref(size), ctypes.byref(length)\n        ))\n        return length.value"
    },
    {
        "instruction": "In Python, this function performs one-time initialization and re-parses flags on rerun. It first checks if the initialization has already been done, and if so, it simply parses the flags and returns the arguments. Otherwise, it sets the process name, sets up the logging handler, registers and parses the flags with usage, enables the faulthandler (if available), sets the initialization flag to True, and returns the arguments. Please give the corresponding code according to the description. ",
        "response": "def _run_init(\n    argv,\n    flags_parser,\n):\n  \"\"\"Does one-time initialization and re-parses flags on rerun.\"\"\"\n  if _run_init.done:\n    return flags_parser(argv)\n  command_name.make_process_name_useful()\n  # Set up absl logging handler.\n  logging.use_absl_handler()\n  args = _register_and_parse_flags_with_usage(\n      argv=argv,\n      flags_parser=flags_parser,\n  )\n  if faulthandler:\n    try:\n      faulthandler.enable()\n    except Exception:  # pylint: disable=broad-except\n      # Some tests verify stderr output very closely, so don't print anything.\n      # Disabled faulthandler is a low-impact error.\n      pass\n  _run_init.done = True\n  return args"
    },
    {
        "instruction": "Given a cluster name, read the bootstrap-osd key from the corresponding keyring file. If the file does not exist, raise a runtime error with the message \"bootstrap-osd keyring not found; run 'gatherkeys'\". This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def get_bootstrap_osd_key(cluster):\n    \"\"\"\n    Read the bootstrap-osd key for `cluster`.\n    \"\"\"\n    path = '{cluster}.bootstrap-osd.keyring'.format(cluster=cluster)\n    try:\n        with open(path, 'rb') as f:\n            return f.read()\n    except IOError:\n        raise RuntimeError('bootstrap-osd keyring not found; run \\'gatherkeys\\'')"
    },
    {
        "instruction": "Create a Python function that takes an expression as input and returns a generator that yields expressions connected by `&&`s in the given expression. If the expression is not connected by `&&`s, yield the expression itself. Please give the corresponding code according to the description. ",
        "response": "def _extract_conjuction_elements_from_expression(expression):\n    \"\"\"Return a generator for expressions that are connected by `&&`s in the given expression.\"\"\"\n    if isinstance(expression, BinaryComposition) and expression.operator == u'&&':\n        for element in _extract_conjuction_elements_from_expression(expression.left):\n            yield element\n        for element in _extract_conjuction_elements_from_expression(expression.right):\n            yield element\n    else:\n        yield expression"
    },
    {
        "instruction": "Calculate the number of unique traces for a given stimulus object. This is done by summing the length of each track in the stimulus object, then multiplying the number of steps in each row of the stimulus object's autoParams. If there are no segments, return 0. Return the total number of unique traces. (Python)Please give the corresponding code according to the description. ",
        "response": "def traceCount(self):\n        \"\"\"The number of unique stimului for this stimulus object\n\n        :returns: int -- The expanded trace count\n        \"\"\"\n        nsegs = sum([len(track) for track in self._segments])\n        if nsegs == 0:\n            return 0\n        ntraces = 1\n        for irow in range(self._autoParams.nrows()):\n            ntraces = ntraces*self._autoParams.numSteps(irow)\n        return ntraces"
    },
    {
        "instruction": "In Python, define a function named `avail_images` that lists the available images for OpenStack. If `call` is equal to `'action'`, raise a `SaltCloudSystemExit` exception with the message `'The avail_images function must be called with -f or --function, or with the --list-images option'`. If `conn` is `None`, assign the result of `get_conn()` to it. Return the result of `conn. list_images()`. This function can be called using the Salt-Cloud CLI with the `-f avail_images` or `--function avail_images` options, or with the `--list-images` option. Please give the corresponding code according to the description. ",
        "response": "def avail_images(conn=None, call=None):\n    '''\n    List available images for OpenStack\n\n    CLI Example\n\n    .. code-block:: bash\n\n        salt-cloud -f avail_images myopenstack\n        salt-cloud --list-images myopenstack\n\n    '''\n    if call == 'action':\n        raise SaltCloudSystemExit(\n            'The avail_images function must be called with '\n            '-f or --function, or with the --list-images option'\n        )\n    if conn is None:\n        conn = get_conn()\n    return conn.list_images()"
    },
    {
        "instruction": "In Python, this function returns a view to be displayed. If the view has already been created and is cached, it returns the cached view. Otherwise, it initializes the view and proxy. If defer loading is used, it wraps the view in a FrameLayout and defers adding the view until later. If defer loading is not used, it loads the view immediately. Please give the corresponding code according to the description. ",
        "response": "def get_view(self):\n        \"\"\" Get the page to display. If a view has already been created and\n        is cached, use that otherwise initialize the view and proxy. If defer\n        loading is used, wrap the view in a FrameLayout and defer add view \n        until later. \n        \n        \"\"\"\n        d = self.declaration\n        if d.cached and self.widget:\n            return self.widget\n        if d.defer_loading:\n             self.widget = FrameLayout(self.get_context())\n             app = self.get_context()\n             app.deferred_call(\n                 lambda: self.widget.addView(self.load_view(), 0))\n        else:\n            self.widget = self.load_view()\n        return self.widget"
    },
    {
        "instruction": "In Python, this function creates or retrieves a semaphore with the given name. If the value is None, it tries to retrieve an existing named semaphore. Otherwise, it creates a new semaphore with the given value. If the semaphore cannot be created or retrieved, an appropriate error is raised. The function returns a handle to the semaphore. Please give the corresponding code according to the description. ",
        "response": "def _sem_open(name, value=None):\n    \"\"\" Construct or retrieve a semaphore with the given name\n\n    If value is None, try to retrieve an existing named semaphore.\n    Else create a new semaphore with the given value\n    \"\"\"\n    if value is None:\n        handle = pthread.sem_open(ctypes.c_char_p(name), 0)\n    else:\n        handle = pthread.sem_open(ctypes.c_char_p(name), SEM_OFLAG, SEM_PERM,\n                                  ctypes.c_int(value))\n\n    if handle == SEM_FAILURE:\n        e = ctypes.get_errno()\n        if e == errno.EEXIST:\n            raise FileExistsError(\"a semaphore named %s already exists\" % name)\n        elif e == errno.ENOENT:\n            raise FileNotFoundError('cannot find semaphore named %s' % name)\n        elif e == errno.ENOSYS:\n            raise NotImplementedError('No semaphore implementation on this '\n                                      'system')\n        else:\n            raiseFromErrno()\n\n    return handle"
    },
    {
        "instruction": "In Python, this function plots the root mean squared error, coefficient of variation, and bias of a data frame grouped by test capacitor load and frequency. It uses a 3x2 subplot layout to plot a colormap showing how the statistical value changes according to frequency/capacitance pairs, and a histogram to show the distribution of statistical values across all frequency/capacitance pairs. If no figure is provided, it creates one with a size of 8x8. Please give the corresponding code according to the description. ",
        "response": "def plot_stat_summary(df, fig=None):\n    '''\n    Plot stats grouped by test capacitor load _and_ frequency.\n\n    In other words, we calculate the mean of all samples in the data\n    frame for each test capacitance and frequency pairing, plotting\n    the following stats:\n\n     - Root mean squared error\n     - Coefficient of variation\n     - Bias\n\n    ## [Coefficient of variation][1] ##\n\n    > In probability theory and statistics, the coefficient of\n    > variation (CV) is a normalized measure of dispersion of a\n    > probability distribution or frequency distribution. It is defined\n    > as the ratio of the standard deviation to the mean.\n\n    [1]: http://en.wikipedia.org/wiki/Coefficient_of_variation\n    '''\n    if fig is None:\n        fig = plt.figure(figsize=(8, 8))\n\n    # Define a subplot layout, 3 rows, 2 columns\n    grid = GridSpec(3, 2)\n    stats = calculate_stats(df, groupby=['test_capacitor',\n                                         'frequency']).dropna()\n\n    for i, stat in enumerate(['RMSE %', 'cv %', 'bias %']):\n        axis = fig.add_subplot(grid[i, 0])\n        axis.set_title(stat)\n        # Plot a colormap to show how the statistical value changes\n        # according to frequency/capacitance pairs.\n        plot_colormap(stats, stat, axis=axis, fig=fig)\n        axis = fig.add_subplot(grid[i, 1])\n        axis.set_title(stat)\n        # Plot a histogram to show the distribution of statistical\n        # values across all frequency/capacitance pairs.\n        try:\n            axis.hist(stats[stat].values, bins=50)\n        except AttributeError:\n            print stats[stat].describe()\n    fig.tight_layout()"
    },
    {
        "instruction": "In Python, the function 'ffill_across_cols' forward fills values in a DataFrame with special logic to handle cases that pd. DataFrame. ffill cannot and cast columns to appropriate types. The function takes in three parameters: a pandas DataFrame 'df', a list of BoundColumns 'columns' that correspond to columns in the DataFrame to which special filling and/or casting logic should be applied, and a mapping 'name_map' from the name of each BoundColumn to the associated column name in 'df'. The function then fills in missing values specified by each column, with special logic for strings since fillna does not work if the missing value is None. Please give the corresponding code according to the description. ",
        "response": "def ffill_across_cols(df, columns, name_map):\n    \"\"\"\n    Forward fill values in a DataFrame with special logic to handle cases\n    that pd.DataFrame.ffill cannot and cast columns to appropriate types.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        The DataFrame to do forward-filling on.\n    columns : list of BoundColumn\n        The BoundColumns that correspond to columns in the DataFrame to which\n        special filling and/or casting logic should be applied.\n    name_map: map of string -> string\n        Mapping from the name of each BoundColumn to the associated column\n        name in `df`.\n    \"\"\"\n    df.ffill(inplace=True)\n\n    # Fill in missing values specified by each column. This is made\n    # significantly more complex by the fact that we need to work around\n    # two pandas issues:\n\n    # 1) When we have sids, if there are no records for a given sid for any\n    #    dates, pandas will generate a column full of NaNs for that sid.\n    #    This means that some of the columns in `dense_output` are now\n    #    float instead of the intended dtype, so we have to coerce back to\n    #    our expected type and convert NaNs into the desired missing value.\n\n    # 2) DataFrame.ffill assumes that receiving None as a fill-value means\n    #    that no value was passed.  Consequently, there's no way to tell\n    #    pandas to replace NaNs in an object column with None using fillna,\n    #    so we have to roll our own instead using df.where.\n    for column in columns:\n        column_name = name_map[column.name]\n        # Special logic for strings since `fillna` doesn't work if the\n        # missing value is `None`.\n        if column.dtype == categorical_dtype:\n            df[column_name] = df[\n                column.name\n            ].where(pd.notnull(df[column_name]),\n                    column.missing_value)\n        else:\n            # We need to execute `fillna` before `astype` in case the\n            # column contains NaNs and needs to be cast to bool or int.\n            # This is so that the NaNs are replaced first, since pandas\n            # can't convert NaNs for those types.\n            df[column_name] = df[\n                column_name\n            ].fillna(column.missing_value).astype(column.dtype)"
    },
    {
        "instruction": "In Python, add an instruction to the `stop` method that stops a paused pipeline. If the pipeline is running, trigger a `StopIteration` in the inputs of the pipeline and retrieve buffered results. This will stop all `Pipers` and `NuMaps`. Disconnect all pipers and set the `run_time` in the `stats` dictionary. If the pipeline is not running or paused, raise a `PlumberError`. Please give the corresponding code according to the description. ",
        "response": "def stop(self):\n        \"\"\"\n        Stops a paused pipeline. This will a trigger a ``StopIteration`` in the\n        inputs of the pipeline. And retrieve the buffered results. This will\n        stop all ``Pipers`` and ``NuMaps``. Python will not terminate cleanly \n        if a pipeline is running or paused.\n        \n        \"\"\"\n        if self._started.isSet() and \\\n           not self._running.isSet() and \\\n           not self._pausing.isSet():\n            # stops the dagger\n            super(Plumber, self).stop()\n            # disconnects all pipers\n            self.disconnect()\n            self.stats['run_time'] = time() - self.stats['start_time']\n            self._started.clear()\n        else:\n            raise PlumberError"
    },
    {
        "instruction": "Python: Add a validation step to ensure that the selected course mode is valid for the given course. Retrieve the course details and course mode from the cleaned data. If course mode is not provided, raise a validation error. Check if the selected course mode is present in the valid course modes for the selected course. If not, raise a validation error with the course mode and course ID included in the error message. Please give the corresponding code according to the description. ",
        "response": "def _validate_course(self):\n        \"\"\"\n        Verify that the selected mode is valid for the given course .\n        \"\"\"\n        # Verify that the selected mode is valid for the given course .\n        course_details = self.cleaned_data.get(self.Fields.COURSE)\n        if course_details:\n            course_mode = self.cleaned_data.get(self.Fields.COURSE_MODE)\n            if not course_mode:\n                raise ValidationError(ValidationMessages.COURSE_WITHOUT_COURSE_MODE)\n            valid_course_modes = course_details[\"course_modes\"]\n            if all(course_mode != mode[\"slug\"] for mode in valid_course_modes):\n                error = ValidationError(ValidationMessages.COURSE_MODE_INVALID_FOR_COURSE.format(\n                    course_mode=course_mode,\n                    course_id=course_details[\"course_id\"],\n                ))\n                raise ValidationError({self.Fields.COURSE_MODE: error})"
    },
    {
        "instruction": "In Python, this function sets up a socket filter to receive only events related to the write_inquiry_mode command. It then sends the command to the socket and receives a response packet. The function returns 0 on success and -1 on failure. Please give the corresponding code according to the description. ",
        "response": "def write_inquiry_scan_activity(sock, interval, window):\n    \"\"\"returns 0 on success, -1 on failure\"\"\"\n    # save current filter\n    old_filter = sock.getsockopt( bluez.SOL_HCI, bluez.HCI_FILTER, 14)\n\n    # Setup socket filter to receive only events related to the\n    # write_inquiry_mode command\n    flt = bluez.hci_filter_new()\n    opcode = bluez.cmd_opcode_pack(bluez.OGF_HOST_CTL, \n            bluez.OCF_WRITE_INQ_ACTIVITY)\n    bluez.hci_filter_set_ptype(flt, bluez.HCI_EVENT_PKT)\n    bluez.hci_filter_set_event(flt, bluez.EVT_CMD_COMPLETE);\n    bluez.hci_filter_set_opcode(flt, opcode)\n    sock.setsockopt( bluez.SOL_HCI, bluez.HCI_FILTER, flt )\n\n    # send the command!\n    bluez.hci_send_cmd(sock, bluez.OGF_HOST_CTL, \n            bluez.OCF_WRITE_INQ_ACTIVITY, struct.pack(\"HH\", \n                interval, window) )\n\n    pkt = sock.recv(255)\n\n    status = struct.unpack(\"xxxxxxB\", pkt)[0]\n\n    # restore old filter\n    sock.setsockopt( bluez.SOL_HCI, bluez.HCI_FILTER, old_filter )\n    if status != 0: return -1\n    return 0"
    },
    {
        "instruction": "In the given Python code, the `_propagate` function propagates a single batch of examples through the network. It first calls the `forward` function to get the activation and difference_x values, then calls the `backward` function to get the update value. If the batch size is 1, it adds the update value to the weights. Otherwise, it takes the mean of the update values and adds that to the weights. Finally, it returns the activation value. Please give the corresponding code according to the description. ",
        "response": "def _propagate(self, x, influences, **kwargs):\n        \"\"\"Propagate a single batch of examples through the network.\"\"\"\n        activation, difference_x = self.forward(x)\n        update = self.backward(difference_x, influences, activation)\n        # If batch size is 1 we can leave out the call to mean.\n        if update.shape[0] == 1:\n            self.weights += update[0]\n        else:\n            self.weights += update.mean(0)\n\n        return activation"
    },
    {
        "instruction": "In Python, define a function that checks if a given global variable is locked. The function takes in the name of the global variable to be checked and an optional introductory message. If the global variable is locked, the function returns False and logs an error message with the given introductory message. Otherwise, it returns True. Please give the corresponding code according to the description. ",
        "response": "def global_variable_is_editable(self, gv_name, intro_message='edit'):\n        \"\"\"Check whether global variable is locked\n\n        :param str gv_name: Name of global variable to be checked\n        :param str intro_message: Message which is used form a useful logger error message if needed\n        :return:\n        \"\"\"\n        if self.model.global_variable_manager.is_locked(gv_name):\n            logger.error(\"{1} of global variable '{0}' is not possible, as it is locked\".format(gv_name, intro_message))\n            return False\n        return True"
    },
    {
        "instruction": "This Python function takes a Github `username` as a required parameter and an optional `number` parameter that specifies the number of followers to return. If no `number` parameter is provided, it returns all followers. The optional `etag` parameter is used to provide an ETag from a previous request to the same endpoint. The function returns a generator of `User` objects from the Github API. If no `username` is provided, an empty list is returned. Please give the corresponding code according to the description. ",
        "response": "def iter_followers(username, number=-1, etag=None):\n    \"\"\"List the followers of ``username``.\n\n    :param str username: (required), login of the person to list the followers\n        of\n    :param int number: (optional), number of followers to return, Default: -1,\n        return all of them\n    :param str etag: (optional), ETag from a previous request to the same\n        endpoint\n    :returns: generator of :class:`User <github3.users.User>`\n\n    \"\"\"\n    return gh.iter_followers(username, number, etag) if username else []"
    },
    {
        "instruction": "In Python, define a function that calls a given hook_name and returns a list of results from all registered handlers. It takes in an optional document URI and any additional keyword arguments. It retrieves the document from the workspace if a URI is provided. It then gets the subset of hook handlers from the plugin manager, excluding any disabled plugins. Finally, it calls the hook handlers with the configuration, workspace, document, and any additional keyword arguments, and returns the resulting list. Please give the corresponding code according to the description. ",
        "response": "def _hook(self, hook_name, doc_uri=None, **kwargs):\n        \"\"\"Calls hook_name and returns a list of results from all registered handlers\"\"\"\n        doc = self.workspace.get_document(doc_uri) if doc_uri else None\n        hook_handlers = self.config.plugin_manager.subset_hook_caller(hook_name, self.config.disabled_plugins)\n        return hook_handlers(config=self.config, workspace=self.workspace, document=doc, **kwargs)"
    },
    {
        "instruction": "In Python, define a function named \"get_packages\" that takes a \"session\" parameter. This function sends a GET request to a specified URL and parses the response using BeautifulSoup. It then extracts a token and tid from the parsed response. If either token or tid is missing, it raises an exception. It then sends a POST request to another URL with the extracted token and tid, and other parameters. It then parses the response and extracts relevant shipment data, including tracking number, status, from location, estimated delivery date and time, and actual delivery date. It returns a list of dictionaries, with each dictionary representing a package. Please give the corresponding code according to the description. ",
        "response": "def get_packages(session):\n    \"\"\"Get deliveries in progress and completed.\"\"\"\n    resp = session.get(DELIVERIES_URL, params=_get_params(session.auth.locale))\n    parsed = BeautifulSoup(resp.text, HTML_PARSER)\n    token_elem = parsed.find(TOKEN_FIND_TAG, TOKEN_FIND_ATTR)\n    tid_elem = parsed.find(TID_FIND_TAG, TID_FIND_ATTR)\n    if not token_elem or not tid_elem:\n        raise UPSError('failed to find token or tid')\n    token = token_elem.get(VALUE_ATTR)\n    tid = tid_elem.get(VALUE_ATTR)\n    resp = session.post(SERVICE_URL, {\n        'token': token,\n        'uid': session.auth.username,\n        'callType': 'allShipments',\n        'tid': tid,\n        'loc': session.auth.locale\n    })\n    try:\n        packages = []\n        data = json.loads(resp.text[UPS_JSON_PREAMBLE_SIZE:])\n        shipments = data['shipmentContainer']['inboundShipments'] + \\\n            data['shipmentContainer']['historyShipments']\n        for shipment in shipments:\n            from_location = '{}, {}, {}'.format(shipment['sfc'],\n                                                shipment['sfs'],\n                                                shipment['sfcn'])\n            estimated_date = _parsed_date(shipment['sddfd'])\n            actual_date = _parsed_date(shipment['dd'])\n            packages.append({\n                'tracking_number': shipment['tn'],\n                'status': shipment['sts'],\n                'from': shipment['sfn'],\n                'from_location': from_location,\n                'estimated_delivery_date': estimated_date,\n                'estimated_delivery_timeframe': shipment['sdtfd'],\n                'delivery_date': actual_date\n            })\n        return packages\n    except JSONDecodeError:\n        raise UPSError('failed to parse json')"
    },
    {
        "instruction": "In Python, this function checks if the provided host is a vCenter Server or an ESXi host. If host_names is empty, it retrieves the host reference using _get_host_ref() function and returns a list containing the host name. If host_names is not empty, it checks if it is a list and returns it. If no host reference is found, it raises a CommandExecutionError with a message that a list of host_names must be provided if connecting to a vCenter Server. Please give the corresponding code according to the description. ",
        "response": "def _check_hosts(service_instance, host, host_names):\n    '''\n    Helper function that checks to see if the host provided is a vCenter Server or\n    an ESXi host. If it's an ESXi host, returns a list of a single host_name.\n\n    If a host reference isn't found, we're trying to find a host object for a vCenter\n    server. Raises a CommandExecutionError in this case, as we need host references to\n    check against.\n    '''\n    if not host_names:\n        host_name = _get_host_ref(service_instance, host)\n        if host_name:\n            host_names = [host]\n        else:\n            raise CommandExecutionError('No host reference found. If connecting to a '\n                                        'vCenter Server, a list of \\'host_names\\' must be '\n                                        'provided.')\n    elif not isinstance(host_names, list):\n        raise CommandExecutionError('\\'host_names\\' must be a list.')\n\n    return host_names"
    },
    {
        "instruction": "Compute the total luminosity within a circle of specified radius, centred on the light profile's centre. The function integrates the light profile to achieve this. The luminosity is returned in either electrons per second or counts (multiply the luminosity in electrons per second by the exposure time). The exposure time is the observation's exposure time, which converts luminosity from electrons per second units to counts. The radius is the radius of the circle to compute the dimensionless mass within. The function takes the radius, unit_luminosity, exposure_time, and kpc_per_arcsec as input parameters. The function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def luminosity_within_circle_in_units(self, radius: dim.Length, unit_luminosity='eps', kpc_per_arcsec=None,\n                                          exposure_time=None):\n        \"\"\"Integrate the light profile to compute the total luminosity within a circle of specified radius. This is \\\n        centred on the light profile's centre.\n\n        The following units for mass can be specified and output:\n\n        - Electrons per second (default) - 'eps'.\n        - Counts - 'counts' (multiplies the luminosity in electrons per second by the exposure time).\n\n        Parameters\n        ----------\n        radius : float\n            The radius of the circle to compute the dimensionless mass within.\n        unit_luminosity : str\n            The units the luminosity is returned in (eps | counts).\n        exposure_time : float or None\n            The exposure time of the observation, which converts luminosity from electrons per second units to counts.\n        \"\"\"\n\n        if not isinstance(radius, dim.Length):\n            radius = dim.Length(value=radius, unit_length='arcsec')\n\n        profile = self.new_profile_with_units_converted(unit_length=radius.unit_length, unit_luminosity=unit_luminosity,\n                                                        kpc_per_arcsec=kpc_per_arcsec, exposure_time=exposure_time)\n\n        luminosity = quad(profile.luminosity_integral, a=0.0, b=radius, args=(1.0,))[0]\n        return dim.Luminosity(luminosity, unit_luminosity)"
    },
    {
        "instruction": "In Python, define a method callServiceRequest that takes a service_request, *args, and **kwargs as input. If the service_request must be exposed, get the http_request from kwargs and add it to the args tuple. Then, execute the service_request with the modified args tuple and return the result. Please give the corresponding code according to the description. ",
        "response": "def callServiceRequest(self, service_request, *args, **kwargs):\n        \"\"\"\n        Executes the service_request call\n        \"\"\"\n        if self.mustExposeRequest(service_request):\n            http_request = kwargs.get('http_request', None)\n            args = (http_request,) + args\n\n        return service_request(*args)"
    },
    {
        "instruction": "Create a Python function that takes in a FunctionDef node, and returns a function that wraps the node's infer_call_result method. The wrapped function filters the results of the original infer_call_result method to remove List and Tuple instances. The returned function takes in a caller and context as arguments, and calls the original infer_call_result method with these arguments before filtering the results. Please give the corresponding code according to the description. ",
        "response": "def numpy_function_infer_call_result(node):\n    \"\"\"\n    A wrapper around infer_call_result method bounded to the node.\n\n    :param node: the node which infer_call_result should be filtered\n    :type node: FunctionDef\n    :return: a function that filter the results of the call to node.infer_call_result\n    :rtype: function\n    \"\"\"\n    #  Put the origin infer_call_result method into the closure\n    origin_infer_call_result = node.infer_call_result\n\n    def infer_call_result_wrapper(caller=None, context=None):\n        \"\"\"\n        Call the origin infer_call_result method bounded to the node instance and\n        filter the results to remove List and Tuple instances\n        \"\"\"\n        unfiltered_infer_call_result = origin_infer_call_result(caller, context)\n        return (\n            x\n            for x in unfiltered_infer_call_result\n            if not isinstance(x, (astroid.List, astroid.Tuple))\n        )\n\n    return infer_call_result_wrapper"
    },
    {
        "instruction": "In Python, create a function that generates a random path for uploaded files. Use this function as the argument for the `upload_to` parameter of `FileFields`. The function should split the UUID into two parts to avoid subdirectory count limits, with the first part having 3 hex characters and the second part having the rest of the characters. The function should then join the two parts and the filename using the `os. path. join()` method and return the resulting path. Please give the corresponding code according to the description. ",
        "response": "def random_path(instance, filename):\n    \"\"\" Random path generator for uploads, specify this for upload_to= argument of FileFields\n    \"\"\"\n    # Split the uuid into two parts so that we won't run into subdirectory count limits. First part has 3 hex chars,\n    #  thus 4k possible values.\n    uuid_hex = get_uuid()\n    return os.path.join(uuid_hex[:3], uuid_hex[3:], filename)"
    },
    {
        "instruction": "In Python, this function initializes global environment variables with custom default settings. It sets the roles directory, services, confirmation of deployment, local status, base configuration directory, source directory, and sites. It also sets the site and role to none. The function then sets the default site, available sites, available sites per host, disk usage command, and burlap data directory. Finally, it sets default values for role definitions, roles, hosts, and excluded hosts. Please give the corresponding code according to the description. ",
        "response": "def init_env():\n    \"\"\"\n    Populates the global env variables with custom default settings.\n    \"\"\"\n    env.ROLES_DIR = ROLE_DIR\n    env.services = []\n    env.confirm_deployment = False\n    env.is_local = None\n    env.base_config_dir = '.'\n    env.src_dir = 'src' # The path relative to fab where the code resides.\n    env.sites = {} # {site:site_settings}\n    env[SITE] = None\n    env[ROLE] = None\n\n    env.hosts_retriever = None\n    env.hosts_retrievers = type(env)() #'default':lambda hostname: hostname,\n\n    env.hostname_translator = 'default'\n    env.hostname_translators = type(env)()\n    env.hostname_translators.default = lambda hostname: hostname\n\n    env.default_site = None\n\n    # A list of all site names that should be available on the current host.\n    env.available_sites = []\n\n    # A list of all site names per host.\n    # {hostname: [sites]}\n    # If no entry found, will use available_sites.\n    env.available_sites_by_host = {}\n\n    # The command run to determine the percent of disk usage.\n    env.disk_usage_command = \"df -H | grep -vE '^Filesystem|tmpfs|cdrom|none' | awk '{print $5 \" \" $1}'\"\n\n    env.burlap_data_dir = '.burlap'\n\n    env.setdefault('roledefs', {})\n    env.setdefault('roles', [])\n    env.setdefault('hosts', [])\n    env.setdefault('exclude_hosts', [])"
    },
    {
        "instruction": "In Python, this function adds a signal to set the thumbnail when the image field is initialized. The instruction is to call the parent class's `contribute_to_class` method, passing the `cls` and `name` arguments, then connect the `_set_thumbnail` method to the `post_init` signal using the `signals` module from Django. Please give the corresponding code according to the description. ",
        "response": "def contribute_to_class(self, cls, name):\n        \"\"\"\n        Makes sure thumbnail gets set when image field initialized.\n        \"\"\"\n        super(SizedImageField, self).contribute_to_class(cls, name)\n        signals.post_init.connect(self._set_thumbnail, sender=cls)"
    },
    {
        "instruction": "In Python, define a class method that takes a public key or public certificate string in PEM format as input. If the input contains a certificate marker, load the certificate and extract the public key. Otherwise, load the public key directly from the input. Finally, construct and return an instance of the class using the extracted or loaded public key. If the public key cannot be parsed, raise a ValueError. Please give the corresponding code according to the description. ",
        "response": "def from_string(cls, public_key):\n        \"\"\"Construct an Verifier instance from a public key or public\n        certificate string.\n\n        Args:\n            public_key (Union[str, bytes]): The public key in PEM format or the\n                x509 public key certificate.\n\n        Returns:\n            Verifier: The constructed verifier.\n\n        Raises:\n            ValueError: If the public key can't be parsed.\n        \"\"\"\n        public_key_data = _helpers.to_bytes(public_key)\n\n        if _CERTIFICATE_MARKER in public_key_data:\n            cert = cryptography.x509.load_pem_x509_certificate(\n                public_key_data, _BACKEND)\n            pubkey = cert.public_key()\n\n        else:\n            pubkey = serialization.load_pem_public_key(\n                public_key_data, _BACKEND)\n\n        return cls(pubkey)"
    },
    {
        "instruction": "In Python, create a new set of credentials for authentication by calling the new_credentials() function. Save the generated credentials by calling the load_credentials() function before playing anything. If the credentials are lost, authentication must be performed again. The function returns a string in the format of \"identifier:seed\", where the seed is decoded and converted to uppercase letters. Please give the corresponding code according to the description. ",
        "response": "async def generate_credentials(self):\n        \"\"\"Create new credentials for authentication.\n\n        Credentials that have been authenticated shall be saved and loaded with\n        load_credentials before playing anything. If credentials are lost,\n        authentication must be performed again.\n        \"\"\"\n        identifier, seed = new_credentials()\n        return '{0}:{1}'.format(identifier, seed.decode().upper())"
    },
    {
        "instruction": "This Python function generates output metadata based on input files and parameters, and returns a Program instance. The project path must be an absolute path. The function creates a dictionary of parameters, matches the profile, and gathers input files that match. It generates output files and provenance data for each output template. If the output template has a parent, it checks if the parent exists and is not optional. If it is, it will not create the output file. Finally, it writes the metadata for each output file and adds the output file, output template, input file, and input template to the program. Please give the corresponding code according to the description. ",
        "response": "def generate(self, projectpath, parameters, serviceid, servicename,serviceurl):\n        \"\"\"Generate output metadata on the basis of input files and parameters. Projectpath must be absolute. Returns a Program instance.  \"\"\"\n\n        #Make dictionary of parameters\n        parameters = sanitizeparameters(parameters)\n\n        program = Program(projectpath, [self])\n\n        match, optional_absent = self.match(projectpath, parameters) #Does the profile match?\n        if match: #pylint: disable=too-many-nested-blocks\n\n            #gather all input files that match\n            inputfiles = self.matchingfiles(projectpath) #list of (seqnr, filename,inputtemplate) tuples\n\n            inputfiles_full = [] #We need the full CLAMInputFiles for generating provenance data\n            for seqnr, filename, inputtemplate in inputfiles: #pylint: disable=unused-variable\n                inputfiles_full.append(CLAMInputFile(projectpath, filename))\n\n            for outputtemplate in self.output:\n                if isinstance(outputtemplate, ParameterCondition):\n                    outputtemplate = outputtemplate.evaluate(parameters)\n\n                #generate output files\n                if outputtemplate:\n                    if isinstance(outputtemplate, OutputTemplate):\n                        #generate provenance data\n                        provenancedata = CLAMProvenanceData(serviceid,servicename,serviceurl,outputtemplate.id, outputtemplate.label,  inputfiles_full, parameters)\n\n                        create = True\n                        if outputtemplate.parent:\n                            if outputtemplate.getparent(self) in optional_absent:\n                                create = False\n\n                        if create:\n                            for inputtemplate, inputfilename, outputfilename, metadata in outputtemplate.generate(self, parameters, projectpath, inputfiles, provenancedata):\n                                clam.common.util.printdebug(\"Writing metadata for outputfile \" + outputfilename)\n                                metafilename = os.path.dirname(outputfilename)\n                                if metafilename: metafilename += '/'\n                                metafilename += '.' + os.path.basename(outputfilename) + '.METADATA'\n                                f = io.open(projectpath + '/output/' + metafilename,'w',encoding='utf-8')\n                                f.write(metadata.xml())\n                                f.close()\n                                program.add(outputfilename, outputtemplate, inputfilename, inputtemplate)\n                    else:\n                        raise TypeError(\"OutputTemplate expected, but got \" + outputtemplate.__class__.__name__)\n\n        return program"
    },
    {
        "instruction": "In Python, this function takes a destination directory path as input and decompresses the entire container into that directory. It checks if the container exists, if the actual container object has been set, if the output path is an existing directory, and if the container contains safe entries before decompressing. If any of these checks fail, it raises a corresponding error. Finally, it calls the `decompress` method of the actual container object to perform the decompression. Please give the corresponding code according to the description. ",
        "response": "def decompress(self, output_path):\n        \"\"\"\n        Decompress the entire container into the given directory.\n\n        :param string output_path: path of the destination directory\n        :raises: TypeError: if this container does not exist\n        :raises: ValueError: if this container contains unsafe entries,\n                             or ``output_path`` is not an existing directory\n        :raises: OSError: if an error occurred decompressing the given container\n                          (e.g., empty file, damaged file, etc.)\n        \"\"\"\n        self.log([u\"Decompressing the container into '%s'\", output_path])\n        if not self.exists():\n            self.log_exc(u\"This container does not exist. Wrong path?\", None, True, TypeError)\n        if self.actual_container is None:\n            self.log_exc(u\"The actual container object has not been set\", None, True, TypeError)\n        if not gf.directory_exists(output_path):\n            self.log_exc(u\"The output path is not an existing directory\", None, True, ValueError)\n        if not self.is_safe:\n            self.log_exc(u\"This container contains unsafe entries\", None, True, ValueError)\n        self.actual_container.decompress(output_path)"
    },
    {
        "instruction": "This is a Python function that updates an Unscented Kalman Filter with the given measurements. It takes in a measurement vector z, measurement noise R, a function to compute the unscented transform UT, and keyword arguments to be passed into h(x). The function passes prior sigmas through h(x) to get measurement sigmas. Then, it computes the mean and covariance of prediction passed through unscented transform. It also computes cross variance of the state and the measurements, and updates the Gaussian state estimate (x, P). Finally, it saves the measurement and posterior state, and sets some variables to None to force recompute. Please give the corresponding code according to the description. ",
        "response": "def update(self, z, R=None, UT=None, hx=None, **hx_args):\n        \"\"\"\n        Update the UKF with the given measurements. On return,\n        self.x and self.P contain the new mean and covariance of the filter.\n\n        Parameters\n        ----------\n\n        z : numpy.array of shape (dim_z)\n            measurement vector\n\n        R : numpy.array((dim_z, dim_z)), optional\n            Measurement noise. If provided, overrides self.R for\n            this function call.\n\n        UT : function(sigmas, Wm, Wc, noise_cov), optional\n            Optional function to compute the unscented transform for the sigma\n            points passed through hx. Typically the default function will\n            work - you can use x_mean_fn and z_mean_fn to alter the behavior\n            of the unscented transform.\n\n        **hx_args : keyword argument\n            arguments to be passed into h(x) after x -> h(x, **hx_args)\n        \"\"\"\n\n        if z is None:\n            self.z = np.array([[None]*self._dim_z]).T\n            self.x_post = self.x.copy()\n            self.P_post = self.P.copy()\n            return\n\n        if hx is None:\n            hx = self.hx\n\n        if UT is None:\n            UT = unscented_transform\n\n        if R is None:\n            R = self.R\n        elif isscalar(R):\n            R = eye(self._dim_z) * R\n\n        # pass prior sigmas through h(x) to get measurement sigmas\n        # the shape of sigmas_h will vary if the shape of z varies, so\n        # recreate each time\n        sigmas_h = []\n        for s in self.sigmas_f:\n            sigmas_h.append(hx(s, **hx_args))\n\n        self.sigmas_h = np.atleast_2d(sigmas_h)\n\n        # mean and covariance of prediction passed through unscented transform\n        zp, self.S = UT(self.sigmas_h, self.Wm, self.Wc, R, self.z_mean, self.residual_z)\n        self.SI = self.inv(self.S)\n\n        # compute cross variance of the state and the measurements\n        Pxz = self.cross_variance(self.x, zp, self.sigmas_f, self.sigmas_h)\n\n\n        self.K = dot(Pxz, self.SI)        # Kalman gain\n        self.y = self.residual_z(z, zp)   # residual\n\n        # update Gaussian state estimate (x, P)\n        self.x = self.x + dot(self.K, self.y)\n        self.P = self.P - dot(self.K, dot(self.S, self.K.T))\n\n        # save measurement and posterior state\n        self.z = deepcopy(z)\n        self.x_post = self.x.copy()\n        self.P_post = self.P.copy()\n\n        # set to None to force recompute\n        self._log_likelihood = None\n        self._likelihood = None\n        self._mahalanobis = None"
    },
    {
        "instruction": "In Python, define a function that prints a help menu. Print the title and version of the program, followed by the usage information, including command and positional arguments. Next, print a list of available options with their descriptions. If there are any sub-commands, print a list of available commands with their descriptions. Finally, print any additional help footer information. Please give the corresponding code according to the description. ",
        "response": "def print_help(self):\n        \"\"\"\n        Print the help menu.\n        \"\"\"\n\n        print('\\n  %s %s' % (self._title or self._name, self._version or ''))\n\n        if self._usage:\n            print('\\n  %s' % self._usage)\n        else:\n            cmd = self._name\n            if hasattr(self, '_parent') and isinstance(self._parent, Command):\n                cmd = '%s %s' % (self._parent._name, cmd)\n\n            if self._command_list:\n                usage = 'Usage: %s <command> [option]' % cmd\n            else:\n                usage = 'Usage: %s [option]' % cmd\n\n            pos = ' '.join(['<%s>' % name for name in self._positional_list])\n            print('\\n  %s %s' % (usage, pos))\n\n        arglen = max(len(o.name) for o in self._option_list)\n        arglen += 2\n\n        self.print_title('\\n  Options:\\n')\n        for o in self._option_list:\n            print('    %s %s' % (_pad(o.name, arglen), o.description or ''))\n        print('')\n\n        if self._command_list:\n            self.print_title('  Commands:\\n')\n            for cmd in self._command_list:\n                if isinstance(cmd, Command):\n                    name = _pad(cmd._name, arglen)\n                    desc = cmd._description or ''\n                    print('    %s %s' % (_pad(name, arglen), desc))\n\n            print('')\n\n        if self._help_footer:\n            print(self._help_footer)\n            print('')\n\n        return self"
    },
    {
        "instruction": "Create a method in Python that formats a string using a safety sandbox. If the string is an instance of Markup, use SandboxedEscapeFormatter to escape any unsafe characters. Otherwise, use SandboxedFormatter. Use _MagicFormatMapping to map any positional arguments to keyword arguments. Use the formatter to format the string with the arguments and return the formatted string. Please give the corresponding code according to the description. ",
        "response": "def format_string(self, s, args, kwargs):\n        \"\"\"If a format call is detected, then this is routed through this\n        method so that our safety sandbox can be used for it.\n        \"\"\"\n        if isinstance(s, Markup):\n            formatter = SandboxedEscapeFormatter(self, s.escape)\n        else:\n            formatter = SandboxedFormatter(self)\n        kwargs = _MagicFormatMapping(args, kwargs)\n        rv = formatter.vformat(s, args, kwargs)\n        return type(s)(rv)"
    },
    {
        "instruction": "In Python, this function creates a BWA index from an input fasta file. It takes in the fasta file path and an optional dictionary of BWA index specific parameters. The function returns a dictionary where the keys are the various output suffixes (. amb,. ann,. bwt,. pac,. sa) and the values are open file objects. The index prefix will be the same as the input fasta file, unless the -p parameter is passed in the dictionary of parameters. The function first instantiates the BWA_index object and then calls the application, passing the fasta file in. Please give the corresponding code according to the description. ",
        "response": "def create_bwa_index_from_fasta_file(fasta_in, params=None):\n    \"\"\"Create a BWA index from an input fasta file.\n\n    fasta_in: the input fasta file from which to create the index\n    params: dict of bwa index specific paramters\n\n    This method returns a dictionary where the keys are the various\n    output suffixes (.amb, .ann, .bwt, .pac, .sa) and the values\n    are open file objects.\n\n    The index prefix will be the same as fasta_in, unless the -p parameter\n    is passed in params.\n    \"\"\"\n    if params is None:\n        params = {}\n\n    # Instantiate the app controller\n    index = BWA_index(params)\n\n    # call the application, passing the fasta file in\n    results = index({'fasta_in': fasta_in})\n    return results"
    },
    {
        "instruction": "In Python, this function unlocks a scan node by removing it from the list of locked scan nodes. It takes in a path specification as an argument and checks if the scan node exists and is locked. If it is, then it removes it from the list of locked scan nodes and sets the \"scanned\" attribute of the scan node to False, allowing it to be scanned again. If it does not exist or is not locked, it raises a KeyError. Please give the corresponding code according to the description. ",
        "response": "def UnlockScanNode(self, path_spec):\n    \"\"\"Marks a scan node as unlocked.\n\n    Args:\n      path_spec (PathSpec): path specification.\n\n    Raises:\n      KeyError: if the scan node does not exists or is not locked.\n    \"\"\"\n    if not self.HasScanNode(path_spec):\n      raise KeyError('Scan node does not exist.')\n\n    if path_spec not in self._locked_scan_nodes:\n      raise KeyError('Scan node is not locked.')\n\n    del self._locked_scan_nodes[path_spec]\n\n    # Scan a node again after it has been unlocked.\n    self._scan_nodes[path_spec].scanned = False"
    },
    {
        "instruction": "In Python, define a function named \"check_ssl\" that attempts to import the SSL module. If the import is successful, log an info message indicating that the SSL module is available and return the imported SSL module. If the import fails, log a warning message indicating the error and print an SSL error message. Finally, exit the program with a status code of 1. Please give the corresponding code according to the description. ",
        "response": "def check_ssl():\n    \"\"\"Attempts to import SSL or raises an exception.\"\"\"\n    try:\n        import ssl\n    except:\n        log.warning('Error importing SSL module', stack_info=True)\n        print(SSL_ERROR_MESSAGE)\n        sys.exit(1)\n    else:\n        log.info('SSL module is available')\n        return ssl"
    },
    {
        "instruction": "This Python function runs a specified task on a given git repository and branch using a configured backend. It clones the repository if it hasn't been cloned yet, and specifies how many commits back to clone using the `depth` parameter. The `reference` parameter specifies a path to a repository from which the target repository is forked. The function returns a `Result` instance with the output of the task. If the repository can't be cloned or pulled, a `PullError` is raised. If the task fails, a `BuildError` is raised. Please give the corresponding code according to the description. ",
        "response": "def run(self, repo: str, branch: str, task: Task, *,\n            depth: DepthDefinitionType=1,\n            reference: ReferenceDefinitionType=None\n            ) -> Result:\n        \"\"\" Runs the ``task`` using the configured backend.\n\n        :param repo: Target git repository\n        :param branch: Target git branch\n        :param task: Task which will be run in the target repository\n        :param depth: How many commits back should the repo be cloned in case the target repository isn't cloned yet.\n                      Defaults to 1, must be bigger than 0. No limit will be used if ``None`` is set.\n        :param reference: A path to a repository from which the target repository is forked,\n                          to save bandwidth, `--dissociate` is used if set.\n\n        :return: A :class:`Result` instance with the output of the task.\n\n        :raise PullError: If the repository can't be cloned or pulled\n        :raise BuildError: If the task fails.\n        \"\"\"\n        self.validate_repo_url(repo)\n        depth = self.validate_depth(depth)\n        reference = self.validate_reference(reference)\n\n        logger.info(\"Running Arca task %r for repo '%s' in branch '%s'\", task, repo, branch)\n\n        git_repo, repo_path = self.get_files(repo, branch, depth=depth, reference=reference)\n\n        def create_value():\n            logger.debug(\"Value not in cache, creating.\")\n            return self.backend.run(repo, branch, task, git_repo, repo_path)\n\n        cache_key = self.cache_key(repo, branch, task, git_repo)\n\n        logger.debug(\"Cache key is %s\", cache_key)\n\n        return self.region.get_or_create(\n            cache_key,\n            create_value,\n            should_cache_fn=self.should_cache_fn\n        )"
    },
    {
        "instruction": "Python: Create a function that takes in a source and bitarray, and returns a dictionary containing the value, raw value, shortcut, description, unit, and range of the input data. The value is calculated using the raw value, range minimum and maximum, scale minimum and maximum. The dictionary should be structured as follows: {'shortcut': {'description': description, 'unit': unit, 'value': value, 'raw_value': raw_value}}. Please give the corresponding code according to the description. ",
        "response": "def _get_value(self, source, bitarray):\n        ''' Get value, based on the data in XML '''\n        raw_value = self._get_raw(source, bitarray)\n\n        rng = source.find('range')\n        rng_min = float(rng.find('min').text)\n        rng_max = float(rng.find('max').text)\n\n        scl = source.find('scale')\n        scl_min = float(scl.find('min').text)\n        scl_max = float(scl.find('max').text)\n\n        return {\n            source['shortcut']: {\n                'description': source.get('description'),\n                'unit': source['unit'],\n                'value': (scl_max - scl_min) / (rng_max - rng_min) * (raw_value - rng_min) + scl_min,\n                'raw_value': raw_value,\n            }\n        }"
    },
    {
        "instruction": "Create a Python function that takes in a file path, an encoding type, and encoding errors as arguments. The function should open the file in binary mode, read its contents, and convert it to a Unicode string using the specified encoding and error handling. Finally, close the file and return the Unicode string. Please give the corresponding code according to the description. ",
        "response": "def read_unicode(path, encoding, encoding_errors):\n    \"\"\" Return the contents of a file as a unicode string. \"\"\"\n    try:\n      f = open(path, 'rb')\n      return make_unicode(f.read(), encoding, encoding_errors)\n    finally:\n      f.close()"
    },
    {
        "instruction": "This Python function returns an HTML link to a view that moves the passed in object up in rank. The link text defaults to \"up\" but can be customized. If the object is already at the top rank, an empty string is returned. The function takes an object to move as a parameter and uses its rank to determine the new rank after moving. The link code is generated using the Django reverse function and includes the content type and object ID. Please give the corresponding code according to the description. ",
        "response": "def admin_link_move_up(obj, link_text='up'):\n    \"\"\"Returns a link to a view that moves the passed in object up in rank.\n\n    :param obj:\n        Object to move\n    :param link_text:\n        Text to display in the link.  Defaults to \"up\"\n    :returns:\n        HTML link code to view for moving the object\n    \"\"\"\n    if obj.rank == 1:\n        return ''\n\n    content_type = ContentType.objects.get_for_model(obj)\n    link = reverse('awl-rankedmodel-move', args=(content_type.id, obj.id, \n        obj.rank - 1))\n\n    return '<a href=\"%s\">%s</a>' % (link, link_text)"
    },
    {
        "instruction": "In Python, use the SciPy library to perform hierarchical clustering on a matrix of data. Then, generate a permutation of the rows based on the optimal leaf ordering of the hierarchical clustering. Return the permutation as an ndarray. Please give the corresponding code according to the description. ",
        "response": "def hclust_linearize(U):\n    \"\"\"Sorts the rows of a matrix by hierarchical clustering.\n\n    Parameters:\n        U (ndarray) : matrix of data\n\n    Returns:\n        prm (ndarray) : permutation of the rows\n    \"\"\"\n\n    from scipy.cluster import hierarchy\n    Z = hierarchy.ward(U)\n    return hierarchy.leaves_list(hierarchy.optimal_leaf_ordering(Z, U))"
    },
    {
        "instruction": "Create a Python function called `create_event_model` that receives a dictionary representing a Celery event and returns an event object representing the received event. If the event is a job event, the function should return a JobStartedEvent, JobSucceededEvent, JobStoppedEvent or JobAbortedEvent object. If the event is a worker event, the function should raise a WorkerEventTypeUnsupported exception. If the event is not a job or worker event, the function should raise an EventTypeUnknown exception. Please give the corresponding code according to the description. ",
        "response": "def create_event_model(event):\n    \"\"\" Factory function that turns a celery event into an event object.\n\n    Args:\n        event (dict): A dictionary that represents a celery event.\n\n    Returns:\n        object: An event object representing the received event.\n\n    Raises:\n        JobEventTypeUnsupported: If an unsupported celery job event was received.\n        WorkerEventTypeUnsupported: If an unsupported celery worker event was received.\n        EventTypeUnknown: If an unknown event type (neither job nor worker) was received.\n    \"\"\"\n    if event['type'].startswith('task'):\n        factory = {\n            JobEventName.Started: JobStartedEvent,\n            JobEventName.Succeeded: JobSucceededEvent,\n            JobEventName.Stopped: JobStoppedEvent,\n            JobEventName.Aborted: JobAbortedEvent\n        }\n        if event['type'] in factory:\n            return factory[event['type']].from_event(event)\n        else:\n            raise JobEventTypeUnsupported(\n                'Unsupported event type {}'.format(event['type']))\n    elif event['type'].startswith('worker'):\n        raise WorkerEventTypeUnsupported(\n            'Unsupported event type {}'.format(event['type']))\n    else:\n        raise EventTypeUnknown('Unknown event type {}'.format(event['type']))"
    },
    {
        "instruction": "Calculate the derivative of E^2 times differential flux with respect to E, using the input x and optional parameters. Return the result as a one-dimensional array in the numpy library. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def e2dnde_deriv(self, x, params=None):\n        \"\"\"Evaluate derivative of E^2 times differential flux with\n        respect to E.\"\"\"\n        params = self.params if params is None else params\n        return np.squeeze(self.eval_e2dnde_deriv(x, params, self.scale,\n                                                 self.extra_params))"
    },
    {
        "instruction": "In Python, define a function named `print_summary` that takes in a string called `heading` and prints a summary of a graph. The summary should include the `heading`, the number of nodes in the graph, and the number of edges in the graph. Use the `logger` module to log the summary. Please give the corresponding code according to the description. ",
        "response": "def print_summary(self, heading: str) -> None:\n        \"\"\"Print the summary of a graph.\n\n        :param str heading: Title of the graph.\n        \"\"\"\n        logger.info(heading)\n        logger.info(\"Number of nodes: {}\".format(len(self.graph.vs)))\n        logger.info(\"Number of edges: {}\".format(len(self.graph.es)))"
    },
    {
        "instruction": "Create a function in Python that applies the basic architecture of a DenseNet layer. The function replaces the fully connected layers in the original architecture with fully convolutional layers. The function takes in a Tensor and an options dictionary with mandatory parameters for the dimension and number of times to repeat the layer. The function also allows optional parameters for activation function name, transition layer, reuse, and name. The function returns a Tensor. Please give the corresponding code according to the description. ",
        "response": "def sg_densenet_layer(x, opt):\n    r\"\"\"Applies basic architecture of densenet layer.\n\n    Note that the fc layers in the original architecture\n      will be replaced with fully convolutional layers.\n      For convenience, We still call them fc layers, though.\n\n    Args:\n      x: A `Tensor`.\n      opt:\n          dim: An integer. Dimension for this resnet layer\n          num: Number of times to repeat\n          act: String. 'relu' (default). the activation function name\n          trans: Boolean. If True(default), transition layer will be applied.\n          reuse: Boolean(Optional). If True, all variables will be loaded from previous network.\n          name: String. (optional) Used as convolution layer prefix\n\n    Returns:\n      A `Tensor`.\n    \"\"\"\n    assert opt.dim is not None, 'dim is mandatory.'\n    assert opt.num is not None, 'num is mandatory.'\n\n    # default stride\n    opt += tf.sg_opt(stride=1, act='relu', trans=True)\n\n    # format convolutional layer name\n    def cname(index):\n        return opt.name if opt.name is None else opt.name + '_%d' % index\n\n    # dense layer\n    with tf.sg_context(bias=False, reuse=opt.reuse):\n        out = x\n        for i in range(opt.num):\n            # dense block\n            out_new = (out\n                       .sg_bypass(act=opt.act, bn=True, name=cname(3 * i + 1))\n                       .sg_conv(dim=opt.dim // 4, size=1, act=opt.act, bn=True, name=cname(3 * i + 2))\n                       .sg_conv(dim=opt.dim, size=3, name=cname(3 * i + 3)))\n            out = tf.concat([out_new, out], 3)\n\n        # transition layer\n        if opt.trans:\n            out = (out\n                   .sg_bypass(act=opt.act, bn=True, name=cname(3 * i + 4))\n                   .sg_conv(size=1, name=cname(3 * i + 5))\n                   .sg_pool(avg=True))\n\n    return out"
    },
    {
        "instruction": "In Python, define a function that takes in a string and a file name as arguments. Open the file and read its contents line by line. If the string is found in any of the lines, return True. Otherwise, return False. Please give the corresponding code according to the description. ",
        "response": "def in_file(string, search_file):\n    \"\"\"Looks in a file for a string.\"\"\"\n    handle = open(search_file, 'r')\n    for line in handle.readlines():\n        if string in line:\n            return True\n\n    return False"
    },
    {
        "instruction": "This Python function clears a breakpoint by removing it from all relevant lists. It deletes the breakpoint from the list of breakpoints by file and line, sets the corresponding index in the breakpoints by number list to None, and removes the line number from the list of breakpoints for the current file. If there are no more breakpoints for the current file, it removes the file from the list of breakpoints files. Finally, it updates the active breakpoint flag. Please give the corresponding code according to the description. ",
        "response": "def clear(self):\n        \"\"\" Clear a breakpoint by removing it from all lists.\n        \"\"\"\n        del IKBreakpoint.breakpoints_by_file_and_line[self.file_name, self.line_number]\n        IKBreakpoint.breakpoints_by_number[self.number] = None\n        IKBreakpoint.breakpoints_files[self.file_name].remove(self.line_number)\n        if len(IKBreakpoint.breakpoints_files[self.file_name]) == 0:\n            del IKBreakpoint.breakpoints_files[self.file_name]\n        IKBreakpoint.update_active_breakpoint_flag()"
    },
    {
        "instruction": "Create an asynchronous function in Python that manages a sequence of sequences. The function should allow for concurrent awaiting of the sequences, with the option to limit the number of running sequences using the `task_limit` argument. The function should also have a `switch` argument that enables the switch mechanism, which discards the previous subsequence when a new one is created. Additionally, the function should have an `ordered` argument that determines whether the items are generated in order or as soon as they're received. Finally, the function should yield the result of each subsequence. Please give the corresponding code according to the description. ",
        "response": "async def base_combine(source, switch=False, ordered=False, task_limit=None):\n    \"\"\"Base operator for managing an asynchronous sequence of sequences.\n\n    The sequences are awaited concurrently, although it's possible to limit\n    the amount of running sequences using the `task_limit` argument.\n\n    The ``switch`` argument enables the switch mecanism, which cause the\n    previous subsequence to be discarded when a new one is created.\n\n    The items can either be generated in order or as soon as they're received,\n    depending on the ``ordered`` argument.\n    \"\"\"\n\n    # Task limit\n    if task_limit is not None and not task_limit > 0:\n        raise ValueError('The task limit must be None or greater than 0')\n\n    # Safe context\n    async with StreamerManager() as manager:\n\n        main_streamer = await manager.enter_and_create_task(source)\n\n        # Loop over events\n        while manager.tasks:\n\n            # Extract streamer groups\n            substreamers = manager.streamers[1:]\n            mainstreamers = [main_streamer] if main_streamer in manager.tasks else []\n\n            # Switch - use the main streamer then the substreamer\n            if switch:\n                filters = mainstreamers + substreamers\n            # Concat - use the first substreamer then the main streamer\n            elif ordered:\n                filters = substreamers[:1] + mainstreamers\n            # Flat - use the substreamers then the main streamer\n            else:\n                filters = substreamers + mainstreamers\n\n            # Wait for next event\n            streamer, task = await manager.wait_single_event(filters)\n\n            # Get result\n            try:\n                result = task.result()\n\n            # End of stream\n            except StopAsyncIteration:\n\n                # Main streamer is finished\n                if streamer is main_streamer:\n                    main_streamer = None\n\n                # A substreamer is finished\n                else:\n                    await manager.clean_streamer(streamer)\n\n                    # Re-schedule the main streamer if necessary\n                    if main_streamer is not None and main_streamer not in manager.tasks:\n                        manager.create_task(main_streamer)\n\n            # Process result\n            else:\n\n                # Switch mecanism\n                if switch and streamer is main_streamer:\n                    await manager.clean_streamers(substreamers)\n\n                # Setup a new source\n                if streamer is main_streamer:\n                    await manager.enter_and_create_task(result)\n\n                    # Re-schedule the main streamer if task limit allows it\n                    if task_limit is None or task_limit > len(manager.tasks):\n                        manager.create_task(streamer)\n\n                # Yield the result\n                else:\n                    yield result\n\n                    # Re-schedule the streamer\n                    manager.create_task(streamer)"
    },
    {
        "instruction": "In Python, this function returns the value stored in kytos. json corresponding to the given key. The value is obtained by loading the json file located at the path `self. _installed / user / napp / 'kytos. json'`. If the file is not found or if the json is not valid or if the key is not present in the json, an empty string is returned. The `user` and `napp` arguments are optional and default to `self. user` and `self. napp` respectively if not provided. Please give the corresponding code according to the description. ",
        "response": "def _get_napp_key(self, key, user=None, napp=None):\n        \"\"\"Return a value from kytos.json.\n\n        Args:\n            user (string): A Username.\n            napp (string): A NApp name\n            key (string): Key used to get the value within kytos.json.\n\n        Returns:\n            meta (object): Value stored in kytos.json.\n\n        \"\"\"\n        if user is None:\n            user = self.user\n        if napp is None:\n            napp = self.napp\n        kytos_json = self._installed / user / napp / 'kytos.json'\n        try:\n            with kytos_json.open() as file_descriptor:\n                meta = json.load(file_descriptor)\n                return meta[key]\n        except (FileNotFoundError, json.JSONDecodeError, KeyError):\n            return ''"
    },
    {
        "instruction": "Python: The `match_route` function takes in a request path and matches it with its corresponding route. It first retrieves all route dictionaries from the HTTP routes, then retrieves all routes from each dictionary. If the request path is not in the routes, it replaces parameters in each route with regex and checks if the modified request path matches the modified route. If it does, it returns the route. If none of the routes match, it returns the original request path. Please give the corresponding code according to the description. ",
        "response": "def match_route(self, reqpath):\n        \"\"\"Match a request with parameter to it's corresponding route\"\"\"\n        route_dicts = [routes for _, routes in self.api.http.routes.items()][0]\n        routes = [route for route, _ in route_dicts.items()]\n        if reqpath not in routes:\n            for route in routes:  # replace params in route with regex\n                reqpath = re.sub('^(/v\\d*/?)', '/', reqpath)\n                base_url = getattr(self.api.http, 'base_url', '')\n                reqpath = reqpath.replace(base_url, '', 1) if base_url else reqpath\n                if re.match(re.sub(r'/{[^{}]+}', r'/[\\\\w-]+', route) + '$', reqpath):\n                    return route\n\n        return reqpath"
    },
    {
        "instruction": "In Python, this function checks whether array-related parameters are valid. It takes in five arguments: is_array, array_size, value, element_kind, and element_name. If value is not None, it checks if is_array is False but value is an array, or if is_array is True but value is not an array. If either of these conditions is met, it raises a ValueError with a formatted error message. The array_size argument is not used and has been disabled. Please give the corresponding code according to the description. ",
        "response": "def _check_array_parms(is_array, array_size, value, element_kind,\n                       element_name):\n    # pylint: disable=unused-argument\n    # The array_size argument is unused.\n    \"\"\"\n    Check whether array-related parameters are ok.\n    \"\"\"\n\n    # The following case has been disabled because it cannot happen given\n    # how this check function is used:\n    # if array_size and is_array is False:\n    #     raise ValueError(\n    #         _format(\"The array_size parameter of {0} {1!A} is {2!A} but the \"\n    #                 \"is_array parameter is False.\",\n    #                 element_kind, element_name, array_size))\n\n    if value is not None:\n        value_is_array = isinstance(value, (list, tuple))\n        if not is_array and value_is_array:\n            raise ValueError(\n                _format(\"The is_array parameter of {0} {1!A} is False but \"\n                        \"value {2!A} is an array.\",\n                        element_kind, element_name, value))\n        if is_array and not value_is_array:\n            raise ValueError(\n                _format(\"The is_array parameter of {0} {1!A} is True but \"\n                        \"value {2!A} is not an array.\",\n                        element_kind, element_name, value))"
    },
    {
        "instruction": "In Python, create a function that concatenates multiple values into a text string with an optional separator. If no separator is provided, an empty string is used. Convert all arguments to text values and filter out any empty values. Join the remaining values using the separator and return the resulting string. Please give the corresponding code according to the description. ",
        "response": "def text_concat(*args, **kwargs):\n    \"\"\"\n    Concatenate several values as a text string with an optional separator\n    \"\"\"\n    separator = text_value(kwargs.get(\"separator\", \"\"))\n    values = filter(None, [text_value(v) for v in args])\n    return separator.join(values)"
    },
    {
        "instruction": "In Python, create a function that takes a Zoho token and an optional headers dictionary as inputs. The function should add the Zoho token to the headers dictionary with a key of \"Authorization\" and a value of \"Zoho-oauthtoken [token]\". If the headers dictionary is not provided, create an empty one. Finally, return the headers dictionary. Please give the corresponding code according to the description. ",
        "response": "def prepare_zoho_headers(token, headers=None):\n        \"\"\"Add a `Zoho Token`_ to the request URI.\n        Recommended method of passing bearer tokens.\n\n        Authorization: Zoho-oauthtoken h480djs93hd8\n\n        .. _`Zoho-oauthtoken Token`: custom zoho token\n        \"\"\"\n        headers = headers or {}\n        headers[\"Authorization\"] = \"{token_header} {token}\".format(\n            token_header=ZOHO_TOKEN_HEADER, token=token\n        )\n        return headers"
    },
    {
        "instruction": "Define an asynchronous function in Python that sends a chat message to a conversation using the `hangouts_pb2. SendChatMessageResponse()` method. Use the `await` keyword to wait for the response from the `_pb_request()` method with the parameters `'conversations/sendchatmessage'`, `send_chat_message_request`, and `response`. Finally, return the response. Please give the corresponding code according to the description. ",
        "response": "async def send_chat_message(self, send_chat_message_request):\n        \"\"\"Send a chat message to a conversation.\"\"\"\n        response = hangouts_pb2.SendChatMessageResponse()\n        await self._pb_request('conversations/sendchatmessage',\n                               send_chat_message_request, response)\n        return response"
    },
    {
        "instruction": "In Python, this function prints the todos in a specified format. If no format is specified, it defaults to normal text output. It creates a standard printer with filters and sends the format to the output. It then tries to print the list of todos in the specified format or groups them if a group expression is provided. If there is an error while parsing the format string, it prints an error message. Please give the corresponding code according to the description. ",
        "response": "def _print(self):\n        \"\"\"\n        Prints the todos in the right format.\n\n        Defaults to normal text output (with possible colors and other pretty\n        printing). If a format was specified on the commandline, this format is\n        sent to the output.\n        \"\"\"\n        if self.printer is None:\n            # create a standard printer with some filters\n            indent = config().list_indent()\n            final_format = ' ' * indent + self.format\n\n            filters = []\n            filters.append(PrettyPrinterFormatFilter(self.todolist, final_format))\n\n            self.printer = pretty_printer_factory(self.todolist, filters)\n\n        try:\n            if self.group_expression:\n                self.out(self.printer.print_groups(self._view().groups))\n            else:\n                self.out(self.printer.print_list(self._view().todos))\n        except ListFormatError:\n            self.error('Error while parsing format string (list_format config'\n                       ' option or -F)')"
    },
    {
        "instruction": "In Python, this function performs the first verification step by decrypting the received encrypted message using the shared key generated from the session public key and the private key of the verifying device. It then extracts the identifier and signature from the decrypted message and verifies the signature using the long-term public key of the verifying device. If the identifier is not the same as the one in the credentials, an exception is raised. Finally, it signs the device information using the long-term secret key and returns the encrypted signed message. Please give the corresponding code according to the description. ",
        "response": "def verify1(self, credentials, session_pub_key, encrypted):\n        \"\"\"First verification step.\"\"\"\n        # No additional hashing used\n        self._shared = self._verify_private.get_shared_key(\n            curve25519.Public(session_pub_key), hashfunc=lambda x: x)\n\n        session_key = hkdf_expand('Pair-Verify-Encrypt-Salt',\n                                  'Pair-Verify-Encrypt-Info',\n                                  self._shared)\n\n        chacha = chacha20.Chacha20Cipher(session_key, session_key)\n        decrypted_tlv = tlv8.read_tlv(\n            chacha.decrypt(encrypted, nounce='PV-Msg02'.encode()))\n\n        identifier = decrypted_tlv[tlv8.TLV_IDENTIFIER]\n        signature = decrypted_tlv[tlv8.TLV_SIGNATURE]\n\n        if identifier != credentials.atv_id:\n            raise Exception('incorrect device response')  # TODO: new exception\n\n        info = session_pub_key + \\\n            bytes(identifier) + self._verify_public.serialize()\n        ltpk = VerifyingKey(bytes(credentials.ltpk))\n        ltpk.verify(bytes(signature), bytes(info))  # throws if no match\n\n        device_info = self._verify_public.serialize() + \\\n            credentials.client_id + session_pub_key\n\n        device_signature = SigningKey(credentials.ltsk).sign(device_info)\n\n        tlv = tlv8.write_tlv({tlv8.TLV_IDENTIFIER: credentials.client_id,\n                              tlv8.TLV_SIGNATURE: device_signature})\n\n        return chacha.encrypt(tlv, nounce='PV-Msg03'.encode())"
    },
    {
        "instruction": "This is a Python function that converts a given size string to gigabytes (GB). It takes a string as input and extracts the unit suffix (K, M, T, or none) from the end of the string. Depending on the suffix, it sets a multiplier value to convert the string to GB. If the string cannot be converted to a float, it returns 0. 0. The function then returns the converted value in GB. Please give the corresponding code according to the description. ",
        "response": "def _convert_size(self, size_str):\n        \"\"\"Convert units to GB\"\"\"\n        suffix = size_str[-1]\n        if suffix == 'K':\n            multiplier = 1.0 / (1024.0 * 1024.0)\n        elif suffix == 'M':\n            multiplier = 1.0 / 1024.0\n        elif suffix == 'T':\n            multiplier = 1024.0\n        else:\n            multiplier = 1\n\n        try:\n            val = float(size_str.split(' ')[0])\n            return val * multiplier\n        except ValueError:\n            return 0.0"
    },
    {
        "instruction": "In Python, this function finds all of the packages in the mdtraj module. It uses os. walk to recursively traverse the MDTraj directory, and adds any packages it finds to a list of packages. If a directory does not contain an __init__. py file, it is not considered a package and is skipped. Finally, the list of packages is returned. Please give the corresponding code according to the description. ",
        "response": "def find_packages():\n    \"\"\"Find all of mdtraj's python packages.\n    Adapted from IPython's setupbase.py. Copyright IPython\n    contributors, licensed under the BSD license.\n    \"\"\"\n    packages = ['mdtraj.scripts']\n    for dir,subdirs,files in os.walk('MDTraj'):\n        package = dir.replace(os.path.sep, '.')\n        if '__init__.py' not in files:\n            # not a package\n            continue\n        packages.append(package.replace('MDTraj', 'mdtraj'))\n    return packages"
    },
    {
        "instruction": "In Python, define a method that takes in a site and a list of states as input. For each state in the list, check if it is already in the list of states associated with the given site. If it is not, append the state to the list of states associated with the given site. Please give the corresponding code according to the description. ",
        "response": "def add_site_states(self, site, states):\n        \"\"\"Create new states on an agent site if the state doesn't exist.\"\"\"\n        for state in states:\n            if state not in self.site_states[site]:\n                self.site_states[site].append(state)"
    },
    {
        "instruction": "Python: Define a function that scans an abstract syntax tree for possible ways to call a specified module and function. The function returns a set of possible calls that the ast_tree could make to call the called_func. The function checks the ast for imports of the specified module and aliases of the specified function. The function always adds the default call, the set will make sure there are no duplicates. Please give the corresponding code according to the description. ",
        "response": "def _find_calls(self, ast_tree, called_module, called_func):\n        '''\n        scan the abstract source tree looking for possible ways to call the called_module\n        and called_func\n\n        since -- 7-2-12 -- Jay\n\n        example -- \n            # import the module a couple ways:\n            import pout\n            from pout import v\n            from pout import v as voom\n            import pout as poom\n\n            # this function would return: ['pout.v', 'v', 'voom', 'poom.v']\n\n        module finder might be useful someday\n        link -- http://docs.python.org/library/modulefinder.html\n        link -- http://stackoverflow.com/questions/2572582/return-a-list-of-imported-python-modules-used-in-a-script\n\n        ast_tree -- _ast.* instance -- the internal ast object that is being checked, returned from compile()\n            with ast.PyCF_ONLY_AST flag\n        called_module -- string -- we are checking the ast for imports of this module\n        called_func -- string -- we are checking the ast for aliases of this function\n\n        return -- set -- the list of possible calls the ast_tree could make to call the called_func\n        ''' \n        s = set()\n\n        # always add the default call, the set will make sure there are no dupes...\n        s.add(\"{}.{}\".format(called_module, called_func))\n\n        if hasattr(ast_tree, 'name'):\n            if ast_tree.name == called_func:\n                # the function is defined in this module\n                s.add(called_func)\n\n        if hasattr(ast_tree, 'body'):\n            # further down the rabbit hole we go\n            if isinstance(ast_tree.body, Iterable):\n                for ast_body in ast_tree.body:\n                    s.update(self._find_calls(ast_body, called_module, called_func))\n\n        elif hasattr(ast_tree, 'names'):\n            # base case\n            if hasattr(ast_tree, 'module'):\n                # we are in a from ... import ... statement\n                if ast_tree.module == called_module:\n                    for ast_name in ast_tree.names:\n                        if ast_name.name == called_func:\n                            s.add(unicode(ast_name.asname if ast_name.asname is not None else ast_name.name))\n\n            else:\n                # we are in a import ... statement\n                for ast_name in ast_tree.names:\n                    if hasattr(ast_name, 'name') and (ast_name.name == called_module):\n                        call = \"{}.{}\".format(\n                            ast_name.asname if ast_name.asname is not None else ast_name.name,\n                            called_func\n                        )\n                        s.add(call)\n\n        return s"
    },
    {
        "instruction": "Python: Define a function that retrieves git tags and finds version numbers for a release series. The function takes an optional argument 'series' which can be set to 'stable', 'oldstable', or 'testing'. If 'testing' is selected, the function will look for tags with a hyphen after the version number. Otherwise, it will look for tags with just a number. The function will return a list of version numbers sorted by semver. If 'stable' is selected, the function will return a list of stable releases. If 'oldstable' is selected, the function will return a list of old stable releases. Please give the corresponding code according to the description. ",
        "response": "def get_tagged_version_numbers(series='stable'):\n    \"\"\"Retrieve git tags and find version numbers for a release series\n\n    series - 'stable', 'oldstable', or 'testing'\"\"\"\n    releases = []\n    if series == 'testing':\n        # Testing releases always have a hyphen after the version number:\n        tag_regex = re.compile('^refs/tags/cassandra-([0-9]+\\.[0-9]+\\.[0-9]+-.*$)')\n    else:\n        # Stable and oldstable releases are just a number:\n        tag_regex = re.compile('^refs/tags/cassandra-([0-9]+\\.[0-9]+\\.[0-9]+$)')\n\n    tag_url = urllib.request.urlopen(GITHUB_TAGS)\n    for ref in (i.get('ref', '') for i in json.loads(tag_url.read())):\n        m = tag_regex.match(ref)\n        if m:\n            releases.append(LooseVersion(m.groups()[0]))\n\n    # Sort by semver:\n    releases.sort(reverse=True)\n\n    stable_major_version = LooseVersion(str(releases[0].version[0]) + \".\" + str(releases[0].version[1]))\n    stable_releases = [r for r in releases if r >= stable_major_version]\n    oldstable_releases = [r for r in releases if r not in stable_releases]\n    oldstable_major_version = LooseVersion(str(oldstable_releases[0].version[0]) + \".\" + str(oldstable_releases[0].version[1]))\n    oldstable_releases = [r for r in oldstable_releases if r >= oldstable_major_version]\n\n    if series == 'testing':\n        return [r.vstring for r in releases]\n    elif series == 'stable':\n        return [r.vstring for r in stable_releases]\n    elif series == 'oldstable':\n        return [r.vstring for r in oldstable_releases]\n    else:\n        raise AssertionError(\"unknown release series: {series}\".format(series=series))"
    },
    {
        "instruction": "In Python, create a function that generates a unique cache key for each URL. The key should be a combination of the URL path and the hash value of the URL arguments. Use the `hash` function to generate a hash value for the frozen set of the URL arguments. Finally, encode the key in ASCII format and return it. Please give the corresponding code according to the description. ",
        "response": "def make_cache_key(*args, **kwargs):\n    \"\"\"\n    Used by cache to get a unique key per URL\n    \"\"\"\n    path = request.path\n    args = str(hash(frozenset(request.args.items())))\n    return (path + args).encode('ascii', 'ignore')"
    },
    {
        "instruction": "Create a Python function that returns a reverse map of full package names to the names recognized by winrepo. The function should take an optional argument 'saltenv' which defaults to 'base'. The function should call another function 'get_repo_data' with the 'saltenv' argument and retrieve the 'name_map' dictionary. If the Python version is not 2, return the 'name_map' dictionary as is. Otherwise, create a new dictionary 'u_name_map' and copy the key-value pairs from 'name_map' to 'u_name_map', then return 'u_name_map'. Please give the corresponding code according to the description. ",
        "response": "def _get_name_map(saltenv='base'):\n    '''\n    Return a reverse map of full pkg names to the names recognized by winrepo.\n    '''\n    u_name_map = {}\n    name_map = get_repo_data(saltenv).get('name_map', {})\n\n    if not six.PY2:\n        return name_map\n\n    for k in name_map:\n        u_name_map[k] = name_map[k]\n    return u_name_map"
    },
    {
        "instruction": "In this Python function, read data from a device and check if it is not empty or zero. Then, extend the packet with the length of the data and pass it to the callback function. Finally, return the packet. Please give the corresponding code according to the description. ",
        "response": "def read(self):\n        \"\"\"We have been called to read! As a consumer, continue to read for\n        the length of the packet and then pass to the callback.\n        \"\"\"\n\n        data = self.dev.read()\n\n        if len(data) == 0:\n            self.log.warning(\"READ : Nothing received\")\n            return\n\n        if data == b'\\x00':\n            self.log.warning(\"READ : Empty packet (Got \\\\x00)\")\n            return\n\n        pkt = bytearray(data)\n        data = self.dev.read(pkt[0])\n        pkt.extend(bytearray(data))\n\n        self.log.info(\"READ : %s\" % self.format_packet(pkt))\n        self.do_callback(pkt)\n        return pkt"
    },
    {
        "instruction": "Python - This function attempts to reserve and return a list of `num_ports` contiguous unused ports. It does this by attempting to pick an unused port and checking if `num_ports` contiguous ports are free. If the ports are free, it returns the list of ports. If not, it retries for `retry_attempts` times with an interval of `retry_interval_secs` seconds between each attempt. If it fails to obtain the ports after all retries, it raises a `RuntimeError` with an appropriate error message. Please give the corresponding code according to the description. ",
        "response": "def pick_contiguous_unused_ports(\n    num_ports,\n    retry_interval_secs=3,\n    retry_attempts=5):\n  \"\"\"Reserves and returns a list of `num_ports` contiguous unused ports.\"\"\"\n  for _ in range(retry_attempts):\n    start_port = portpicker.pick_unused_port()\n    if start_port is not None:\n      ports = [start_port + p for p in range(num_ports)]\n      if all(portpicker.is_port_free(p) for p in ports):\n        return ports\n      else:\n        return_ports(ports)\n\n    time.sleep(retry_interval_secs)\n\n  raise RuntimeError(\"Unable to obtain %d contiguous unused ports.\" % num_ports)"
    },
    {
        "instruction": "Python: Create a function that takes a nested dictionary and an optional integer argument for indentation. Sort the dictionary keys and output a string with each key-value pair on a new line, with indentation based on the level of nesting. If a value is a dictionary, recursively call the function with an incremented indentation level. Otherwise, concatenate the key, an equals sign, and the value as a string. Return the resulting string. Please give the corresponding code according to the description. ",
        "response": "def pretty_dict_string(d, indent=0):\n    \"\"\"Pretty output of nested dictionaries.\n    \"\"\"\n    s = ''\n    for key, value in sorted(d.items()):\n        s += '    ' * indent + str(key)\n        if isinstance(value, dict):\n             s += '\\n' + pretty_dict_string(value, indent+1)\n        else:\n             s += '=' + str(value) + '\\n'\n    return s"
    },
    {
        "instruction": "In Python, define a method called \"pem\" that serializes an object in PEM format. Use Membio to create a memory BIO object. Then, use libcrypto to write the CMS object to the memory BIO object in PEM format. If the writing fails, raise a CMSError. Finally, return the PEM-formatted string representation of the memory BIO object. Please give the corresponding code according to the description. ",
        "response": "def pem(self):\n        \"\"\"\n        Serialize in PEM format\n        \"\"\"\n        bio = Membio()\n        if not libcrypto.PEM_write_bio_CMS(bio.bio, self.ptr):\n            raise CMSError(\"writing CMS to PEM\")\n        return str(bio)"
    },
    {
        "instruction": "In Python, add an instruction to reboot the autopilot. If `hold_in_bootloader` is True, set `param1` to 3, otherwise set it to 1. Then, send a `MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN` command with `param1` to the target system and component using `command_long_send()`. Finally, send an old style reboot immediately afterwards in case it is an older firmware that doesn't understand the new convention. Please give the corresponding code according to the description. ",
        "response": "def reboot_autopilot(self, hold_in_bootloader=False):\n        '''reboot the autopilot'''\n        if self.mavlink10():\n            if hold_in_bootloader:\n                param1 = 3\n            else:\n                param1 = 1\n            self.mav.command_long_send(self.target_system, self.target_component,\n                                       mavlink.MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN, 0,\n                                       param1, 0, 0, 0, 0, 0, 0)\n            # send an old style reboot immediately afterwards in case it is an older firmware\n            # that doesn't understand the new convention\n            self.mav.command_long_send(self.target_system, self.target_component,\n                                       mavlink.MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN, 0,\n                                       1, 0, 0, 0, 0, 0, 0)"
    },
    {
        "instruction": "In Python, define a function that takes a MouseEvent as input and checks whether it is over the scroll bar. Return True if the MouseEvent is over the scroll bar, otherwise False. The function should compare the x-coordinate of the MouseEvent with the x-coordinate of the scroll bar, and check whether the y-coordinate of the MouseEvent is within the range of the scroll bar's y-coordinates. Please give the corresponding code according to the description. ",
        "response": "def is_mouse_over(self, event):\n        \"\"\"\n        Check whether a MouseEvent is over thus scroll bar.\n\n        :param event: The MouseEvent to check.\n\n        :returns: True if the mouse event is over the scroll bar.\n        \"\"\"\n        return event.x == self._x and self._y <= event.y < self._y + self._height"
    },
    {
        "instruction": "Create a factory method that takes in an update object and returns an Update expression. The method should check if the update object has set_expr, remove_expr, add_expr or delete_expr and create a list of expressions accordingly. Finally, the method should return an instance of the class with the list of expressions as a parameter. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def from_update(cls, update):\n        \"\"\" Factory for creating an Update expression \"\"\"\n        expressions = []\n        if update.set_expr:\n            expressions.append(UpdateSetMany.from_clause(update.set_expr))\n        if update.remove_expr:\n            expressions.append(UpdateRemove.from_clause(update.remove_expr))\n        if update.add_expr:\n            expressions.append(UpdateAdd.from_clause(update.add_expr))\n        if update.delete_expr:\n            expressions.append(UpdateDelete.from_clause(update.delete_expr))\n        return cls(expressions)"
    },
    {
        "instruction": "This Python function takes in an API response and parses it into a dictionary. If `raise_errors` is set to True, it raises appropriate errors based on the status code and message in the response. If `raise_errors` is False, it returns the payload. If the response has JSON content, it extracts the payload using the `response. json()` method. If the response does not have JSON content, it extracts the payload using the `response. content` attribute. If the status code is 401, it raises an `AuthenticationError` with the message from the payload. If the status code is 500, it raises a `ServerError` with the message from the payload. If the payload has a `success` key that is False, it raises an `APIError` with the message from the payload. Please give the corresponding code according to the description. ",
        "response": "def parse_response(self, response):\n        \"\"\"Parses the API response and raises appropriate\n        errors if raise_errors was set to True\n\n        :param response: response from requests http call\n        :returns: dictionary of response\n        :rtype: dict\n        \"\"\"\n        payload = None\n        try:\n            if isinstance(response.json, collections.Callable):\n                payload = response.json()\n            else:\n                # json isn't callable in old versions of requests\n                payload = response.json\n        except ValueError:\n            # response does not have JSON content\n            payload = response.content\n\n        if not self._raise_errors:\n            return payload\n        else:\n            if response.status_code == 401:\n                raise AuthenticationError(payload['message'])\n            elif response.status_code == 500:\n                raise ServerError(payload['message'])\n            elif isinstance(payload, dict) and not payload['success']:\n                raise APIError(payload['message'])\n            else:\n                return payload"
    },
    {
        "instruction": "Check the types of the parameters in the given method's annotations. Ensure that the parameter types are instances, not classes. If a parameter is annotated with a tuple, ensure that it has exactly two elements. Check that the first element of the tuple is a valid Ptype. Ensure that the type of the second element is a subclass of Model. Ensure that there is only one parameter annotated with `Ptypes. body`. If there are more than one, raise an error. Return a list of any errors found. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def check_params_types(self, method):\n        '''Types in argument annotations must be instances, not classes.'''\n        mn = method.__name__\n        annos = dict(method.__annotations__)\n        errors = []\n        # Take a look at the syntax\n        msg_tuple = 'Parameter {} in method {} is not annotated with a tuple.'\n        msg_ptype = 'Parameter {} in method {} is not a valid Ptype.'\n        msg_mod = 'Type for param {} in method {} must descend from Model.'\n        msg_cls = 'Type for param {} in method {} must be instance (not class)'\n        bodies = []\n        for pname, anno in annos.items():\n            if pname == 'return':\n                continue\n            elif len(anno) != 2:\n                errors.append(msg_tuple.format(pname, mn))\n            else:\n                param_type, value_type = anno\n                if param_type not in Ptypes:\n                    errors.append(msg_ptype.format(pname, mn))\n                elif param_type == 'body':\n                    bodies.append(pname)\n                elif param_type == 'path':\n                    default = method.signature.parameters[pname].default\n                    if default is not inspect._empty:\n                        msg = ('Path prameter {} in method {} has a default '\n                               'value ({}) that would make it optional (which '\n                               'is wrong!)')\n                        errors.append(msg.format(pname, mn, default))\n                if hasattr(value_type, '__bases__'):\n                    errors.append(msg_cls.format(pname, mn))\n                elif Model not in value_type.__class__.__bases__:\n                    errors.append(msg_mod.format(pname, mn))\n        # Only one body parameter!\n        if len(bodies) > 1:\n            msg = 'Too many \"Ptypes.body\" params {} for method {} (max=1).'\n            errors.append(msg.format(bodies, mn))\n        return errors"
    },
    {
        "instruction": "In Python, apply the inverse of the covariance matrix to a vector or matrix by solving the equation \"K. x = y\" for \"x\", where \"K\" is the covariance matrix of the Gaussian Process with white noise and \"yerr\" components included on the diagonal. The input \"y\" can be a one-dimensional or two-dimensional array. The function returns the solution to the linear system, which will have the same shape as \"y\". If the dimensions of the input \"y\" are not compatible with the covariance matrix, a ValueError is raised. Please give the corresponding code according to the description. ",
        "response": "def apply_inverse(self, y):\n        \"\"\"\n        Apply the inverse of the covariance matrix to a vector or matrix\n\n        Solve ``K.x = y`` for ``x`` where ``K`` is the covariance matrix of\n        the GP with the white noise and ``yerr`` components included on the\n        diagonal.\n\n        Args:\n            y (array[n] or array[n, nrhs]): The vector or matrix ``y``\n            described above.\n\n        Returns:\n            array[n] or array[n, nrhs]: The solution to the linear system.\n            This will have the same shape as ``y``.\n\n        Raises:\n            ValueError: For mismatched dimensions.\n\n        \"\"\"\n        self._recompute()\n        return self.solver.solve(self._process_input(y))"
    },
    {
        "instruction": "If the current object is not the actual one, add the argument \"--add-host=spark-master:\" followed by the actual address to the list of docker parameters. If the list is None, create a new list with only this argument. Otherwise, append the argument to the existing list. Finally, return the list of docker parameters. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def docker_parameters(self, docker_parameters=None):\n        \"\"\"\n        Augment a list of \"docker run\" arguments with those needed to map the  notional Spark master address to the\n        real one, if they are different.\n        \"\"\"\n        if self != self.actual:\n            add_host_option = '--add-host=spark-master:' + self.actual\n            if docker_parameters is None:\n                docker_parameters = [add_host_option]\n            else:\n                docker_parameters.append(add_host_option)\n        return docker_parameters"
    },
    {
        "instruction": "In Python, this function creates a bounding box from the extent of a Vector object. If `outname` is not None, it writes the bounding box to a file with the given name and format. If `outname` is None, it returns the bounding box Vector object. The `overwrite` parameter determines whether or not an existing file will be overwritten. Please give the corresponding code according to the description. ",
        "response": "def bbox(self, outname=None, format='ESRI Shapefile', overwrite=True):\n        \"\"\"\n        create a bounding box from the extent of the Vector object\n\n        Parameters\n        ----------\n        outname: str or None\n            the name of the vector file to be written; if None, a Vector object is returned\n        format: str\n            the name of the file format to write\n        overwrite: bool\n            overwrite an already existing file?\n\n        Returns\n        -------\n        Vector or None\n            if outname is None, the bounding box Vector object\n        \"\"\"\n        if outname is None:\n            return bbox(self.extent, self.srs)\n        else:\n            bbox(self.extent, self.srs, outname=outname, format=format, overwrite=overwrite)"
    },
    {
        "instruction": "In Python, define a function named `_setup_delegate` that sets up resize behavior on edit for a table view. Create a `delegate` object using `DELEGATE_CLASS` and set it as the item delegate of the table view. Connect the `sizeHintChanged` signal of the delegate to a lambda function that resizes the row to fit its contents. If `RESIZE_COLUMN` is true, connect the `sizeHintChanged` signal to another lambda function that resizes the column to fit its contents. Finally, connect the `closeEditor` signal of the delegate to a lambda function that resizes the row to fit its contents after editing is done. Please give the corresponding code according to the description. ",
        "response": "def _setup_delegate(self):\n        \"\"\"Add resize behavior on edit\"\"\"\n        delegate = self.DELEGATE_CLASS(self)\n        self.setItemDelegate(delegate)\n        delegate.sizeHintChanged.connect(\n            lambda index: self.resizeRowToContents(index.row()))\n        if self.RESIZE_COLUMN:\n            delegate.sizeHintChanged.connect(\n                lambda index: self.resizeColumnToContents(index.column()))\n        delegate.closeEditor.connect(\n            lambda ed: self.resizeRowToContents(delegate.row_done_))"
    },
    {
        "instruction": "In Python, define a function called `_unjsonify` that takes in a JSON string and an optional boolean value `isattributes` (default is `False`). If `isattributes` is `True`, parse the JSON string into a dictionary using an ordered defaultdict. Otherwise, parse the JSON string into a regular dictionary. Return the resulting dictionary. Please give the corresponding code according to the description. ",
        "response": "def _unjsonify(x, isattributes=False):\n    \"\"\"Convert JSON string to an ordered defaultdict.\"\"\"\n    if isattributes:\n        obj = json.loads(x)\n        return dict_class(obj)\n    return json.loads(x)"
    },
    {
        "instruction": "Python - Create a new signing key pair by generating a verification key with optional seed and metadata. If the wallet is closed, raise WalletState. If the verification key already exists, raise ExtantRecord. Return a KeyInfo object containing the verification key and metadata. Please give the corresponding code according to the description. ",
        "response": "async def create_signing_key(self, seed: str = None, metadata: dict = None) -> KeyInfo:\n        \"\"\"\n        Create a new signing key pair.\n\n        Raise WalletState if wallet is closed, ExtantRecord if verification key already exists.\n\n        :param seed: optional seed allowing deterministic key creation\n        :param metadata: optional metadata to store with key pair\n        :return: KeyInfo for new key pair\n        \"\"\"\n\n        LOGGER.debug('Wallet.create_signing_key >>> seed: [SEED], metadata: %s', metadata)\n\n        if not self.handle:\n            LOGGER.debug('Wallet.create_signing_key <!< Wallet %s is closed', self.name)\n            raise WalletState('Wallet {} is closed'.format(self.name))\n\n        try:\n            verkey = await crypto.create_key(self.handle, json.dumps({'seed': seed} if seed else {}))\n        except IndyError as x_indy:\n            if x_indy.error_code == ErrorCode.WalletItemAlreadyExists:\n                LOGGER.debug('Wallet.create_signing_key <!< Verification key already present in wallet %s', self.name)\n                raise ExtantRecord('Verification key already present in wallet {}'.format(self.name))\n            LOGGER.debug('Wallet.create_signing_key <!< indy-sdk raised error %s', x_indy.error_code)\n            raise\n\n        await crypto.set_key_metadata(self.handle, verkey, json.dumps(metadata or {}))  # coerce None to empty\n\n        rv = KeyInfo(verkey, metadata or {})\n        LOGGER.debug('Wallet.create_signing_key <<< %s', rv)\n        return rv"
    },
    {
        "instruction": "Python: Define a function named \"get_question_form_for_update\" that retrieves a form for updating an existing question. The function should take in two arguments: \"self\" and \"question_id\" which is the ID of the question to be updated. The function should validate that the \"question_id\" argument is not null and is a valid OSID ID. If the validation is successful, the function should retrieve the \"QuestionForm\" from the database, create an object map from the retrieved data, and return the \"QuestionForm\" object. If the \"question_id\" is not found, raise a \"NotFound\" error. If the operation fails, raise an \"OperationFailed\" error. If authorization fails, raise a \"PermissionDenied\" error. This method must be implemented. Please give the corresponding code according to the description. ",
        "response": "def get_question_form_for_update(self, question_id):\n        \"\"\"Gets the question form for updating an existing question.\n\n        A new question form should be requested for each update\n        transaction.\n\n        arg:    question_id (osid.id.Id): the ``Id`` of the ``Question``\n        return: (osid.assessment.QuestionForm) - the question form\n        raise:  NotFound - ``question_id`` is not found\n        raise:  NullArgument - ``question_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        *compliance: mandatory -- This method must be implemented.*\n\n        \"\"\"\n        collection = JSONClientValidated('assessment',\n                                         collection='Item',\n                                         runtime=self._runtime)\n        if not isinstance(question_id, ABCId):\n            raise errors.InvalidArgument('the argument is not a valid OSID Id')\n        document = collection.find_one({'question._id': ObjectId(question_id.get_identifier())})\n        obj_form = objects.QuestionForm(osid_object_map=document['question'],\n                                        runtime=self._runtime,\n                                        proxy=self._proxy)\n        self._forms[obj_form.get_id().get_identifier()] = not UPDATED\n        return obj_form"
    },
    {
        "instruction": "Python: Define a method that groups the values of an object by a given criterion. The criterion can either be a string attribute or a function that returns the criterion. Implement a helper function that takes the object, the criterion, and a grouping function as arguments. The grouping function should take a dictionary, a key, and a value as arguments, and group the values by the key in the dictionary. Return the wrapped result of the grouping function applied to the object and the criterion. Please give the corresponding code according to the description. ",
        "response": "def groupBy(self, val):\n        \"\"\"\n        Groups the object's values by a criterion. Pass either a string\n        attribute to group by, or a function that returns the criterion.\n        \"\"\"\n\n        def by(result, key, value):\n            if key not in result:\n                result[key] = []\n            result[key].append(value)\n\n        res = self._group(self.obj, val, by)\n\n        return self._wrap(res)"
    },
    {
        "instruction": "In Python, create a function that installs specified packages using pip with the -U option added. The function should wait for the command to finish. The function takes a list-like object of package names as input. If the input is a string, it will be converted to a list. The function also takes a boolean value as an optional input, which is set to True by default. If the value is True, then the function will raise a ValueError if stderr is not empty. Please give the corresponding code according to the description. ",
        "response": "def pip(self, package_names, raise_on_error=True):\n        \"\"\"\n        Install specified python packages using pip. -U option added\n        Waits for command to finish.\n\n        Parameters\n        ----------\n        package_names: list-like of str\n        raise_on_error: bool, default True\n            If True then raise ValueError if stderr is not empty\n        \"\"\"\n        if isinstance(package_names, basestring):\n            package_names = [package_names]\n        cmd = \"pip install -U %s\" % (' '.join(package_names))\n        return self.wait(cmd, raise_on_error=raise_on_error)"
    },
    {
        "instruction": "This Python function maps an HTTP status code to an HttpError subclass. It takes an integer HTTP status code as input and returns the HttpError subclass that corresponds to that code. If the input code does not correspond to any known HttpError subclass, it returns the base HttpError class. The function first gets all HttpError subclasses, then checks each subclass's HTTP_STATUSES attribute to see if it matches the input code. If there is a match, it returns the subclass. Please give the corresponding code according to the description. ",
        "response": "def map_http_status_to_exception(http_code):\n        \"\"\"\n        Bind a HTTP status to an HttpError.\n\n        :param http_code: The HTTP code\n        :type http_code: int\n\n        :return The HttpError that fits to the http_code or HttpError.\n        :rtype Any subclass of HttpError or HttpError\n        \"\"\"\n        http_exceptions = HttpError.__subclasses__()\n        for http_exception in http_exceptions:\n            http_statuses = http_exception.HTTP_STATUSES\n            if isinstance(http_statuses, int):\n                http_statuses = [http_exception.HTTP_STATUSES]\n\n            try:\n                if http_code in http_statuses:\n                    return http_exception\n            except TypeError:  # Pass if statuses is not iterable (≈ None)\n                pass\n\n        return HttpError"
    },
    {
        "instruction": "In Python, define a method called \"portal\" that returns a reference to a specific portal. If a portal ID is not provided, use the default portal ID. Create a URL using the root and portal ID. Return a new instance of the Portal class using the URL, security handler, proxy URL, proxy port, and initialize it. Please give the corresponding code according to the description. ",
        "response": "def portal(self, portalID=None):\n        \"\"\"returns a specific reference to a portal\"\"\"\n        if portalID is None:\n            portalID = self.portalSelf.id\n        url = \"%s/%s\" % (self.root, portalID)\n        return Portal(url=url,\n                  securityHandler=self._securityHandler,\n                  proxy_url=self._proxy_url,\n                  proxy_port=self._proxy_port,\n                  initalize=True)"
    },
    {
        "instruction": "This is a Python function that takes two arguments: `expected` and `query`. The `expected` argument is a dictionary mapping bytes to callable functions, while the `query` argument is a dictionary mapping bytes to a list of bytes. The function returns a dictionary mapping bytes to objects, which is obtained by iterating through the `expected` dictionary and calling the corresponding callable function on the value of the `query` dictionary with the same key. If the key is not present in the `query` dictionary, an empty list is passed to the callable function. Please give the corresponding code according to the description. ",
        "response": "def parse(expected, query):\n    \"\"\"\n    Parse query parameters.\n\n    :type  expected: `dict` mapping `bytes` to `callable`\n    :param expected: Mapping of query argument names to argument parsing\n        callables.\n\n    :type  query: `dict` mapping `bytes` to `list` of `bytes`\n    :param query: Mapping of query argument names to lists of argument values,\n        this is the form that Twisted Web's `IRequest.args\n        <twisted:twisted.web.iweb.IRequest.args>` value takes.\n\n    :rtype: `dict` mapping `bytes` to `object`\n    :return: Mapping of query argument names to parsed argument values.\n    \"\"\"\n    return dict(\n        (key, parser(query.get(key, [])))\n        for key, parser in expected.items())"
    },
    {
        "instruction": "Create a new term with the given lemma, part of speech, morphological features, and tokens, and add it to the term layer. If an id is not given, create a new id tXXX where XXX is the next available integer. Return the newly created term. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def create_term(self, lemma, pos, morphofeat, tokens, id=None):\n        \"\"\"\n        Create a new term and add it to the term layer\n        @type lemma: string\n        @param lemma: The lemma of the term\n        @type pos: string\n        @param pos: The postrag(rst letter) of the POS attribute\n        @type morphofeat: string\n        @param morphofeat: The morphofeat (full morphological features) of the term\n        @type tokens: sequence of L{Cwf}\n        @param tokens: the token(s) that this term describes\n        @type id: string\n        @param id: the id of the term, if not given an id tXXX will be created\n        \"\"\"\n        if id is None:\n            n = 1 if self.term_layer is None else len(self.term_layer.idx) + 1\n            id = \"t{n}\".format(**locals())\n        new_term = Cterm(type=self.type)\n        new_term.set_id(id)\n        new_term.set_lemma(lemma)\n        new_term.set_pos(pos)\n        new_term.set_morphofeat(morphofeat)\n        new_span = Cspan()\n        for token in tokens:\n            new_span.add_target_id(token.get_id())\n        new_term.set_span(new_span)\n        self.add_term(new_term)\n        return new_term"
    },
    {
        "instruction": "In Python, create a function that takes a collection of strings as input. The function should add a unique Unicode character to the end of each string in the collection. This is necessary for building a generalized annotated suffix tree. The function should then return the updated collection of strings, encoded in Unicode. Use the provided hex code trick to handle potential issues with a narrow Python installation. The input collection should have a maximum size of 1,100,000. Please give the corresponding code according to the description. ",
        "response": "def make_unique_endings(strings_collection):\n    \"\"\"\n    Make each string in the collection end with a unique character.\n    Essential for correct builiding of a generalized annotated suffix tree.\n    Returns the updated strings collection, encoded in Unicode.\n\n    max strings_collection ~ 1.100.000\n    \n    \"\"\"\n    res = []\n    for i in range(len(strings_collection)):\n        # NOTE(msdubov): a trick to handle 'narrow' python installation issues.\n        hex_code = hex(consts.String.UNICODE_SPECIAL_SYMBOLS_START+i)\n        hex_code = r\"\\U\" + \"0\" * (8 - len(hex_code) + 2) + hex_code[2:]\n        res.append(strings_collection[i] + hex_code.decode(\"unicode-escape\"))\n    return res"
    },
    {
        "instruction": "In Python, create a function that generates an Excel file byte stream in chart data format for the specified category chart. Use the `_open_worksheet` method to open the worksheet, and `_populate_worksheet` to populate it. Return the byte stream using the `getvalue()` method. Please give the corresponding code according to the description. ",
        "response": "def xlsx_blob(self):\n        \"\"\"\n        Return the byte stream of an Excel file formatted as chart data for\n        the category chart specified in the chart data object.\n        \"\"\"\n        xlsx_file = BytesIO()\n        with self._open_worksheet(xlsx_file) as (workbook, worksheet):\n            self._populate_worksheet(workbook, worksheet)\n        return xlsx_file.getvalue()"
    },
    {
        "instruction": "In Python, this function takes a query and recursively compiles each expression in it. If the query is a dictionary, it checks if the keys start with '$'. If so, it calls the corresponding query function with the value. If not, it calls the filter_query function with the key and value. It then creates a list of expressions and uses the boolean_operator_query function to combine them using the 'and' operator. If there is only one expression, it returns that expression. If there are no expressions, it returns a lambda function. If the query is not a dictionary, it simply returns the query. Please give the corresponding code according to the description. ",
        "response": "def compile_query(query):\n    \"\"\"Compile each expression in query recursively.\"\"\"\n    if isinstance(query, dict):\n        expressions = []\n        for key, value in query.items():\n            if key.startswith('$'):\n                if key not in query_funcs:\n                    raise AttributeError('Invalid operator: {}'.format(key))\n                expressions.append(query_funcs[key](value))\n            else:\n                expressions.append(filter_query(key, value))\n        if len(expressions) > 1:\n            return boolean_operator_query(operator.and_)(expressions)\n        else:\n            return (\n                expressions[0]\n                if len(expressions)\n                else lambda query_function: query_function(None, None)\n            )\n    else:\n        return query"
    },
    {
        "instruction": "In Python, define a method called \"rows\" that takes in two arguments: \"self\" and \"offs\". This method should iterate over raw index and byte tuples from a given offset. It should use the \"slab. scanByRange\" method to scan the database by range, starting from the given offset. For each tuple found, it should convert the index from bytes to an integer using \"s_common. int64un\" and yield a tuple of the index and bytes. Please give the corresponding code according to the description. ",
        "response": "def rows(self, offs):\n        '''\n        Iterate over raw indx, bytes tuples from a given offset.\n        '''\n        lkey = s_common.int64en(offs)\n        for lkey, byts in self.slab.scanByRange(lkey, db=self.db):\n            indx = s_common.int64un(lkey)\n            yield indx, byts"
    },
    {
        "instruction": "In Python, define a generator function `parse_emails` that extracts emails from a file starting from a given index. The function takes in the parameters `self`, `email_filename`, and `index` (default value 0). The function yields an instance of `mailbox. mboxMessage` for each email in the file. The function logs the parsing of the email dump. The function uses a while loop to iterate through each email in the mbox file, starting from the given index, and yields a tuple containing the index and the email message. Please give the corresponding code according to the description. ",
        "response": "def parse_emails(self, email_filename, index=0):\n        \"\"\"Generator function that parse and extract emails from the file\n        `email_filename` starting from the position `index`.\n\n        Yield: An instance of `mailbox.mboxMessage` for each email in the\n        file.\n\n        \"\"\"\n        self.log(\"Parsing email dump: %s.\" % email_filename)\n        mbox = mailbox.mbox(email_filename, factory=CustomMessage)\n\n        # Get each email from mbox file\n        #\n        #   The following implementation was used because the object\n        #   mbox does not support slicing. Converting the object to a\n        #   tuple (as represented in the code down here) was a valid\n        #   option but its performance was too poor.\n        #\n        # for message in tuple(mbox)[index:]:\n        #     yield message\n        #\n        key = index\n        while key in mbox:\n            key += 1\n            yield key-1, mbox[key-1]"
    },
    {
        "instruction": "Given a value `val`, this function returns a list of matrices describing the channel for the given value. If `val` has a `_channel_` method and its result is not `NotImplemented`, that result is returned. Otherwise, if `val` has a `_mixture_` method and its result is not `NotImplemented`, a tuple made up of the channel corresponding to that mixture being a probabilistic mixture of unitaries is returned. Otherwise, if `val` has a `_unitary_` method and its result is not `NotImplemented`, a tuple made up of that result is returned. If none of these methods are available, and a default value was specified, the default value is returned. If no default value was specified, a TypeError is raised. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def channel(val: Any,\n            default: Any = RaiseTypeErrorIfNotProvided\n            ) -> Union[Tuple[np.ndarray], Sequence[TDefault]]:\n    r\"\"\"Returns a list of matrices describing the channel for the given value.\n\n    These matrices are the terms in the operator sum representation of\n    a quantum channel. If the returned matrices are {A_0,A_1,..., A_{r-1}},\n    then this describes the channel:\n        \\rho \\rightarrow \\sum_{k=0}^{r-1} A_0 \\rho A_0^\\dagger\n    These matrices are required to satisfy the trace preserving condition\n        \\sum_{k=0}^{r-1} A_i^\\dagger A_i = I\n    where I is the identity matrix. The matrices A_i are sometimes called\n    Krauss or noise operators.\n\n    Args:\n        val: The value to describe by a channel.\n        default: Determines the fallback behavior when `val` doesn't have\n            a channel. If `default` is not set, a TypeError is raised. If\n            default is set to a value, that value is returned.\n\n    Returns:\n        If `val` has a `_channel_` method and its result is not NotImplemented,\n        that result is returned. Otherwise, if `val` has a `_mixture_` method\n        and its results is not NotImplement a tuple made up of channel\n        corresponding to that mixture being a probabilistic mixture of unitaries\n        is returned.  Otherwise, if `val` has a `_unitary_` method and\n        its result is not NotImplemented a tuple made up of that result is\n        returned. Otherwise, if a default value was specified, the default\n        value is returned.\n\n    Raises:\n        TypeError: `val` doesn't have a _channel_ or _unitary_ method (or that\n            method returned NotImplemented) and also no default value was\n            specified.\n    \"\"\"\n    channel_getter = getattr(val, '_channel_', None)\n    channel_result = (\n        NotImplemented if channel_getter is None else channel_getter())\n    if channel_result is not NotImplemented:\n        return tuple(channel_result)\n\n    mixture_getter = getattr(val, '_mixture_', None)\n    mixture_result = (\n        NotImplemented if mixture_getter is None else mixture_getter())\n    if mixture_result is not NotImplemented:\n        return tuple(np.sqrt(p) * u for p, u in mixture_result)\n\n    unitary_getter = getattr(val, '_unitary_', None)\n    unitary_result = (\n        NotImplemented if unitary_getter is None else unitary_getter())\n    if unitary_result is not NotImplemented:\n        return (unitary_result,)\n\n    if default is not RaiseTypeErrorIfNotProvided:\n        return default\n\n    if (channel_getter is None and unitary_getter is None\n            and mixture_getter is None):\n        raise TypeError(\"object of type '{}' has no _channel_ or _mixture_ or \"\n                        \"_unitary_ method.\".format(type(val)))\n    raise TypeError(\"object of type '{}' does have a _channel_, _mixture_ or \"\n                \"_unitary_ method, but it returned NotImplemented.\"\n                .format(type(val)))"
    },
    {
        "instruction": "In Python, define a function that takes in a future as an argument and checks if it is done. If the future is done and the previous one is not, set the current time as the time when the future was done. Keep track of the previous done future. Please give the corresponding code according to the description. ",
        "response": "def check_future(self, fut):\n        \"\"\"Call with each future that is to be yielded on\"\"\"\n        done = self.done = fut.done()\n        if done and not self.prev_done:\n            self.done_since = self.ioloop.time()\n        self.prev_done = done"
    },
    {
        "instruction": "In Python, define a function called \"on_close\" that unregisters all files, stores the session, and closes all files except for the first editor. Return True if all files were closed successfully. Please give the corresponding code according to the description. ",
        "response": "def on_close(self):\n        \"\"\"\n        Defines the slot triggered on Framework close.\n        \"\"\"\n\n        LOGGER.debug(\"> Calling '{0}' Component Framework 'on_close' method.\".format(self.__class__.__name__))\n\n        map(self.unregister_file, self.list_files())\n\n        if self.store_session() and self.close_all_files(leave_first_editor=False):\n            return True"
    },
    {
        "instruction": "In Python, this function takes in a color value and sets up the color scheme. If the color is a dictionary, it checks if it has a 'column' value and raises an error if it doesn't. It then gets the 'scheme' value if it exists and sets the color to the 'column' value. If the color is not a dictionary and is not a web color or hex value, it is assumed to be a column name. Otherwise, it is assumed to be a color. The function returns the color and scheme values. Please give the corresponding code according to the description. ",
        "response": "def _parse_color(self, color):\n        \"\"\"Setup the color scheme\"\"\"\n        # If column was specified, force a scheme\n        # It could be that there is a column named 'blue' for example\n        if isinstance(color, dict):\n            if 'column' not in color:\n                raise ValueError(\"Color must include a 'column' value\")\n            # get scheme if exists. if not, one will be chosen later if needed\n            scheme = color.get('scheme')\n            color = color['column']\n            self.style_cols[color] = None\n        elif (color and\n              color[0] != '#' and\n              color not in webcolors.CSS3_NAMES_TO_HEX):\n            # color specified that is not a web color or hex value so its\n            #  assumed to be a column name\n            color = color\n            self.style_cols[color] = None\n            scheme = None\n        else:\n            # assume it's a color (hex, rgb(...),  or webcolor name)\n            color = color\n            scheme = None\n\n        return color, scheme"
    },
    {
        "instruction": "Python: Verify that the extension in the given statement matches the extension definition. If the extension is not defined in the current submodule, check if it is defined in the original module. If it is not defined in either module, add an error to the context. If the extension has an argument, ensure that the statement also has an argument. If the extension does not have an argument, ensure that the statement also does not have an argument. Please give the corresponding code according to the description. ",
        "response": "def v_type_extension(ctx, stmt):\n    \"\"\"verify that the extension matches the extension definition\"\"\"\n    (modulename, identifier) = stmt.keyword\n    revision = stmt.i_extension_revision\n    module = modulename_to_module(stmt.i_module, modulename, revision)\n    if module is None:\n        return\n    if identifier not in module.i_extensions:\n        if module.i_modulename == stmt.i_orig_module.i_modulename:\n            # extension defined in current submodule\n            if identifier not in stmt.i_orig_module.i_extensions:\n                err_add(ctx.errors, stmt.pos, 'EXTENSION_NOT_DEFINED',\n                        (identifier, module.arg))\n                return\n            else:\n                stmt.i_extension = stmt.i_orig_module.i_extensions[identifier]\n        else:\n            err_add(ctx.errors, stmt.pos, 'EXTENSION_NOT_DEFINED',\n                    (identifier, module.arg))\n            return\n    else:\n        stmt.i_extension = module.i_extensions[identifier]\n    ext_arg = stmt.i_extension.search_one('argument')\n    if stmt.arg is not None and ext_arg is None:\n        err_add(ctx.errors, stmt.pos, 'EXTENSION_ARGUMENT_PRESENT',\n                identifier)\n    elif stmt.arg is None and ext_arg is not None:\n        err_add(ctx.errors, stmt.pos, 'EXTENSION_NO_ARGUMENT_PRESENT',\n                identifier)"
    },
    {
        "instruction": "In Python, the function `addIndexOnAttribute` adds an index for an arbitrary attribute. This is used by the `getElementsByAttr` function. The `attributeName` argument is the name of the attribute that should be indexed, and will be lowercased. The function creates a dictionary to store the index, and defines an inner function `_otherIndexFunction` that will be used to populate the index. The inner function takes a tag and checks if it has the specified attribute. If it does, it adds the tag to the index. The inner function is then added to a dictionary of index functions for the specified attribute. Please give the corresponding code according to the description. ",
        "response": "def addIndexOnAttribute(self, attributeName):\n        '''\n            addIndexOnAttribute - Add an index for an arbitrary attribute. This will be used by the getElementsByAttr function.\n                You should do this prior to parsing, or call reindex. Otherwise it will be blank. \"name\" and \"id\" will have no effect.\n    \n                @param attributeName <lowercase str> - An attribute name. Will be lowercased.\n        '''\n        attributeName = attributeName.lower()\n        self._otherAttributeIndexes[attributeName] = {}\n\n        def _otherIndexFunction(self, tag):\n            thisAttribute = tag.getAttribute(attributeName)\n            if thisAttribute is not None:\n                if thisAttribute not in self._otherAttributeIndexes[attributeName]:\n                    self._otherAttributeIndexes[attributeName][thisAttribute] = []\n                self._otherAttributeIndexes[attributeName][thisAttribute].append(tag)\n\n\n        self.otherAttributeIndexFunctions[attributeName] = _otherIndexFunction"
    },
    {
        "instruction": "In Python, the `remove()` function removes files and checks the repository for potential problems. It first formats the paths of the input sources as relative to the client path. It then updates the metadata files for each dataset and unlinks any files that are to be removed. Next, it manages `. gitattributes` for external storage and warns the user if there are any custom `. gitattributes`. If the user chooses to edit `. gitattributes`, the function opens it for editing. Finally, the function removes the files specified in the input sources using the `git rm -rf` command. Please give the corresponding code according to the description. ",
        "response": "def remove(ctx, client, sources):\n    \"\"\"Remove files and check repository for potential problems.\"\"\"\n    from renku.api._git import _expand_directories\n\n    def fmt_path(path):\n        \"\"\"Format path as relative to the client path.\"\"\"\n        return str(Path(path).absolute().relative_to(client.path))\n\n    files = {\n        fmt_path(source): fmt_path(file_or_dir)\n        for file_or_dir in sources\n        for source in _expand_directories((file_or_dir, ))\n    }\n\n    # 1. Update dataset metadata files.\n    with progressbar(\n        client.datasets.values(),\n        item_show_func=lambda item: str(item.short_id) if item else '',\n        label='Updating dataset metadata',\n        width=0,\n    ) as bar:\n        for dataset in bar:\n            remove = []\n            for key, file_ in dataset.files.items():\n                filepath = fmt_path(file_.full_path)\n                if filepath in files:\n                    remove.append(key)\n\n            if remove:\n                for key in remove:\n                    dataset.unlink_file(key)\n\n                dataset.to_yaml()\n\n    # 2. Manage .gitattributes for external storage.\n    tracked = tuple(\n        path for path, attr in client.find_attr(*files).items()\n        if attr.get('filter') == 'lfs'\n    )\n    client.untrack_paths_from_storage(*tracked)\n    existing = client.find_attr(*tracked)\n    if existing:\n        click.echo(WARNING + 'There are custom .gitattributes.\\n')\n        if click.confirm(\n            'Do you want to edit \".gitattributes\" now?', default=False\n        ):\n            click.edit(filename=str(client.path / '.gitattributes'))\n\n    # Finally remove the files.\n    final_sources = list(set(files.values()))\n    if final_sources:\n        run(['git', 'rm', '-rf'] + final_sources, check=True)"
    },
    {
        "instruction": "Given a key, retrieve the evaluated schema expression from a subkey. If the member node is non-existent, return an instance of `schema. AnySchema()`. Evaluate the member schema and ensure that it is an instance of `schema. Schema`. If it is not, raise a `ValueError` with a message indicating the node, schema node, and actual type that was received. Return the evaluated schema expression. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def get_schema_spec(self, key):\n    \"\"\"Return the evaluated schema expression from a subkey.\"\"\"\n    member_node = self._ast_node.member.get(key, None)\n    if not member_node:\n      return schema.AnySchema()\n\n    s = framework.eval(member_node.member_schema, self.env(self))\n    if not isinstance(s, schema.Schema):\n      raise ValueError('Node %r with schema node %r should evaluate to Schema, got %r' % (member_node, member_node.member_schema, s))\n    return s"
    },
    {
        "instruction": "In Python, this function deletes a specific shaping rule by finding the filter parameters of the rule and using them to delete the rule. If the filter parameters are not found, it returns an error message. If there are no more filters, it deletes the qdiscs. Please give the corresponding code according to the description. ",
        "response": "def delete_tc(self):\n        \"\"\"\n        Delete a specific shaping rule.\n        \"\"\"\n\n        rule_finder = TcShapingRuleFinder(logger=logger, tc=self)\n        filter_param = rule_finder.find_filter_param()\n\n        if not filter_param:\n            message = \"shaping rule not found ({}).\".format(rule_finder.get_filter_string())\n            if rule_finder.is_empty_filter_condition():\n                message += \" you can delete all of the shaping rules with --all option.\"\n            logger.error(message)\n\n            return 1\n\n        logger.info(\"delete a shaping rule: {}\".format(dict(filter_param)))\n\n        filter_del_command = (\n            \"{command:s} del dev {dev:s} protocol {protocol:s} \"\n            \"parent {parent:} handle {handle:s} prio {prio:} u32\".format(\n                command=get_tc_base_command(TcSubCommand.FILTER),\n                dev=rule_finder.get_parsed_device(),\n                protocol=filter_param.get(Tc.Param.PROTOCOL),\n                parent=\"{:s}:\".format(rule_finder.find_parent().split(\":\")[0]),\n                handle=filter_param.get(Tc.Param.FILTER_ID),\n                prio=filter_param.get(Tc.Param.PRIORITY),\n            )\n        )\n\n        result = run_command_helper(\n            command=filter_del_command, ignore_error_msg_regexp=None, notice_msg=None\n        )\n\n        rule_finder.clear()\n        if not rule_finder.is_any_filter():\n            logger.debug(\"there are no filters remain. delete qdiscs.\")\n            self.delete_all_tc()\n\n        return result"
    },
    {
        "instruction": "In Python, this function updates a set of parameters by iterating through a series of checks to determine if the Jacobian matrix needs to be updated. If it does, it updates it, otherwise it checks if the Broyden Jacobian needs to be updated, and if so, updates it. If neither need to be updated, it finds the Levenberg-Marquardt updates for the gradient and increases damping until a good step is found. If a good step is found, the function updates the state and parameter values, and decreases damping. If not, it raises a RuntimeError. Please give the corresponding code according to the description. ",
        "response": "def _run1(self):\n        \"\"\"workhorse for do_run_1\"\"\"\n        if self.check_update_J():\n            self.update_J()\n        else:\n            if self.check_Broyden_J():\n                self.update_Broyden_J()\n            if self.check_update_eig_J():\n                self.update_eig_J()\n\n        #1. Assuming that J starts updated:\n        delta_vals = self.find_LM_updates(self.calc_grad())\n\n        #2. Increase damping until we get a good step:\n        er1 = self.update_function(self.param_vals + delta_vals)\n        good_step = (find_best_step([self.error, er1]) == 1)\n        if not good_step:\n            er0 = self.update_function(self.param_vals)\n            if np.abs(er0 -self.error)/er0 > 1e-7:\n                raise RuntimeError('Function updates are not exact.')\n            CLOG.debug('Bad step, increasing damping')\n            CLOG.debug('\\t\\t%f\\t%f' % (self.error, er1))\n            grad = self.calc_grad()\n            for _try in range(self._max_inner_loop):\n                self.increase_damping()\n                delta_vals = self.find_LM_updates(grad)\n                er1 = self.update_function(self.param_vals + delta_vals)\n                good_step = (find_best_step([self.error, er1]) == 1)\n                if good_step:\n                    break\n            else:\n                er0 = self.update_function(self.param_vals)\n                CLOG.warn('Stuck!')\n                if np.abs(er0 -self.error)/er0 > 1e-7:\n                    raise RuntimeError('Function updates are not exact.')\n\n        #state is updated, now params:\n        if good_step:\n            self._last_error = self.error\n            self.error = er1\n            CLOG.debug('Good step\\t%f\\t%f' % (self._last_error, self.error))\n            self.update_param_vals(delta_vals, incremental=True)\n            self.decrease_damping()"
    },
    {
        "instruction": "In Python, define a function named `call_fn_name` that takes in a `token` parameter. If `token. attr` is not `None`, return a string formatted with the `token. kind` and `token. attr`. Otherwise, return a string formatted with `token. kind` and `0`. This function customizes the `CALL_FUNCTION` by adding the number of positional arguments. Please give the corresponding code according to the description. ",
        "response": "def call_fn_name(token):\n        \"\"\"Customize CALL_FUNCTION to add the number of positional arguments\"\"\"\n        if token.attr is not None:\n            return '%s_%i' % (token.kind, token.attr)\n        else:\n            return '%s_0' % (token.kind)"
    },
    {
        "instruction": "In Python, add a method to close the session and shutdown the pool. Call the close method on the session object to close it. Then call the shutdown method on the pool object to shut it down. If the wait parameter is True, wait until all tasks have completed before shutting down. Please give the corresponding code according to the description. ",
        "response": "def close(self, wait=False):\n        \"\"\"Close session, shutdown pool.\"\"\"\n        self.session.close()\n        self.pool.shutdown(wait=wait)"
    },
    {
        "instruction": "Calculate the intrinsic synchrotron differential spectrum for the given photon energy array using the approximation of Aharonian, Kelner, and Prosekin 2010. The synchrotron is computed for a random magnetic field. The function takes in a photon energy array as a parameter, strips the units, and computes the synchrotron using the AKP10 Eq. D7. Finally, it returns the computed spectrum in units of 1/(s eV). This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _spectrum(self, photon_energy):\n        \"\"\"Compute intrinsic synchrotron differential spectrum for energies in\n        ``photon_energy``\n\n        Compute synchrotron for random magnetic field according to\n        approximation of Aharonian, Kelner, and Prosekin 2010, PhysRev D 82,\n        3002 (`arXiv:1006.1045 <http://arxiv.org/abs/1006.1045>`_).\n\n        Parameters\n        ----------\n        photon_energy : :class:`~astropy.units.Quantity` instance\n            Photon energy array.\n        \"\"\"\n\n        outspecene = _validate_ene(photon_energy)\n\n        from scipy.special import cbrt\n\n        def Gtilde(x):\n            \"\"\"\n            AKP10 Eq. D7\n\n            Factor ~2 performance gain in using cbrt(x)**n vs x**(n/3.)\n            Invoking crbt only once reduced time by ~40%\n            \"\"\"\n            cb = cbrt(x)\n            gt1 = 1.808 * cb / np.sqrt(1 + 3.4 * cb ** 2.0)\n            gt2 = 1 + 2.210 * cb ** 2.0 + 0.347 * cb ** 4.0\n            gt3 = 1 + 1.353 * cb ** 2.0 + 0.217 * cb ** 4.0\n            return gt1 * (gt2 / gt3) * np.exp(-x)\n\n        log.debug(\"calc_sy: Starting synchrotron computation with AKB2010...\")\n\n        # strip units, ensuring correct conversion\n        # astropy units do not convert correctly for gyroradius calculation\n        # when using cgs (SI is fine, see\n        # https://github.com/astropy/astropy/issues/1687)\n        CS1_0 = np.sqrt(3) * e.value ** 3 * self.B.to(\"G\").value\n        CS1_1 = (\n            2\n            * np.pi\n            * m_e.cgs.value\n            * c.cgs.value ** 2\n            * hbar.cgs.value\n            * outspecene.to(\"erg\").value\n        )\n        CS1 = CS1_0 / CS1_1\n\n        # Critical energy, erg\n        Ec = (\n            3\n            * e.value\n            * hbar.cgs.value\n            * self.B.to(\"G\").value\n            * self._gam ** 2\n        )\n        Ec /= 2 * (m_e * c).cgs.value\n\n        EgEc = outspecene.to(\"erg\").value / np.vstack(Ec)\n        dNdE = CS1 * Gtilde(EgEc)\n        # return units\n        spec = (\n            trapz_loglog(np.vstack(self._nelec) * dNdE, self._gam, axis=0)\n            / u.s\n            / u.erg\n        )\n        spec = spec.to(\"1/(s eV)\")\n\n        return spec"
    },
    {
        "instruction": "In Python, this method processes a value by checking if it has been encoded with base64 or hide scheme. If the name of the setting contains a colon, it indicates that it has been encoded. If the encoding scheme is base64, it decodes the value using a PrivateBase64 class. If the encoding scheme is hide, it decodes the value using a PrivateHide class. If the encoding scheme is not recognized, an error is raised. The method returns the name and the decoded value. Please give the corresponding code according to the description. ",
        "response": "def process_value(self, name, value, module_name):\n        \"\"\"\n        This method allow any encodings to be dealt with.\n        Currently only base64 is supported.\n\n        Note: If other encodings are added then this should be split so that\n        there is a method for each encoding.\n        \"\"\"\n        # if we have a colon in the name of a setting then it\n        # indicates that it has been encoded.\n        if \":\" in name:\n\n            if module_name.split(\" \")[0] in I3S_MODULE_NAMES + [\"general\"]:\n                self.error(\"Only py3status modules can use obfuscated\")\n\n            if type(value).__name__ not in [\"str\", \"unicode\"]:\n                self.error(\"Only strings can be obfuscated\")\n\n            (name, scheme) = name.split(\":\")\n            if scheme == \"base64\":\n                value = PrivateBase64(value, module_name)\n            elif scheme == \"hide\":\n                value = PrivateHide(value, module_name)\n            else:\n                self.error(\"Unknown scheme {} for data\".format(scheme))\n\n        return name, value"
    },
    {
        "instruction": "In Python, define a method called `element_count` that retrieves the number of elements in a given type. If the type is not an array or vector, raise an exception. The method should return an integer representing the number of elements. Please give the corresponding code according to the description. ",
        "response": "def element_count(self):\n        \"\"\"Retrieve the number of elements in this type.\n\n        Returns an int.\n\n        If the Type is not an array or vector, this raises.\n        \"\"\"\n        result = conf.lib.clang_getNumElements(self)\n        if result < 0:\n            raise Exception('Type does not have elements.')\n\n        return result"
    },
    {
        "instruction": "Python function to save an AnswerFactory Project. If the project already exists, use the put operation to update it. Otherwise, use the post operation to create a new project. The function takes a dictionary specifying an AnswerFactory Project as input. If the project exists, return its ID. If it's a new project, return the ID of the saved project. If there is an error, raise an exception. Please give the corresponding code according to the description. ",
        "response": "def save(self, project):\n        '''\n        Saves an AnswerFactory Project\n\n        Args:\n            project (dict): Dictionary specifying an AnswerFactory Project.\n\n        Returns:\n            AnswerFactory Project id\n        '''\n\n        # test if this is a create vs. an update\n        if 'id' in project and project['id'] is not None:\n            # update -> use put op\n            self.logger.debug('Updating existing project: ' + json.dumps(project))\n            url = '%(base_url)s/%(project_id)s' % {\n                'base_url': self.base_url, 'project_id': project['id']\n            }\n            r = self.gbdx_connection.put(url, json=project)\n            try:\n                r.raise_for_status()\n            except:\n                print(r.text)\n                raise\n            # updates only get the Accepted response -> return the original project id\n            return project['id']\n        else:\n            self.logger.debug('Creating new project: ' + json.dumps(project))\n            # create -> use post op\n            url = self.base_url\n            r = self.gbdx_connection.post(url, json=project)\n            try:\n                r.raise_for_status()\n            except:\n                print(r.text)\n                raise\n            project_json = r.json()\n            # create returns the saved project -> return the project id that's saved\n            return project_json['id']"
    },
    {
        "instruction": "In Python, calculate the angle to the horizontal for the connection from point C to point P using the arcus sine function. Find the quadrant vector S = P - C is located in to resolve ambiguity. Then, calculate the absolute angle from the horizontal. If the x-coordinate of S is negative, adjust the angle to make the arcsin result unique based on the quadrant. If the y-coordinate of S is negative, adjust the angle again. Finally, return the calculated angle. Please give the corresponding code according to the description. ",
        "response": "def horizontal_angle(C, P):\n        \"\"\"Return the angle to the horizontal for the connection from C to P.\n        This uses the arcus sine function and resolves its inherent ambiguity by\n        looking up in which quadrant vector S = P - C is located.\n        \"\"\"\n        S = Point(P - C).unit                   # unit vector 'C' -> 'P'\n        alfa = math.asin(abs(S.y))              # absolute angle from horizontal\n        if S.x < 0:                             # make arcsin result unique\n            if S.y <= 0:                        # bottom-left\n                alfa = -(math.pi - alfa)\n            else:                               # top-left\n                alfa = math.pi - alfa\n        else:\n            if S.y >= 0:                        # top-right\n                pass\n            else:                               # bottom-right\n                alfa = - alfa\n        return alfa"
    },
    {
        "instruction": "In Python, this function returns an array of immediate neighbors for each vertex in a mesh. It does this by first checking if a cached vertex adjacency graph already exists. If it does, it retrieves the neighbors from there. The resulting array has a length equal to the number of vertices in the mesh. Each element of the array is a list of integers representing the indices of neighboring vertices. This function is useful for tasks such as smoothing, where nearby vertices are needed. An example usage is shown where the immediate neighbors of the first vertex of a box mesh are retrieved. Please give the corresponding code according to the description. ",
        "response": "def vertex_neighbors(self):\n        \"\"\"\n        The vertex neighbors of each vertex of the mesh, determined from\n        the cached vertex_adjacency_graph, if already existent.\n\n        Returns\n        ----------\n        vertex_neighbors : (len(self.vertices),) int\n          Represents immediate neighbors of each vertex along\n          the edge of a triangle\n\n        Examples\n        ----------\n        This is useful for getting nearby vertices for a given vertex,\n        potentially for some simple smoothing techniques.\n\n        >>> mesh = trimesh.primitives.Box()\n        >>> mesh.vertex_neighbors[0]\n        [1,2,3,4]\n        \"\"\"\n        graph = self.vertex_adjacency_graph\n        neighbors = [list(graph.neighbors(i)) for\n                     i in range(len(self.vertices))]\n        return np.array(neighbors)"
    },
    {
        "instruction": "In Python, validate the class entries by checking if the field type is between 0 and 5, if the rectangle is not infinite or empty, if the field name is not empty, if the border color and fill color are lists or tuples with 1 to 4 floats, if the text color is a list or tuple with 1 to 4 floats, and if the border width and text font size are not empty. Finally, call the appropriate check function based on the field type. If any of these conditions are not met, raise an appropriate error. Please give the corresponding code according to the description. ",
        "response": "def _validate(self):\n        \"\"\"Validate the class entries.\n        \"\"\"\n        checker = (self._check0, self._check1, self._check2, self._check3,\n                   self._check4, self._check5)\n        if not 0 <= self.field_type <= 5:\n            raise NotImplementedError(\"unsupported widget type\")\n        if type(self.rect) is not Rect:\n            raise ValueError(\"invalid rect\")\n        if self.rect.isInfinite or self.rect.isEmpty:\n            raise ValueError(\"rect must be finite and not empty\")\n        if not self.field_name:\n            raise ValueError(\"field name missing\")\n\n        if self.border_color:\n            if not len(self.border_color) in range(1,5) or \\\n               type(self.border_color) not in (list, tuple):\n               raise ValueError(\"border_color must be 1 - 4 floats\")\n\n        if self.fill_color:\n            if not len(self.fill_color) in range(1,5) or \\\n               type(self.fill_color) not in (list, tuple):\n               raise ValueError(\"fill_color must be 1 - 4 floats\")\n\n        if not self.text_color:\n            self.text_color = (0, 0, 0)\n        if not len(self.text_color) in range(1,5) or \\\n            type(self.text_color) not in (list, tuple):\n            raise ValueError(\"text_color must be 1 - 4 floats\")\n\n        if not self.border_width:\n            self.border_width = 0\n\n        if not self.text_fontsize:\n            self.text_fontsize = 0\n\n        checker[self.field_type]()"
    },
    {
        "instruction": "In Python, add an instruction to the `disable_page_breakpoint` function to disable the page breakpoint at the given memory address for the specified process ID. If the breakpoint is currently running, delete it from all threads, and then disable it. Please give the corresponding code according to the description. ",
        "response": "def disable_page_breakpoint(self, dwProcessId, address):\n        \"\"\"\n        Disables the page breakpoint at the given address.\n\n        @see:\n            L{define_page_breakpoint},\n            L{has_page_breakpoint},\n            L{get_page_breakpoint},\n            L{enable_page_breakpoint}\n            L{enable_one_shot_page_breakpoint},\n            L{erase_page_breakpoint},\n\n        @type  dwProcessId: int\n        @param dwProcessId: Process global ID.\n\n        @type  address: int\n        @param address: Memory address of breakpoint.\n        \"\"\"\n        p  = self.system.get_process(dwProcessId)\n        bp = self.get_page_breakpoint(dwProcessId, address)\n        if bp.is_running():\n            self.__del_running_bp_from_all_threads(bp)\n        bp.disable(p, None)"
    },
    {
        "instruction": "In Python, define a function that conditionally sets the \"docker_upstream_name\" field as required. If the \"content_type\" attribute is \"docker\", then set the \"required\" attribute of \"docker_upstream_name\" to True. Then, call the \"create_missing\" function of the parent class \"Repository\". Please give the corresponding code according to the description. ",
        "response": "def create_missing(self):\n        \"\"\"Conditionally mark ``docker_upstream_name`` as required.\n\n        Mark ``docker_upstream_name`` as required if ``content_type`` is\n        \"docker\".\n\n        \"\"\"\n        if getattr(self, 'content_type', '') == 'docker':\n            self._fields['docker_upstream_name'].required = True\n        super(Repository, self).create_missing()"
    },
    {
        "instruction": "In Python, define a function named \"shuffle_cols\" that takes in three parameters: \"seqarr\", \"newarr\", and \"cols\". This function is used for bootstrap resampling without a map file. Iterate over the \"cols\" array using \"xrange\" and for each index, assign the corresponding column from \"seqarr\" to the same index in \"newarr\". Return \"newarr\". Please give the corresponding code according to the description. ",
        "response": "def shuffle_cols(seqarr, newarr, cols):\n    \"\"\" used in bootstrap resampling without a map file \"\"\"\n    for idx in xrange(cols.shape[0]):\n        newarr[:, idx] = seqarr[:, cols[idx]]\n    return newarr"
    },
    {
        "instruction": "This Python function generates a function for a specific method and API. It takes a boolean parameter, as_global, which if set, will use the global function name instead of the class method name when defining the function. The function parses the URL required parameters and splits the required and non-required parameters for the definition. It then creates a function head and code body, and executes the code. The generated function is returned. Please give the corresponding code according to the description. ",
        "response": "def generate_func(self, as_global=False):\n        \"\"\"\n        Generate function for specific method and using specific api\n\n        :param as_global: if set, will use the global function name, instead of\n            the class method (usually {resource}_{class_method}) when defining\n            the function\n        \"\"\"\n        keywords = []\n        params_def = []\n        params_doc = \"\"\n        original_names = {}\n\n        params = dict(\n            (param['name'], param)\n            for param in self.params\n        )\n\n        # parse the url required params, as sometimes they are skipped in the\n        # parameters list of the definition\n        for param in self.url_params:\n            if param not in params:\n                param = {\n                    'name': param,\n                    'required': True,\n                    'description': '',\n                    'validator': '',\n                }\n                params[param['name']] = param\n            else:\n                params[param]['required'] = True\n\n        # split required and non-required params for the definition\n        req_params = []\n        nonreq_params = []\n        for param in six.itervalues(params):\n            if param['required']:\n                req_params.append(param)\n            else:\n                nonreq_params.append(param)\n\n        for param in req_params + nonreq_params:\n            params_doc += self.create_param_doc(param) + \"\\n\"\n            local_name = param['name']\n            # some params collide with python keywords, that's why we do\n            # this switch (and undo it inside the function we generate)\n            if param['name'] == 'except':\n                local_name = 'except_'\n            original_names[local_name] = param['name']\n            keywords.append(local_name)\n            if param['required']:\n                params_def.append(\"%s\" % local_name)\n            else:\n                params_def.append(\"%s=None\" % local_name)\n\n        func_head = 'def {0}(self, {1}):'.format(\n            as_global and self.get_global_method_name() or self.name,\n            ', '.join(params_def)\n        )\n        code_body = (\n            '   _vars_ = locals()\\n'\n            '   _url = self._fill_url(\"{url}\", _vars_, {url_params})\\n'\n            '   _original_names = {original_names}\\n'\n            '   _kwargs = dict((_original_names[k], _vars_[k])\\n'\n            '                   for k in {keywords} if _vars_[k])\\n'\n            '   return self._foreman.do_{http_method}(_url, _kwargs)')\n        code_body = code_body.format(\n            http_method=self.http_method.lower(),\n            url=self.url,\n            url_params=self.url_params,\n            keywords=keywords,\n            original_names=original_names,\n        )\n\n        code = [\n            func_head,\n            '   \"\"\"',\n            self.short_desc,\n            '',\n            params_doc,\n            '   \"\"\"',\n            code_body,\n        ]\n\n        code = '\\n'.join(code)\n\n        six.exec_(code)\n\n        function = locals()[self.name]\n        # to ease debugging, all the funcs have the definitions attached\n        setattr(function, 'defs', self)\n        return function"
    },
    {
        "instruction": "In Python, define a function that takes in a section and a key. If the key is not None, return a tuple of the section and key with all non-alphanumeric characters replaced with underscores and in lower case. Otherwise, return the section with all non-alphanumeric characters replaced with underscores and in lower case. Please give the corresponding code according to the description. ",
        "response": "def _to_dot_key(cls, section, key=None):\n        \"\"\" Return the section and key in dot notation format. \"\"\"\n        if key:\n            return (NON_ALPHA_NUM.sub('_', section.lower()), NON_ALPHA_NUM.sub('_', key.lower()))\n        else:\n            return NON_ALPHA_NUM.sub('_', section.lower())"
    },
    {
        "instruction": "In this Python function, calculate the discharge of the element in each layer by multiplying the first column of the parameters array with the result of the dischargeinf function. Reshape the resulting array to have dimensions (nls, nlayers, order + 1), and sum over the last dimension. For each layer, add the corresponding values to the rv array. Return the resulting rv array. Please give the corresponding code according to the description. ",
        "response": "def discharge(self):\n        \"\"\"Discharge of the element in each layer\n        \"\"\"\n        \n        rv = np.zeros(self.aq[0].naq)\n        Qls = self.parameters[:, 0] * self.dischargeinf()\n        Qls.shape = (self.nls, self.nlayers, self.order + 1)\n        Qls = np.sum(Qls, 2)\n        for i, q in enumerate(Qls):\n            rv[self.layers[i]] += q\n            #rv[self.layers] = np.sum(Qls.reshape(self.nls * (self.order + 1), self.nlayers), 0)\n        return rv"
    },
    {
        "instruction": "Python: \n\nAdd a function that checks if there are unsaved changes to any images. If there are, display a warning message asking if the user wants to save their changes. If the user clicks \"Save\", save the changes and return True. If the user clicks \"Discard\", return True. If the user clicks \"Cancel\", return False. The function takes in three optional parameters: \"all_files\" (default False), \"with_cancel\" (default True), and \"with_discard\" (default True). Please give the corresponding code according to the description. ",
        "response": "def unsaved_files_dialog(\n            self, all_files=False, with_cancel=True, with_discard=True):\n        \"\"\"Return true if OK to continue with close or quit or whatever\"\"\"\n        for image in self.images:\n            if image.metadata.changed() and (all_files or image.selected):\n                break\n        else:\n            return True\n        dialog = QtWidgets.QMessageBox()\n        dialog.setWindowTitle(self.tr('Photini: unsaved data'))\n        dialog.setText(self.tr('<h3>Some images have unsaved metadata.</h3>'))\n        dialog.setInformativeText(self.tr('Do you want to save your changes?'))\n        dialog.setIcon(QtWidgets.QMessageBox.Warning)\n        buttons = QtWidgets.QMessageBox.Save\n        if with_cancel:\n            buttons |= QtWidgets.QMessageBox.Cancel\n        if with_discard:\n            buttons |= QtWidgets.QMessageBox.Discard\n        dialog.setStandardButtons(buttons)\n        dialog.setDefaultButton(QtWidgets.QMessageBox.Save)\n        result = dialog.exec_()\n        if result == QtWidgets.QMessageBox.Save:\n            self._save_files()\n            return True\n        return result == QtWidgets.QMessageBox.Discard"
    },
    {
        "instruction": "In Python, create a function that waits until the element specified by `locator` has focus. If the function takes longer than `timeout` seconds to find the element, it will throw an error. Use `Element Focus Should Be Set` instead if you want to check that the element has focus immediately. Please give the corresponding code according to the description. ",
        "response": "def wait_until_element_has_focus(self, locator, timeout=None):\n\t\t\"\"\"Waits until the element identified by `locator` has focus.\n\t\tYou might rather want to use `Element Focus Should Be Set`\n\n\t\t| *Argument* | *Description* | *Example* |\n\t\t| locator | Selenium 2 element locator | id=my_id |\n\t\t| timeout | maximum time to wait before the function throws an element not found error (default=None) | 5s |\"\"\"\n\n\t\tself._info(\"Waiting for focus on '%s'\" % (locator))\n\t\tself._wait_until_no_error(timeout, self._check_element_focus_exp, True, locator, timeout)"
    },
    {
        "instruction": "In Python, this function restores the review history for a given brain or object. It retrieves the review history, gets the object and the workflow tool, and filters the workflows that have a state variable named \"review_state\". If no valid workflow is found, it logs an error. Otherwise, it sets the workflow to the first workflow found, sets the status of the workflow, and reindexes the object with the review state and is_active indexes. If there is a creation action, it only allows one creation event to be created. Please give the corresponding code according to the description. ",
        "response": "def restore_review_history_for(brain_or_object):\n    \"\"\"Restores the review history for the given brain or object\n    \"\"\"\n    # Get the review history. Note this comes sorted from oldest to newest\n    review_history = get_purged_review_history_for(brain_or_object)\n\n    obj = api.get_object(brain_or_object)\n    wf_tool = api.get_tool(\"portal_workflow\")\n    wf_ids = get_workflow_ids_for(brain_or_object)\n    wfs = map(lambda wf_id: wf_tool.getWorkflowById(wf_id), wf_ids)\n    wfs = filter(lambda wf: wf.state_var == \"review_state\", wfs)\n    if not wfs:\n        logger.error(\"No valid workflow found for {}\".format(api.get_id(obj)))\n    else:\n        # It should not be possible to have more than one workflow with same\n        # state_variable here. Anyhow, we don't care in this case (we only want\n        # the object to have a review history).\n        workflow = wfs[0]\n        create_action = False\n        for history in review_history:\n            action_id = history[\"action\"]\n            if action_id is None:\n                if create_action:\n                    # We don't want multiple creation events, we only stick to\n                    # one workflow, so if this object had more thone one wf\n                    # bound in the past, we still want only one creation action\n                    continue\n                create_action = True\n\n            # Change status and reindex\n            wf_tool.setStatusOf(workflow.id, obj, history)\n            indexes = [\"review_state\", \"is_active\"]\n            obj.reindexObject(idxs=indexes)"
    },
    {
        "instruction": "In Python, define a method called \"dom_id\" that returns a dictionary of CLBs (configurable logic blocks) with their DOM ID as the key. If the \"DOMID\" parameter is not already in the \"_by\" attribute, populate it using the \"self. _populate()\" method with \"parameter\" as the argument. Finally, return the value of the \"DOMID\" key in the \"_by\" dictionary. Please give the corresponding code according to the description. ",
        "response": "def dom_id(self):\n        \"\"\"A dict of CLBs with DOM ID as key\"\"\"\n        parameter = 'DOMID'\n        if parameter not in self._by:\n            self._populate(by=parameter)\n        return self._by[parameter]"
    },
    {
        "instruction": "In Python, define a method named \"db\" that returns a loaded database session. If the \"database\" attribute is not implemented, set it to the value of \"Session\". Return the \"database\" attribute. Please give the corresponding code according to the description. ",
        "response": "def db(self):\n        \"\"\"\n        Get a loaded database session\n        \"\"\"\n        if self.database is NotImplemented:\n            self.database = Session\n\n        return self.database"
    },
    {
        "instruction": "In Python, define a function called isDiurnal that takes in three parameters: jd, lat, and lon. The function should return a boolean value of True if the sun is above the horizon of a given date and location. To do this, the function should use the sweObject method from the swe library to get the sun's position, and the sweHousesLon method to get the location's midheaven. The function should then use the eqCoords method from the utils library to calculate the right ascension and declination of the sun and the midheaven. Finally, the function should use the isAboveHorizon method from the utils library to determine if the sun is above the horizon. Please give the corresponding code according to the description. ",
        "response": "def isDiurnal(jd, lat, lon):\n    \"\"\" Returns true if the sun is above the horizon\n    of a given date and location. \n    \n    \"\"\"\n    sun = swe.sweObject(const.SUN, jd)\n    mc = swe.sweHousesLon(jd, lat, lon, \n                          const.HOUSES_DEFAULT)[1][1]\n    ra, decl = utils.eqCoords(sun['lon'], sun['lat'])\n    mcRA, _ = utils.eqCoords(mc, 0.0)\n    return utils.isAboveHorizon(ra, decl, mcRA, lat)"
    },
    {
        "instruction": "Merge and define dictionaries with values identical to keys. The function takes a sequence of keys and/or dictionaries and a dictionary as optional parameters. If a key is passed, it will be added to the dictionary with the same value as the key. If a dictionary is passed, its keys will be added to the dictionary with the same values as the keys. If a key is already present in the dictionary, a ValueError will be raised. If a dictionary key is already present in the dictionary, a ValueError will be raised. Return the merged dictionary. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def kk_dict(*kk, **adict):\n    \"\"\"\n    Merges and defines dictionaries with values identical to keys.\n\n    :param kk:\n        A sequence of keys and/or dictionaries.\n    :type kk: object | dict, optional\n\n    :param adict:\n        A dictionary.\n    :type adict: dict, optional\n\n    :return:\n        Merged dictionary.\n    :rtype: dict\n\n    Example::\n\n        >>> sorted(kk_dict('a', 'b', 'c').items())\n        [('a', 'a'), ('b', 'b'), ('c', 'c')]\n        \n        >>> sorted(kk_dict('a', 'b', **{'a-c': 'c'}).items())\n        [('a', 'a'), ('a-c', 'c'), ('b', 'b')]\n        \n        >>> sorted(kk_dict('a', {'b': 'c'}, 'c').items())\n        [('a', 'a'), ('b', 'c'), ('c', 'c')]\n        \n        >>> sorted(kk_dict('a', 'b', **{'b': 'c'}).items())\n        Traceback (most recent call last):\n         ...\n        ValueError: keyword argument repeated\n        >>> sorted(kk_dict('a', {'b': 'd'}, **{'b': 'c'}).items())\n        Traceback (most recent call last):\n         ...\n        ValueError: keyword argument repeated\n    \"\"\"\n\n    for k in kk:\n        if isinstance(k, dict):\n            if not set(k).isdisjoint(adict):\n                raise ValueError('keyword argument repeated')\n            adict.update(k)\n        elif k in adict:\n            raise ValueError('keyword argument repeated')\n        else:\n            adict[k] = k\n\n    return adict"
    },
    {
        "instruction": "This Python function takes a well-formed docstring and converts it into documentation to be used in argparse. It extracts information from the docstring such as shorts, metavars, helps, description, and epilog. It uses regular expressions to match and extract the relevant information from the docstring. The extracted information is then returned as a tuple containing shorts, metavars, helps, description, and epilog. Please give the corresponding code according to the description. ",
        "response": "def _parse_doc(docs):\n    \"\"\"\n        Converts a well-formed docstring into documentation\n        to be fed into argparse.\n\n        See signature_parser for details.\n\n        shorts: (-k for --keyword -k, or \"from\" for \"frm/from\")\n        metavars: (FILE for --input=FILE)\n        helps: (docs for --keyword: docs)\n        description: the stuff before\n        epilog: the stuff after\n    \"\"\"\n\n    name = \"(?:[a-zA-Z][a-zA-Z0-9-_]*)\"\n\n    re_var = re.compile(r\"^ *(%s)(?: */(%s))? *:(.*)$\" % (name, name))\n    re_opt = re.compile(r\"^ *(?:(-[a-zA-Z0-9]),? +)?--(%s)(?: *=(%s))? *:(.*)$\"\n                        % (name, name))\n\n    shorts, metavars, helps, description, epilog = {}, {}, {}, \"\", \"\"\n\n    if docs:\n\n        for line in docs.split(\"\\n\"):\n\n            line = line.strip()\n\n            # remove starting ':param'\n            if line.startswith(':param'):\n                line = line[len(':param'):]\n\n            # skip ':rtype:' row\n            if line.startswith(':rtype:'):\n                continue\n\n            if line.strip() == \"----\":\n                break\n\n            m = re_var.match(line)\n            if m:\n                if epilog:\n                    helps[prev] += epilog.strip()\n                    epilog = \"\"\n\n                if m.group(2):\n                    shorts[m.group(1)] = m.group(2)\n\n                helps[m.group(1)] = m.group(3).strip()\n                prev = m.group(1)\n                previndent = len(line) - len(line.lstrip())\n                continue\n\n            m = re_opt.match(line)\n            if m:\n                if epilog:\n                    helps[prev] += epilog.strip()\n                    epilog = \"\"\n                name = m.group(2).replace(\"-\", \"_\")\n                helps[name] = m.group(4)\n                prev = name\n\n                if m.group(1):\n                    shorts[name] = m.group(1)\n                if m.group(3):\n                    metavars[name] = m.group(3)\n\n                previndent = len(line) - len(line.lstrip())\n                continue\n\n            if helps:\n                if line.startswith(\" \" * (previndent + 1)):\n                    helps[prev] += \"\\n\" + line.strip()\n                else:\n                    epilog += \"\\n\" + line.strip()\n            else:\n                description += \"\\n\" + line.strip()\n\n            if line.strip():\n                previndent = len(line) - len(line.lstrip())\n\n    return shorts, metavars, helps, description, epilog"
    },
    {
        "instruction": "In Python, create a function that takes in a parameter, a minimum value, a name, a unit, and a verbosity level. Check if the parameter is less than the minimum value. If it is, set the parameter equal to the minimum value and print a warning message if the verbosity level is greater than 0. Return the modified parameter. If the input parameter is a scalar, return a scalar. Otherwise, return an array. Please give the corresponding code according to the description. ",
        "response": "def _check_min(par, minval, name, unit, verb):\n    r\"\"\"Check minimum value of parameter.\"\"\"\n    scalar = False\n    if par.shape == ():\n        scalar = True\n        par = np.atleast_1d(par)\n    if minval is not None:\n        ipar = np.where(par < minval)\n        par[ipar] = minval\n        if verb > 0 and np.size(ipar) != 0:\n            print('* WARNING :: ' + name + ' < ' + str(minval) + ' ' + unit +\n                  ' are set to ' + str(minval) + ' ' + unit + '!')\n    if scalar:\n        return np.squeeze(par)\n    else:\n        return par"
    },
    {
        "instruction": "In Python, this function takes a Bar object and converts it to MIDI events, writing them to the track_data. It sets the meter and key of the bar, and then iterates through each note in the bar. It calculates the tick value for each note, and if the note has no pitch or length, it adds the tick value to the delay. If the note has a pitch and length, it sets the delay to 0, sets the tempo if the note has one, plays the note, sets the tick value, and stops playing the note. Please give the corresponding code according to the description. ",
        "response": "def play_Bar(self, bar):\n        \"\"\"Convert a Bar object to MIDI events and write them to the\n        track_data.\"\"\"\n        self.set_deltatime(self.delay)\n        self.delay = 0\n        self.set_meter(bar.meter)\n        self.set_deltatime(0)\n        self.set_key(bar.key)\n        for x in bar:\n            tick = int(round((1.0 / x[1]) * 288))\n            if x[2] is None or len(x[2]) == 0:\n                self.delay += tick\n            else:\n                self.set_deltatime(self.delay)\n                self.delay = 0\n                if hasattr(x[2], 'bpm'):\n                    self.set_deltatime(0)\n                    self.set_tempo(x[2].bpm)\n                self.play_NoteContainer(x[2])\n                self.set_deltatime(self.int_to_varbyte(tick))\n                self.stop_NoteContainer(x[2])"
    },
    {
        "instruction": "Python: Modify the current Envelope object by expanding it to include the given Envelope or tuple. If the input is a two-tuple, double it to create a four-tuple. Determine the midpoint of the input and update the lower-left and upper-right coordinates of the current Envelope to include the corresponding coordinates of the input. Please give the corresponding code according to the description. ",
        "response": "def expand(self, other):\n        \"\"\"Expands this envelope by the given Envelope or tuple.\n\n        Arguments:\n        other -- Envelope, two-tuple, or four-tuple\n        \"\"\"\n        if len(other) == 2:\n            other += other\n        mid = len(other) // 2\n        self.ll = map(min, self.ll, other[:mid])\n        self.ur = map(max, self.ur, other[mid:])"
    },
    {
        "instruction": "In Python, define a function that deserializes ArrowRecordBatches to an Arrow table and returns it as a list of pandas. Series. Use pyarrow to load the stream, then iterate through each batch and convert it to a pandas. Series using the arrow_to_pandas function. Return the resulting list of pandas. Series. Please give the corresponding code according to the description. ",
        "response": "def load_stream(self, stream):\n        \"\"\"\n        Deserialize ArrowRecordBatches to an Arrow table and return as a list of pandas.Series.\n        \"\"\"\n        batches = super(ArrowStreamPandasSerializer, self).load_stream(stream)\n        import pyarrow as pa\n        for batch in batches:\n            yield [self.arrow_to_pandas(c) for c in pa.Table.from_batches([batch]).itercolumns()]"
    },
    {
        "instruction": "In Python, this function is used to stop the progress bar and perform necessary clean up. It should be triggered manually if not using the 'with' statement. It will terminate the loop process, show the last progress, release terminal reservation, and print the final progress if the show_on_exit flag is set to True. If the pipe_handler is not an instance of PipeToPrint, the progress will be printed to an in-memory buffer before being piped to the handler. Finally, the show_on_exit flag is set to False. Please give the corresponding code according to the description. ",
        "response": "def stop(self):\n        \"\"\"\n            trigger clean up by hand, needs to be done when not using\n            context management via 'with' statement\n        \n            - will terminate loop process\n            - show a last progress -> see the full 100% on exit\n            - releases terminal reservation\n        \"\"\"\n        super(Progress, self).stop()\n        terminal.terminal_unreserve(progress_obj=self, verbose=self.verbose)\n\n        if self.show_on_exit:\n            if not isinstance(self.pipe_handler, PipeToPrint):\n                myout = inMemoryBuffer()\n                stdout = sys.stdout\n                sys.stdout = myout\n                self._show_stat()\n                self.pipe_handler(myout.getvalue())\n                sys.stdout = stdout\n            else:\n                self._show_stat()\n                print()\n        self.show_on_exit = False"
    },
    {
        "instruction": "This Python function edits the rules for a standard firewall. It takes in an integer `firewall_id` which is the instance ID of the standard firewall, and a dictionary `rules` which contains the rules to be pushed on the firewall. It creates an object `template` which includes the `firewall_id` and `rules`. It then uses the `rule_svc` client to create the object with the given template and returns the result. Please give the corresponding code according to the description. ",
        "response": "def edit_standard_fwl_rules(self, firewall_id, rules):\n        \"\"\"Edit the rules for standard firewall.\n\n        :param integer firewall_id: the instance ID of the standard firewall\n        :param dict rules: the rules to be pushed on the firewall\n        \"\"\"\n\n        rule_svc = self.client['Network_Firewall_Update_Request']\n        template = {'networkComponentFirewallId': firewall_id, 'rules': rules}\n\n        return rule_svc.createObject(template)"
    },
    {
        "instruction": "This Python function computes the set of paths that Thrifty uses to lookup imports. The IDL files under these paths are not compiled, but they are required to compile downstream IDL files. The function takes a JavaThriftyLibrary target to compile and returns an ordered set of directories to pass along to Thrifty. It first adds the target's base path to the set, and then recursively walks through all dependencies of the target that have a \". thrift\" extension and adds their base paths to the set as well. Please give the corresponding code according to the description. ",
        "response": "def _compute_include_paths(self, target):\n    \"\"\"Computes the set of paths that thrifty uses to lookup imports.\n\n    The IDL files under these paths are not compiled, but they are required to compile\n    downstream IDL files.\n\n    :param target: the JavaThriftyLibrary target to compile.\n    :return: an ordered set of directories to pass along to thrifty.\n    \"\"\"\n    paths = OrderedSet()\n    paths.add(os.path.join(get_buildroot(), target.target_base))\n\n    def collect_paths(dep):\n      if not dep.has_sources('.thrift'):\n        return\n      paths.add(os.path.join(get_buildroot(), dep.target_base))\n\n    collect_paths(target)\n    target.walk(collect_paths)\n    return paths"
    },
    {
        "instruction": "In Python, add a function that logs out a cookie-based user. Send a DELETE request to the session URL and raise an error if the response status code is not in the 200 range. Please give the corresponding code according to the description. ",
        "response": "def logout(self):\n        \"\"\"\n        Logout cookie based user.\n        \"\"\"\n        resp = super(CookieSession, self).request('DELETE', self._session_url)\n        resp.raise_for_status()"
    },
    {
        "instruction": "Detect the distribution, release and codename of the Linux platform the code is running on. If the distribution is not detected, attempt to parse the /etc/os-release file. If the codename is not detected and the distribution is Debian, map the major version of the release to the corresponding codename. If the distribution is Oracle or Virtuozzo Linux, set the codename to 'oracle' or 'virtuozzo' respectively. If the distribution is Arch Linux, set the codename to 'arch'. Return a tuple containing the distribution, release and codename as strings. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def platform_information(_linux_distribution=None):\n    \"\"\" detect platform information from remote host \"\"\"\n    linux_distribution = _linux_distribution or platform.linux_distribution\n    distro, release, codename = linux_distribution()\n    if not distro:\n        distro, release, codename = parse_os_release()\n    if not codename and 'debian' in distro.lower():  # this could be an empty string in Debian\n        debian_codenames = {\n            '10': 'buster',\n            '9': 'stretch',\n            '8': 'jessie',\n            '7': 'wheezy',\n            '6': 'squeeze',\n        }\n        major_version = release.split('.')[0]\n        codename = debian_codenames.get(major_version, '')\n\n        # In order to support newer jessie/sid or wheezy/sid strings we test this\n        # if sid is buried in the minor, we should use sid anyway.\n        if not codename and '/' in release:\n            major, minor = release.split('/')\n            if minor == 'sid':\n                codename = minor\n            else:\n                codename = major\n    if not codename and 'oracle' in distro.lower():  # this could be an empty string in Oracle linux\n        codename = 'oracle'\n    if not codename and 'virtuozzo linux' in distro.lower():  # this could be an empty string in Virtuozzo linux\n        codename = 'virtuozzo'\n    if not codename and 'arch' in distro.lower():  # this could be an empty string in Arch linux\n        codename = 'arch'\n\n    return (\n        str(distro).rstrip(),\n        str(release).rstrip(),\n        str(codename).rstrip()\n    )"
    },
    {
        "instruction": "In Python, this function starts a sandboxed update server on a specified port, and attempts to read the health endpoint with retries to determine when the server is available. If the number of retries is exceeded, the returned server process will already be terminated. The function returns the server process. If a venv_site_pkgs is specified, the function will use it. Please give the corresponding code according to the description. ",
        "response": "async def _start_server(python, port,\n                        venv_site_pkgs=None, cwd=None) -> sp.Popen:\n    \"\"\"\n    Starts an update server sandboxed in the virtual env, and attempts to read\n    the health endpoint with retries to determine when the server is available.\n    If the number of retries is exceeded, the returned server process will\n    already be terminated.\n\n    :return: the server process\n    \"\"\"\n    log.info(\"Starting sandboxed update server on port {}\".format(port))\n    if venv_site_pkgs:\n        python = 'PYTHONPATH={} {}'.format(venv_site_pkgs, python)\n    cmd = [python, '-m', 'otupdate', '--debug', '--test', '--port', str(port)]\n    log.debug('cmd: {}'.format(' '.join(cmd)))\n    proc = sp.Popen(' '.join(cmd), shell=True, cwd=cwd)\n    atexit.register(lambda: _stop_server(proc))\n\n    n_retries = 3\n    async with aiohttp.ClientSession() as session:\n        test_status, detail = await selftest.health_check(\n            session=session, port=port, retries=n_retries)\n    if test_status == 'failure':\n        log.debug(\n            \"Test server failed to start after {} retries. Stopping.\".format(\n                n_retries))\n        _stop_server(proc)\n    return proc"
    },
    {
        "instruction": "In Python, get_data() retrieves a resource from a package. The function takes two arguments: package, which is the name of a package in standard module format (foo. bar), and resource, which is a relative filename using '/' as the path separator. The function returns a binary string, which is the contents of the specified resource. If the package cannot be located or loaded, or it uses a PEP 302 loader which does not support get_data(), then None is returned. Please give the corresponding code according to the description. ",
        "response": "def get_data(package, resource):\n    \"\"\"Get a resource from a package.\n\n    This is a wrapper round the PEP 302 loader get_data API. The package\n    argument should be the name of a package, in standard module format\n    (foo.bar). The resource argument should be in the form of a relative\n    filename, using '/' as the path separator. The parent directory name '..'\n    is not allowed, and nor is a rooted name (starting with a '/').\n\n    The function returns a binary string, which is the contents of the\n    specified resource.\n\n    For packages located in the filesystem, which have already been imported,\n    this is the rough equivalent of\n\n        d = os.path.dirname(sys.modules[package].__file__)\n        data = open(os.path.join(d, resource), 'rb').read()\n\n    If the package cannot be located or loaded, or it uses a PEP 302 loader\n    which does not support get_data(), then None is returned.\n    \"\"\"\n\n    loader = get_loader(package)\n    if loader is None or not hasattr(loader, 'get_data'):\n        return None\n    mod = sys.modules.get(package) or loader.load_module(package)\n    if mod is None or not hasattr(mod, '__file__'):\n        return None\n\n    # Modify the resource name to be compatible with the loader.get_data\n    # signature - an os.path format \"filename\" starting with the dirname of\n    # the package's __file__\n    parts = resource.split('/')\n    parts.insert(0, os.path.dirname(mod.__file__))\n    resource_name = os.path.join(*parts)\n    return loader.get_data(resource_name)"
    },
    {
        "instruction": "This Python function downloads a file with a given filename, either inline or as a download. If the request. GET has 'action', then the action will be replaced by it. The function uses uliweb, a Python web framework, to get the request and uliweb's filedown utility to download the file. The function also sets the x_filename and real_filename parameters. The x_filename is the filename sent to the client, while the real_filename is the filename of the file on the server. The function returns the result of filedown. Please give the corresponding code according to the description. ",
        "response": "def download(self, filename, action='download', x_filename='', x_sendfile=None, real_filename=''):\r\n        \"\"\"\r\n        action will be \"download\", \"inline\"\r\n        and if the request.GET has 'action', then the action will be replaced by it.\r\n        \"\"\"\r\n        from uliweb import request\r\n        from uliweb.utils.common import safe_str\r\n        from uliweb.utils.filedown import filedown\r\n        \r\n        s = settings.GLOBAL\r\n\r\n        action = request.GET.get('action', action)\r\n        \r\n        if not real_filename:\r\n            real_filename = self.get_filename(filename, True, convert=False)\r\n        else:\r\n            real_filename = files.encode_filename(real_filename, to_encoding=s.FILESYSTEM_ENCODING)\r\n\r\n        if not x_filename:\r\n            x_filename = safe_str(filename, s.FILESYSTEM_ENCODING)\r\n        if self.x_file_prefix:\r\n            x_filename = os.path.normpath(os.path.join(self.x_file_prefix, x_filename)).replace('\\\\', '/')\r\n        \r\n        xsend_flag = bool(self.x_sendfile) if x_sendfile is None else x_sendfile\r\n        return filedown(request.environ, filename, action=action, \r\n            x_sendfile=xsend_flag, x_header_name=self.x_header_name, \r\n            x_filename=x_filename, real_filename=real_filename)"
    },
    {
        "instruction": "Build a schema definition for an array type value. The function takes in an array type value and an optional list of strings representing the property path of the current type. If the property path is not provided, it defaults to an empty list. The function then creates a schema definition for the array type value, including the type and items. If the array type value is a built-in type, the schema is returned as is. If it is a configuration variable, the function builds attribute modifiers for the schema and checks if the array type has a nested type. If it is a typing type, the function checks for a nested type and builds the schema accordingly. The built schema definition is returned. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _build_array_type(var, property_path=None):\n    \"\"\" Builds schema definitions for array type values.\n\n    :param var: The array type value\n    :param List[str] property_path: The property path of the current type,\n        defaults to None, optional\n    :param property_path: [type], optional\n    :return: The built schema definition\n    :rtype: Dict[str, Any]\n    \"\"\"\n\n    if not property_path:\n        property_path = []\n\n    schema = {\"type\": \"array\", \"items\": {\"$id\": f\"#/{'/'.join(property_path)}/items\"}}\n    if is_builtin_type(var):\n        return schema\n\n    if is_config_var(var):\n        schema.update(\n            _build_attribute_modifiers(\n                var,\n                {\n                    \"min\": \"minItems\",\n                    \"max\": \"maxItems\",\n                    \"unique\": \"uniqueItems\",\n                    \"contains\": \"contains\",\n                },\n            )\n        )\n\n        if is_typing_type(var.type) and len(var.type.__args__) > 0:\n            # NOTE: typing.List only allows one typing argument\n            nested_type = var.type.__args__[0]\n            schema[\"items\"].update(\n                _build(nested_type, property_path=property_path + [\"items\"])\n            )\n    elif is_typing_type(var):\n        nested_type = var.__args__[0]\n        schema[\"items\"].update(\n            _build(nested_type, property_path=property_path + [\"items\"])\n        )\n\n    return schema"
    },
    {
        "instruction": "Run the GNN multiple times to estimate the causal direction between two variables a and b. The function takes in the following arguments: a numpy array a, a numpy array b, number of runs to execute per batch (nb_runs), number of runs to execute in parallel (nb_jobs), whether to use gpu (gpu), index of the pair (idx), verbosity (verbose), threshold to stop the bootstraps before nb_max_runs if the difference is significant (ttest_threshold), max number of bootstraps (nb_max_runs), number of epochs during which the model is going to be trained (train_epochs), and number of epochs during which the model is going to be tested (test_epochs). The function returns the causal score of the pair (1 if a->b and -1 if b->a). This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def predict_proba(self, a, b, nb_runs=6, nb_jobs=None, gpu=None,\n                      idx=0, verbose=None, ttest_threshold=0.01,\n                      nb_max_runs=16, train_epochs=1000, test_epochs=1000):\n        \"\"\"Run multiple times GNN to estimate the causal direction.\n\n        Args:\n            a (np.ndarray): Variable 1\n            b (np.ndarray): Variable 2\n            nb_runs (int): number of runs to execute per batch (before testing for significance with t-test).\n            nb_jobs (int): number of runs to execute in parallel. (Initialized with ``cdt.SETTINGS.NB_JOBS``)\n            gpu (bool): use gpu (Initialized with ``cdt.SETTINGS.GPU``)\n            idx (int): (optional) index of the pair, for printing purposes\n            verbose (bool): verbosity (Initialized with ``cdt.SETTINGS.verbose``)\n            ttest_threshold (float): threshold to stop the boostraps before ``nb_max_runs`` if the difference is significant\n            nb_max_runs (int): Max number of bootstraps\n            train_epochs (int): Number of epochs during which the model is going to be trained\n            test_epochs (int): Number of epochs during which the model is going to be tested\n\n        Returns:\n            float: Causal score of the pair (Value : 1 if a->b and -1 if b->a)\n        \"\"\"\n        Nb_jobs, verbose, gpu = SETTINGS.get_default(('nb_jobs', nb_jobs), ('verbose', verbose), ('gpu', gpu))\n        x = np.stack([a.ravel(), b.ravel()], 1)\n        ttest_criterion = TTestCriterion(\n            max_iter=nb_max_runs, runs_per_iter=nb_runs, threshold=ttest_threshold)\n\n        AB = []\n        BA = []\n\n        while ttest_criterion.loop(AB, BA):\n            if nb_jobs != 1:\n                result_pair = Parallel(n_jobs=nb_jobs)(delayed(GNN_instance)(\n                    x, idx=idx, device='cuda:{}'.format(run % gpu) if gpu else 'cpu',\n                    verbose=verbose, train_epochs=train_epochs, test_epochs=test_epochs) for run in range(ttest_criterion.iter, ttest_criterion.iter + nb_runs))\n            else:\n                result_pair = [GNN_instance(x, idx=idx,\n                                            device='cuda:0' if gpu else 'cpu',\n                                            verbose=verbose,\n                                            train_epochs=train_epochs,\n                                            test_epochs=test_epochs)\n                               for run in range(ttest_criterion.iter, ttest_criterion.iter + nb_runs)]\n            AB.extend([runpair[0] for runpair in result_pair])\n            BA.extend([runpair[1] for runpair in result_pair])\n\n        if verbose:\n            print(\"P-value after {} runs : {}\".format(ttest_criterion.iter,\n                                                      ttest_criterion.p_value))\n\n        score_AB = np.mean(AB)\n        score_BA = np.mean(BA)\n\n        return (score_BA - score_AB) / (score_BA + score_AB)"
    },
    {
        "instruction": "In Python, this function reads a header string from a file, either a HEADER file or feff. inp file. It first checks if the file was generated by pymatgen, and if so, it reads the header string from the file. If not, it reads the header string from the feff. inp file from an unknown source. The function then returns the header string as a single string. Please give the corresponding code according to the description. ",
        "response": "def header_string_from_file(filename='feff.inp'):\n        \"\"\"\n        Reads Header string from either a HEADER file or feff.inp file\n        Will also read a header from a non-pymatgen generated feff.inp file\n\n        Args:\n            filename: File name containing the Header data.\n\n        Returns:\n            Reads header string.\n        \"\"\"\n        with zopen(filename, \"r\") as fobject:\n            f = fobject.readlines()\n            feff_header_str = []\n            ln = 0\n\n            # Checks to see if generated by pymatgen\n            try:\n                feffpmg = f[0].find(\"pymatgen\")\n            except IndexError:\n                feffpmg = False\n\n            # Reads pymatgen generated header or feff.inp file\n            if feffpmg:\n                nsites = int(f[8].split()[2])\n                for line in f:\n                    ln += 1\n                    if ln <= nsites + 9:\n                        feff_header_str.append(line)\n            else:\n                # Reads header from header from feff.inp file from unknown\n                # source\n                end = 0\n                for line in f:\n                    if (line[0] == \"*\" or line[0] == \"T\") and end == 0:\n                        feff_header_str.append(line.replace(\"\\r\", \"\"))\n                    else:\n                        end = 1\n\n        return ''.join(feff_header_str)"
    },
    {
        "instruction": "In Python, this function generates a PLY-formatted header for the instance. It first creates a list of lines, starting with 'ply' and adding 'format ascii 1. 0' if self. text is True, otherwise it adds 'format' followed by the byte order and version. It then adds any comments or object information, followed by the headers for each element in the instance. Finally, it adds 'end_header' and returns the concatenated lines as a string. Please give the corresponding code according to the description. ",
        "response": "def header(self):\n        '''\n        Provide PLY-formatted metadata for the instance.\n\n        '''\n        lines = ['ply']\n\n        if self.text:\n            lines.append('format ascii 1.0')\n        else:\n            lines.append('format ' +\n                         _byte_order_reverse[self.byte_order] +\n                         ' 1.0')\n\n        # Some information is lost here, since all comments are placed\n        # between the 'format' line and the first element.\n        for c in self.comments:\n            lines.append('comment ' + c)\n\n        for c in self.obj_info:\n            lines.append('obj_info ' + c)\n\n        lines.extend(elt.header for elt in self.elements)\n        lines.append('end_header')\n        return '\\n'.join(lines)"
    },
    {
        "instruction": "In Python, add an instruction to remove the stream with the given `ssrc` from the SRTP session. The `ssrc` parameter should be an integer. Use the `srtp_remove_stream` function from the `lib` library and the `htonl` function to convert the `ssrc` to network byte order. Finally, use `_srtp_assert` to ensure that the stream is successfully removed. Please give the corresponding code according to the description. ",
        "response": "def remove_stream(self, ssrc):\n        \"\"\"\n        Remove the stream with the given `ssrc` from the SRTP session.\n\n        :param ssrc: :class:`int`\n        \"\"\"\n        _srtp_assert(lib.srtp_remove_stream(self._srtp[0], htonl(ssrc)))"
    },
    {
        "instruction": "In Python, implement a fit method that takes in training data X and target values y. Set the instance variables _data, _classes, _labels to X, unique values in y, and y respectively. Set _is_fitted to True. Please give the corresponding code according to the description. ",
        "response": "def fit(self, X, y):\n        \"\"\"Fit the model using X as training data and y as target values\"\"\"\n\n        self._data = X\n        self._classes = np.unique(y)\n        self._labels = y\n        self._is_fitted = True"
    },
    {
        "instruction": "Define a function named \"run_archive_cmdlist\" that takes in a command list with optional keyword arguments. If the command list is a tuple, extract the command list and keyword arguments. Otherwise, set the keyword arguments to an empty dictionary. Call the \"util. run_checked\" function with the command list, verbosity level, and keyword arguments. Return the result of the \"util. run_checked\" function. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def run_archive_cmdlist (archive_cmdlist, verbosity=0):\n    \"\"\"Run archive command.\"\"\"\n    # archive_cmdlist is a command list with optional keyword arguments\n    if isinstance(archive_cmdlist, tuple):\n        cmdlist, runkwargs = archive_cmdlist\n    else:\n        cmdlist, runkwargs = archive_cmdlist, {}\n    return util.run_checked(cmdlist, verbosity=verbosity, **runkwargs)"
    },
    {
        "instruction": "In Python, define a method that returns a list of UUIDs for services that are advertised by a device. The method attempts to retrieve the UUIDs property, but wraps it in a try/except block to catch if the property doesn't exist. If the property exists, it retrieves the UUIDs and returns them as a list of UUID objects. If the property doesn't exist, it ignores the error and returns an empty list. If any other error occurs, it raises the exception. Please give the corresponding code according to the description. ",
        "response": "def advertised(self):\n        \"\"\"Return a list of UUIDs for services that are advertised by this\n        device.\n        \"\"\"\n        uuids = []\n        # Get UUIDs property but wrap it in a try/except to catch if the property\n        # doesn't exist as it is optional.\n        try:\n            uuids = self._props.Get(_INTERFACE, 'UUIDs')\n        except dbus.exceptions.DBusException as ex:\n            # Ignore error if device has no UUIDs property (i.e. might not be\n            # a BLE device).\n            if ex.get_dbus_name() != 'org.freedesktop.DBus.Error.InvalidArgs':\n                raise ex\n        return [uuid.UUID(str(x)) for x in uuids]"
    },
    {
        "instruction": "In the given Python code, add an instruction to set the byte of the destination operand if the value of the current CPU's SF (Sign Flag) is greater than or equal to the value of the OF (Overflow Flag). Use the ITEBV operator to write 1 to the destination operand if the condition is true, and 0 otherwise. Please give the corresponding code according to the description. ",
        "response": "def SETGE(cpu, dest):\n        \"\"\"\n        Sets byte if greater or equal.\n\n        :param cpu: current CPU.\n        :param dest: destination operand.\n        \"\"\"\n        dest.write(Operators.ITEBV(dest.size, cpu.SF == cpu.OF, 1, 0))"
    },
    {
        "instruction": "In Python, define a method named \"add_source\" that takes a URL and an optional note as input. Create a dictionary with keys \"url\" and \"note\" and values equal to the input URL and note, respectively. Append this dictionary to a list called \"sources\" that is an attribute of the object that the method is called on. Please give the corresponding code according to the description. ",
        "response": "def add_source(self, url, *, note=''):\n        \"\"\" Add a source URL from which data was collected \"\"\"\n        new = {'url': url, 'note': note}\n        self.sources.append(new)"
    },
    {
        "instruction": "Serialize a given transformation object or pipeline into a JSON string using the `jsonpickle` library. Additional keyword arguments can be passed to the `jsonpickle. encode()` function if needed. The resulting JSON string will encode the parameters of the transformation object as well as its class name. This function is part of the `muda` library and is written in Python. Please give the corresponding code according to the description. ",
        "response": "def serialize(transform, **kwargs):\n    '''Serialize a transformation object or pipeline.\n\n    Parameters\n    ----------\n    transform : BaseTransform or Pipeline\n        The transformation object to be serialized\n\n    kwargs\n        Additional keyword arguments to `jsonpickle.encode()`\n\n    Returns\n    -------\n    json_str : str\n        A JSON encoding of the transformation\n\n    See Also\n    --------\n    deserialize\n\n    Examples\n    --------\n    >>> D = muda.deformers.TimeStretch(rate=1.5)\n    >>> muda.serialize(D)\n    '{\"params\": {\"rate\": 1.5},\n      \"__class__\": {\"py/type\": \"muda.deformers.time.TimeStretch\"}}'\n    '''\n\n    params = transform.get_params()\n    return jsonpickle.encode(params, **kwargs)"
    },
    {
        "instruction": "Create a password input box with a masked text using asterisks in Python. The function should take in a message, title, default value, image, and root as parameters. It should return the text entered by the user or None if the user cancels the operation. Please give the corresponding code according to the description. ",
        "response": "def passwordbox(msg=\"Enter your password.\"\n    , title=\" \"\n    , default=\"\"\n    , image=None\n    , root=None\n    ):\n    \"\"\"\n    Show a box in which a user can enter a password.\n    The text is masked with asterisks, so the password is not displayed.\n    Returns the text that the user entered, or None if he cancels the operation.\n    \"\"\"\n    return __fillablebox(msg, title, default, mask=\"*\",image=image,root=root)"
    },
    {
        "instruction": "In Python, this function takes an abstract syntax tree (AST) node and wraps it in a 'try' block. If an exception is raised, the function enters debug mode. The function checks if there are any exceptions to ignore, and adds them to the 'try' block. If there is an exception to catch, the function adds it to the 'try' block and enters debug mode. The modified AST node is then returned. Please give the corresponding code according to the description. ",
        "response": "def wrap_with_try(self, node):\n        \"\"\"Wrap an ast node in a 'try' node to enter debug on exception.\"\"\"\n        handlers = []\n\n        if self.ignore_exceptions is None:\n            handlers.append(ast.ExceptHandler(type=None,\n                                              name=None,\n                                              body=[ast.Raise()]))\n\n        else:\n            ignores_nodes = self.ignore_exceptions\n\n            handlers.append(ast.ExceptHandler(type=ast.Tuple(ignores_nodes,\n                                                             ast.Load()),\n                                              name=None,\n                                              body=[ast.Raise()]))\n\n            if self.catch_exception is None or \\\n                    get_node_value(self.catch_exception) not in \\\n                    (get_node_value(ast_node)\n                     for ast_node in self.ignore_exceptions):\n\n                call_extra_parameters = [] if IS_PYTHON_3 else [None, None]\n                start_debug_cmd = ast.Expr(\n                    value=ast.Call(ast.Name(\"start_debugging\", ast.Load()),\n                                   [], [], *call_extra_parameters))\n\n                catch_exception_type = None\n                if self.catch_exception is not None:\n                    catch_exception_type = self.catch_exception\n\n                handlers.append(ast.ExceptHandler(type=catch_exception_type,\n                                                  name=None,\n                                                  body=[start_debug_cmd]))\n\n        try_except_extra_params = {\"finalbody\": []} if IS_PYTHON_3 else {}\n\n        new_node = self.ast_try_except(orelse=[], body=[node],\n                                       handlers=handlers,\n                                       **try_except_extra_params)\n\n        return ast.copy_location(new_node, node)"
    },
    {
        "instruction": "This Python function returns a dictionary containing a detailed view of the LLDP (Link Layer Discovery Protocol) neighbors. It takes an optional parameter 'interface' to filter the results based on the interface name. The keys of the dictionary are the interfaces with LLDP activated on. The function uses the napalm library to call the 'get_lldp_neighbors_detail' function. If the 'interface' parameter is provided, the dictionary is filtered to only include the specified interface. The resulting dictionary contains information such as the remote system name, remote port, and remote system capabilities. Please give the corresponding code according to the description. ",
        "response": "def lldp(interface='', **kwargs):  # pylint: disable=unused-argument\n\n    '''\n    Returns a detailed view of the LLDP neighbors.\n\n    :param interface: interface name to filter on\n\n    :return:          A dictionary with the LLDL neighbors. The keys are the\n        interfaces with LLDP activated on.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' net.lldp\n        salt '*' net.lldp interface='TenGigE0/0/0/8'\n\n    Example output:\n\n    .. code-block:: python\n\n        {\n            'TenGigE0/0/0/8': [\n                {\n                    'parent_interface': 'Bundle-Ether8',\n                    'interface_description': 'TenGigE0/0/0/8',\n                    'remote_chassis_id': '8c60.4f69.e96c',\n                    'remote_system_name': 'switch',\n                    'remote_port': 'Eth2/2/1',\n                    'remote_port_description': 'Ethernet2/2/1',\n                    'remote_system_description': 'Cisco Nexus Operating System (NX-OS) Software 7.1(0)N1(1a)\n                          TAC support: http://www.cisco.com/tac\n                          Copyright (c) 2002-2015, Cisco Systems, Inc. All rights reserved.',\n                    'remote_system_capab': 'B, R',\n                    'remote_system_enable_capab': 'B'\n                }\n            ]\n        }\n    '''\n\n    proxy_output = salt.utils.napalm.call(\n        napalm_device,  # pylint: disable=undefined-variable\n        'get_lldp_neighbors_detail',\n        **{\n        }\n    )\n\n    if not proxy_output.get('result'):\n        return proxy_output\n\n    lldp_neighbors = proxy_output.get('out')\n\n    if interface:\n        lldp_neighbors = {interface: lldp_neighbors.get(interface)}\n\n    proxy_output.update({\n        'out': lldp_neighbors\n    })\n\n    return proxy_output"
    },
    {
        "instruction": "Python - This function returns the Composition corresponding to the asset. If the composition is empty, it raises an IllegalState error. If the repository does not support Composition lookup, it raises an OperationFailed error. The function uses the Composition lookup session to get the Composition with the corresponding ID. The function must be implemented. Please give the corresponding code according to the description. ",
        "response": "def get_composition(self):\n        \"\"\"Gets the Composition corresponding to this asset.\n\n        return: (osid.repository.Composition) - the composiiton\n        raise:  IllegalState - ``is_composition()`` is ``false``\n        raise:  OperationFailed - unable to complete request\n        *compliance: mandatory -- This method must be implemented.*\n\n        \"\"\"\n        # Implemented from template for osid.learning.Activity.get_objective\n        if not bool(self._my_map['compositionId']):\n            raise errors.IllegalState('composition empty')\n        mgr = self._get_provider_manager('REPOSITORY')\n        if not mgr.supports_composition_lookup():\n            raise errors.OperationFailed('Repository does not support Composition lookup')\n        lookup_session = mgr.get_composition_lookup_session(proxy=getattr(self, \"_proxy\", None))\n        lookup_session.use_federated_repository_view()\n        return lookup_session.get_composition(self.get_composition_id())"
    },
    {
        "instruction": "This is a Python function that finds all words containing a given substring. The function takes a substring as input and returns a list of all words found. The function first converts the substring to lowercase and initializes an empty set for found words. It then uses a C library function to search for the substring in a graph data structure. The function iterates over the search results and adds each word containing the substring to the set of found words. Finally, the function destroys the search result object and returns the list of found words. Please give the corresponding code according to the description. ",
        "response": "def contains(self, sub):\n        \"\"\"\n        Find all words containing a substring.\n\n        Args:\n            sub: A substring to be searched for.\n\n        Returns:\n            A list of all words found.\n        \"\"\"\n        sub = sub.lower()\n        found_words = set()\n\n        res = cgaddag.gdg_contains(self.gdg, sub.encode(encoding=\"ascii\"))\n        tmp = res\n\n        while tmp:\n            word = tmp.contents.str.decode(\"ascii\")\n            found_words.add(word)\n            tmp = tmp.contents.next\n\n        cgaddag.gdg_destroy_result(res)\n        return list(found_words)"
    },
    {
        "instruction": "This Python function generates random binomial variates. If no size is specified, it generates a single value. It takes in three parameters: n, which is the number of trials, p, which is the probability of success, and size, which is an optional parameter that specifies the shape of the output. It uses the NumPy library to generate the random variates using the binomial distribution. Please give the corresponding code according to the description. ",
        "response": "def rbinomial(n, p, size=None):\n    \"\"\"\n    Random binomial variates.\n    \"\"\"\n    if not size:\n        size = None\n    return np.random.binomial(np.ravel(n), np.ravel(p), size)"
    },
    {
        "instruction": "This Python function configures logging and returns the named logger and the location of the logging configuration file loaded. It looks for a logging configuration file at each of the following locations: local/{name}. logging. conf, default/{name}. logging. conf, local/logging. conf, and default/logging. conf. You can short circuit the search for a logging configuration file by providing an alternative file location in `path`. The logging configuration file must be in ConfigParser format. The current working directory is set to <app-root> before the logging configuration file is loaded. Hence, paths in the logging configuration file are relative to <app-root>. Please give the corresponding code according to the description. ",
        "response": "def configure_logging(logger_name, filename=None):\n    \"\"\" Configure logging and return the named logger and the location of the logging configuration file loaded.\n\n    This function expects a Splunk app directory structure::\n\n        <app-root>\n            bin\n                ...\n            default\n                ...\n            local\n                ...\n\n    This function looks for a logging configuration file at each of these locations, loading the first, if any,\n    logging configuration file that it finds::\n\n        local/{name}.logging.conf\n        default/{name}.logging.conf\n        local/logging.conf\n        default/logging.conf\n\n    The current working directory is set to *<app-root>* before the logging configuration file is loaded. Hence, paths\n    in the logging configuration file are relative to *<app-root>*. The current directory is reset before return.\n\n    You may short circuit the search for a logging configuration file by providing an alternative file location in\n    `path`. Logging configuration files must be in `ConfigParser format`_.\n\n    #Arguments:\n\n    :param logger_name: Logger name\n    :type logger_name: bytes, unicode\n\n    :param filename: Location of an alternative logging configuration file or `None`.\n    :type filename: bytes, unicode or NoneType\n\n    :returns: The named logger and the location of the logging configuration file loaded.\n    :rtype: tuple\n\n    .. _ConfigParser format: https://docs.python.org/2/library/logging.config.html#configuration-file-format\n\n    \"\"\"\n    if filename is None:\n        if logger_name is None:\n            probing_paths = [path.join('local', 'logging.conf'), path.join('default', 'logging.conf')]\n        else:\n            probing_paths = [\n                path.join('local', logger_name + '.logging.conf'),\n                path.join('default', logger_name + '.logging.conf'),\n                path.join('local', 'logging.conf'),\n                path.join('default', 'logging.conf')]\n        for relative_path in probing_paths:\n            configuration_file = path.join(app_root, relative_path)\n            if path.exists(configuration_file):\n                filename = configuration_file\n                break\n    elif not path.isabs(filename):\n        found = False\n        for conf in 'local', 'default':\n            configuration_file = path.join(app_root, conf, filename)\n            if path.exists(configuration_file):\n                filename = configuration_file\n                found = True\n                break\n        if not found:\n            raise ValueError('Logging configuration file \"{}\" not found in local or default directory'.format(filename))\n    elif not path.exists(filename):\n        raise ValueError('Logging configuration file \"{}\" not found'.format(filename))\n\n    if filename is not None:\n        global _current_logging_configuration_file\n        filename = path.realpath(filename)\n\n        if filename != _current_logging_configuration_file:\n            working_directory = getcwd()\n            chdir(app_root)\n            try:\n                fileConfig(filename, {'SPLUNK_HOME': splunk_home})\n            finally:\n                chdir(working_directory)\n            _current_logging_configuration_file = filename\n\n    if len(root.handlers) == 0:\n        root.addHandler(StreamHandler())\n\n    return None if logger_name is None else getLogger(logger_name), filename"
    },
    {
        "instruction": "In Python, define a method \"cleanup\" that removes references to the plot on the attached Stream subscribers. Traverse through the plots and for each plot, check if it is an instance of GenericCompositePlot, GenericElementPlot, or GenericOverlayPlot. If it is not, continue. For each stream in the plot, remove any subscriber whose method owner is not in the plots. Finally, if a comm exists, close it. Please give the corresponding code according to the description. ",
        "response": "def cleanup(self):\n        \"\"\"\n        Cleans up references to the plot on the attached Stream\n        subscribers.\n        \"\"\"\n        plots = self.traverse(lambda x: x, [Plot])\n        for plot in plots:\n            if not isinstance(plot, (GenericCompositePlot, GenericElementPlot, GenericOverlayPlot)):\n                continue\n            for stream in set(plot.streams):\n                stream._subscribers = [\n                    (p, subscriber) for p, subscriber in stream._subscribers\n                    if util.get_method_owner(subscriber) not in plots]\n        if self.comm:\n            self.comm.close()"
    },
    {
        "instruction": "In Python, this function takes a string parameter and returns an instance of SIGParameterType class. The function first checks if the parameter matches the regular expression pattern defined in SIGParameter class. If it does, it creates an instance of the class by passing an integer value extracted from the matched group. If the parameter does not match the pattern, the function returns None. Please give the corresponding code according to the description. ",
        "response": "def from_parameter(cls: Type[SIGParameterType], parameter: str) -> Optional[SIGParameterType]:\n        \"\"\"\n        Return a SIGParameter instance from an index parameter\n\n        :param parameter: Index parameter\n\n        :return:\n        \"\"\"\n        sig = SIGParameter.re_sig.match(parameter)\n        if sig:\n            return cls(int(sig.group(1)))\n\n        return None"
    },
    {
        "instruction": "Take a private key as input and convert it to an Ethereum address. If the private key is in string format, convert it to bytes. Then, create a PrivateKey object using the private key bytes. Finally, return the Ethereum address generated from the corresponding public key of the PrivateKey object. The function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def private_key_to_address(private_key: Union[str, bytes]) -> ChecksumAddress:\n    \"\"\" Converts a private key to an Ethereum address. \"\"\"\n    if isinstance(private_key, str):\n        private_key_bytes = to_bytes(hexstr=private_key)\n    else:\n        private_key_bytes = private_key\n    pk = PrivateKey(private_key_bytes)\n    return public_key_to_address(pk.public_key)"
    },
    {
        "instruction": "Define an asynchronous function that sets the temperatures for a given room, specified by its name. The function takes in the name of the room and three temperature values (sleep, comfort, and away). If all temperature values are None, the function returns without performing any action. Otherwise, the function iterates over all rooms in the object and checks if the name of the current room matches the specified name. If a match is found, the function calls another function to set the temperatures for the room and returns. If no match is found, an error message is logged. The function is written in Python. Please give the corresponding code according to the description. ",
        "response": "async def set_room_temperatures_by_name(self, room_name, sleep_temp=None,\n                                            comfort_temp=None, away_temp=None):\n        \"\"\"Set room temps by name.\"\"\"\n        if sleep_temp is None and comfort_temp is None and away_temp is None:\n            return\n        for room_id, _room in self.rooms.items():\n            if _room.name == room_name:\n                await self.set_room_temperatures(room_id, sleep_temp,\n                                                 comfort_temp, away_temp)\n                return\n        _LOGGER.error(\"Could not find a room with name %s\", room_name)"
    },
    {
        "instruction": "Generate a login token for the specified user and send an email with login instructions containing the token. The email should include a link to the login page with the token as a parameter. Finally, send a signal indicating that the login instructions have been sent. This is written in Python. Please give the corresponding code according to the description. ",
        "response": "def send_login_instructions(user):\n    \"\"\"Sends the login instructions email for the specified user.\n\n    :param user: The user to send the instructions to\n    :param token: The login token\n    \"\"\"\n    token = generate_login_token(user)\n    login_link = url_for_security('token_login', token=token, _external=True)\n\n    _security.send_mail(config_value('EMAIL_SUBJECT_PASSWORDLESS'), user.email,\n                        'login_instructions', user=user, login_link=login_link)\n\n    login_instructions_sent.send(app._get_current_object(), user=user,\n                                 login_token=token)"
    },
    {
        "instruction": "In Python, execute all the callbacks stored in the \"watches\" dictionary. If any callback raises an exception, log the error and remove the corresponding watch by appending its uid to the \"to_remove\" list. Finally, unregister all the watches in the \"to_remove\" list. Please give the corresponding code according to the description. ",
        "response": "def trigger_watches(self):\n    \"\"\"\n    Call all the callbacks.\n    If any callback raises an Exception,\n    unregister the corresponding watch.\n    \"\"\"\n    to_remove = []\n    for uid, callback in self.watches.items():\n      try:\n        callback(self)\n      except Exception as e:\n        Log.error(\"Caught exception while triggering callback: \" + str(e))\n        Log.debug(traceback.format_exc())\n        to_remove.append(uid)\n\n    for uid in to_remove:\n      self.unregister_watch(uid)"
    },
    {
        "instruction": "In Python, this function retrieves the interface that matches the given full name, which is a string in the format of \"modulename. interface\". It splits the full name into two parts, the module name and the interface name, and then retrieves the module using the module name. If the module exists and contains the interface, it returns the interface object. Otherwise, it returns None. Please give the corresponding code according to the description. ",
        "response": "def get_interface(self, fullname):\n        \"\"\"Gets the interface corresponding to the specified full name.\n\n        :arg fullname: a string with modulename.interface.\n        \"\"\"\n        result = None\n        [modname, iname] = fullname.split(\".\")\n        module = self.get(modname)\n        if module is not None:\n            if iname in module.interfaces:\n                result = module.interfaces[iname]\n        return result"
    },
    {
        "instruction": "This Python function updates an existing job by sending a PUT request to a Sauce Labs endpoint. It takes in a job ID and optional parameters such as build, custom data, name, passed, public, and tags. If any of these parameters are not None, they are added to a dictionary called \"data\". The dictionary is then converted to a JSON string and sent as the body of the request. The function returns the response from the request. Please give the corresponding code according to the description. ",
        "response": "def update_job(self, job_id, build=None, custom_data=None,\n                   name=None, passed=None, public=None, tags=None):\n        \"\"\"Edit an existing job.\"\"\"\n        method = 'PUT'\n        endpoint = '/rest/v1/{}/jobs/{}'.format(self.client.sauce_username,\n                                                job_id)\n        data = {}\n        if build is not None:\n            data['build'] = build\n        if custom_data is not None:\n            data['custom-data'] = custom_data\n        if name is not None:\n            data['name'] = name\n        if passed is not None:\n            data['passed'] = passed\n        if public is not None:\n            data['public'] = public\n        if tags is not None:\n            data['tags'] = tags\n        body = json.dumps(data)\n        return self.client.request(method, endpoint, body=body)"
    },
    {
        "instruction": "Using the provided session, post the provided JSON to the specified URL endpoint. If the response status code is 400 or greater, raise a parse error. Return the response. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def post_json(session, url, json):\n    \"\"\"\n    Post JSON to the Forest endpoint.\n    \"\"\"\n    res = session.post(url, json=json)\n    if res.status_code >= 400:\n        raise parse_error(res)\n    return res"
    },
    {
        "instruction": "In Python, define a method that takes in a sequence, a beginning index, and an ending index. Then, create a parser tree that represents a range of values from the sequence, starting at the beginning index and ending at the ending index. Finally, return a boolean value of True to indicate that the read_range primitive has been added successfully. Please give the corresponding code according to the description. ",
        "response": "def add_range(self, sequence, begin, end):\n    \"\"\"Add a read_range primitive\"\"\"\n    sequence.parser_tree = parsing.Range(self.value(begin).strip(\"'\"),\n                                         self.value(end).strip(\"'\"))\n    return True"
    },
    {
        "instruction": "In Python, create a function that takes a list of dictionaries and a list of column names as input. If the list of dictionaries is empty, return an empty table with the specified columns. Otherwise, generate an Agate table from the list of dictionaries and use the \"select\" method to reorder the columns according to the provided column names. Return the resulting Agate table. Please give the corresponding code according to the description. ",
        "response": "def table_from_data(data, column_names):\n    \"Convert list of dictionaries into an Agate table\"\n\n    # The agate table is generated from a list of dicts, so the column order\n    # from `data` is not preserved. We can use `select` to reorder the columns\n    #\n    # If there is no data, create an empty table with the specified columns\n\n    if len(data) == 0:\n        return agate.Table([], column_names=column_names)\n    else:\n        table = agate.Table.from_object(data, column_types=DEFAULT_TYPE_TESTER)\n        return table.select(column_names)"
    },
    {
        "instruction": "In Python, define a function `load_config` that loads configuration settings either from a specified dictionary or from a configuration file. If a dictionary is given, update the current configuration with the values from the dictionary. Otherwise, search for configuration files and update the configuration with the values from the first file found. Finally, validate the loaded configuration. Please give the corresponding code according to the description. ",
        "response": "def load_config(self, settings=None):\n        \"\"\"\n        Load the configuration either from the config file, or from the given settings.\n\n        Args:\n            settings (dict): If given, the settings are pulled from this dictionary. Otherwise, the\n                config file is used.\n        \"\"\"\n        self._load_defaults()\n        if settings:\n            self.update(settings)\n        else:\n            config_paths = _get_config_files()\n            for p in config_paths:\n                conf = _process_config_file([p])\n                self.update(conf)\n        self._loaded = True\n        self._validate()"
    },
    {
        "instruction": "This Python code defines a function that instantiates an opus maximum type. If the opus maximum type is already present, the function returns it. Otherwise, it creates a new opus maximum type instance, adds a label to it, saves it, and returns it. The label describes the opus maximum as the only preserved work by a given author or the most well-known one. Please give the corresponding code according to the description. ",
        "response": "def _get_opus_maximum(self):\n        \"\"\"Instantiate an opus maximum type.\"\"\"\n        label = \"\"\"The opux maximum of a given author\n                    that is, the only preserved work by that\n                    author or the most known one.\"\"\"\n\n        opmax = self.session.get_resource(\n            BASE_URI_TYPES % \"opmax\",\n            self.session.get_class(surf.ns.ECRM['E55_Type'])\n        )\n        if opmax.is_present():\n            return opmax\n        else:\n            opmax.rdfs_label.append(Literal(label, \"en\"))\n            logger.debug(\"Created a new opus maximum type instance\")\n            opmax.save()\n            return opmax"
    },
    {
        "instruction": "Update the content in a TabPostHist table by the given ID. Set the user_name column to the value of 'user_name' in the post_data dictionary, set the cnt_md column to the escaped value of 'cnt_md' in the post_data dictionary, and set the time_update column to the current timestamp. Execute the update query. This code is written in Python using the Tornado web framework. Please give the corresponding code according to the description. ",
        "response": "def update_cnt(uid, post_data):\n        '''\n        Update the content by ID.\n        '''\n        entry = TabPostHist.update(\n            user_name=post_data['user_name'],\n            cnt_md=tornado.escape.xhtml_escape(post_data['cnt_md']),\n            time_update=tools.timestamp(),\n        ).where(TabPostHist.uid == uid)\n        entry.execute()"
    },
    {
        "instruction": "In Python, define a method `analysis_search` that takes in a query. The method should search for the query in MD5, SHA1, SHA256, filename, cookbook name, comment, url and report id. Use the `_post` method to send a request to the API endpoint `/v2/analysis/search` with the `apikey` and `q` parameters. Finally, use the `_raise_or_extract` method to handle the response and return the result. Please give the corresponding code according to the description. ",
        "response": "def analysis_search(self, query):\n        \"\"\"\n        Lists the webids of the analyses that match the given query.\n\n        Searches in MD5, SHA1, SHA256, filename, cookbook name, comment, url and report id.\n        \"\"\"\n        response = self._post(self.apiurl + \"/v2/analysis/search\", data={'apikey': self.apikey, 'q': query})\n\n        return self._raise_or_extract(response)"
    },
    {
        "instruction": "In Python, define a function that takes in a list of file names and a regular expression pattern, and yields the file name if it matches the pattern. Use the `re. match()` function to check if the file name matches the pattern. Please give the corresponding code according to the description. ",
        "response": "def match_files(files, pattern: Pattern):\n    \"\"\"Yields file name if matches a regular expression pattern.\"\"\"\n\n    for name in files:\n        if re.match(pattern, name):\n            yield name"
    },
    {
        "instruction": "In Python, override the `get_form_kwargs` method to add the `data` key to the form arguments. Set the value of `data` to the `initial` key of the keyword arguments returned by calling the parent method. Return the updated keyword arguments. This allows you to validate the form data on a GET request. Please give the corresponding code according to the description. ",
        "response": "def get_form_kwargs(self):\n        \"\"\"Add the 'data' to the form args so you can validate the form\n        data on a get request.\n        \"\"\"\n        kwargs = super(ApiFormView, self).get_form_kwargs()\n        kwargs['data'] = kwargs.get('initial')\n        return kwargs"
    },
    {
        "instruction": "In Python, define an asynchronous function called \"pulse\" that sends a GET request to the API to keep the connection alive. Use the \"GetState\" class from the \"pyvlx\" module to perform the API call. If the API call is unsuccessful, raise a \"PyVLXException\" with the message \"Unable to send get state. \"Please give the corresponding code according to the description. ",
        "response": "async def pulse(self):\n        \"\"\"Send get state request to API to keep the connection alive.\"\"\"\n        get_state = GetState(pyvlx=self.pyvlx)\n        await get_state.do_api_call()\n        if not get_state.success:\n            raise PyVLXException(\"Unable to send get state.\")"
    },
    {
        "instruction": "In Python, define a function that takes in a package name as input and checks if the RPM package is installed. If the package name is not provided, raise a ValueError. Use the RPM path and package name to query the package and check if it is installed. Return True if the package is installed, and False otherwise. Please give the corresponding code according to the description. ",
        "response": "def is_package_installed(self, package_name):\n        \"\"\"Check if the RPM package is installed.\"\"\"\n        if not package_name:\n            raise ValueError('package_name required.')\n\n        installed = True\n        try:\n            Cmd.sh_e('{0} --query {1} --quiet'.format(self.rpm_path,\n                                                      package_name))\n        except InstallError:\n            installed = False\n        return installed"
    },
    {
        "instruction": "In Python, define a method that stops playback from the audio sink. Flush the audio sink, stop it, and set the `_playing` variable to `False`. Please give the corresponding code according to the description. ",
        "response": "def stop_playback(self):\n        \"\"\"Stop playback from the audio sink.\"\"\"\n        self._sink.flush()\n        self._sink.stop()\n        self._playing = False"
    },
    {
        "instruction": "This Python function checks if a given HTTP request should be \"raptorized\". It returns a boolean value. If the response status is not \"200 OK\", or the content type is not HTML, or a randomly generated number is greater than a specified value, or it is not April 1st, it returns False. Otherwise, it returns True. Please give the corresponding code according to the description. ",
        "response": "def should_raptorize(self, req, resp):\n        \"\"\" Determine if this request should be raptorized.  Boolean. \"\"\"\n\n        if resp.status != \"200 OK\":\n            return False\n\n        content_type = resp.headers.get('Content-Type', 'text/plain').lower()\n        if not 'html' in content_type:\n            return False\n\n        if random.random() > self.random_chance:\n            return False\n\n        if self.only_on_april_1st:\n            now = datetime.datetime.now()\n            if now.month != 20 and now.day != 1:\n                return False\n\n        return True"
    },
    {
        "instruction": "In Python, define a function that takes a function f, and any number of arguments and keyword arguments as input. Then, call the function f with the given arguments in the reactor thread using the callFromThread method of the reactor object. Please give the corresponding code according to the description. ",
        "response": "def _call_in_reactor_thread(self, f, *args, **kwargs):\n        \"\"\"Call the given function with args in the reactor thread.\"\"\"\n        self._reactor.callFromThread(f, *args, **kwargs)"
    },
    {
        "instruction": "Load the stack depth settings from the config file for the specified package in Python. The function takes three arguments: the name of the package to get stack depth info for, the fully qualified domain name of the member in the package, and the default depth when one has not been configured. If the package is not in the stack configuration, import the settings module from the acorn. config package and add the package to the stack configuration. If the fqdn is in the stack configuration, return the corresponding stack depth. Otherwise, return the default depth. Please give the corresponding code according to the description. ",
        "response": "def _get_stack_depth(package, fqdn, defdepth=_def_stackdepth):\n    \"\"\"Loads the stack depth settings from the config file for the specified\n    package.\n\n    Args:\n        package (str): name of the package to get stack depth info for.\n        fqdn (str): fully qualified domain name of the member in the package.\n        defdepth (int): default depth when one has not been configured.\n    \"\"\"\n    global _stack_config\n    if package not in _stack_config:\n        from acorn.config import settings\n        spack = settings(package)\n        _stack_config[package] = {}\n\n        secname = \"logging.depth\"\n        if spack.has_section(secname):\n            for ofqdn in spack.options(secname):\n                _stack_config[package][ofqdn] = spack.getint(secname, ofqdn)\n\n    usedef = True\n    if fqdn in _stack_config[package]:\n        result = _stack_config[package][fqdn]\n        usedef = False\n    elif \"*\" in _stack_config[package]: # pragma: no cover\n        result = _stack_config[package][\"*\"]\n        usedef = False\n    else:\n        result = defdepth\n\n    if not usedef:\n        msg.gen(\"Using {} for {} stack depth.\".format(result, fqdn), 3)\n    return result"
    },
    {
        "instruction": "This Python function takes a URL and optional parameters and data, and returns the JSON data from the page. If the `as_objects` parameter is True, it returns the data as Reddit objects; otherwise, it returns the raw JSON dictionary. If `retry_on_error` is True, it will retry the request up to 3 times if it fails. The function also updates the `modhash` attribute if it is present in the returned data. Please give the corresponding code according to the description. ",
        "response": "def request_json(self, url, params=None, data=None, as_objects=True,\n                     retry_on_error=True, method=None):\n        \"\"\"Get the JSON processed from a page.\n\n        :param url: the url to grab content from.\n        :param params: a dictionary containing the GET data to put in the url\n        :param data: a dictionary containing the extra data to submit\n        :param as_objects: if True return reddit objects else raw json dict.\n        :param retry_on_error: if True retry the request, if it fails, for up\n            to 3 attempts\n        :returns: JSON processed page\n\n        \"\"\"\n        if not url.endswith('.json'):\n            url += '.json'\n        response = self._request(url, params, data, method=method,\n                                 retry_on_error=retry_on_error)\n        hook = self._json_reddit_objecter if as_objects else None\n        # Request url just needs to be available for the objecter to use\n        self._request_url = url  # pylint: disable=W0201\n\n        if response == '':\n            # Some of the v1 urls don't return anything, even when they're\n            # successful.\n            return response\n\n        data = json.loads(response, object_hook=hook)\n        delattr(self, '_request_url')\n        # Update the modhash\n        if isinstance(data, dict) and 'data' in data \\\n                and 'modhash' in data['data']:\n            self.modhash = data['data']['modhash']\n        return data"
    },
    {
        "instruction": "In Python, define a method called `push_usi` that takes in a `usi` string argument. Parse the `usi` string into a `move` object using the `Move. from_usi()` method. Push the `move` object onto the move stack using the `push()` method. Return the `move` object. If the move is not legal or a null move, raise a `ValueError`. Please give the corresponding code according to the description. ",
        "response": "def push_usi(self, usi):\n        '''\n        Parses a move in standard coordinate notation, makes the move and puts\n        it on the the move stack.\n        Raises `ValueError` if neither legal nor a null move.\n        Returns the move.\n        '''\n        move = Move.from_usi(usi)\n        self.push(move)\n        return move"
    },
    {
        "instruction": "Python: Add a function that checks if a hit overlaps with a previous hit in a sequence. If the overlap is greater than or equal to 200, return True. Otherwise, return False. Please give the corresponding code according to the description. ",
        "response": "def check_overlap(current, hit, overlap = 200):\n    \"\"\"\n    determine if sequence has already hit the same part of the model,\n    indicating that this hit is for another 16S rRNA gene\n    \"\"\"\n    for prev in current:\n        p_coords = prev[2:4]\n        coords = hit[2:4]\n        if get_overlap(coords, p_coords) >= overlap:\n            return True\n    return False"
    },
    {
        "instruction": "In Python, this function takes a string as input and searches for a constant with that name in a specific module. If the constant is found, it returns its value. If not, it returns a red error message indicating that the constant is missing. Please give the corresponding code according to the description. ",
        "response": "def get_question_text(constant):\n    \"\"\"Find a constant by name and return its value.\n\n    :param constant: The name of the constant to look for.\n    :type constant: string\n\n    :returns: The value of the constant or red error message.\n    :rtype: string\n    \"\"\"\n    if constant in dir(safe.gui.tools.wizard.wizard_strings):\n        return getattr(safe.gui.tools.wizard.wizard_strings, constant)\n    else:\n        return '<b>MISSING CONSTANT: %s</b>' % constant"
    },
    {
        "instruction": "In Python, define a function called \"render\" that takes in a dictionary called \"data\", with optional arguments \"saltenv\", \"sls\", \"argline\", and \"**kwargs\". Within the function, retrieve the value of the \"translate_newlines\" key from the \"**kwargs\" dictionary and set it to \"False\" if it does not exist. Then, call the \"_decrypt_object\" function with \"data\" and \"translate_newlines\" as arguments and return the result. This function is used to decrypt data that was encrypted using AWS KMS envelope encryption. Please give the corresponding code according to the description. ",
        "response": "def render(data, saltenv='base', sls='', argline='', **kwargs):  # pylint: disable=unused-argument\n    '''\n    Decrypt the data to be rendered that was encrypted using AWS KMS envelope encryption.\n    '''\n    translate_newlines = kwargs.get('translate_newlines', False)\n    return _decrypt_object(data, translate_newlines=translate_newlines)"
    },
    {
        "instruction": "This Python function creates a projection matrix with the given field of view, camera near and far values, and aspect ratio. If the aspect ratio is not provided, the aspect ratio of the window will be used. The function returns the projection matrix as a float32 numpy array. Please give the corresponding code according to the description. ",
        "response": "def create_projection(self, fov: float = 75.0, near: float = 1.0, far: float = 100.0, aspect_ratio: float = None):\n        \"\"\"\n        Create a projection matrix with the following parameters.\n        When ``aspect_ratio`` is not provided the configured aspect\n        ratio for the window will be used.\n\n        Args:\n            fov (float): Field of view (float)\n            near (float): Camera near value\n            far (float): Camrea far value\n\n        Keyword Args:\n            aspect_ratio (float): Aspect ratio of the viewport\n\n        Returns:\n            The projection matrix as a float32 :py:class:`numpy.array`\n        \"\"\"\n        return matrix44.create_perspective_projection_matrix(\n            fov,\n            aspect_ratio or self.window.aspect_ratio,\n            near,\n            far,\n            dtype='f4',\n        )"
    },
    {
        "instruction": "In Python, this function sets the sample weight for a scikit-learn pipeline or related object. It iterates through all objects in the pipeline and sets the sample weight recursively. The function takes two parameters: pipeline_steps, which is an array-like list of (str, obj) tuples, and sample_weight, which is an array-like list of sample weights. The function returns a dictionary of sample weights. If the sample_weight parameter is not None, the function sets the sample weight for each object in the pipeline that has a 'sample_weight' argument in its fit method. Please give the corresponding code according to the description. ",
        "response": "def set_sample_weight(pipeline_steps, sample_weight=None):\n    \"\"\"Recursively iterates through all objects in the pipeline and sets sample weight.\n\n    Parameters\n    ----------\n    pipeline_steps: array-like\n        List of (str, obj) tuples from a scikit-learn pipeline or related object\n    sample_weight: array-like\n        List of sample weight\n    Returns\n    -------\n    sample_weight_dict:\n        A dictionary of sample_weight\n\n    \"\"\"\n    sample_weight_dict = {}\n    if not isinstance(sample_weight, type(None)):\n        for (pname, obj) in pipeline_steps:\n            if inspect.getargspec(obj.fit).args.count('sample_weight'):\n                step_sw = pname + '__sample_weight'\n                sample_weight_dict[step_sw] = sample_weight\n\n    if sample_weight_dict:\n        return sample_weight_dict\n    else:\n        return None"
    },
    {
        "instruction": "In Python, define a method called \"tune_pair\" that takes in a pair of images. Save the current state of the method, set the pair of images to the input pair, and update the disparity map. Please give the corresponding code according to the description. ",
        "response": "def tune_pair(self, pair):\n        \"\"\"Tune a pair of images.\"\"\"\n        self._save_bm_state()\n        self.pair = pair\n        self.update_disparity_map()"
    },
    {
        "instruction": "Initialize and run a pypyr pipeline from your code. Set the pipeline name, context input, working directory, log level, and log path as arguments. The pipeline should be in the working directory's \"pipelines\" directory, and steps are specified in python modules that load dynamically. The function does some one-off initialization before running the actual pipeline, and logs the start and end of the pipeline. Please give the corresponding code according to the description. ",
        "response": "def main(\n    pipeline_name,\n    pipeline_context_input,\n    working_dir,\n    log_level,\n    log_path,\n):\n    \"\"\"Entry point for pypyr pipeline runner.\n\n    Call this once per pypyr run. Call me if you want to run a pypyr pipeline\n    from your own code. This function does some one-off 1st time initialization\n    before running the actual pipeline.\n\n    pipeline_name.yaml should be in the working_dir/pipelines/ directory.\n\n    Args:\n        pipeline_name: string. Name of pipeline, sans .yaml at end.\n        pipeline_context_input: string. Initialize the pypyr context with this\n                                string.\n        working_dir: path. looks for ./pipelines and modules in this directory.\n        log_level: int. Standard python log level enumerated value.\n        log_path: os.path. Append log to this path.\n\n    Returns:\n        None\n\n    \"\"\"\n    pypyr.log.logger.set_root_logger(log_level, log_path)\n\n    logger.debug(\"starting pypyr\")\n\n    # pipelines specify steps in python modules that load dynamically.\n    # make it easy for the operator so that the cwd is automatically included\n    # without needing to pip install a package 1st.\n    pypyr.moduleloader.set_working_directory(working_dir)\n\n    load_and_run_pipeline(pipeline_name=pipeline_name,\n                          pipeline_context_input=pipeline_context_input,\n                          working_dir=working_dir)\n\n    logger.debug(\"pypyr done\")"
    },
    {
        "instruction": "In Python, define a method called \"apply_theme\" that takes in a themename and themeoptions as parameters. This method will store the existing theme configuration and apply a new one. To do this, push the existing values onto the Stack, load additional themes, create a new theme using the themename parameter, copy the themeoptions parameter, initialize the templates, and add a JSON filter to the templates environment. Finally, if the new theme is not in the list of additional themes, append it to the list. Please give the corresponding code according to the description. ",
        "response": "def apply_theme(self, themename, themeoptions):\n        \"\"\"Apply a new theme to the document.\n\n        This will store the existing theme configuration and apply a new one.\n\n        \"\"\"\n\n        # push the existing values onto the Stack\n        self._theme_stack.append(\n            (self.theme, self.theme_options)\n        )\n\n        theme_factory = HTMLThemeFactory(self.app)\n        theme_factory.load_additional_themes(self.get_builtin_theme_dirs() + self.config.slide_theme_path)\n\n        self.theme = theme_factory.create(themename)\n        self.theme_options = themeoptions.copy()\n        self.templates.init(self, self.theme)\n        self.templates.environment.filters['json'] = json.dumps\n\n        if self.theme not in self._additional_themes:\n            self._additional_themes.append(self.theme)"
    },
    {
        "instruction": "In the Python function `drilldown_tree`, generate a branch starting from the current node of a tree. If a session is not provided, use the session of the current object. Return the tree generated using the `_drilldown_query` query. If `json` is True, return the tree in JSON format. If `json_fields` is provided, return only the specified fields in the JSON output. Please give the corresponding code according to the description. ",
        "response": "def drilldown_tree(self, session=None, json=False, json_fields=None):\n        \"\"\" This method generate a branch from a tree, begining with current\n        node.\n\n        For example:\n\n            node7.drilldown_tree()\n\n            .. code::\n\n                level           Nested sets example\n                1                    1(1)22       ---------------------\n                        _______________|_________|_________            |\n                       |               |         |         |           |\n                2    2(2)5           6(4)11      |      12(7)21        |\n                       |               ^         |         ^           |\n                3    3(3)4       7(5)8   9(6)10  | 13(8)16   17(10)20  |\n                                                 |    |          |     |\n                4                                | 14(9)15   18(11)19  |\n                                                 |                     |\n                                                  ---------------------\n\n        Example in tests:\n\n            * :mod:`sqlalchemy_mptt.tests.cases.get_tree.test_drilldown_tree`\n        \"\"\"\n        if not session:\n            session = object_session(self)\n        return self.get_tree(\n            session,\n            json=json,\n            json_fields=json_fields,\n            query=self._drilldown_query\n        )"
    },
    {
        "instruction": "In Python, this function chooses a new position for a particle in a swarm based on the results obtained so far from all other particles. If `whichVars` is not `None`, only move those variables. It gets the global best position for this swarm generation and updates each variable. If `globalBestPosition` is `None`, it generates a new position for the variable. Otherwise, it generates a new position based on `globalBestPosition`. It then logs the new position and returns it. Please give the corresponding code according to the description. ",
        "response": "def newPosition(self, whichVars=None):\n    # TODO: incorporate data from choice variables....\n    # TODO: make sure we're calling this when appropriate.\n    \"\"\"Choose a new position based on results obtained so far from all other\n    particles.\n\n    Parameters:\n    --------------------------------------------------------------\n    whichVars:       If not None, only move these variables\n    retval:               new position\n    \"\"\"\n    # Get the global best position for this swarm generation\n    globalBestPosition = None\n    # If speculative particles are enabled, use the global best considering\n    #  even particles in the current generation. This gives better results\n    #  but does not provide repeatable results because it depends on\n    #  worker timing\n    if self._hsObj._speculativeParticles:\n      genIdx = self.genIdx\n    else:\n      genIdx = self.genIdx - 1\n\n    if genIdx >= 0:\n      (bestModelId, _) = self._resultsDB.bestModelIdAndErrScore(self.swarmId,\n                                                                genIdx)\n      if bestModelId is not None:\n        (particleState, _, _, _, _) = self._resultsDB.getParticleInfo(\n          bestModelId)\n        globalBestPosition = Particle.getPositionFromState(particleState)\n\n    # Update each variable\n    for (varName, var) in self.permuteVars.iteritems():\n      if whichVars is not None and varName not in whichVars:\n        continue\n      if globalBestPosition is None:\n        var.newPosition(None, self._rng)\n      else:\n        var.newPosition(globalBestPosition[varName], self._rng)\n\n    # get the new position\n    position = self.getPosition()\n\n    # Log the new position\n    if self.logger.getEffectiveLevel() <= logging.DEBUG:\n      msg = StringIO.StringIO()\n      print >> msg, \"New particle position: \\n%s\" % (pprint.pformat(position,\n                                                                    indent=4))\n      print >> msg, \"Particle variables:\"\n      for (varName, var) in self.permuteVars.iteritems():\n        print >> msg, \"  %s: %s\" % (varName, str(var))\n      self.logger.debug(msg.getvalue())\n      msg.close()\n\n    return position"
    },
    {
        "instruction": "This Python function sends data as a multipart form-data request. It accepts a `ClientRequest` object, headers to be added to the request, and a dictionary of fields for the formdata. The `add_formdata` method is used to add the content to the request. This method is deprecated and shouldn't be used anymore. Please give the corresponding code according to the description. ",
        "response": "def send_formdata(self, request, headers=None, content=None, **config):\n        \"\"\"Send data as a multipart form-data request.\n        We only deal with file-like objects or strings at this point.\n        The requests is not yet streamed.\n\n        This method is deprecated, and shouldn't be used anymore.\n\n        :param ClientRequest request: The request object to be sent.\n        :param dict headers: Any headers to add to the request.\n        :param dict content: Dictionary of the fields of the formdata.\n        :param config: Any specific config overrides.\n        \"\"\"\n        request.headers = headers\n        request.add_formdata(content)\n        return self.send(request, **config)"
    },
    {
        "instruction": "In Python, define a function named \"set_area_geometry\" that takes in two arguments: \"w\" and \"src\". Ensure that the \"src\" argument contains a tag named \"areaSource\". Retrieve the \"areaGeometry\" node from \"src\" and parse it using the \"parse_area_geometry\" function. Extract the \"polygon\" attribute from the parsed geometry and convert it to a list. Use the \"poly\" method on \"w\" to set the area polygon as the shapefile geometry. Please give the corresponding code according to the description. ",
        "response": "def set_area_geometry(w, src):\n    \"\"\"\n    Set area polygon as shapefile geometry\n    \"\"\"\n    assert \"areaSource\" in src.tag\n    geometry_node = src.nodes[get_taglist(src).index(\"areaGeometry\")]\n    area_attrs = parse_area_geometry(geometry_node)\n    w.poly(parts=[area_attrs[\"polygon\"].tolist()])"
    },
    {
        "instruction": "In Python, define a function called \"readCell\" that takes in three parameters: \"self\", \"row\", and \"col\". The function should attempt to open a sheet if it is not already open, then return the value of the cell at the specified row and column. If an error occurs, raise a custom exception called \"UfException\" with the error message \"Unknown Error in Excellib. readCell\" followed by the error message from the original exception. Please give the corresponding code according to the description. ",
        "response": "def readCell(self, row, col):\r\n        ''' read a cell'''\r\n        try:\r\n            if self.__sheet is None:\r\n                self.openSheet(super(ExcelRead, self).DEFAULT_SHEET)\r\n\r\n            return self.__sheet.cell(row, col).value\r\n        except BaseException as excp:\r\n            raise UfException(Errors.UNKNOWN_ERROR, \"Unknown Error in Excellib.readCell %s\" % excp)"
    },
    {
        "instruction": "Convert metadata from TSV format to JSON format. The function takes in a TSV file path, a JSON file path, an index column name to be used as the top-level key in the JSON, additional metadata to be applied to all entries in the JSON, a list of columns to be dropped from the JSON, and a boolean indicating whether to enforce BIDS case conventions. The function reads the TSV file, applies any additional metadata, drops specified columns, sets the index column, enforces case conventions, converts the data to JSON, and saves the JSON file. If out_json is None, a dictionary is returned instead. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _tsv2json(in_tsv, out_json, index_column, additional_metadata=None,\n              drop_columns=None, enforce_case=True):\n    \"\"\"\n    Convert metadata from TSV format to JSON format.\n\n    Parameters\n    ----------\n    in_tsv: str\n        Path to the metadata in TSV format.\n    out_json: str\n        Path where the metadata should be saved in JSON format after\n        conversion. If this is None, then a dictionary is returned instead.\n    index_column: str\n        Name of the column in the TSV to be used as an index (top-level key in\n        the JSON).\n    additional_metadata: dict\n        Any additional metadata that should be applied to all entries in the\n        JSON.\n    drop_columns: list\n        List of columns from the input TSV to be dropped from the JSON.\n    enforce_case: bool\n        Indicates whether BIDS case conventions should be followed. Currently,\n        this means that index fields (column names in the associated data TSV)\n        use snake case and other fields use camel case.\n\n    Returns\n    -------\n    str\n        Path to the metadata saved in JSON format.\n    \"\"\"\n    import pandas as pd\n    # Adapted from https://dev.to/rrampage/snake-case-to-camel-case-and- ...\n    # back-using-regular-expressions-and-python-m9j\n    re_to_camel = r'(.*?)_([a-zA-Z0-9])'\n    re_to_snake = r'(^.+?|.*?)((?<![_A-Z])[A-Z]|(?<![_0-9])[0-9]+)'\n\n    def snake(match):\n        return '{}_{}'.format(match.group(1).lower(), match.group(2).lower())\n\n    def camel(match):\n        return '{}{}'.format(match.group(1), match.group(2).upper())\n\n    # from fmriprep\n    def less_breakable(a_string):\n        \"\"\" hardens the string to different envs (i.e. case insensitive, no\n        whitespace, '#' \"\"\"\n        return ''.join(a_string.split()).strip('#')\n\n    drop_columns = drop_columns or []\n    additional_metadata = additional_metadata or {}\n    tsv_data = pd.read_csv(in_tsv, '\\t')\n    for k, v in additional_metadata.items():\n        tsv_data[k] = v\n    for col in drop_columns:\n        tsv_data.drop(labels=col, axis='columns', inplace=True)\n    tsv_data.set_index(index_column, drop=True, inplace=True)\n    if enforce_case:\n        tsv_data.index = [re.sub(re_to_snake, snake,\n                                 less_breakable(i), 0).lower()\n                          for i in tsv_data.index]\n        tsv_data.columns = [re.sub(re_to_camel, camel,\n                                   less_breakable(i).title(), 0)\n                            for i in tsv_data.columns]\n    json_data = tsv_data.to_json(orient='index')\n    json_data = json.JSONDecoder(\n        object_pairs_hook=OrderedDict).decode(json_data)\n    if out_json is None:\n        return json_data\n\n    with open(out_json, 'w') as f:\n        json.dump(json_data, f, indent=4)\n    return out_json"
    },
    {
        "instruction": "In Python, define a method \"is_collapsed\" that takes a user ID as input. Return a boolean value indicating whether the comment is collapsed by the user. This is done by querying a database table \"CmtCOLLAPSED\" and filtering the rows where the \"id_bibrec\" column matches the \"id_bibrec\" attribute of the object, the \"id_cmtRECORDCOMMENT\" column matches the \"id\" attribute of the object, and the \"id_user\" column matches the input user ID. If the count of matching rows is greater than 0, return True, otherwise return False. Please give the corresponding code according to the description. ",
        "response": "def is_collapsed(self, id_user):\n        \"\"\"Return true if the comment is collapsed by user.\"\"\"\n        return CmtCOLLAPSED.query.filter(db.and_(\n            CmtCOLLAPSED.id_bibrec == self.id_bibrec,\n            CmtCOLLAPSED.id_cmtRECORDCOMMENT == self.id,\n            CmtCOLLAPSED.id_user == id_user)).count() > 0"
    },
    {
        "instruction": "In Python, define a method named `get_headers` that returns a tuple of headers. Set the `User-Agent` header to `kFlame 1. 0`. If `_get_password_url` returns a non-empty string that is present in the `authorizations` key of the `_settings` dictionary, set the `Authorization` header to the corresponding value. Finally, return the headers tuple. Please give the corresponding code according to the description. ",
        "response": "def get_headers(self):\n        \"\"\" Get headers.\n\n        Returns:\n            tuple: Headers\n        \"\"\"\n        headers = {\n            \"User-Agent\": \"kFlame 1.0\"\n        }\n\n        password_url = self._get_password_url()\n        if password_url and password_url in self._settings[\"authorizations\"]:\n            headers[\"Authorization\"] = self._settings[\"authorizations\"][password_url]\n\n        return headers"
    },
    {
        "instruction": "This Python function validates the given `signature` against `args` and `kwargs`. It returns a tuple containing `args` and the `kwargs` asked for in the `signature`. If any `kwargs` are not present in the `signature`, they are ignored. If any `args` are not present in the `signature`, a TypeError is raised. Please give the corresponding code according to the description. ",
        "response": "def arguments_from_signature(signature, *args, **kwargs):\n    \"\"\"Validate signature against `args` and `kwargs` and return the kwargs\n    asked for in the signature\n\n    Parameters\n    ----------\n    args : Tuple[object...]\n    kwargs : Dict[str, object]\n\n    Returns\n    -------\n    Tuple[Tuple, Dict[str, Any]]\n\n    Examples\n    --------\n    >>> from inspect import signature\n    >>> def foo(a, b=1):\n    ...     return a + b\n    >>> foo_sig = signature(foo)\n    >>> args, kwargs = arguments_from_signature(foo_sig, 1, b=2)\n    >>> args\n    (1,)\n    >>> kwargs\n    {'b': 2}\n    >>> def bar(a):\n    ...     return a + 1\n    >>> bar_sig = signature(bar)\n    >>> args, kwargs = arguments_from_signature(bar_sig, 1, b=2)\n    >>> args\n    (1,)\n    >>> kwargs\n    {}\n    \"\"\"\n    bound = signature.bind_partial(*args)\n    meta_kwargs = toolz.merge({'kwargs': kwargs}, kwargs)\n    remaining_parameters = signature.parameters.keys() - bound.arguments.keys()\n    new_kwargs = {\n        k: meta_kwargs[k]\n        for k in remaining_parameters\n        if k in signature.parameters\n        if signature.parameters[k].kind\n        in {\n            Parameter.KEYWORD_ONLY,\n            Parameter.POSITIONAL_OR_KEYWORD,\n            Parameter.VAR_KEYWORD,\n        }\n    }\n    return args, new_kwargs"
    },
    {
        "instruction": "In Python, define a function that resizes the columns of a table to fit its contents. Begin by setting the autosized columns to an empty set. Then, call a helper function that takes in the table level, table index, and maximum autosize milliseconds as arguments to resize the columns. Finally, update the layout of the table. Please give the corresponding code according to the description. ",
        "response": "def resizeColumnsToContents(self):\r\n        \"\"\"Resize the columns to its contents.\"\"\"\r\n        self._autosized_cols = set()\r\n        self._resizeColumnsToContents(self.table_level,\r\n                                      self.table_index, self._max_autosize_ms)\r\n        self._update_layout()"
    },
    {
        "instruction": "Python: This function finds a partition by reference and converts it to bundle partition. If `localize` is True, it copies a remote partition to the local filesystem. If the partition is not found, it raises a NotFoundError. The function returns the found partition. Please give the corresponding code according to the description. ",
        "response": "def partition(self, ref, localize=False):\n        \"\"\" Finds partition by ref and converts to bundle partition.\n\n        :param ref: A partition reference\n        :param localize: If True, copy a remote partition to local filesystem. Defaults to False\n        :raises: NotFoundError: if partition with given ref not found.\n        :return: orm.Partition: found partition.\n        \"\"\"\n\n        if not ref:\n            raise NotFoundError(\"No partition for empty ref\")\n\n        try:\n            on = ObjectNumber.parse(ref)\n            ds_on = on.as_dataset\n\n            ds = self._db.dataset(ds_on)  # Could do it in on SQL query, but this is easier.\n\n            # The refresh is required because in some places the dataset is loaded without the partitions,\n            # and if that persist, we won't have partitions in it until it is refreshed.\n\n            self.database.session.refresh(ds)\n\n            p = ds.partition(ref)\n\n        except NotObjectNumberError:\n            q = (self.database.session.query(Partition)\n                 .filter(or_(Partition.name == str(ref), Partition.vname == str(ref)))\n                 .order_by(Partition.vid.desc()))\n\n            p = q.first()\n\n        if not p:\n            raise NotFoundError(\"No partition for ref: '{}'\".format(ref))\n\n        b = self.bundle(p.d_vid)\n        p = b.wrap_partition(p)\n\n        if localize:\n            p.localize()\n\n        return p"
    },
    {
        "instruction": "In Python, define a method called `add_child` that takes in a parameter called `child`. If `child` is an instance of `ChildMixin`, set its parent to `self` and append it to the list of children. Otherwise, raise a `TypeError` with a message indicating that an instance of `TreeElement` is required. Please give the corresponding code according to the description. ",
        "response": "def add_child(self, child):\n        \"\"\"If the given object is an instance of Child add it to self and\n        register self as a parent.\n        \"\"\"\n        if not isinstance(child, ChildMixin):\n            raise TypeError(\n                'Requires instance of TreeElement. '\n                'Got {}'.format(type(child))\n            )\n        child.parent = self\n        self._children.append(child)"
    },
    {
        "instruction": "In Python, define a function that returns the default home directory of Ding0. Retrieve the value of the 'config_dir' key from the 'config' section of the Ding0 configuration file and store it in the 'ding0_dir' variable. Combine the expanded user home directory and the 'ding0_dir' variable using the 'os. path. join' method and return the resulting path as a string. Please give the corresponding code according to the description. ",
        "response": "def get_default_home_dir():\n    \"\"\"\n    Return default home directory of Ding0\n\n    Returns\n    -------\n    :any:`str`\n        Default home directory including its path\n    \"\"\"\n    ding0_dir = str(cfg_ding0.get('config',\n                                  'config_dir'))\n    return os.path.join(os.path.expanduser('~'), ding0_dir)"
    },
    {
        "instruction": "Python - This function takes a list of proxy names as input and checks if each proxy is running. If a proxy is not running, it is restarted using the 'salt_proxy. configure_proxy' function. The function then returns a list of dictionaries, where each dictionary contains the name of the proxy and a message indicating whether it was started or was already running. Please give the corresponding code according to the description. ",
        "response": "def _run_proxy_processes(proxies):\n    '''\n    Iterate over a list of proxy\n    names and restart any that\n    aren't running\n    '''\n    ret = []\n    for proxy in proxies:\n        result = {}\n        if not __salt__['salt_proxy.is_running'](proxy)['result']:\n            __salt__['salt_proxy.configure_proxy'](proxy, start=True)\n            result[proxy] = 'Proxy {0} was started'.format(proxy)\n        else:\n            msg = 'Proxy {0} is already running'.format(proxy)\n            result[proxy] = msg\n            log.debug(msg)\n        ret.append(result)\n    return ret"
    },
    {
        "instruction": "Find the percentile of a sorted list of values in Python. The function takes in a list of values, a float value from 0. 0 to 1. 0 representing the percentile, an optional key function to compute value from each element of the list, and an interpolation method to resolve fractional values. The interpolation method can be one of five choices: floor, ceil, funky, linear, and mean. The function returns the percentile of the values. Please give the corresponding code according to the description. ",
        "response": "def percentileOnSortedList(N, percent, key=lambda x:x, interpolate='mean'):\n    # 5 ways of resolving fractional\n    # floor, ceil, funky, linear, mean\n    interpolateChoices = ['floor', 'ceil', 'funky', 'linear', 'mean']\n    if interpolate not in interpolateChoices:\n        print \"Bad choice for interpolate:\", interpolate\n        print \"Supported choices:\", interpolateChoices\n    \"\"\"\n    Find the percentile of a list of values.\n\n    @parameter N - is a list of values. Note N MUST BE already sorted.\n    @parameter percent - a float value from 0.0 to 1.0.\n    @parameter key - optional key function to compute value from each element of N.\n\n    @return - the percentile of the values\n    \"\"\"\n    if N is None:\n        return None\n    k = (len(N)-1) * percent\n    f = int(math.floor(k))\n    c = int(math.ceil(k))\n    \n    if f == c:\n        d = key(N[f])\n        msg = \"aligned:\" \n\n    elif interpolate=='floor':\n        d = key(N[f])\n        msg = \"fractional with floor:\" \n\n    elif interpolate=='ceil':\n        d = key(N[c])\n        msg = \"fractional with ceil:\" \n\n    elif interpolate=='funky':\n        d0 = key(N[f]) * (c-k)\n        d1 = key(N[c]) * (k-f)\n        d = d0+d1\n        msg = \"fractional with Tung(floor and ceil) :\" \n    \n    elif interpolate=='linear':\n        assert (c-f)==1\n        assert (k>=f) and (k<=c)\n        pctDiff = k-f\n        dDiff = pctDiff * (key(N[c]) - key(N[f]))\n        d = key(N[f] + dDiff)\n        msg = \"fractional %s with linear(floor and ceil):\" % pctDiff\n\n    elif interpolate=='mean':\n        d = (key(N[c]) + key(N[f])) / 2.0\n        msg = \"fractional with mean(floor and ceil):\" \n\n    # print 3 around the floored k, for eyeballing when we're close\n    flooredK = int(f)\n    # print the 3 around the median\n    if flooredK > 0:\n        print \"prior->\", key(N[flooredK-1]), \" \"\n    else:\n        print \"prior->\", \"<bof>\"\n    print \"floor->\", key(N[flooredK]), \" \", msg, 'result:', d, \"f:\", f, \"len(N):\", len(N)\n    if flooredK+1 < len(N):\n        print \" ceil->\", key(N[flooredK+1]), \"c:\", c\n    else:\n        print \" ceil-> <eof>\", \"c:\", c\n\n    return d"
    },
    {
        "instruction": "Python async function `process_check_ins` finalizes the check-in phase of a tournament. It should be invoked after the check-in window closes and before the tournament starts. This function performs the following tasks:\n1. Marks participants who have not checked in as inactive. 2. Moves inactive participants to the bottom seeds, ordered by original seed. 3. Transitions the tournament state from 'checking_in' to 'checked_in'. Note that checked-in participants on the waiting list will be promoted if slots become available. This function raises an APIException if there is an error. Please give the corresponding code according to the description. ",
        "response": "async def process_check_ins(self):\n        \"\"\" finalize the check in phase\n\n        |methcoro|\n\n        Warning:\n            |unstable|\n\n        Note:\n            |from_api| This should be invoked after a tournament's check-in window closes before the tournament is started.\n            1. Marks participants who have not checked in as inactive.\n            2. Moves inactive participants to bottom seeds (ordered by original seed).\n            3. Transitions the tournament state from 'checking_in' to 'checked_in'\n            NOTE: Checked in participants on the waiting list will be promoted if slots become available.\n\n        Raises:\n            APIException\n\n        \"\"\"\n        params = {\n                'include_participants': 1,  # forced to 1 since we need to update the Participant instances\n                'include_matches': 1 if AUTO_GET_MATCHES else 0\n            }\n        res = await self.connection('POST', 'tournaments/{}/process_check_ins'.format(self._id), **params)\n        self._refresh_from_json(res)"
    },
    {
        "instruction": "In Python, define a function that changes the group or permissions of a specified file. The function takes in a file path and expects an action to be specified when calling the method. If the action is to update the group, update the group of the file with the new group specified. If the action is to update the permissions, update the permissions of the file with the new permissions specified. If the specified action is not recognized, raise a HTTPError with status code 400. If the file path is not found, raise a HTTPError with status code 404. Please give the corresponding code according to the description. ",
        "response": "def put(self, filepath):\n        \"\"\"\n        Change the group or permissions of the specified file. Action\n        must be specified when calling this method.\n        \"\"\"\n        action = self.get_body_argument('action')\n\n        if action['action'] == 'update_group':\n            newgrp = action['group']\n            try:\n                self.fs.update_group(filepath,newgrp)\n                self.write({'msg':'Updated group for {}'.format(filepath)})\n            except OSError:\n                raise tornado.web.HTTPError(404)\n        elif action['action'] == 'update_permissions':\n            newperms = action['permissions']\n            try:\n                self.fs.update_permissions(filepath,newperms)\n                self.write({'msg':'Updated permissions for {}'.format(filepath)})\n            except OSError:\n                raise tornado.web.HTTPError(404)\n        else:\n            raise tornado.web.HTTPError(400)"
    },
    {
        "instruction": "In Python, remove the core element of a given data flow model. Ensure that the parent of the data flow model is either the state of the current model or the state of the parent of the current model. Finally, delete the core element of the given model using the helper state machine. Please give the corresponding code according to the description. ",
        "response": "def remove_core_element(self, model):\n        \"\"\"Remove respective core element of handed data flow model\n\n        :param DataFlowModel model: Data Flow model which core element should be removed\n        :return:\n        \"\"\"\n        assert model.data_flow.parent is self.model.state or model.data_flow.parent is self.model.parent.state\n        gui_helper_state_machine.delete_core_element_of_model(model)"
    },
    {
        "instruction": "Given an XSD type object, this Python function returns an ordered list of attribute names defined in the type information. If an attribute is found, it is added to the list with an underscore prefix. The function iterates over the resolved children of the type object, skipping any children with no name attribute. The resulting list is returned. Please give the corresponding code according to the description. ",
        "response": "def ordering(self, type):\n        \"\"\"\n        Get the attribute ordering defined in the specified\n        XSD type information.\n        @param type: An XSD type object.\n        @type type: SchemaObject\n        @return: An ordered list of attribute names.\n        @rtype: list\n        \"\"\"\n        result = []\n        for child, ancestry in type.resolve():\n            name = child.name\n            if child.name is None:\n                continue\n            if child.isattr():\n                name = '_%s' % child.name\n            result.append(name)\n        return result"
    },
    {
        "instruction": "This Python function checks if the terminal environment supports color. It first checks if `sys. stdout` has the attribute `isatty()`. If not, it returns False. Then, it checks if `sys. stdout` is not a tty and `TERMINAL-COLOR` is not in the environment variables, it returns False. If the platform is Windows, it tries to import `colorama` and initialize it, returning True if successful. If `COLORTERM` is in the environment variables, it returns True. Finally, it checks if the `TERM` environment variable contains `xterm`, `linux`, or `color`, and returns True if it does. Please give the corresponding code according to the description. ",
        "response": "def is_color_supported():\n    \"Find out if your terminal environment supports color.\"\n    # shinx.util.console\n    if not hasattr(sys.stdout, 'isatty'):\n        return False\n\n    if not sys.stdout.isatty() and 'TERMINAL-COLOR' not in os.environ:\n        return False\n\n    if sys.platform == 'win32':  # pragma: no cover\n        try:\n            import colorama\n            colorama.init()\n            return True\n        except ImportError:\n            return False\n\n    if 'COLORTERM' in os.environ:\n        return True\n\n    term = os.environ.get('TERM', 'dumb').lower()\n    return term in ('xterm', 'linux') or 'color' in term"
    },
    {
        "instruction": "In Python, the `update` method updates all references in the cached representation of the module with their latest code from the specified source code string that was extracted from the emacs buffer. It takes the buffer context information as an argument. It gets a list of all the operations that need to be performed and executes them. Then, it updates the string content of the cached version of the module to have the latest source code if there are any operations. Please give the corresponding code according to the description. ",
        "response": "def update(self, context):\n        \"\"\"Updates all references in the cached representation of the module\n        with their latest code from the specified source code string that\n        was extracted from the emacs buffer.\n\n        :arg context: the buffer context information.\n        \"\"\"\n        #Get a list of all the operations that need to be performed and then\n        #execute them.\n        self._operations = self._get_operations(context)\n\n        for i in range(len(self._operations)):\n            self._operations[i].handle()\n            self.update_extent(self._operations[i])\n\n        #Last of all, we update the string content of the cached version of\n        #the module to have the latest source code.\n        if len(self._operations) > 0:\n            context.module.update_refstring(context.refstring)"
    },
    {
        "instruction": "Create a class instance based on Javascript data. If the data has a \"type\" key, set the object class accordingly. Recurse into the \"create_class\" method to create child object instances for the keys \"consts\", \"types\", \"vars\", and \"funcs\". If the data has \"children\", iterate through them and append them to the object's children list. Yield the object. Please give the corresponding code according to the description. ",
        "response": "def create_class(self, data, options=None, **kwargs):\n        \"\"\"Return instance of class based on Javascript data\n\n        Data keys handled here:\n\n            type\n                Set the object class\n\n            consts, types, vars, funcs\n                Recurse into :py:meth:`create_class` to create child object\n                instances\n\n        :param data: dictionary data from godocjson output\n        \"\"\"\n        obj_map = dict((cls.type, cls) for cls in ALL_CLASSES)\n        try:\n            cls = obj_map[data[\"kind\"]]\n        except (KeyError, TypeError):\n            LOGGER.warning(\"Unknown Type: %s\" % data)\n        else:\n            # Recurse for children\n            obj = cls(data, jinja_env=self.jinja_env)\n            if \"children\" in data:\n                for child_data in data[\"children\"]:\n                    for child_obj in self.create_class(child_data, options=options):\n                        obj.children.append(child_obj)\n            yield obj"
    },
    {
        "instruction": "In Python, the function `download_sample` takes in `job`, `ids`, `input_args`, and `sample` as inputs. The function updates values unique to the sample in the `sample_input` dictionary, and then downloads or locates a local file and places it in the `jobStore`. If `input` is true, the `sample. tar` file is written to the `jobStore`. If `config_fastq` is true, the `R1. fastq` and `R2. fastq` files are written to the `jobStore`. If `ssec` is true, the `sample. tar` file is downloaded from an encrypted file, and if not, it is downloaded from a URL. Finally, the function calls `static_dag_launchpoint` with `job_vars` as input. Please give the corresponding code according to the description. ",
        "response": "def download_sample(job, ids, input_args, sample):\n    \"\"\"\n    Defines variables unique to a sample that are used in the rest of the pipelines\n\n    ids: dict           Dictionary of fileStore IDS\n    input_args: dict    Dictionary of input arguments\n    sample: tuple       Contains uuid and sample_url\n    \"\"\"\n    if len(sample) == 2:\n        uuid, sample_location = sample\n        url1, url2 = None, None\n    else:\n        uuid, url1, url2 = sample\n        sample_location = None\n    # Update values unique to sample\n    sample_input = dict(input_args)\n    sample_input['uuid'] = uuid\n    sample_input['sample.tar'] = sample_location\n    if sample_input['output_dir']:\n        sample_input['output_dir'] = os.path.join(input_args['output_dir'], uuid)\n    sample_input['cpu_count'] = multiprocessing.cpu_count()\n    job_vars = (sample_input, ids)\n    # Download or locate local file and place in the jobStore\n    if sample_input['input']:\n        ids['sample.tar'] = job.fileStore.writeGlobalFile(os.path.abspath(sample_location))\n    elif sample_input['config_fastq']:\n        ids['R1.fastq'] = job.fileStore.writeGlobalFile(urlparse(url1).path)\n        ids['R2.fastq'] = job.fileStore.writeGlobalFile(urlparse(url2).path)\n    else:\n        if sample_input['ssec']:\n            ids['sample.tar'] = job.addChildJobFn(download_encrypted_file, sample_input, 'sample.tar', disk='25G').rv()\n        else:\n            ids['sample.tar'] = job.addChildJobFn(download_from_url, sample_input['sample.tar'], disk='25G').rv()\n    job.addFollowOnJobFn(static_dag_launchpoint, job_vars)"
    },
    {
        "instruction": "Change the current directory to `model_folder`, generate a training command using `generate_training_command()` function, and execute the command using `os. system()`. If `training` is `None`, return `-1`. Log the training command using `logging. info()`. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def train_model(model_folder):\n    \"\"\"Train the model in ``model_folder``.\"\"\"\n    os.chdir(model_folder)\n    training = generate_training_command(model_folder)\n    if training is None:\n        return -1\n    logging.info(training)\n    os.chdir(model_folder)\n    os.system(training)"
    },
    {
        "instruction": "In this Python function, given a pattern number, return the 'actual step' parameter for that pattern. This function first checks if the pattern number is valid (0-7), then calculates the register address for the actual step parameter of that pattern. Finally, it reads the register at that address and returns the value as an integer. Please give the corresponding code according to the description. ",
        "response": "def get_pattern_actual_step(self, patternnumber):\n        \"\"\"Get the 'actual step' parameter for a given pattern.\n\n        Args:\n            patternnumber (integer): 0-7\n\n        Returns:\n            The 'actual step' parameter (int).        \n            \n        \"\"\"\n        _checkPatternNumber(patternnumber)\n        \n        address = _calculateRegisterAddress('actualstep', patternnumber)\n        return self.read_register(address, 0)"
    },
    {
        "instruction": "In Python, create a method that prepares a full URI with the selected information. The `path` parameter can be either a relative path to be appended to the existing host, or an absolute URL. The `query_params` parameter is used to generate a query string to be appended to the end of the absolute URL. The method returns an absolute URL built from the connection information. If the `path` parameter is a relative path and `server` attribute is defined, the method builds the absolute URL using the `protocol` and `server` attributes. Otherwise, it uses the `urlparse` function to extract the `protocol`, `server`, and `path` from the `path` parameter. Please give the corresponding code according to the description. ",
        "response": "def _prepare_uri(self, path, query_params={}):\n        \"\"\"\n        Prepares a full URI with the selected information.\n\n        ``path``:\n            Path can be in one of two formats:\n\n                - If :attr:`server` was defined, the ``path`` will be appended\n                  to the existing host, or\n                - an absolute URL\n        ``query_params``:\n            Used to generate a query string, which will be appended to the end\n            of the absolute URL.\n\n        Returns an absolute URL.\n        \"\"\"\n        query_str = urllib.urlencode(query_params)\n\n        # If we have a relative path (as opposed to a full URL), build it of\n        # the connection info\n        if path.startswith('/') and self.server:\n            protocol = self.protocol\n            server = self.server\n        else:\n            protocol, server, path, _, _, _ = urlparse.urlparse(path)\n            assert server, \"%s is not a valid URL\" % path\n\n        return urlparse.urlunparse((\n            protocol, server, path, None, query_str, None))"
    },
    {
        "instruction": "Create a Python function that initializes a DatabaseManager object with the given *args and **kwargs, and starts it with the given priority_msgs and resource_msgs. This function should be called by the DFK. Please give the corresponding code according to the description. ",
        "response": "def dbm_starter(priority_msgs, resource_msgs, *args, **kwargs):\n    \"\"\"Start the database manager process\n\n    The DFK should start this function. The args, kwargs match that of the monitoring config\n\n    \"\"\"\n    dbm = DatabaseManager(*args, **kwargs)\n    dbm.start(priority_msgs, resource_msgs)"
    },
    {
        "instruction": "In Python, create a function that converts the parameters in the object to a dictionary. If infer_type_and_cast is True, infer the types and cast them accordingly. If quiet is False, log the parameters before returning them as a dictionary. If quiet is True, just return the parameters as a dictionary. The function also logs the conversion of the object to a dictionary and the currently defined parameters. Please give the corresponding code according to the description. ",
        "response": "def as_dict(self, quiet: bool = False, infer_type_and_cast: bool = False):\n        \"\"\"\n        Sometimes we need to just represent the parameters as a dict, for instance when we pass\n        them to PyTorch code.\n\n        Parameters\n        ----------\n        quiet: bool, optional (default = False)\n            Whether to log the parameters before returning them as a dict.\n        infer_type_and_cast : bool, optional (default = False)\n            If True, we infer types and cast (e.g. things that look like floats to floats).\n        \"\"\"\n        if infer_type_and_cast:\n            params_as_dict = infer_and_cast(self.params)\n        else:\n            params_as_dict = self.params\n\n        if quiet:\n            return params_as_dict\n\n        def log_recursively(parameters, history):\n            for key, value in parameters.items():\n                if isinstance(value, dict):\n                    new_local_history = history + key  + \".\"\n                    log_recursively(value, new_local_history)\n                else:\n                    logger.info(history + key + \" = \" + str(value))\n\n        logger.info(\"Converting Params object to dict; logging of default \"\n                    \"values will not occur when dictionary parameters are \"\n                    \"used subsequently.\")\n        logger.info(\"CURRENTLY DEFINED PARAMETERS: \")\n        log_recursively(self.params, self.history)\n        return params_as_dict"
    },
    {
        "instruction": "Create a menu bar with various options for triggering operations in a graphical user interface using wxPython. The menu bar should have a \"File\" menu with options to open a cProfile file, open a Meliae memory-dump file, and close the window. The \"View\" menu should have options to toggle percentage view, view the root of the tree, go back in viewing history, go up to the parent of the node with the largest cumulative total, and toggle hierarchic squares in the square-map view. The \"View Type\" menu should be created but not populated. Bind event handlers to each menu item to perform the corresponding action. Please give the corresponding code according to the description. ",
        "response": "def CreateMenuBar(self):\n        \"\"\"Create our menu-bar for triggering operations\"\"\"\n        menubar = wx.MenuBar()\n        menu = wx.Menu()\n        menu.Append(ID_OPEN, _('&Open Profile'), _('Open a cProfile file'))\n        menu.Append(ID_OPEN_MEMORY, _('Open &Memory'), _('Open a Meliae memory-dump file'))\n        menu.AppendSeparator()\n        menu.Append(ID_EXIT, _('&Close'), _('Close this RunSnakeRun window'))\n        menubar.Append(menu, _('&File'))\n        menu = wx.Menu()\n#        self.packageMenuItem = menu.AppendCheckItem(\n#            ID_PACKAGE_VIEW, _('&File View'),\n#            _('View time spent by package/module')\n#        )\n        self.percentageMenuItem = menu.AppendCheckItem(\n            ID_PERCENTAGE_VIEW, _('&Percentage View'),\n            _('View time spent as percent of overall time')\n        )\n        self.rootViewItem = menu.Append(\n            ID_ROOT_VIEW, _('&Root View (Home)'),\n            _('View the root of the tree')\n        )\n        self.backViewItem = menu.Append(\n            ID_BACK_VIEW, _('&Back'), _('Go back in your viewing history')\n        )\n        self.upViewItem = menu.Append(\n            ID_UP_VIEW, _('&Up'),\n            _('Go \"up\" to the parent of this node with the largest cumulative total')\n        )\n        self.moreSquareViewItem = menu.AppendCheckItem(\n            ID_MORE_SQUARE, _('&Hierarchic Squares'),\n            _('Toggle hierarchic squares in the square-map view')\n        )\n\n        # This stuff isn't really all that useful for profiling,\n        # it's more about how to generate graphics to describe profiling...\n        self.deeperViewItem = menu.Append(\n            ID_DEEPER_VIEW, _('&Deeper'), _('View deeper squaremap views')\n        )\n        self.shallowerViewItem = menu.Append(\n            ID_SHALLOWER_VIEW, _('&Shallower'), _('View shallower squaremap views')\n        )\n#        wx.ToolTip.Enable(True)\n        menubar.Append(menu, _('&View'))\n        \n        self.viewTypeMenu =wx.Menu( )\n        menubar.Append(self.viewTypeMenu, _('View &Type'))\n        \n        self.SetMenuBar(menubar)\n\n        wx.EVT_MENU(self, ID_EXIT, lambda evt: self.Close(True))\n        wx.EVT_MENU(self, ID_OPEN, self.OnOpenFile)\n        wx.EVT_MENU(self, ID_OPEN_MEMORY, self.OnOpenMemory)\n        \n        wx.EVT_MENU(self, ID_PERCENTAGE_VIEW, self.OnPercentageView)\n        wx.EVT_MENU(self, ID_UP_VIEW, self.OnUpView)\n        wx.EVT_MENU(self, ID_DEEPER_VIEW, self.OnDeeperView)\n        wx.EVT_MENU(self, ID_SHALLOWER_VIEW, self.OnShallowerView)\n        wx.EVT_MENU(self, ID_ROOT_VIEW, self.OnRootView)\n        wx.EVT_MENU(self, ID_BACK_VIEW, self.OnBackView)\n        wx.EVT_MENU(self, ID_MORE_SQUARE, self.OnMoreSquareToggle)"
    },
    {
        "instruction": "In Python, create a function that returns a SQLAlchemy connection string URI. The function should use the string format method to replace placeholders in the URI template with the host, port, database, username, and password values. If the port or password values are None, they should be replaced with an empty string. The function should also include a colon between the username and password if a password is present, and between the host and port if a port is present. Please give the corresponding code according to the description. ",
        "response": "def uri(self):\n        \"\"\"\n        Return sqlalchemy connect string URI.\n        \"\"\"\n        return self.uri_template.format(\n            host=self.host,\n            port=\"\" if self.port is None else self.port,\n            database=self.database,\n            username=self.username,\n            password=\"\" if self.password is None else self.password,\n            has_password=\"\" if self.password is None else \":\",\n            has_port=\"\" if self.port is None else \":\",\n        )"
    },
    {
        "instruction": "In Python, create a function that returns a queue type that is most appropriate for the runtime model. If multiprocessing is being used, return multiprocessing. Manager(). Queue(). Otherwise, return a normal queue type. Please give the corresponding code according to the description. ",
        "response": "def _obtain_queue(num_jobs):\n    \"\"\"Return queue type most appropriate for runtime model.\n\n    If we are using multiprocessing, that should be\n    multiprocessing.Manager().Queue. If we are just using a\n    single process, then use a normal queue type.\n    \"\"\"\n    if _should_use_multiprocessing(num_jobs):\n        return ReprQueue(multiprocessing.Manager().Queue())\n\n    return ReprQueue(Queue())"
    },
    {
        "instruction": "In Python, create a function named \"truncate\" that takes in two arguments: a decimal value and an integer representing the number of digits to truncate the decimal value to. Multiply the decimal value by 10 raised to the power of the number of digits to truncate, truncate the result to an integer using math. trunc, then divide the result by 10 raised to the power of the number of digits to truncate to return the truncated decimal value. Please give the corresponding code according to the description. ",
        "response": "def truncate(value: Decimal, n_digits: int) -> Decimal:\n    \"\"\"Truncates a value to a number of decimals places\"\"\"\n    return Decimal(math.trunc(value * (10 ** n_digits))) / (10 ** n_digits)"
    },
    {
        "instruction": "Python: Add a docstring to the function 'catch' that describes its purpose, parameters and returns. The function catches, prepares and logs an error. The function takes in four parameters, 'ignore', 'was_doing', 'helpfull_tips', and 'gbc'. The 'ignore' parameter is a list of error classes that should be ignored. The 'was_doing' parameter is a string that describes what the program was doing when the error occurred. The 'helpfull_tips' parameter is a string that provides tips for fixing the error. The 'gbc' parameter is an object that has a 'cry' method which logs the error. The function does not return anything. Please give the corresponding code according to the description. ",
        "response": "def catch(ignore=[],\n          was_doing=\"something important\",\n          helpfull_tips=\"you should use a debugger\",\n          gbc=None):\n    \"\"\"\n    Catch, prepare and log error\n\n    :param exc_cls: error class\n    :param exc: exception\n    :param tb: exception traceback\n    \"\"\"\n    exc_cls, exc, tb=sys.exc_info()\n    if exc_cls in ignore:\n        msg='exception in ignorelist'\n        gbc.say('ignoring caught:'+str(exc_cls))\n        return 'exception in ignorelist'\n        \n\n    ex_message = traceback.format_exception_only(exc_cls, exc)[-1]\n    ex_message = ex_message.strip()\n    \n    # TODO: print(ex_message)\n\n    error_frame = tb\n    while error_frame.tb_next is not None:\n        error_frame = error_frame.tb_next\n\n    file = error_frame.tb_frame.f_code.co_filename\n    line = error_frame.tb_lineno\n    stack = traceback.extract_tb(tb)\n\n    formated_stack = []\n    for summary in stack:\n        formated_stack.append({\n            'file': summary[0],\n            'line': summary[1],\n            'func': summary[2],\n            'text': summary[3]\n        })\n\n    event = {\n        'was_doing':was_doing,\n        'message': ex_message,\n        'errorLocation': {\n            'file': file,\n            'line': line,\n            'full': file + ' -> ' + str(line)\n        },\n        'stack': formated_stack\n        #,\n        #'time': time.time()\n    }\n\n    try:\n        #logging.info('caught:'+pformat(event))\n        gbc.cry('caught:'+pformat(event))\n        print('Bubble3: written error to log')\n        print('Bubble3: tips for fixing this:')\n        print(helpfull_tips)\n\n    except Exception as e:\n        print('Bubble3: cant log error cause of %s' % e)"
    },
    {
        "instruction": "In Python, override the default decode method by adding an instruction to use the decode_date method. If the value can be decoded using the decode_date method, return the decoded value. If not, fall back to the default JSON decoder. Please give the corresponding code according to the description. ",
        "response": "def decode(self, val):\n    \"\"\"Override of the default decode method that also uses decode_date.\"\"\"\n    # First try the date decoder.\n    new_val = self.decode_date(val)\n    if val != new_val:\n      return new_val\n    # Fall back to the default decoder.\n    return json.JSONDecoder.decode(self, val)"
    },
    {
        "instruction": "In Python, define a method that takes a surface object as a parameter and draws a green rectangle on it. The rectangle should start at the position where the user first clicked the mouse and end at the current position of the mouse. Only draw the rectangle if the mouse is currently on the screen and the surface type of the mouse position matches the surface type of the initial click. Please give the corresponding code according to the description. ",
        "response": "def draw_selection(self, surf):\n    \"\"\"Draw the selection rectange.\"\"\"\n    select_start = self._select_start  # Cache to avoid a race condition.\n    if select_start:\n      mouse_pos = self.get_mouse_pos()\n      if (mouse_pos and mouse_pos.surf.surf_type & SurfType.SCREEN and\n          mouse_pos.surf.surf_type == select_start.surf.surf_type):\n        rect = point.Rect(select_start.world_pos, mouse_pos.world_pos)\n        surf.draw_rect(colors.green, rect, 1)"
    },
    {
        "instruction": "Perform HTFA algorithm on fMRI data from multiple subjects. The algorithm updates the tfa with the current local prior, fits the data with the R matrix and template prior, assigns posterior probability, gathers the local posterior, and updates the global posterior. Finally, it updates the weight matrix for each subject. The function returns the instance itself. The programming language used is Python. Please give the corresponding code according to the description. ",
        "response": "def _fit_htfa(self, data, R):\n        \"\"\"HTFA main algorithm\n\n        Parameters\n        ----------\n\n        data : list of 2D array. Each in shape [n_voxel, n_tr]\n            The fMRI data from multiple subjects.\n\n        R : list of 2D arrays, element i has shape=[n_voxel, n_dim]\n            Each element in the list contains the scanner coordinate matrix\n            of fMRI data of one subject.\n\n        Returns\n        -------\n        HTFA\n            Returns the instance itself.\n        \"\"\"\n\n        rank, size = self._get_mpi_info()\n        use_gather = True if self.n_subj % size == 0 else False\n        n_local_subj = len(R)\n        max_sample_tr, max_sample_voxel =\\\n            self._get_subject_info(n_local_subj, data)\n\n        tfa = []\n        # init tfa for each subject\n        for s, subj_data in enumerate(data):\n            tfa.append(TFA(\n                max_iter=self.max_local_iter,\n                threshold=self.threshold,\n                K=self.K,\n                nlss_method=self.nlss_method,\n                nlss_loss=self.nlss_loss,\n                x_scale=self.x_scale,\n                tr_solver=self.tr_solver,\n                weight_method=self.weight_method,\n                upper_ratio=self.upper_ratio,\n                lower_ratio=self.lower_ratio,\n                verbose=self.verbose,\n                max_num_tr=max_sample_tr[s],\n                max_num_voxel=max_sample_voxel[s]))\n\n        # map data to processes\n        gather_size, gather_offset, subject_map =\\\n            self._get_gather_offset(size)\n        self.local_posterior_ = np.zeros(n_local_subj * self.prior_size)\n        self._init_prior_posterior(rank, R, n_local_subj)\n        node_weight_size, local_weight_offset =\\\n            self._get_weight_size(data, n_local_subj)\n        self.local_weights_ = np.zeros(node_weight_size[0])\n\n        m = 0\n        outer_converged = np.array([0])\n        while m < self.max_global_iter and not outer_converged[0]:\n            if(self.verbose):\n                logger.info(\"HTFA global iter %d \" % (m))\n            # root broadcast first 4 fields of global_prior to all nodes\n            self.comm.Bcast(self.global_prior_, root=0)\n            # each node loop over its data\n            for s, subj_data in enumerate(data):\n                # update tfa with current local prior\n                tfa[s].set_prior(self.global_prior_[0:self.prior_size].copy())\n                tfa[s].set_seed(m * self.max_local_iter)\n                tfa[s].fit(\n                    subj_data,\n                    R=R[s],\n                    template_prior=self.global_prior_.copy())\n                tfa[s]._assign_posterior()\n                start_idx = s * self.prior_size\n                end_idx = (s + 1) * self.prior_size\n                self.local_posterior_[start_idx:end_idx] =\\\n                    tfa[s].local_posterior_\n\n            self._gather_local_posterior(\n                use_gather,\n                gather_size,\n                gather_offset)\n\n            # root updates global_posterior\n            outer_converged =\\\n                self._update_global_posterior(rank, m, outer_converged)\n            self.comm.Bcast(outer_converged, root=0)\n            m += 1\n\n        # update weight matrix for each subject\n        self._update_weight(\n            data,\n            R,\n            n_local_subj,\n            local_weight_offset)\n\n        return self"
    },
    {
        "instruction": "In Python, define a function called \"reraise\" that takes in a string called \"additional_msg\" as input. The function should retrieve information about the most recent exception using the \"sys. exc_info()\" method, then create a new error message by concatenating the original exception message with the \"additional_msg\" string. Finally, the function should use the \"six. reraise()\" method to raise the original exception with the new error message. Please give the corresponding code according to the description. ",
        "response": "def reraise(additional_msg):\n  \"\"\"Reraise an exception with an additional message.\"\"\"\n  exc_type, exc_value, exc_traceback = sys.exc_info()\n  msg = str(exc_value) + \"\\n\" + additional_msg\n  six.reraise(exc_type, exc_type(msg), exc_traceback)"
    },
    {
        "instruction": "In Python, this function pauses a system service by stopping it and preventing it from starting again at boot. It takes the name of the service to pause, the path to the upstart init directory, the path to the sysv init directory, and additional parameters to pass to the init system when managing services. If the service is running, it will be stopped. If the init system is systemd, the service will be disabled and masked. If it is upstart, a manual override will be created. If it is sysv, update-rc. d will be called to disable the service. The function returns True if the service was stopped. Please give the corresponding code according to the description. ",
        "response": "def service_pause(service_name, init_dir=\"/etc/init\", initd_dir=\"/etc/init.d\",\n                  **kwargs):\n    \"\"\"Pause a system service.\n\n    Stop it, and prevent it from starting again at boot.\n\n    :param service_name: the name of the service to pause\n    :param init_dir: path to the upstart init directory\n    :param initd_dir: path to the sysv init directory\n    :param **kwargs: additional parameters to pass to the init system when\n                     managing services. These will be passed as key=value\n                     parameters to the init system's commandline. kwargs\n                     are ignored for init systems which do not support\n                     key=value arguments via the commandline.\n    \"\"\"\n    stopped = True\n    if service_running(service_name, **kwargs):\n        stopped = service_stop(service_name, **kwargs)\n    upstart_file = os.path.join(init_dir, \"{}.conf\".format(service_name))\n    sysv_file = os.path.join(initd_dir, service_name)\n    if init_is_systemd():\n        service('disable', service_name)\n        service('mask', service_name)\n    elif os.path.exists(upstart_file):\n        override_path = os.path.join(\n            init_dir, '{}.override'.format(service_name))\n        with open(override_path, 'w') as fh:\n            fh.write(\"manual\\n\")\n    elif os.path.exists(sysv_file):\n        subprocess.check_call([\"update-rc.d\", service_name, \"disable\"])\n    else:\n        raise ValueError(\n            \"Unable to detect {0} as SystemD, Upstart {1} or\"\n            \" SysV {2}\".format(\n                service_name, upstart_file, sysv_file))\n    return stopped"
    },
    {
        "instruction": "Given a path to a replay file, open the file in binary mode using gfile. Open and read its contents using f. read(). Return the contents of the replay file as bytes. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def replay_data(self, replay_path):\n    \"\"\"Return the replay data given a path to the replay.\"\"\"\n    with gfile.Open(self.abs_replay_path(replay_path), \"rb\") as f:\n      return f.read()"
    },
    {
        "instruction": "Python: Define a function that sends a message to a user. The function takes a message as an argument and returns a tuple of (stdout, stderr, exit_status, time_taken). The function first creates a list of tested versions of Windows, then sets the arguments for the message command. It checks the host version of Windows and if it is in the list of tested versions, it executes the message command with the provided message. If the host version is not in the list of tested versions, it returns a tuple indicating that the command is not available for this version. Please give the corresponding code according to the description. ",
        "response": "def MsgUser(msg):\n  \"\"\"Sends a message to a user.\n\n  Args:\n    msg: Message to be displaied to user.\n\n  Returns:\n    res which is a tuple of (stdout, stderr, exit_status, time_taken).\n  \"\"\"\n  msg_tested_versions = ['xp', 'vista', '2008', '2003']\n  msg_args = ['/c', '%SystemRoot%\\\\System32\\\\msg.exe', '*', '/TIME:0']\n  host_version = platform.platform().lower()\n  if not msg:\n    return ('Command not ran.', 'Empty message.', -1)\n  else:\n    msg_args.extend([msg])\n  for version in msg_tested_versions:\n    if host_version.find(version) != -1:\n      # pylint: disable=undefined-variable\n      res = client_utils_common.Execute(\n          'cmd', msg_args, time_limit=-1, bypass_whitelist=True)\n      return res\n  return ('', 'Command not available for this version.', -1)"
    },
    {
        "instruction": "In Python, define a class method that takes in an instance as argument and returns a list of groups that the instance belongs to. The list should include the resources owned by each group, which are eagerly loaded using SQLAlchemy's eagerload function. Please give the corresponding code according to the description. ",
        "response": "def groups_with_resources(cls, instance):\n        \"\"\"\n        Returns a list of groups users belongs to with eager loaded\n        resources owned by those groups\n\n        :param instance:\n        :return:\n        \"\"\"\n        return instance.groups_dynamic.options(\n            sa.orm.eagerload(cls.models_proxy.Group.resources)\n        )"
    },
    {
        "instruction": "In Python, define a method `move_to` that takes a `target` and an optional `position` parameter. Invalidate the cache for both the current object and the target object. Then, call the `move_to` method of the parent class `Page`, passing in the `target` and `position` parameters. Please give the corresponding code according to the description. ",
        "response": "def move_to(self, target, position='first-child'):\n        \"\"\"Invalidate cache when moving\"\"\"\n\n        # Invalidate both in case position matters,\n        # otherwise only target is needed.\n        self.invalidate()\n        target.invalidate()\n        super(Page, self).move_to(target, position=position)"
    },
    {
        "instruction": "Load a license template distributed with the package. If a header is specified, load the header template. Otherwise, load the regular template. Iterate through each line of the license file and write it to a StringIO object as a UTF-8 string. Return the content of the StringIO object. This is a Python function. Please give the corresponding code according to the description. ",
        "response": "def load_package_template(license, header=False):\n    \"\"\" Load license template distributed with package.\n    \"\"\"\n    content = StringIO()\n    filename = 'template-%s-header.txt' if header else 'template-%s.txt'\n    with resource_stream(__name__, filename % license) as licfile:\n        for line in licfile:\n            content.write(line.decode(\"utf-8\"))  # write utf-8 string\n    return content"
    },
    {
        "instruction": "Python: Create a function that filters a list of Google Music song dictionaries based on metadata filters. The function takes in a list of songs, include_filters, exclude_filters, all_includes and all_excludes. include_filters is a list of tuples with the field and pattern to match, exclude_filters is a list of tuples with the field and pattern to exclude, all_includes is a boolean that specifies whether all include_filters criteria must match to include a song, and all_excludes is a boolean that specifies whether all exclude_filters criteria must match to exclude a song. The function returns a tuple of two lists, matched_songs and filtered_songs. Please give the corresponding code according to the description. ",
        "response": "def filter_google_songs(songs, include_filters=None, exclude_filters=None, all_includes=False, all_excludes=False):\n\t\"\"\"Match a Google Music song dict against a set of metadata filters.\n\n\tParameters:\n\t\tsongs (list): Google Music song dicts to filter.\n\n\t\tinclude_filters (list): A list of ``(field, pattern)`` tuples.\n\t\t\tFields are any valid Google Music metadata field available to the Musicmanager client.\n\t\t\tPatterns are Python regex patterns.\n\t\t\tGoogle Music songs are filtered out if the given metadata field values don't match any of the given patterns.\n\n\t\texclude_filters (list): A list of ``(field, pattern)`` tuples.\n\t\t\tFields are any valid Google Music metadata field available to the Musicmanager client.\n\t\t\tPatterns are Python regex patterns.\n\t\t\tGoogle Music songs are filtered out if the given metadata field values match any of the given patterns.\n\n\t\tall_includes (bool): If ``True``, all include_filters criteria must match to include a song.\n\n\t\tall_excludes (bool): If ``True``, all exclude_filters criteria must match to exclude a song.\n\n\tReturns:\n\t\tA list of Google Music song dicts matching criteria and\n\t\ta list of Google Music song dicts filtered out using filter criteria.\n\t\t::\n\n\t\t\t(matched, filtered)\n\t\"\"\"\n\n\tmatched_songs = []\n\tfiltered_songs = []\n\n\tif include_filters or exclude_filters:\n\t\tfor song in songs:\n\t\t\tif _check_filters(\n\t\t\t\t\tsong, include_filters=include_filters, exclude_filters=exclude_filters,\n\t\t\t\t\tall_includes=all_includes, all_excludes=all_excludes):\n\t\t\t\tmatched_songs.append(song)\n\t\t\telse:\n\t\t\t\tfiltered_songs.append(song)\n\telse:\n\t\tmatched_songs += songs\n\n\treturn matched_songs, filtered_songs"
    },
    {
        "instruction": "In Python, define a function named \"taskdir\" that returns the directory where all artifacts are stored. The directory should be created by joining three strings: the \"BASE\" string, the \"TAG\" string, and the \"task_family\" string. Please give the corresponding code according to the description. ",
        "response": "def taskdir(self):\n        \"\"\" Return the directory under which all artefacts are stored. \"\"\"\n        return os.path.join(self.BASE, self.TAG, self.task_family)"
    },
    {
        "instruction": "In Python, define a function named \"getOSName\" that returns the name of the operating system. If the operating system is Linux, it also returns the distribution name. The function checks if the system is Windows, Mac or Linux and returns the appropriate name. If the system is Linux, it checks the distribution name and returns the appropriate distribution name if it matches with the pre-defined names. If the system is not recognized, it returns None. Please give the corresponding code according to the description. ",
        "response": "def getOSName(self):\n\t\t\"\"\"\n\t\tGet the OS name. If OS is linux, returns the Linux distribution name\n\n\t\tReturns:\n\t\t\tstr: OS name\n\t\t\"\"\"\n\t\t_system = platform.system()\n\t\tif _system in [self.__class__.OS_WINDOWS, self.__class__.OS_MAC, self.__class__.OS_LINUX]:\n\t\t\tif _system == self.__class__.OS_LINUX:\n\t\t\t\t_dist = platform.linux_distribution()[0]\n\t\t\t\tif _dist.lower() == self.__class__.OS_UBUNTU.lower():\n\t\t\t\t\treturn self.__class__.OS_UBUNTU\n\t\t\t\telif _dist.lower() == self.__class__.OS_DEBIAN.lower():\n\t\t\t\t\treturn self.__class__.OS_DEBIAN\n\t\t\t\telif _dist.lower() == self.__class__.OS_CENTOS.lower():\n\t\t\t\t\treturn self.__class__.OS_CENTOS\n\t\t\t\telif _dist.lower() == self.__class__.OS_REDHAT.lower():\n\t\t\t\t\treturn self.__class__.OS_REDHAT\n\t\t\t\telif _dist.lower() == self.__class__.OS_KALI.lower():\n\t\t\t\t\treturn self.__class__.OS_KALI\n\t\t\treturn _system\n\t\telse:\n\t\t\treturn None"
    },
    {
        "instruction": "In Python, this function reads the Host Identity Protocol (HIP) header from a packet. It reads the header fields and returns a dictionary containing the header information. If the length of the packet is not specified, it reads the entire packet. The function then reads the HIP parameters and updates the dictionary with the parameters information. If the extension flag is set, it returns the dictionary without decoding the next layer. Otherwise, it decodes the next layer and returns the decoded result. If the packet format is invalid, it raises a ProtocolError exception. Please give the corresponding code according to the description. ",
        "response": "def read_hip(self, length, extension):\n        \"\"\"Read Host Identity Protocol.\n\n        Structure of HIP header [RFC 5201][RFC 7401]:\n             0                   1                   2                   3\n             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            | Next Header   | Header Length |0| Packet Type |Version| RES.|1|\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |          Checksum             |           Controls            |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |                Sender's Host Identity Tag (HIT)               |\n            |                                                               |\n            |                                                               |\n            |                                                               |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |               Receiver's Host Identity Tag (HIT)              |\n            |                                                               |\n            |                                                               |\n            |                                                               |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |                                                               |\n            /                        HIP Parameters                         /\n            /                                                               /\n            |                                                               |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n            Octets      Bits        Name                    Description\n              0           0     hip.next                Next Header\n              1           8     hip.length              Header Length\n              2          16     -                       Reserved (0)\n              2          17     hip.type                Packet Type\n              3          24     hip.version             Version\n              3          28     -                       Reserved\n              3          31     -                       Reserved (1)\n              4          32     hip.chksum              Checksum\n              6          48     hip.control             Controls\n              8          64     hip.shit                Sender's Host Identity Tag\n              24        192     hip.rhit                Receiver's Host Identity Tag\n              40        320     hip.parameters          HIP Parameters\n\n        \"\"\"\n        if length is None:\n            length = len(self)\n\n        _next = self._read_protos(1)\n        _hlen = self._read_unpack(1)\n        _type = self._read_binary(1)\n        if _type[0] != '0':\n            raise ProtocolError('HIP: invalid format')\n        _vers = self._read_binary(1)\n        if _vers[7] != '1':\n            raise ProtocolError('HIP: invalid format')\n        _csum = self._read_fileng(2)\n        _ctrl = self._read_binary(2)\n        _shit = self._read_unpack(16)\n        _rhit = self._read_unpack(16)\n\n        hip = dict(\n            next=_next,\n            length=(_hlen + 1) * 8,\n            type=_HIP_TYPES.get(int(_type[1:], base=2), 'Unassigned'),\n            version=int(_vers[:4], base=2),\n            chksum=_csum,\n            control=dict(\n                anonymous=True if int(_ctrl[15], base=2) else False,\n            ),\n            shit=_shit,\n            rhit=_rhit,\n        )\n\n        _prml = _hlen - 38\n        if _prml:\n            parameters = self._read_hip_para(_prml, version=hip['version'])\n            hip['parameters'] = parameters[0]   # tuple of parameter acronyms\n            hip.update(parameters[1])           # merge parameters info to buffer\n\n        length -= hip['length']\n        hip['packet'] = self._read_packet(header=hip['length'], payload=length)\n\n        if extension:\n            self._protos = None\n            return hip\n        return self._decode_next_layer(hip, _next, length)"
    },
    {
        "instruction": "In Python, create a temporary file with a given prefix and register it internally to be cleaned up at exit time. If data is given, write it to the file immediately and close it. Return the filename of the created tempfile. Please give the corresponding code according to the description. ",
        "response": "def mktempfile(self, data=None, prefix='ipython_edit_'):\n        \"\"\"Make a new tempfile and return its filename.\n\n        This makes a call to tempfile.mktemp, but it registers the created\n        filename internally so ipython cleans it up at exit time.\n\n        Optional inputs:\n\n          - data(None): if data is given, it gets written out to the temp file\n          immediately, and the file is closed again.\"\"\"\n\n        filename = tempfile.mktemp('.py', prefix)\n        self.tempfiles.append(filename)\n\n        if data:\n            tmp_file = open(filename,'w')\n            tmp_file.write(data)\n            tmp_file.close()\n        return filename"
    },
    {
        "instruction": "In Python, define a method that takes in a list of UWI strings as input. Return a new project that omits wells with the specified UWIs. If no UWIs are specified, raise a ValueError. Please give the corresponding code according to the description. ",
        "response": "def omit_wells(self, uwis=None):\n        \"\"\"\n        Returns a new project where wells with specified uwis have been omitted\n\n        Args: \n            uwis (list): list or tuple of UWI strings.\n\n        Returns: \n            project\n        \"\"\"\n        if uwis is None:\n            raise ValueError('Must specify at least one uwi')\n        return Project([w for w in self if w.uwi not in uwis])"
    },
    {
        "instruction": "Converts a dictionary of BernII to JMS basis for charged current process semileptonic operators. The input `C` is a dictionary of coefficients and `udlnu` is a string of the form 'udl_enu_tau', 'cbl_munu_e' etc. The function returns a dictionary with keys of the form 'VnueduLL_{}{}{}{}', 'SnueduRL_{}{}{}{}', 'VnueduLR_{}{}{}{}', 'SnueduRR_{}{}{}{}', 'TnueduRR_{}{}{}{}' and values of the corresponding coefficients obtained from the input dictionary `C`. The function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _Bern_to_JMS_II(C, udlnu):\n    \"\"\"From BernII to JMS basis for charged current process semileptonic\n    operators. `udlnu` should be of the form 'udl_enu_tau', 'cbl_munu_e' etc.\"\"\"\n    u = uflav[udlnu[0]]\n    d = dflav[udlnu[1]]\n    l = lflav[udlnu[4:udlnu.find('n')]]\n    lp = lflav[udlnu[udlnu.find('_',5)+1:len(udlnu)]]\n    ind = udlnu[0]+udlnu[1]+udlnu[4:udlnu.find('n')]+udlnu[udlnu.find('_',5)+1\n                                                                    :len(udlnu)]\n    return {\n        \"VnueduLL_{}{}{}{}\".format(lp + 1, l + 1, d + 1, u + 1): C['1' + ind].conjugate(),\n        \"SnueduRL_{}{}{}{}\".format(lp + 1, l + 1, d + 1, u + 1): C['5' + ind].conjugate(),\n        \"VnueduLR_{}{}{}{}\".format(lp + 1, l + 1, d + 1, u + 1): C['1p' + ind].conjugate(),\n        \"SnueduRR_{}{}{}{}\".format(lp + 1, l + 1, d + 1, u + 1): C['5p' + ind].conjugate(),\n        \"TnueduRR_{}{}{}{}\".format(lp + 1, l + 1, d + 1, u + 1): C['7p' + ind].conjugate()\n        }"
    },
    {
        "instruction": "In Python, the function `audioread` reads an audio signal from a file. It supports the WAV format and other custom formats. The function takes a filename as input and returns the sample rate and an array containing the audio signal. If the file is in WAV format, it reads the file using `wv. read`. If the file is in a custom format, it reads the file using `np. fromfile`. If the file is in an unsupported format, it raises an `IOError`. The audio signal is then converted to a float and returned along with the sample rate. Please give the corresponding code according to the description. ",
        "response": "def audioread(filename):\n    \"\"\"Reads an audio signal from file.\n\n    Supported formats : wav\n\n    :param filename: filename of the audiofile to load\n    :type filename: str\n    :returns: int, numpy.ndarray -- samplerate, array containing the audio signal\n    \"\"\"\n    try:\n        if '.wav' in filename.lower():\n            fs, signal = wv.read(filename)\n        elif '.call' in filename.lower():\n            with open(filename, 'rb') as f:\n                signal = np.fromfile(f, dtype=np.int16)\n            fs = 333333\n        else:\n            raise IOError(\"Unsupported audio format for file: {}\".format(filename))\n    except:\n        print u\"Problem reading wav file\"\n        raise\n    signal = signal.astype(float)\n    return fs, signal"
    },
    {
        "instruction": "This Python function adds a package to a policy with a specified action type. If the package is a Package object, it is added to the package configuration. The action type can be \"Install\", \"Cache\", or \"Install Cached\". If the package already has an action specified, it is overwritten, otherwise a new subelement is created. If the package is not a Package object, a ValueError is raised. Please give the corresponding code according to the description. ",
        "response": "def add_package(self, pkg, action_type=\"Install\"):\n        \"\"\"Add a Package object to the policy with action=install.\n\n        Args:\n            pkg: A Package object to add.\n            action_type (str, optional): One of \"Install\", \"Cache\", or\n                \"Install Cached\".  Defaults to \"Install\".\n        \"\"\"\n        if isinstance(pkg, Package):\n            if action_type not in (\"Install\", \"Cache\", \"Install Cached\"):\n                raise ValueError\n            package = self.add_object_to_path(\n                pkg, \"package_configuration/packages\")\n            # If there's already an action specified, get it, then\n            # overwrite. Otherwise, make a new subelement.\n            action = package.find(\"action\")\n            if not action:\n                action = ElementTree.SubElement(package, \"action\")\n            action.text = action_type\n        else:\n            raise ValueError(\"Please pass a Package object to parameter: \"\n                             \"pkg.\")"
    },
    {
        "instruction": "In Python, add an instruction to the `_save` function to save the current state of the `AssessmentSection` to a database. If the `_id` is not in `self. _my_map`, insert a new document into the database. Otherwise, update the existing document with the `_id` that matches `self. _my_map`. This function should be called every time the question map changes to ensure that the most up-to-date version is saved. Please give the corresponding code according to the description. ",
        "response": "def _save(self):\n        \"\"\"Saves the current state of this AssessmentSection to database.\n\n        Should be called every time the question map changes.\n\n        \"\"\"\n        collection = JSONClientValidated('assessment',\n                                         collection='AssessmentSection',\n                                         runtime=self._runtime)\n        if '_id' in self._my_map:  # This is the first time:\n            collection.save(self._my_map)\n        else:\n            insert_result = collection.insert_one(self._my_map)\n            self._my_map = collection.find_one({'_id': insert_result.inserted_id})"
    },
    {
        "instruction": "In Python, define a generator function that takes a dictionary of links as input and iterates over each key-value pair. For each key-value pair, iterate over the values and yield a tuple containing the key and the current value. Empty registers are ignored. Please give the corresponding code according to the description. ",
        "response": "def _all_valid(links):\n    \"\"\"Iterates over all links, forgetting emtpy registers.\"\"\"\n    for k, v in links.items():\n        for i in v:\n            yield k, i"
    },
    {
        "instruction": "In Python, the `connect` function creates a virtual connection to the peer by issuing an INBOUND command. It takes identifying information about the endpoint to connect to, a protocol factory, and a `Client` ProtocolFactory instance which will generate a protocol upon connect. The function returns a Deferred which fires with the protocol instance that was connected, or fails with AttemptsFailed if the connection was not possible. The function also determines the public IP and attempts to connect to the listener's methods, returning a random connection that was successful. Please give the corresponding code according to the description. ",
        "response": "def connect(self, From, to,\n                protocolName, clientFactory,\n                chooser):\n        \"\"\"\n        Issue an INBOUND command, creating a virtual connection to the peer,\n        given identifying information about the endpoint to connect to, and a\n        protocol factory.\n\n        @param clientFactory: a *Client* ProtocolFactory instance which will\n        generate a protocol upon connect.\n\n        @return: a Deferred which fires with the protocol instance that was\n        connected, or fails with AttemptsFailed if the connection was not\n        possible.\n        \"\"\"\n\n        publicIP = self._determinePublicIP()\n\n        A = dict(From=From,\n                 to=to,\n                 protocol=protocolName)\n\n        if self.service.dispatcher is not None:\n            # Tell them exactly where they can shove it\n            A['udp_source'] = (publicIP,\n                               self.service.sharedUDPPortnum)\n        else:\n            # Don't tell them because we don't know\n            log.msg(\"dispatcher unavailable when connecting\")\n\n        D = self.callRemote(Inbound, **A)\n\n        def _connected(answer):\n            listenersD = defer.maybeDeferred(chooser, answer['listeners'])\n            def gotListeners(listeners):\n                allConnectionAttempts = []\n                for listener in listeners:\n                    d = self.attemptConnectionMethods(\n                        listener['methods'],\n                        listener['id'],\n                        From, to,\n                        protocolName, clientFactory,\n                        )\n                    allConnectionAttempts.append(d)\n                return defer.DeferredList(allConnectionAttempts)\n            listenersD.addCallback(gotListeners)\n            def finishedAllAttempts(results):\n                succeededAny = False\n                failures = []\n                if not results:\n                    return Failure(NoAttemptsMade(\n                            \"there was no available path for connections \"\n                            \"(%r->%r/%s)\" % (From, to, protocolName)))\n                for succeeded, result in results:\n                    if succeeded:\n                        succeededAny = True\n                        randomConnection = result\n                        break\n                    else:\n                        failures.append(result)\n                if not succeededAny:\n                    return Failure(\n                        AttemptsFailed(\n                            [failure.getBriefTraceback()\n                            for failure in failures]\n                        )\n                    )\n\n                # XXX TODO: this connection is really random; connectQ2Q should\n                # not return one of the connections it's made, put it into your\n                # protocol's connectionMade handler\n\n                return randomConnection\n\n            return listenersD.addCallback(finishedAllAttempts)\n        return D.addCallback(_connected)"
    },
    {
        "instruction": "Add a node configuration parameter to the existing configuration by specifying the parameter name, node identifier, and parameter value. If the parameter name does not already exist in the configuration, create it and assign the node identifier and parameter value. Otherwise, add the new node identifier and parameter value to the existing parameter name. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def add_node_configuration(self, param_name, node_id, param_value):\n        \"\"\"\n        Set a parameter for a given node\n\n        :param param_name: parameter identifier (as specified by the chosen model)\n        :param node_id: node identifier\n        :param param_value: parameter value\n        \"\"\"\n        if param_name not in self.config['nodes']:\n            self.config['nodes'][param_name] = {node_id: param_value}\n        else:\n            self.config['nodes'][param_name][node_id] = param_value"
    },
    {
        "instruction": "In Python, define a function named `_CreateRequest` that takes in a `url` and optional `data` parameter. The function should create a new urllib request with the given `url` and `data`. If `host_override` is set, add the `Host` header to the request. Additionally, iterate over the `extra_headers` dictionary and add each key-value pair as a header to the request. Finally, return the request object. Log a debug message with the `url` and `data` payload. Please give the corresponding code according to the description. ",
        "response": "def _CreateRequest(self, url, data=None):\n\t\t\"\"\"Creates a new urllib request.\"\"\"\n\t\tlogging.debug(\"Creating request for: '%s' with payload:\\n%s\", url, data)\n\t\treq = urllib2.Request(url, data=data)\n\t\tif self.host_override:\n\t\t\treq.add_header(\"Host\", self.host_override)\n\t\tfor key, value in self.extra_headers.iteritems():\n\t\t\treq.add_header(key, value)\n\t\treturn req"
    },
    {
        "instruction": "In Python, create a function that retrieves PubMed metadata in XML form using a PubMed ID. The function should construct a URL with the PubMed ID and use the urlopen method to retrieve the XML data. If the retrieval is successful, parse the XML data using the xmltodict library and return the resulting dictionary. If the retrieval fails, return an empty string. Please give the corresponding code according to the description. ",
        "response": "def get_pubmed_xml(self):\n        \"\"\"\n        Use a PubMed ID to retrieve PubMed metadata in XML form.\n        \"\"\"\n        url = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/' \\\n              'efetch.fcgi?db=pubmed&rettype=abstract&id={}' \\\n              .format(self.pmid)\n\n        try:\n            response = urlopen(url)\n        except URLError:\n            xml_dict = ''\n        else:\n            xml = response.read().decode()\n            xml_dict = xmltodict.parse(xml)\n\n        return xml_dict"
    },
    {
        "instruction": "In Python, the `agp()` function takes in three arguments: `tpffile`, `certificatefile`, and `agpfile`. It uses `jcvi. formats. base. DictFile()` to create a dictionary from the `tpffile` and `Certificate()` to create a certificate object from the `certificatefile`. Finally, it writes the AGP file using the certificate object and the orientation guide from the `tpffile`. The function is intended to build an AGP file from overlap certificates, and it is important to ensure that the input files are correctly formatted before running the function. Please give the corresponding code according to the description. ",
        "response": "def agp(args):\n    \"\"\"\n    %prog agp tpffile certificatefile agpfile\n\n    Build agpfile from overlap certificates.\n\n    Tiling Path File (tpf) is a file that lists the component and the gaps.\n    It is a three-column file similar to below, also see jcvi.formats.agp.tpf():\n\n    telomere        chr1\tna\n    AC229737.8      chr1    +\n    AC202463.29     chr1    +\n\n    Note: the orientation of the component is only used as a guide. If the\n    orientation is derivable from a terminal overlap, it will use it regardless\n    of what the tpf says.\n\n    See jcvi.assembly.goldenpath.certificate() which generates a list of\n    certificates based on agpfile. At first, it seems counter-productive to\n    convert first agp to certificates then certificates back to agp.\n\n    The certificates provide a way to edit the overlap information, so that the\n    agpfile can be corrected (without changing agpfile directly).\n    \"\"\"\n    from jcvi.formats.base import DictFile\n\n    p = OptionParser(agp.__doc__)\n    opts, args = p.parse_args(args)\n\n    if len(args) != 3:\n        sys.exit(not p.print_help())\n\n    tpffile, certificatefile, agpfile = args\n    orientationguide = DictFile(tpffile, valuepos=2)\n    cert = Certificate(certificatefile)\n    cert.write_AGP(agpfile, orientationguide=orientationguide)"
    },
    {
        "instruction": "Create a function in Python that sets up an argument parser for managing packages on remote hosts. The function should add mutually exclusive arguments for installing or removing packages, with the package names provided as comma-separated values. The function should also add a required argument for the hosts to manage. Finally, the function should set the default function to \"pkg\". Please give the corresponding code according to the description. ",
        "response": "def make(parser):\n    \"\"\"\n    Manage packages on remote hosts.\n    \"\"\"\n\n    action = parser.add_mutually_exclusive_group()\n\n    action.add_argument(\n        '--install',\n        metavar='PKG(s)',\n        help='Comma-separated package(s) to install',\n    )\n\n    action.add_argument(\n        '--remove',\n        metavar='PKG(s)',\n        help='Comma-separated package(s) to remove',\n    )\n\n    parser.add_argument(\n        'hosts',\n        nargs='+',\n    )\n\n    parser.set_defaults(\n        func=pkg,\n    )"
    },
    {
        "instruction": "Python: Define a method that searches for the first prefix that has been mapped to a namespace URI. It first searches the local mapping, then walks up the tree until it reaches the top or finds a match. If a match is found, return the mapped prefix. If not found, return the default prefix. Please give the corresponding code according to the description. ",
        "response": "def findPrefix(self, uri, default=None):\n        \"\"\"\n        Find the first prefix that has been mapped to a namespace URI.\n        The local mapping is searched, then it walks up the tree until\n        it reaches the top or finds a match.\n        @param uri: A namespace URI.\n        @type uri: basestring\n        @param default: A default prefix when not found.\n        @type default: basestring\n        @return: A mapped prefix.\n        @rtype: basestring\n        \"\"\"\n        for item in self.nsprefixes.items():\n            if item[1] == uri:\n                prefix = item[0]\n                return prefix\n        for item in self.specialprefixes.items():\n            if item[1] == uri:\n                prefix = item[0]\n                return prefix\n        if self.parent is not None:\n            return self.parent.findPrefix(uri, default)\n        else:\n            return default"
    },
    {
        "instruction": "In Python, define a 'get' method that sets a boolean 'loaded' attribute to True. If the object's manager has no 'get' attribute or 'get_details' is False, return. Otherwise, call the manager's 'get' method with the object as an argument and add the resulting object's '_info' attribute to the original object's details. Please give the corresponding code according to the description. ",
        "response": "def get(self):\n        \"\"\"Gets the details for the object.\"\"\"\n        # set 'loaded' first ... so if we have to bail, we know we tried.\n        self.loaded = True\n        if not hasattr(self.manager, \"get\"):\n            return\n        if not self.get_details:\n            return\n        new = self.manager.get(self)\n        if new:\n            self._add_details(new._info)"
    },
    {
        "instruction": "In Python, define a function that takes a seed parameter and uses it to seed the random number generators for numpy and tensorflow. If the seed is greater than or equal to 0, set the seed for both generators and return True. Otherwise, return False. Please give the corresponding code according to the description. ",
        "response": "def random_seed_np_tf(seed):\n    \"\"\"Seed numpy and tensorflow random number generators.\n\n    :param seed: seed parameter\n    \"\"\"\n    if seed >= 0:\n        np.random.seed(seed)\n        tf.set_random_seed(seed)\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Perform multi-channel template matching using simple correlation distance. The function takes in a template image and a search image, and returns a heatmap of the search image where the template matches. The heatmap values can be normalized to be between 0 and 1, and the size of the heatmap can be retained to be the same as the input image. The function uses OpenCV matching if the input has a maximum of 3 channels, and uses Euclidean distance if specified in the options. The function returns a numpy array of the same size as the input image. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def match_template(template, image, options=None):\n    \"\"\"\n    Multi channel template matching using simple correlation distance\n\n    :param template: Template image\n    :param image: Search image\n    :param options: Other options:\n        - distance: Distance measure to use. Default: 'correlation'\n        - normalize: Heatmap values will be in the range of 0 to 1. Default: True\n        - retain_size: Whether to retain the same size as input image. Default: True\n    :return: Heatmap\n    \"\"\"\n    # If the input has max of 3 channels, use the faster OpenCV matching\n    if len(image.shape) <= 3 and image.shape[2] <= 3:\n        return match_template_opencv(template, image, options)\n\n    op = _DEF_TM_OPT.copy()\n    if options is not None:\n        op.update(options)\n\n    template = img_utils.gray3(template)\n    image = img_utils.gray3(image)\n\n    h, w, d = template.shape\n    im_h, im_w = image.shape[:2]\n\n    template_v = template.flatten()\n\n    heatmap = np.zeros((im_h - h, im_w - w))\n    for col in range(0, im_w - w):\n        for row in range(0, im_h - h):\n            cropped_im = image[row:row + h, col:col + w, :]\n            cropped_v = cropped_im.flatten()\n\n            if op['distance'] == 'euclidean':\n                heatmap[row, col] = scipy.spatial.distance.euclidean(template_v, cropped_v)\n            elif op['distance'] == 'correlation':\n                heatmap[row, col] = scipy.spatial.distance.correlation(template_v, cropped_v)\n\n    # normalize\n    if op['normalize']:\n        heatmap /= heatmap.max()\n\n    # size\n    if op['retain_size']:\n        hmap = np.ones(image.shape[:2]) * heatmap.max()\n        h, w = heatmap.shape\n        hmap[:h, :w] = heatmap\n        heatmap = hmap\n\n    return heatmap"
    },
    {
        "instruction": "Python: Add an instruction to the do_build() function to run the build phase on any modules that need building. If the build is successful, start the module. If not, fail the build. If the build is for dependencies only, only build the modules that are dependencies. If the module has already been built, skip it. If the delivery method is not supported, fail the build. Please give the corresponding code according to the description. ",
        "response": "def do_build(self):\n\t\t\"\"\"Runs build phase, building any modules that we've determined\n\t\tneed building.\n\t\t\"\"\"\n\t\tshutit_global.shutit_global_object.yield_to_draw()\n\t\tcfg = self.cfg\n\t\tself.log('PHASE: build, repository work', level=logging.DEBUG)\n\t\tmodule_id_list = self.module_ids()\n\t\tif self.build['deps_only']:\n\t\t\tmodule_id_list_build_only = filter(lambda x: cfg[x]['shutit.core.module.build'], module_id_list)\n\t\tfor module_id in module_id_list:\n\t\t\tmodule = self.shutit_map[module_id]\n\t\t\tself.log('Considering whether to build: ' + module.module_id, level=logging.INFO)\n\t\t\tif cfg[module.module_id]['shutit.core.module.build']:\n\t\t\t\tif self.build['delivery'] not in module.ok_delivery_methods:\n\t\t\t\t\tself.fail('Module: ' + module.module_id + ' can only be built with one of these --delivery methods: ' + str(module.ok_delivery_methods) + '\\nSee shutit build -h for more info, or try adding: --delivery <method> to your shutit invocation') # pragma: no cover\n\t\t\t\tif self.is_installed(module):\n\t\t\t\t\tself.build['report'] = (self.build['report'] + '\\nBuilt already: ' + module.module_id + ' with run order: ' + str(module.run_order))\n\t\t\t\telse:\n\t\t\t\t\t# We move to the module directory to perform the build, returning immediately afterwards.\n\t\t\t\t\tif self.build['deps_only'] and module_id == module_id_list_build_only[-1]:\n\t\t\t\t\t\t# If this is the last module, and we are only building deps, stop here.\n\t\t\t\t\t\tself.build['report'] = (self.build['report'] + '\\nSkipping: ' + module.module_id + ' with run order: ' + str(module.run_order) + '\\n\\tas this is the final module and we are building dependencies only')\n\t\t\t\t\telse:\n\t\t\t\t\t\trevert_dir = os.getcwd()\n\t\t\t\t\t\tself.get_current_shutit_pexpect_session_environment().module_root_dir = os.path.dirname(self.shutit_file_map[module_id])\n\t\t\t\t\t\tself.chdir(self.get_current_shutit_pexpect_session_environment().module_root_dir)\n\t\t\t\t\t\tself.login(prompt_prefix=module_id,command=shutit_global.shutit_global_object.bash_startup_command,echo=False)\n\t\t\t\t\t\tself.build_module(module)\n\t\t\t\t\t\tself.logout(echo=False)\n\t\t\t\t\t\tself.chdir(revert_dir)\n\t\t\tif self.is_installed(module):\n\t\t\t\tself.log('Starting module',level=logging.DEBUG)\n\t\t\t\tif not module.start(self):\n\t\t\t\t\tself.fail(module.module_id + ' failed on start', shutit_pexpect_child=self.get_shutit_pexpect_session_from_id('target_child').pexpect_child)"
    },
    {
        "instruction": "In Python, define a method called 'get_module_config' that takes in two parameters: 'self' and 'name'. The method should check if the 'name' exists in the 'modules' key of the JSON object stored in the '_json' attribute. If it does, and the value is not a string, return the value associated with that key. Otherwise, return None. Please give the corresponding code according to the description. ",
        "response": "def get_module_config(self, name):\n    \"\"\"\n     Return module configuration loaded from separate file or None\n    \"\"\"\n    if self.exists(\"modules\"):\n      if name in self._json[\"modules\"] and not isinstance(self._json[\"modules\"][name], str):\n        return self._json[\"modules\"][name]\n    return None"
    },
    {
        "instruction": "Create a Python decorator that takes a function and an optional stream as input, and returns a wrapper function that runs the input function and prints a line-by-line profile of its execution. The wrapper function should accept any number of positional and keyword arguments, and use the LineProfiler module to profile the input function's execution. Finally, the wrapper function should call the show_results function to display the profile results on the specified stream, or on the console if no stream is specified. Please give the corresponding code according to the description. ",
        "response": "def profile(func, stream=None):\n    \"\"\"\n    Decorator that will run the function and print a line-by-line profile\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        prof = LineProfiler()\n        val = prof(func)(*args, **kwargs)\n        show_results(prof, stream=stream)\n        return val\n    return wrapper"
    },
    {
        "instruction": "This is a Python function that parses a DID (Decentralized Identifier) into its parts. The function takes a string `did` as input and returns a Python dictionary with two keys: `method` and `id`. The `method` key contains the method used to create the DID and the `id` key contains the unique identifier for the DID. The function first checks if the input is a string and raises a `TypeError` if it's not. It then uses regular expressions to match the `did` string to the DID format and raises a `ValueError` if it's not valid. Please give the corresponding code according to the description. ",
        "response": "def did_parse(did):\n    \"\"\"\n    Parse a DID into it's parts.\n\n    :param did: Asset did, str.\n    :return: Python dictionary with the method and the id.\n    \"\"\"\n    if not isinstance(did, str):\n        raise TypeError(f'Expecting DID of string type, got {did} of {type(did)} type')\n\n    match = re.match('^did:([a-z0-9]+):([a-zA-Z0-9-.]+)(.*)', did)\n    if not match:\n        raise ValueError(f'DID {did} does not seem to be valid.')\n\n    result = {\n        'method': match.group(1),\n        'id': match.group(2),\n    }\n\n    return result"
    },
    {
        "instruction": "In Python, define a function named `print_solution` that takes in two arguments: a `pywrapcp. CpModel` object named `model` and a `pywrapcp. CpSolver` object named `solver`. The function prints the solution associated with the solver, which includes each variable and its assignment, along with the objective function and its optimal value. If the solver has not had `Solve()` called on it, or there is no feasible solution, the function will probably crash. The function returns nothing, but prints the solution associated with the solver. Please give the corresponding code according to the description. ",
        "response": "def print_solution(model, solver):\n  \"\"\"Prints the solution associated with solver.\n\n  If solver has already had Solve() called on it, prints the solution. This\n  includes each variable and its assignment, along with the objective function\n  and its optimal value.\n  If solver has not had Solve() called on it, or there is no feasible solution,\n  this will probably crash.\n\n  Args:\n    model: A pywrapcp.CpModel object.\n    solver: A pywrapcp.CpSolver object.\n\n  Returns:\n    Nothing, but prints the solution associated with solver.\n  \"\"\"\n  model_proto = model.Proto()\n  response_proto = solver.ResponseProto()\n  variables_in_objective_map = {}\n  maximization = False\n  if model_proto.HasField('objective'):\n    objective = model_proto.objective\n    for i in range(len(objective.vars)):\n      variables_in_objective_map[objective.vars[i]] = objective.coeffs[i]\n    if objective.scaling_factor < 0.0:\n      maximization = True\n  variable_assignments = []\n  variables_in_objective = []\n  num_vars = len(model_proto.variables)\n  for var_index in range(num_vars):\n    if not model_proto.variables[var_index].name:\n      continue\n    variable_name = model_proto.variables[var_index].name\n    if var_index in variables_in_objective_map:\n      coefficient = variables_in_objective_map[var_index]\n      if coefficient:\n        if maximization:\n          coefficient *= -1\n        if coefficient < 0:\n          variables_in_objective.append(' - {} * {}'.format(\n              -coefficient, variable_name))\n        elif coefficient > 0:\n          variables_in_objective.append(' + {} * {}'.format(\n              coefficient, variable_name))\n    variable_assignments.append('  {} = {}\\n'.format(\n        variable_name, response_proto.solution[var_index]))\n  print(''.join(variable_assignments), end='')\n  # Strip the leading '+' if it exists.\n  if variables_in_objective and variables_in_objective[0][1] == '+':\n    variables_in_objective[0] = variables_in_objective[0][2:]\n  print('{}:{}'.format('Maximize' if maximization else 'Minimize',\n                       ''.join(variables_in_objective)))\n  print('Objective value: {}\\n'.format(solver.ObjectiveValue()))"
    },
    {
        "instruction": "In Python, define a method named \"check\" that takes in two parameters, \"self\" and \"diff\". Check if the filename of the new file introduced is valid by verifying if it matches the regex pattern \"feature_[a-zA-Z0-9_]+\\. \\w+\" or if it is named \"__init__. py\". If the filename is not valid, raise an assertion error. Please give the corresponding code according to the description. ",
        "response": "def check(self, diff):\n        r\"\"\"Check that the new file introduced has a valid name\n\n        The module can either be an __init__.py file or must\n        match ``feature_[a-zA-Z0-9_]+\\.\\w+``.\n        \"\"\"\n        filename = pathlib.Path(diff.b_path).parts[-1]\n        is_valid_feature_module_name = re_test(\n            FEATURE_MODULE_NAME_REGEX, filename)\n        is_valid_init_module_name = filename == '__init__.py'\n        assert is_valid_feature_module_name or is_valid_init_module_name"
    },
    {
        "instruction": "In Python, add an error message to a logging system. If the input message is empty, print the stack trace. If an exception is raised, log the exception. Otherwise, log the message as an error. Add the error message to a log with a specified color and show the error message if specified. Please give the corresponding code according to the description. ",
        "response": "def add_log_error(self, x, flag_also_show=False, E=None):\r\n        \"\"\"Sets text of labelError.\"\"\"\r\n        if len(x) == 0:\r\n            x = \"(empty error)\"\r\n            tb.print_stack()\r\n        x_ = x\r\n        if E is not None:\r\n            a99.get_python_logger().exception(x_)\r\n        else:\r\n            a99.get_python_logger().info(\"ERROR: {}\".format(x_))\r\n\r\n        x = '<span style=\"color: {0!s}\">{1!s}</span>'.format(a99.COLOR_ERROR, x)\r\n        self._add_log_no_logger(x, False)\r\n        if flag_also_show:\r\n            a99.show_error(x_)"
    },
    {
        "instruction": "In Python, define a class method called `asset_security_marks_path` that takes in `organization` and `asset` parameters. Return a string that represents the fully-qualified asset security marks path by using the `google. api_core. path_template. expand()` method. The path should be in the format of \"organizations/{organization}/assets/{asset}/securityMarks\", where `organization` and `asset` are replaced with the values passed in as parameters. Please give the corresponding code according to the description. ",
        "response": "def asset_security_marks_path(cls, organization, asset):\n        \"\"\"Return a fully-qualified asset_security_marks string.\"\"\"\n        return google.api_core.path_template.expand(\n            \"organizations/{organization}/assets/{asset}/securityMarks\",\n            organization=organization,\n            asset=asset,\n        )"
    },
    {
        "instruction": "In Python, define a function named `save_pickle` that takes an object, a filename, and an optional pickle protocol as input. The function should save the object as a pickle file with the given filename and protocol, and return the path to the pickle file. Please give the corresponding code according to the description. ",
        "response": "def save_pickle(obj, outfile, protocol=2):\n    \"\"\"Save the object as a pickle file\n\n    Args:\n        outfile (str): Filename\n        protocol (int): Pickle protocol to use. Default is 2 to remain compatible with Python 2\n\n    Returns:\n        str: Path to pickle file\n\n    \"\"\"\n    with open(outfile, 'wb') as f:\n        pickle.dump(obj, f, protocol=protocol)\n\n    return outfile"
    },
    {
        "instruction": "In Python, define a function called \"get_metadata\" that takes in three parameters: \"self\", \"dataset_identifier\", and \"content_type\" with a default value of \"json\". The function should retrieve the metadata for a particular dataset using the \"_format_old_api_request\" function and perform a GET request using the \"_perform_request\" function. Return the result of the GET request. Please give the corresponding code according to the description. ",
        "response": "def get_metadata(self, dataset_identifier, content_type=\"json\"):\n        '''\n        Retrieve the metadata for a particular dataset.\n        '''\n        resource = _format_old_api_request(dataid=dataset_identifier, content_type=content_type)\n        return self._perform_request(\"get\", resource)"
    },
    {
        "instruction": "In Python, define a function that removes the extension from a file name if it is not a raw file. Check the resource type of the file and return the original name if it is a raw file or if the resource type is not found. Otherwise, get the file extension and return the name without the extension. This is done to prevent Cloudinary from adding a duplicate extension to the URL when converting the file to a different format. Please give the corresponding code according to the description. ",
        "response": "def _remove_extension_for_non_raw_file(self, name):\n        \"\"\"\n        Implemented as image and video files' Cloudinary public id\n        shouldn't contain file extensions, otherwise Cloudinary url\n        would contain doubled extension - Cloudinary adds extension to url\n        to allow file conversion to arbitrary file, like png to jpg.\n        \"\"\"\n        file_resource_type = self._get_resource_type(name)\n        if file_resource_type is None or file_resource_type == self.RESOURCE_TYPE:\n            return name\n        else:\n            extension = self._get_file_extension(name)\n            return name[:-len(extension) - 1]"
    },
    {
        "instruction": "In Python, define a function called \"log_print_request\" that takes in HTTP request data and logs it in a user-friendly representation. The function should take in the following parameters: method (HTTP method), url (URL), query_params (query parameters in the URL), headers (headers in a dictionary), and body (raw body in a string). The function should return None. It should create a log message that includes the method, URL, query parameters (if applicable), headers (if applicable), and payload (if applicable) and then log the message using the logger. debug() method. Please give the corresponding code according to the description. ",
        "response": "def log_print_request(method, url, query_params=None, headers=None, body=None):\n    \"\"\"\n    Log an HTTP request data in a user-friendly representation.\n\n    :param method: HTTP method\n    :param url: URL\n    :param query_params: Query parameters in the URL\n    :param headers: Headers (dict)\n    :param body: Body (raw body, string)\n    :return: None\n    \"\"\"\n\n    log_msg = '\\n>>>>>>>>>>>>>>>>>>>>> Request >>>>>>>>>>>>>>>>>>> \\n'\n    log_msg += '\\t> Method: %s\\n' % method\n    log_msg += '\\t> Url: %s\\n' % url\n    if query_params is not None:\n        log_msg += '\\t> Query params: {}\\n'.format(str(query_params))\n    if headers is not None:\n        log_msg += '\\t> Headers:\\n{}\\n'.format(json.dumps(dict(headers), sort_keys=True, indent=4))\n    if body is not None:\n        try:\n            log_msg += '\\t> Payload sent:\\n{}\\n'.format(_get_pretty_body(headers, body))\n        except:\n            log_msg += \"\\t> Payload could't be formatted\"\n\n    logger.debug(log_msg)"
    },
    {
        "instruction": "Python: Add a descriptive instruction to the function \"has_transition_perm\" that checks if the bound_method can be called in the current state of the model, and if the user has the necessary rights to execute it. If the bound_method is not a transition, raise a TypeError. Return True if the conditions are met, False otherwise. Please give the corresponding code according to the description. ",
        "response": "def has_transition_perm(bound_method, user):\n    \"\"\"\n    Returns True if model in state allows to call bound_method and user have rights on it\n    \"\"\"\n    if not hasattr(bound_method, '_django_fsm'):\n        im_func = getattr(bound_method, 'im_func', getattr(bound_method, '__func__'))\n        raise TypeError('%s method is not transition' % im_func.__name__)\n\n    meta = bound_method._django_fsm\n    im_self = getattr(bound_method, 'im_self', getattr(bound_method, '__self__'))\n    current_state = meta.field.get_state(im_self)\n\n    return (meta.has_transition(current_state) and\n            meta.conditions_met(im_self, current_state) and\n            meta.has_transition_perm(im_self, current_state, user))"
    },
    {
        "instruction": "If threads are enabled, append the file path, prefixed path, and source storage to the task queue. Otherwise, copy the file with a blocking call using do_copy_file function. This is Python code. Please give the corresponding code according to the description. ",
        "response": "def copy_file(self, path, prefixed_path, source_storage):\n        \"\"\"\n        Appends path to task queue if threads are enabled, otherwise copies\n        the file with a blocking call.\n        \"\"\"\n        args = (path, prefixed_path, source_storage)\n        if settings.threads:\n            self.tasks.append(args)\n        else:\n            self.do_copy_file(args)"
    },
    {
        "instruction": "In Python, create a method that returns a list of tuples containing all the key-value pairs in the dictionary. The keys and values should be decoded from bytes to UTF-8 strings. The method should first retrieve all items from the dictionary using the `hgetall` method of the Redis database object, and then convert each key-value pair to a tuple and append it to the list of all items. Return the list of tuples. Please give the corresponding code according to the description. ",
        "response": "def items(self):\n        \"\"\"Return a list of all the key, value pair tuples in the dictionary.\n\n        Returns:\n            list of tuples: [(key1,value1),(key2,value2),...,(keyN,valueN)]\n        \"\"\"\n        all_items = [(k.decode('utf-8'),v.decode('utf-8')) for k,v in self.rdb.hgetall(self.session_hash).items()]\n        return all_items"
    },
    {
        "instruction": "This Python function sends a ping to a target, either by using the CTCP PING command or by running a system ping command. If the target is a valid nickname, the function stores the target and the channel in a dictionary. The function takes three arguments: `send`, which sends a message to the channel or user, `msg`, which is the target to ping, and `args`, which is a dictionary containing the target, nickname, and config information. If no target is provided, the function sends a message asking for a target. Please give the corresponding code according to the description. ",
        "response": "def cmd(send, msg, args):\n    \"\"\"Ping something.\n\n    Syntax: {command} <target>\n\n    \"\"\"\n    if not msg:\n        send(\"Ping what?\")\n        return\n    channel = args['target'] if args['target'] != 'private' else args['nick']\n    # CTCP PING\n    if \".\" not in msg and \":\" not in msg:\n        targets = set(msg.split())\n        if len(targets) > 3:\n            send(\"Please specify three or fewer people to ping.\")\n            return\n        for target in targets:\n            if not re.match(args['config']['core']['nickregex'], target):\n                send(\"Invalid nick %s\" % target)\n            else:\n                args['handler'].ping_map[target] = channel\n                args['handler'].connection.ctcp(\"PING\", target, \" \".join(str(time()).split('.')))\n        return\n    try:\n        answer = subprocess.check_output([args['name'], '-W', '1', '-c', '1', msg], stderr=subprocess.STDOUT)\n        answer = answer.decode().splitlines()\n        send(answer[0])\n        send(answer[1])\n    except subprocess.CalledProcessError as e:\n        if e.returncode == 2:\n            send(\"ping: unknown host \" + msg)\n        elif e.returncode == 1:\n            send(e.output.decode().splitlines()[-2])"
    },
    {
        "instruction": "In Python, create a method that initializes the application configuration by retrieving the 'config' attribute of the 'app' object. Then, retrieve the value of the 'TEAM_ID' key from the 'config' dictionary and assign it to the 'team_id' attribute of the object. Please give the corresponding code according to the description. ",
        "response": "def init_app(self, app=None):\n        \"\"\"Initialize application configuration\"\"\"\n        config = getattr(app, 'config', app)\n\n        self.team_id = config.get('TEAM_ID')"
    },
    {
        "instruction": "In Python, define a function that initializes the thread local by checking if the class has the attribute '_in_order_futures'. If it doesn't, set '_in_order_futures' to an empty set and '_activated' to False. Please give the corresponding code according to the description. ",
        "response": "def _thread_init(cls):\n    \"\"\"Ensure thread local is initialized.\"\"\"\n    if not hasattr(cls._local, '_in_order_futures'):\n      cls._local._in_order_futures = set()\n      cls._local._activated = False"
    },
    {
        "instruction": "Given an argument node, this function creates and returns a FritzActionArgument instance with the name, direction, and data type of the argument. It also checks for any malformed XML-nodes and returns None if the related state variable is not found in the state variables dictionary. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _get_argument(self, argument_node):\n        \"\"\"\n        Returns a FritzActionArgument instance for the given argument_node.\n        \"\"\"\n        argument = FritzActionArgument()\n        argument.name = argument_node.find(self.nodename('name')).text\n        argument.direction = argument_node.find(self.nodename('direction')).text\n        rsv = argument_node.find(self.nodename('relatedStateVariable')).text\n        # TODO: track malformed xml-nodes (i.e. misspelled)\n        argument.data_type = self.state_variables.get(rsv, None)\n        return argument"
    },
    {
        "instruction": "In Python, define a function that takes a string, an integer offset, and a replacement string as input. Replace any whitespace characters at the given offset in the string with the replacement string, and return the resulting fixed string. If the whitespace is followed by a '' character, return the original string. Please give the corresponding code according to the description. ",
        "response": "def fix_whitespace(line, offset, replacement):\n    \"\"\"Replace whitespace at offset and return fixed line.\"\"\"\n    # Replace escaped newlines too\n    left = line[:offset].rstrip('\\n\\r \\t\\\\')\n    right = line[offset:].lstrip('\\n\\r \\t\\\\')\n    if right.startswith('#'):\n        return line\n    else:\n        return left + replacement + right"
    },
    {
        "instruction": "Generate a random excuse from a template dictionary in Python. The function takes in a dictionary of template strings and a starting key (default is 'start') and returns a randomly generated string based on the templates. The function uses regular expressions to match tokens in the template string and recursively calls itself to replace the tokens with a random word generated from the template dictionary. Please give the corresponding code according to the description. ",
        "response": "def generate_random_string(template_dict, key='start'):\n    \"\"\"Generates a random excuse from a simple template dict.\n\n    Based off of drow's generator.js (public domain).\n    Grok it here: http://donjon.bin.sh/code/random/generator.js\n\n    Args:\n        template_dict: Dict with template strings.\n        key: String with the starting index for the dict. (Default: 'start')\n\n    Returns:\n        Generated string.\n    \"\"\"\n\n    data = template_dict.get(key)\n\n    #if isinstance(data, list):\n    result = random.choice(data)\n    #else:\n        #result = random.choice(data.values())\n\n    for match in token_regex.findall(result):\n        word = generate_random_string(template_dict, match) or match\n        result = result.replace('{{{0}}}'.format(match), word)\n\n    return result"
    },
    {
        "instruction": "In Python, this function checks if the end of a namespace is properly commented. It checks how many lines are enclosed in the namespace and whether there is already an end of namespace comment. If the namespace is large, the function checks the end of the namespace comments, but if it is small, it doesn't issue a warning for missing namespace comments. The function then looks for matching comments at the end of the namespace and accepts C style \"/* */\" comments for terminating namespaces and \" end of namespace <name>. \" with a period at the end. If the namespace is anonymous, it should be terminated with \" namespace\" or \" anonymous namespace\". Please give the corresponding code according to the description. ",
        "response": "def CheckEnd(self, filename, clean_lines, linenum, error):\n    \"\"\"Check end of namespace comments.\"\"\"\n    line = clean_lines.raw_lines[linenum]\n\n    # Check how many lines is enclosed in this namespace.  Don't issue\n    # warning for missing namespace comments if there aren't enough\n    # lines.  However, do apply checks if there is already an end of\n    # namespace comment and it's incorrect.\n    #\n    # TODO(unknown): We always want to check end of namespace comments\n    # if a namespace is large, but sometimes we also want to apply the\n    # check if a short namespace contained nontrivial things (something\n    # other than forward declarations).  There is currently no logic on\n    # deciding what these nontrivial things are, so this check is\n    # triggered by namespace size only, which works most of the time.\n    if (linenum - self.starting_linenum < 10\n        and not Match(r'};*\\s*(//|/\\*).*\\bnamespace\\b', line)):\n      return\n\n    # Look for matching comment at end of namespace.\n    #\n    # Note that we accept C style \"/* */\" comments for terminating\n    # namespaces, so that code that terminate namespaces inside\n    # preprocessor macros can be cpplint clean.\n    #\n    # We also accept stuff like \"// end of namespace <name>.\" with the\n    # period at the end.\n    #\n    # Besides these, we don't accept anything else, otherwise we might\n    # get false negatives when existing comment is a substring of the\n    # expected namespace.\n    if self.name:\n      # Named namespace\n      if not Match((r'};*\\s*(//|/\\*).*\\bnamespace\\s+' + re.escape(self.name) +\n                    r'[\\*/\\.\\\\\\s]*$'),\n                   line):\n        error(filename, linenum, 'readability/namespace', 5,\n              'Namespace should be terminated with \"// namespace %s\"' %\n              self.name)\n    else:\n      # Anonymous namespace\n      if not Match(r'};*\\s*(//|/\\*).*\\bnamespace[\\*/\\.\\\\\\s]*$', line):\n        # If \"// namespace anonymous\" or \"// anonymous namespace (more text)\",\n        # mention \"// anonymous namespace\" as an acceptable form\n        if Match(r'}.*\\b(namespace anonymous|anonymous namespace)\\b', line):\n          error(filename, linenum, 'readability/namespace', 5,\n                'Anonymous namespace should be terminated with \"// namespace\"'\n                ' or \"// anonymous namespace\"')\n        else:\n          error(filename, linenum, 'readability/namespace', 5,\n                'Anonymous namespace should be terminated with \"// namespace\"')"
    },
    {
        "instruction": "In Python, define a function that takes a class as input and returns its method resolution order (mro). If the input is a classic class, convert it to a new-style class by inheriting from object. Return the mro of the class, excluding the class itself. Please give the corresponding code according to the description. ",
        "response": "def _get_mro(cls):\n    \"\"\"Get an mro for a type or classic class\"\"\"\n    if not isinstance(cls, type):\n        class cls(cls, object): pass\n        return cls.__mro__[1:]\n    return cls.__mro__"
    },
    {
        "instruction": "Add a function instruction that takes a string argument representing a dotted path to a Python settings instance. The function should split the path into its module and instance names, import the module, and return the instance. If the path is invalid, raise a `click. UsageError` with a relevant error message. Please give the corresponding code according to the description. ",
        "response": "def import_settings(dotted_path):\n    \"\"\"Import settings instance from python dotted path.\n\n    Last item in dotted path must be settings instace.\n\n    Example: import_settings('path.to.settings')\n    \"\"\"\n    if \".\" in dotted_path:\n        module, name = dotted_path.rsplit(\".\", 1)\n    else:\n        raise click.UsageError(\n            \"invalid path to settings instance: {}\".format(dotted_path)\n        )\n    try:\n        module = importlib.import_module(module)\n    except ImportError as e:\n        raise click.UsageError(e)\n    try:\n        return getattr(module, name)\n    except AttributeError as e:\n        raise click.UsageError(e)"
    },
    {
        "instruction": "Python: Define a function that retrieves properties of variables in the current namespace. The function imports the `get_remote_data` function from `spyder_kernels. utils. nsview`. It then retrieves the current namespace and uses `get_remote_data` to retrieve data from the namespace. The function then creates a dictionary of properties for each variable, including whether it is a list, dictionary, set, its length, whether it is an array, image, data frame, or series, and its array shape and number of dimensions. Finally, the function returns a string representation of the dictionary of properties. If there are no settings, the function returns `None`. Please give the corresponding code according to the description. ",
        "response": "def get_var_properties(self):\n        \"\"\"\n        Get some properties of the variables in the current\n        namespace\n        \"\"\"\n        from spyder_kernels.utils.nsview import get_remote_data\n\n        settings = self.namespace_view_settings\n        if settings:\n            ns = self._get_current_namespace()\n            data = get_remote_data(ns, settings, mode='editable',\n                                   more_excluded_names=EXCLUDED_NAMES)\n\n            properties = {}\n            for name, value in list(data.items()):\n                properties[name] = {\n                    'is_list':  isinstance(value, (tuple, list)),\n                    'is_dict':  isinstance(value, dict),\n                    'is_set': isinstance(value, set),\n                    'len': self._get_len(value),\n                    'is_array': self._is_array(value),\n                    'is_image': self._is_image(value),\n                    'is_data_frame': self._is_data_frame(value),\n                    'is_series': self._is_series(value),\n                    'array_shape': self._get_array_shape(value),\n                    'array_ndim': self._get_array_ndim(value)\n                }\n\n            return repr(properties)\n        else:\n            return repr(None)"
    },
    {
        "instruction": "Calculate the confidence interval of the input array `theta_star` in Python. First, sort the array and remove any NaN values. Then, calculate the standard error using the standard deviation of the sorted array multiplied by the square root of the `blockratio`. Finally, calculate the 95% confidence interval using the empirical percentiles of the sorted array and return it. Please give the corresponding code according to the description. ",
        "response": "def get_ci(theta_star, blockratio=1.0):\n    \"\"\" Get the confidence interval. \"\"\"\n    # get rid of nans while we sort\n    b_star = np.sort(theta_star[~np.isnan(theta_star)])\n    se = np.std(b_star) * np.sqrt(blockratio)\n    # bootstrap 95% CI based on empirical percentiles\n    ci = [b_star[int(len(b_star) * .025)], b_star[int(len(b_star) * .975)]]\n    return ci"
    },
    {
        "instruction": "This Python function exports the current mesh to a file object. If the file_obj is a filename, the file will be written there. Supported formats include stl, off, ply, collada, json, dict, glb, dict64, and msgpack. The file_obj parameter is an open writeable file object, a string representing the file name where to save the mesh, or None if you would like this function to return the export blob. The file_type parameter is a string representing which file type to export as. If a file name is passed, this parameter is not required. Please give the corresponding code according to the description. ",
        "response": "def export(self, file_obj=None, file_type=None, **kwargs):\n        \"\"\"\n        Export the current mesh to a file object.\n        If file_obj is a filename, file will be written there.\n\n        Supported formats are stl, off, ply, collada, json, dict, glb,\n        dict64, msgpack.\n\n        Parameters\n        ---------\n        file_obj: open writeable file object\n          str, file name where to save the mesh\n          None, if you would like this function to return the export blob\n        file_type: str\n          Which file type to export as.\n          If file name is passed this is not required\n        \"\"\"\n        return export_mesh(mesh=self,\n                           file_obj=file_obj,\n                           file_type=file_type,\n                           **kwargs)"
    },
    {
        "instruction": "This Python function takes a URL and modifies it by adding or replacing a query parameter with the given parameter name and value. It splits the URL into its components, parses the query string into a dictionary, adds the new parameter to the dictionary, and then encodes the updated dictionary into a new query string. Finally, it returns the modified URL by rejoining the components with the new query string. Please give the corresponding code according to the description. ",
        "response": "def set_query_parameter(url, param_name, param_value):\n    \"\"\"Given a URL, set or replace a query parameter and return the modified URL.\n\n    Args:\n        url: a given  URL\n        param_name: the parameter name to add\n        param_value: the parameter value\n    Returns:\n        URL with the added parameter\n\n    \"\"\"\n    scheme, netloc, path, query_string, fragment = urlsplit(url)\n    query_params = parse_qs(query_string)\n\n    query_params[param_name] = [param_value]\n    new_query_string = urlencode(query_params, doseq=True)\n\n    return urlunsplit((scheme, netloc, path, new_query_string, fragment))"
    },
    {
        "instruction": "In Python, create a function that links a sensor region to another region in a network, allowing the sensor region to pass data to it. Use the \"UniformLink\" type of link, with an empty string as the link's parameter. Set the source output to \"dataOut\" and the destination input to \"bottomUpIn\". Please give the corresponding code according to the description. ",
        "response": "def createDataOutLink(network, sensorRegionName, regionName):\n  \"\"\"Link sensor region to other region so that it can pass it data.\"\"\"\n  network.link(sensorRegionName, regionName, \"UniformLink\", \"\",\n               srcOutput=\"dataOut\", destInput=\"bottomUpIn\")"
    },
    {
        "instruction": "In Python, this function takes a labeled image of a porous material partitioned into individual pore regions and finds the surface area of each region. It also optionally finds the interfacial area between adjoining regions. The resolution of the image can be specified using the voxel_size parameter. The function uses a spherical structuring element with a radius of 1 to blur the region if strel is not provided. The result is a list containing the surface area of each region, offset by 1, such that the surface area of region 1 is stored in element 0 of the list. Please give the corresponding code according to the description. ",
        "response": "def region_surface_areas(regions, voxel_size=1, strel=None):\n    r\"\"\"\n    Extracts the surface area of each region in a labeled image.\n\n    Optionally, it can also find the the interfacial area between all\n    adjoining regions.\n\n    Parameters\n    ----------\n    regions : ND-array\n        An image of the pore space partitioned into individual pore regions.\n        Note that zeros in the image will not be considered for area\n        calculation.\n    voxel_size : scalar\n        The resolution of the image, expressed as the length of one side of a\n        voxel, so the volume of a voxel would be **voxel_size**-cubed.  The\n        default is 1.\n    strel : array_like\n        The structuring element used to blur the region.  If not provided,\n        then a spherical element (or disk) with radius 1 is used.  See the\n        docstring for ``mesh_region`` for more details, as this argument is\n        passed to there.\n\n    Returns\n    -------\n    result : list\n        A list containing the surface area of each region, offset by 1, such\n        that the surface area of region 1 is stored in element 0 of the list.\n\n    \"\"\"\n    print('_'*60)\n    print('Finding surface area of each region')\n    im = regions.copy()\n    # Get 'slices' into im for each pore region\n    slices = spim.find_objects(im)\n    # Initialize arrays\n    Ps = sp.arange(1, sp.amax(im)+1)\n    sa = sp.zeros_like(Ps, dtype=float)\n    # Start extracting marching cube area from im\n    for i in tqdm(Ps):\n        reg = i - 1\n        if slices[reg] is not None:\n            s = extend_slice(slices[reg], im.shape)\n            sub_im = im[s]\n            mask_im = sub_im == i\n            mesh = mesh_region(region=mask_im, strel=strel)\n            sa[reg] = mesh_surface_area(mesh)\n    result = sa * voxel_size**2\n    return result"
    },
    {
        "instruction": "In Python, define a function that takes a string `service_name` as input. Create an exchange for events related to `service_name` using the `Exchange` class with the following parameters: `exchange_name` (a string with the format `service_name. events`), `type` (set to `'topic'`), `durable` (set to `True`), and `delivery_mode` (set to `PERSISTENT`). Return the `exchange` object. Please give the corresponding code according to the description. ",
        "response": "def get_event_exchange(service_name):\n    \"\"\" Get an exchange for ``service_name`` events.\n    \"\"\"\n    exchange_name = \"{}.events\".format(service_name)\n    exchange = Exchange(\n        exchange_name, type='topic', durable=True, delivery_mode=PERSISTENT\n    )\n\n    return exchange"
    },
    {
        "instruction": "Python: Define a function that returns a list of admin URLs for registration. Iterate through the modeladmin instances and extend the list of URLs with the result of each instance's get_admin_urls_for_registration() function. Return the final list of URLs. Please give the corresponding code according to the description. ",
        "response": "def get_admin_urls_for_registration(self):\n        \"\"\"\n        Utilised by Wagtail's 'register_admin_urls' hook to register urls for\n        used by any associated ModelAdmin instances\n        \"\"\"\n        urls = []\n        for instance in self.modeladmin_instances:\n            urls.extend(instance.get_admin_urls_for_registration())\n        return urls"
    },
    {
        "instruction": "In Python, define a function `sample` that takes a waveform generator, minimum and maximum values, and sample width as inputs. The function should normalize the waveform generator using the `normalize` function, clip it using the `hard_clip` function, and pack the samples into a generator using the `struct. pack` function. The sample width should be used to determine the format string for the `struct. pack` function. The output should be a generator of packed samples. Please give the corresponding code according to the description. ",
        "response": "def sample(generator, min=-1, max=1, width=SAMPLE_WIDTH):\n\t'''Convert audio waveform generator into packed sample generator.'''\n\t# select signed char, short, or in based on sample width\n\tfmt = { 1: '<B', 2: '<h', 4: '<i' }[width]\n\treturn (struct.pack(fmt, int(sample)) for sample in \\\n\t\t\tnormalize(hard_clip(generator, min, max),\\\n\t\t\t\tmin, max, -2**(width * 8 - 1), 2**(width * 8 - 1) - 1))"
    },
    {
        "instruction": "This Python function completes missing data for network interfaces by guessing the style of definition, applying a default overlay, and computing a MAC address depending on the hypervisor. It takes a list of dictionaries containing network interface attributes as input, along with a hypervisor name and an optional default MAC address. The function normalizes the network types, assigns a MAC address if none is provided, and applies a default overlay if the hypervisor is recognized. It then returns the list of dictionaries with the completed attributes. Please give the corresponding code according to the description. ",
        "response": "def _complete_nics(interfaces, hypervisor, dmac=None):\n    '''\n    Complete missing data for network interfaces.\n    '''\n\n    vmware_overlay = {'type': 'bridge', 'source': 'DEFAULT', 'model': 'e1000'}\n    kvm_overlay = {'type': 'bridge', 'source': 'br0', 'model': 'virtio'}\n    bhyve_overlay = {'type': 'bridge', 'source': 'bridge0', 'model': 'virtio'}\n    xen_overlay = {'type': 'bridge', 'source': 'br0', 'model': None}\n    overlays = {\n            'xen': xen_overlay,\n            'kvm': kvm_overlay,\n            'qemu': kvm_overlay,\n            'vmware': vmware_overlay,\n            'bhyve': bhyve_overlay,\n            }\n\n    def _normalize_net_types(attributes):\n        '''\n        Guess which style of definition:\n\n            bridge: br0\n\n             or\n\n            network: net0\n\n             or\n\n            type: network\n            source: net0\n        '''\n        for type_ in ['bridge', 'network']:\n            if type_ in attributes:\n                attributes['type'] = type_\n                # we want to discard the original key\n                attributes['source'] = attributes.pop(type_)\n\n        attributes['type'] = attributes.get('type', None)\n        attributes['source'] = attributes.get('source', None)\n\n    def _apply_default_overlay(attributes):\n        '''\n        Apply the default overlay to attributes\n        '''\n        for key, value in six.iteritems(overlays[hypervisor]):\n            if key not in attributes or not attributes[key]:\n                attributes[key] = value\n\n    def _assign_mac(attributes, hypervisor):\n        '''\n        Compute mac address for NIC depending on hypervisor\n        '''\n        if dmac is not None:\n            log.debug('Default MAC address is %s', dmac)\n            if salt.utils.validate.net.mac(dmac):\n                attributes['mac'] = dmac\n            else:\n                msg = 'Malformed MAC address: {0}'.format(dmac)\n                raise CommandExecutionError(msg)\n        else:\n            if hypervisor in ['qemu', 'kvm']:\n                attributes['mac'] = salt.utils.network.gen_mac(\n                    prefix='52:54:00')\n            else:\n                attributes['mac'] = salt.utils.network.gen_mac()\n\n    for interface in interfaces:\n        _normalize_net_types(interface)\n        if interface.get('mac', None) is None:\n            _assign_mac(interface, hypervisor)\n        if hypervisor in overlays:\n            _apply_default_overlay(interface)\n\n    return interfaces"
    },
    {
        "instruction": "This is a Python function that updates the keys and values in the first dictionary with those of the second, as long as the symbol matches part of the key. If the symbol is an empty string, it will simply update all keys and values in the first dictionary with those of the second. The optional argument maxadd specifies a limit on the number of entries from the second dictionary that will be added to the first. Please give the corresponding code according to the description. ",
        "response": "def _cond_update(self, first, second, symbol, maxadd = -1):\n        \"\"\"Overwrites the keys and values in the first dictionary with those\n        of the second as long as the symbol matches part of the key.\n\n        :arg maxadd: specifies a limit on the number of entries from the second\n          dict that will be added to the first.\"\"\"\n        if symbol != \"\":\n            added = 0\n            for key in second:\n                if self._symbol_in(symbol, key) and (maxadd == -1 or added <= maxadd):\n                    first[key] = second[key]\n                    added += 1\n        else:\n            first.update(second)"
    },
    {
        "instruction": "This Python function is used as a support function for writing a CSV file. It takes in a parameter, statistics, quantiles, and an optional index. The function then creates a buffer string with the parameter and index (if provided), followed by the mean, standard deviation, and Monte Carlo error statistics. It then finds the interval label from the statistics keys and adds the corresponding interval values to the buffer. Finally, it processes the quantiles and adds their values to the buffer. The function returns the completed buffer string with a newline character at the end. Please give the corresponding code according to the description. ",
        "response": "def _csv_str(self, param, stats, quantiles, index=None):\n        \"\"\"Support function for write_csv\"\"\"\n\n        buffer = param\n        if not index:\n            buffer += ', '\n        else:\n            buffer += '_' + '_'.join([str(i) for i in index]) + ', '\n\n        for stat in ('mean', 'standard deviation', 'mc error'):\n            buffer += str(stats[stat][index]) + ', '\n\n        # Index to interval label\n        iindex = [key.split()[-1] for key in stats.keys()].index('interval')\n        interval = list(stats.keys())[iindex]\n        buffer += ', '.join(stats[interval].T[index].astype(str))\n\n        # Process quantiles\n        qvalues = stats['quantiles']\n        for q in quantiles:\n            buffer += ', ' + str(qvalues[q][index])\n\n        return buffer + '\\n'"
    },
    {
        "instruction": "In Python, define a method that takes in a name and a boolean value (recurse) as input. Search for the first id that matches the given name, either locally or as a variable. Return the id found. Include a debug log statement that prints the name of the id being searched for. Please give the corresponding code according to the description. ",
        "response": "def get_id(self, name, recurse=True):\n        \"\"\"Get the first id matching ``name``. Will either be a local\n        or a var.\n\n        :name: TODO\n        :returns: TODO\n\n        \"\"\"\n        self._dlog(\"getting id '{}'\".format(name))\n        var = self._search(\"vars\", name, recurse)\n        return var"
    },
    {
        "instruction": "Build a GraphQL schema from a given AST using the `build_ast_schema` function in Python. This function takes the AST of a schema document produced by the parse function in `src/language/parser. py`. If no schema definition is provided, then it will look for types named Query and Mutation. The resulting schema has no resolve methods, so execution will use default resolvers. You can assume the produced schema is valid by setting `assume_valid` to True or that it is already a valid SDL document by setting `assume_valid_sdl` to True. Please give the corresponding code according to the description. ",
        "response": "def build_ast_schema(\n    document_ast: DocumentNode,\n    assume_valid: bool = False,\n    assume_valid_sdl: bool = False,\n) -> GraphQLSchema:\n    \"\"\"Build a GraphQL Schema from a given AST.\n\n    This takes the ast of a schema document produced by the parse function in\n    src/language/parser.py.\n\n    If no schema definition is provided, then it will look for types named Query\n    and Mutation.\n\n    Given that AST it constructs a GraphQLSchema. The resulting schema has no\n    resolve methods, so execution will use default resolvers.\n\n    When building a schema from a GraphQL service's introspection result, it might\n    be safe to assume the schema is valid. Set `assume_valid` to True to assume the\n    produced schema is valid. Set `assume_valid_sdl` to True to assume it is already\n    a valid SDL document.\n    \"\"\"\n    if not isinstance(document_ast, DocumentNode):\n        raise TypeError(\"Must provide a Document AST.\")\n\n    if not (assume_valid or assume_valid_sdl):\n        from ..validation.validate import assert_valid_sdl\n\n        assert_valid_sdl(document_ast)\n\n    schema_def: Optional[SchemaDefinitionNode] = None\n    type_defs: List[TypeDefinitionNode] = []\n    directive_defs: List[DirectiveDefinitionNode] = []\n    append_directive_def = directive_defs.append\n    for def_ in document_ast.definitions:\n        if isinstance(def_, SchemaDefinitionNode):\n            schema_def = def_\n        elif isinstance(def_, TypeDefinitionNode):\n            def_ = cast(TypeDefinitionNode, def_)\n            type_defs.append(def_)\n        elif isinstance(def_, DirectiveDefinitionNode):\n            append_directive_def(def_)\n\n    def resolve_type(type_name: str) -> GraphQLNamedType:\n        type_ = type_map.get(type_name)\n        if not type:\n            raise TypeError(f\"Type '{type_name}' not found in document.\")\n        return type_\n\n    ast_builder = ASTDefinitionBuilder(\n        assume_valid=assume_valid, resolve_type=resolve_type\n    )\n\n    type_map = {node.name.value: ast_builder.build_type(node) for node in type_defs}\n\n    if schema_def:\n        operation_types = get_operation_types(schema_def)\n    else:\n        operation_types = {\n            OperationType.QUERY: \"Query\",\n            OperationType.MUTATION: \"Mutation\",\n            OperationType.SUBSCRIPTION: \"Subscription\",\n        }\n\n    directives = [\n        ast_builder.build_directive(directive_def) for directive_def in directive_defs\n    ]\n\n    # If specified directives were not explicitly declared, add them.\n    if not any(directive.name == \"skip\" for directive in directives):\n        directives.append(GraphQLSkipDirective)\n    if not any(directive.name == \"include\" for directive in directives):\n        directives.append(GraphQLIncludeDirective)\n    if not any(directive.name == \"deprecated\" for directive in directives):\n        directives.append(GraphQLDeprecatedDirective)\n\n    query_type = operation_types.get(OperationType.QUERY)\n    mutation_type = operation_types.get(OperationType.MUTATION)\n    subscription_type = operation_types.get(OperationType.SUBSCRIPTION)\n    return GraphQLSchema(\n        # Note: While this could make early assertions to get the correctly\n        # typed values below, that would throw immediately while type system\n        # validation with `validate_schema()` will produce more actionable results.\n        query=cast(GraphQLObjectType, type_map.get(query_type)) if query_type else None,\n        mutation=cast(GraphQLObjectType, type_map.get(mutation_type))\n        if mutation_type\n        else None,\n        subscription=cast(GraphQLObjectType, type_map.get(subscription_type))\n        if subscription_type\n        else None,\n        types=list(type_map.values()),\n        directives=directives,\n        ast_node=schema_def,\n        assume_valid=assume_valid,\n    )"
    },
    {
        "instruction": "In Python, define a function called \"_to_api_value\" that takes in \"attribute_type\" and \"value\" as arguments. If \"value\" is empty, return None. If \"attribute_type\" is an instance of \"properties. Instance\", return the value of \"value. to_api()\". If \"attribute_type\" is an instance of \"properties. List\", return the parsed value of \"value\" using the \"_parse_api_value_list\" method. Otherwise, serialize the \"value\" using \"attribute_type. serialize\" and return the result. Please give the corresponding code according to the description. ",
        "response": "def _to_api_value(self, attribute_type, value):\n        \"\"\"Return a parsed value for the API.\"\"\"\n\n        if not value:\n            return None\n\n        if isinstance(attribute_type, properties.Instance):\n            return value.to_api()\n\n        if isinstance(attribute_type, properties.List):\n            return self._parse_api_value_list(value)\n\n        return attribute_type.serialize(value)"
    },
    {
        "instruction": "This Python function checks in files to a repository specified by the given URL. It takes in a list of file paths and an optional commit message. If the repository is local, it creates a new version and adds the items to it. If the repository is remote, it uploads the files to it. It then saves the changes with the given commit message or a default one if none is provided. The progress of the check-in is printed to the console. Please give the corresponding code according to the description. ",
        "response": "def checkin(url, files, message=None):\n    \"\"\"\n    Check in files to a repository.\n\n    :param url: URL of repo to check files into.\n    :param message: Optional commit message.\n    \"\"\"\n    from grit import Repo, Item\n    r = Repo(url)\n\n    if not files:\n        raise GritError('No files')\n\n    def _write(path):\n        item = Item.from_path(repo=r, path=path)\n        if r.isLocal():\n            v.addItem(item=item)\n        else:\n            r.upload(filename=os.path.basename(path), filedata=open(path, 'r').read())\n\n    if r.isLocal():\n        v = r.addVersion()\n    count = 1\n    total = len(files) \n    while count <= total:\n        print '[%s/%s] %0.2f%%' %(count, total, (float(count) / total) * 100), '*'*count, '\\r',\n        _write(os.path.abspath(files[count-1]))\n        count += 1\n        sys.stdout.flush()\n    if message is None:\n        message = 'Publishing %s' % ', '.join(files)\n    if r.isLocal():\n        v.save(message=message)\n    print"
    },
    {
        "instruction": "In Python, define a function that checks if a token type hint is valid and supported. If the token type hint is not supported, raise an UnsupportedTokenTypeError with the request as an argument. Please give the corresponding code according to the description. ",
        "response": "def _raise_on_unsupported_token(self, request):\n        \"\"\"Raise on unsupported tokens.\"\"\"\n        if (request.token_type_hint and\n            request.token_type_hint in self.valid_token_types and\n            request.token_type_hint not in self.supported_token_types):\n            raise UnsupportedTokenTypeError(request=request)"
    },
    {
        "instruction": "In Python, create a function called \"get_workspace_activities\" that takes in two parameters, \"brain\" and \"limit\" (which is set to 1 by default). The function should use the \"IMicroblogTool\" query utility to retrieve the context values of the \"brain\" object, limited by the \"limit\" parameter. It should then return a list of dictionaries, where each dictionary represents an item in the retrieved \"items\" list. Each dictionary should have a \"subject\" key with the value of the item's creator, a \"verb\" key with the value of \"published\", an \"object\" key with the value of the item's text, and a \"time\" key with a nested dictionary containing a \"datetime\" key with the value of the item's date in the format of \"YYYY-MM-DD\" and a \"title\" key with the value of the item's date in the format of \"DD Month YYYY, HH:MM\". The list should be sorted in reverse chronological order. Please give the corresponding code according to the description. ",
        "response": "def get_workspace_activities(brain, limit=1):\n    \"\"\" Return the workspace activities sorted by reverse chronological\n    order\n\n    Regarding the time value:\n     - the datetime value contains the time in international format\n       (machine readable)\n     - the title value contains the absolute date and time of the post\n    \"\"\"\n    mb = queryUtility(IMicroblogTool)\n    items = mb.context_values(brain.getObject(), limit=limit)\n    return [\n        {\n            'subject': item.creator,\n            'verb': 'published',\n            'object': item.text,\n            'time': {\n                'datetime': item.date.strftime('%Y-%m-%d'),\n                'title': item.date.strftime('%d %B %Y, %H:%M'),\n            }\n        } for item in items\n    ]"
    },
    {
        "instruction": "Python: Define a decorator that marks a method as a CLI command. This decorator can be applied with or without arguments. If applied with arguments, the arguments will be stored as attributes of the decorated method. Please give the corresponding code according to the description. ",
        "response": "def command(method=None, **kwargs):\n    \"\"\"Mark this method as a CLI command.\n\n    This will only have any meaningful effect in methods that are members of a\n    Resource subclass.\n    \"\"\"\n    # Create the actual decorator to be applied.\n    # This is done in such a way to make `@resources.command`,\n    # `@resources.command()`, and `@resources.command(foo='bar')` all work.\n    def actual_decorator(method):\n        method._cli_command = True\n        method._cli_command_attrs = kwargs\n        return method\n\n    # If we got the method straight-up, apply the decorator and return\n    # the decorated method; otherwise, return the actual decorator for\n    # the Python interpreter to apply.\n    if method and isinstance(method, types.FunctionType):\n        return actual_decorator(method)\n    else:\n        return actual_decorator"
    },
    {
        "instruction": "In Python, the function `set_security_groups` modifies the set of security groups in effect for a mount target. It takes in the `mounttargetid` (string) which is the ID of the mount target whose security groups will be modified, and `securitygroup` (list[string]) which is a list of no more than 5 VPC security group IDs. The function then uses boto3 to modify the mount target security groups by calling `modify_mount_target_security_groups` on the client object. The function also takes in optional arguments such as `keyid`, `key`, `profile`, and `region`. Please give the corresponding code according to the description. ",
        "response": "def set_security_groups(mounttargetid,\n                        securitygroup,\n                        keyid=None,\n                        key=None,\n                        profile=None,\n                        region=None,\n                        **kwargs):\n    '''\n    Modifies the set of security groups in effect for a mount target\n\n    mounttargetid\n        (string) - ID of the mount target whose security groups will be modified\n\n    securitygroups\n        (list[string]) - list of no more than 5 VPC security group IDs.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt 'my-minion' boto_efs.set_security_groups my-mount-target-id my-sec-group\n    '''\n\n    client = _get_conn(key=key, keyid=keyid, profile=profile, region=region)\n    client.modify_mount_target_security_groups(MountTargetId=mounttargetid,\n                                               SecurityGroups=securitygroup)"
    },
    {
        "instruction": "In Python, define a method named \"equal\" that takes in two file paths as arguments. The method should read the contents of the files located at the given paths and compare them byte by byte. Return True if the contents are the same, False otherwise. Please give the corresponding code according to the description. ",
        "response": "def equal(self, path_a, path_b):\n        \"\"\"\n        compare if a and b have the same bytes\n        \"\"\"\n        content_a, _ = self.get_bytes(path_a)\n        content_b, _ = self.get_bytes(path_b)\n\n        return content_a == content_b"
    },
    {
        "instruction": "In Python, define a function that selects rows from a table where the given field is an instance of the given type. The function should take four arguments: the table, the field to be checked, the type to check against, and a boolean flag (complement) that indicates whether to return the complement of the selected rows. The function should call another function (selectop) that performs the actual selection operation and returns the selected rows. Please give the corresponding code according to the description. ",
        "response": "def selectisinstance(table, field, value, complement=False):\n    \"\"\"Select rows where the given field is an instance of the given type.\"\"\"\n\n    return selectop(table, field, value, isinstance, complement=complement)"
    },
    {
        "instruction": "This is a Python function that returns the value of a specified hardware virtualization boolean property. The function takes in a property type to query, which should be an instance of the `HWVirtExPropertyType` class. If the input property is not of the correct type, a `TypeError` is raised. The function then calls the `getHWVirtExProperty` method and returns the resulting value. If the input property is invalid, an `OleErrorInvalidarg` is raised. Please give the corresponding code according to the description. ",
        "response": "def get_hw_virt_ex_property(self, property_p):\n        \"\"\"Returns the value of the specified hardware virtualization boolean property.\n\n        in property_p of type :class:`HWVirtExPropertyType`\n            Property type to query.\n\n        return value of type bool\n            Property value.\n\n        raises :class:`OleErrorInvalidarg`\n            Invalid property.\n        \n        \"\"\"\n        if not isinstance(property_p, HWVirtExPropertyType):\n            raise TypeError(\"property_p can only be an instance of type HWVirtExPropertyType\")\n        value = self._call(\"getHWVirtExProperty\",\n                     in_p=[property_p])\n        return value"
    },
    {
        "instruction": "Define an asynchronous Python function that runs tasks attached to an instance. Get the tasks attached to the instance and gather them using asyncio. If any of the tasks are cancelled, catch the CancelledError exception and pass. Please give the corresponding code according to the description. ",
        "response": "async def run_tasks(self):\n        \"\"\" Run the tasks attached to the instance \"\"\"\n        tasks = self.get_tasks()\n        self._gathered_tasks = asyncio.gather(*tasks, loop=self.loop)\n        try:\n            await self._gathered_tasks\n        except CancelledError:\n            pass"
    },
    {
        "instruction": "In Python, the function `rcptto` sends an LMTP RCPT TO command to the server and processes the response. It takes in a list of recipients as input. For each recipient, it sends a command to the server and reads the response. If the response does not start with '250', it raises an error. The function also appends the recipient to a list of recipients. To pass a different envelope recipient from the DSPAM user account name, use the --rcpt-to parameter in client_args at mailfrom(). Please give the corresponding code according to the description. ",
        "response": "def rcptto(self, recipients):\n        \"\"\"\n        Send LMTP RCPT TO command, and process the server response.\n\n        The DSPAM server expects to find one or more valid DSPAM users as\n        envelope recipients. The set recipient will be the user DSPAM\n        processes mail for.\n\n        When you need want DSPAM to deliver the message itself, and need to\n        pass the server an envelope recipient for this that differs from the\n        DSPAM user account name, use the --rcpt-to parameter in client_args\n        at mailfrom().\n\n        args:\n        recipients -- A list of recipients\n\n        \"\"\"\n        for rcpt in recipients:\n            self._send('RCPT TO:<{}>\\r\\n'.format(rcpt))\n            resp = self._read()\n            if not resp.startswith('250'):\n                raise DspamClientError(\n                    'Unexpected server response at RCPT TO for '\n                    'recipient {}: {}'.format(rcpt, resp))\n            self._recipients.append(rcpt)"
    },
    {
        "instruction": "In Python, define a method that creates a database with the given name on the specified instance. Optional parameters for character set and collation can also be provided. The method should call the create_database method of the instance with the given parameters and return its result. Please give the corresponding code according to the description. ",
        "response": "def create_database(self, instance, name, character_set=None,\n            collate=None):\n        \"\"\"Creates a database with the specified name on the given instance.\"\"\"\n        return instance.create_database(name, character_set=character_set,\n                collate=collate)"
    },
    {
        "instruction": "In Python, define a method called \"clean_up\" that checks if the \"tunnel\" is open. If it is, print \"Closing tunnel. . . \", close the tunnel, and print \"Done. \". If it is not open, do nothing. This method is used to clean up child and orphaned processes. Please give the corresponding code according to the description. ",
        "response": "def clean_up(self):\n        ''' Clean up child and orphaned processes. '''\n        if self.tunnel.is_open:\n            print 'Closing tunnel...'\n            self.tunnel.close()\n            print 'Done.'\n        else:\n            pass"
    },
    {
        "instruction": "In Python, define a method named \"open\" that opens the lvm, vg_t and pv_t handle. This method should only be used if you are doing operations using the ctypes function wrappers in conversion. py. If the PV handle fails to initialize, raise a HandleError. Please give the corresponding code according to the description. ",
        "response": "def open(self):\n        \"\"\"\n        Obtains the lvm, vg_t and pv_t handle. Usually you would never need to use this\n        method unless you are doing operations using the ctypes function wrappers in\n        conversion.py\n\n        *Raises:*\n\n        *       HandleError\n        \"\"\"\n        self.vg.open()\n        self.__pvh = lvm_pv_from_uuid(self.vg.handle, self.uuid)\n        if not bool(self.__pvh):\n            raise HandleError(\"Failed to initialize PV Handle.\")"
    },
    {
        "instruction": "In Python, this function prints the download results to the console. It takes in two arguments, the filename and the download status. It formats the output using color coding to indicate the status of the download. If the status is \"Success\", the status is printed in green, if it is \"Skipped\", it is printed in yellow, and if it is any other value, it is printed in red. The function then prints the filename and the status to the console using the formatted output. Please give the corresponding code according to the description. ",
        "response": "def _print_results(file, status):\n        \"\"\"Print the download results.\n\n        Args:\n            file (str): The filename.\n            status (str): The file download status.\n        \"\"\"\n\n        file_color = c.Fore.GREEN\n        status_color = c.Fore.RED\n        if status == 'Success':\n            status_color = c.Fore.GREEN\n        elif status == 'Skipped':\n            status_color = c.Fore.YELLOW\n        print(\n            '{}{!s:<13}{}{!s:<35}{}{!s:<8}{}{}'.format(\n                c.Fore.CYAN,\n                'Downloading:',\n                file_color,\n                file,\n                c.Fore.CYAN,\n                'Status:',\n                status_color,\n                status,\n            )\n        )"
    },
    {
        "instruction": "In Python, the function `LogLikelihood` computes the log likelihood of the given data. It first checks if the length of the data is less than the number of probabilities in the distribution, and returns negative infinity if it is. It then selects a random vector of probabilities from the distribution and computes the log probability of the data using the formula log(x[:m]) * data. Finally, it returns the sum of the log probabilities as a float. Please give the corresponding code according to the description. ",
        "response": "def LogLikelihood(self, data):\n        \"\"\"Computes the log likelihood of the data.\n\n        Selects a random vector of probabilities from this distribution.\n\n        Returns: float log probability\n        \"\"\"\n        m = len(data)\n        if self.n < m:\n            return float('-inf')\n\n        x = self.Random()\n        y = numpy.log(x[:m]) * data\n        return y.sum()"
    },
    {
        "instruction": "In Python, define a class method that reads torrent metainfo from a file. The method takes in the file path and a boolean flag to validate the new Torrent object. It raises a `ReadError` if reading from the file path fails, a `ParseError` if the file does not contain a valid bencoded byte string, and a `MetainfoError` if the read metainfo is invalid and the validate flag is True. It returns a new Torrent object. The method reads the file in binary mode and uses the `read_stream` method to read the contents of the file. Please give the corresponding code according to the description. ",
        "response": "def read(cls, filepath, validate=True):\n        \"\"\"\n        Read torrent metainfo from file\n\n        :param filepath: Path of the torrent file\n        :param bool validate: Whether to run :meth:`validate` on the new Torrent\n            object\n\n        :raises ReadError: if reading from `filepath` fails\n        :raises ParseError: if `filepath` does not contain a valid bencoded byte\n            string\n        :raises MetainfoError: if `validate` is `True` and the read metainfo is\n            invalid\n\n        :return: New Torrent object\n        \"\"\"\n        try:\n            with open(filepath, 'rb') as fh:\n                return cls.read_stream(fh)\n        except (OSError, error.ReadError) as e:\n            raise error.ReadError(e.errno, filepath)\n        except error.ParseError:\n            raise error.ParseError(filepath)"
    },
    {
        "instruction": "Python - Define a function called \"get_configured_provider\" that returns the first configured provider instance. The function checks if a provider is configured by checking if the provider has all the necessary keys. If the provider has all the necessary keys, return the provider details. If not, continue to the next provider. If no provider is found, return False. The function checks for three types of providers: those with subscription_id, tenant, client_id, and secret; those with subscription_id, username, and password; and those with only subscription_id (using MSI style credentials). Please give the corresponding code according to the description. ",
        "response": "def get_configured_provider():\n    '''\n    Return the first configured provider instance.\n    '''\n    def __is_provider_configured(opts, provider, required_keys=()):\n        '''\n        Check if the provider is configured.\n        '''\n        if ':' in provider:\n            alias, driver = provider.split(':')\n            if alias not in opts['providers']:\n                return False\n            if driver not in opts['providers'][alias]:\n                return False\n            for key in required_keys:\n                if opts['providers'][alias][driver].get(key, None) is None:\n                    return False\n            return opts['providers'][alias][driver]\n\n        for alias, drivers in six.iteritems(opts['providers']):\n            for driver, provider_details in six.iteritems(drivers):\n                if driver != provider:\n                    continue\n\n                skip_provider = False\n                for key in required_keys:\n                    if provider_details.get(key, None) is None:\n                        # This provider does not include all necessary keys,\n                        # continue to next one.\n                        skip_provider = True\n                        break\n\n                if skip_provider:\n                    continue\n\n                return provider_details\n        return False\n\n    provider = __is_provider_configured(\n        __opts__,\n        __active_provider_name__ or __virtualname__,\n        ('subscription_id', 'tenant', 'client_id', 'secret'),\n    )\n\n    if provider is False:\n        provider = __is_provider_configured(\n            __opts__,\n            __active_provider_name__ or __virtualname__,\n            ('subscription_id', 'username', 'password'),\n        )\n\n    if provider is False:\n        # check if using MSI style credentials...\n        provider = config.is_provider_configured(\n            __opts__,\n            __active_provider_name__ or __virtualname__,\n            required_keys=('subscription_id',),\n        )\n\n    return provider"
    },
    {
        "instruction": "In Python, define a method that sets up a timeout for an HTTP request. Convert the input timeout in seconds to milliseconds, and pass it to the `_WinHttpRequest. _SetTimeouts` method along with three other timeout values. Please give the corresponding code according to the description. ",
        "response": "def set_timeout(self, timeout_in_seconds):\n        ''' Sets up the timeout for the request. '''\n        timeout_in_ms = int(timeout_in_seconds * 1000)\n        _WinHttpRequest._SetTimeouts(\n            self, 0, timeout_in_ms, timeout_in_ms, timeout_in_ms)"
    },
    {
        "instruction": "In Python, define a method that takes in a course ID and a new SIS course ID. Use the Canvas API to update the SIS ID for the course with the given course ID, and return the updated course data. Please give the corresponding code according to the description. ",
        "response": "def update_sis_id(self, course_id, sis_course_id):\n        \"\"\"\n        Updates the SIS ID for the course identified by the passed course ID.\n\n        https://canvas.instructure.com/doc/api/courses.html#method.courses.update\n        \"\"\"\n        url = COURSES_API.format(course_id)\n        body = {\"course\": {\"sis_course_id\": sis_course_id}}\n        return CanvasCourse(data=self._put_resource(url, body))"
    },
    {
        "instruction": "Add an instruction to this Python function to award a project bid. The function sends a PUT request to the API endpoint with the bid_id and the action to award the bid. It then returns the status of the bid. If the response status code is not 200, it raises a BidNotAwardedException with the error message, error code, and request ID returned by the API. Instruction: Call this function with a session object and the bid_id of the bid to be awarded. The function will send a PUT request to the API endpoint to award the bid and return the status of the bid. If the bid cannot be awarded, it will raise a BidNotAwardedException with the error message, error code, and request ID returned by the API. Please give the corresponding code according to the description. ",
        "response": "def award_project_bid(session, bid_id):\n    \"\"\"\n    Award a bid on a project\n    \"\"\"\n    headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n    bid_data = {\n        'action': 'award'\n    }\n    # POST /api/projects/0.1/bids/{bid_id}/?action=award\n    endpoint = 'bids/{}'.format(bid_id)\n    response = make_put_request(session, endpoint, headers=headers,\n                                params_data=bid_data)\n    json_data = response.json()\n    if response.status_code == 200:\n        return json_data['status']\n    else:\n        json_data = response.json()\n        raise BidNotAwardedException(\n            message=json_data['message'],\n            error_code=json_data['error_code'],\n            request_id=json_data['request_id']\n        )"
    },
    {
        "instruction": "In Python, define a function called \"deserialize\" that takes in a string called \"msg\". The function should log a debug message indicating that it is deserializing the input. Then, use the json. loads() method to convert the input string into a Python object and return it. Please give the corresponding code according to the description. ",
        "response": "def deserialize(self, msg):\n        'deserialize output to a Python object'\n        self.logger.debug('deserializing %s', msg)\n        return json.loads(msg)"
    },
    {
        "instruction": "In Python, define a function called \"do_mkdir\" that takes a string \"line\" as input. The function creates one or more directories specified in the input string. For each directory, resolve the path and use the \"mkdir\" function to create it. If the directory cannot be created, print an error message. Please give the corresponding code according to the description. ",
        "response": "def do_mkdir(self, line):\n        \"\"\"mkdir DIRECTORY...\n\n           Creates one or more directories.\n        \"\"\"\n        args = self.line_to_args(line)\n        for filename in args:\n            filename = resolve_path(filename)\n            if not mkdir(filename):\n                print_err('Unable to create %s' % filename)"
    },
    {
        "instruction": "In Python, the `prune_clusters` function takes a list of clusters, an index, and an optional integer `n` as input. The function removes clusters from the list that have fewer than `n` elements. It then updates the index by removing the clusters that were deleted from the list of clusters. Finally, the function returns the pruned list of clusters and the updated index. Please give the corresponding code according to the description. ",
        "response": "def prune_clusters(clusters, index, n=3):\n    \"\"\"\n    Delete clusters with fewer than n elements.\n    \"\"\"\n    torem = set(c for c in clusters if c.size < n)\n    pruned_clusters = [c for c in clusters if c.size >= n]\n    terms_torem = []\n    for term, clusters in index.items():\n        index[term] = clusters - torem\n        if len(index[term]) == 0:\n            terms_torem.append(term)\n    for t in terms_torem:\n        del index[t]\n    return pruned_clusters, index"
    },
    {
        "instruction": "Iterate through all derived contracts, detect unused state variables in each contract, and generate a JSON result for each contract that has unused state variables. The JSON result should include a string containing the name, source mapping, and contract name of each unused variable, and a list of the unused variables. Finally, return a list of all JSON results for all contracts that have unused state variables. This is Python code. Please give the corresponding code according to the description. ",
        "response": "def _detect(self):\n        \"\"\" Detect unused state variables\n        \"\"\"\n        results = []\n        for c in self.slither.contracts_derived:\n            unusedVars = self.detect_unused(c)\n            if unusedVars:\n                info = ''\n                for var in unusedVars:\n                    info += \"{}.{} ({}) is never used in {}\\n\".format(var.contract.name,\n                                                                      var.name,\n                                                                      var.source_mapping_str,\n                                                                      c.name)\n\n\n                json = self.generate_json_result(info)\n                self.add_variables_to_json(unusedVars, json)\n                results.append(json)\n\n        return results"
    },
    {
        "instruction": "In Python, this function updates configuration files according to the current in-memory SExtractor configuration. It writes the filter configuration file, the parameter list file, the NNW configuration file, and the main configuration file. The filter configuration file is written first, followed by the parameter list file, the NNW configuration file, and the main configuration file. The function writes the values of the configuration keys to the main configuration file, skipping special keys and formatting the output to include a comment for each key. Please give the corresponding code according to the description. ",
        "response": "def update_config(self):\n        \"\"\"\n        Update the configuration files according to the current\n        in-memory SExtractor configuration.\n        \"\"\"\n\n        # -- Write filter configuration file\n\n        # First check the filter itself\n\n        filter = self.config['FILTER_MASK']\n        rows = len(filter)\n        cols = len(filter[0])   # May raise ValueError, OK\n\n        filter_f = __builtin__.open(self.config['FILTER_NAME'], 'w')\n        filter_f.write(\"CONV NORM\\n\")\n        filter_f.write(\"# %dx%d Generated from sextractor.py module.\\n\" %\n                       (rows, cols))\n        for row in filter:\n            filter_f.write(\" \".join(map(repr, row)))\n            filter_f.write(\"\\n\")\n\n        filter_f.close()\n\n        # -- Write parameter list file\n\n        parameters_f = __builtin__.open(self.config['PARAMETERS_NAME'], 'w')\n        for parameter in self.config['PARAMETERS_LIST']:\n            print(parameter, file=parameters_f)\n\n        parameters_f.close()\n\n        # -- Write NNW configuration file\n\n        nnw_f = __builtin__.open(self.config['STARNNW_NAME'], 'w')\n        nnw_f.write(nnw_config)\n        nnw_f.close()\n\n        # -- Write main configuration file\n\n        main_f = __builtin__.open(self.config['CONFIG_FILE'], 'w')\n\n        for key in self.config.keys():\n            if (key in SExtractor._SE_config_special_keys):\n                continue\n\n            if (key == \"PHOT_AUTOPARAMS\"):  # tuple instead of a single value\n                value = \" \".join(map(str, self.config[key]))\n            else:\n                value = str(self.config[key])\n\n            print((\"%-16s       %-16s # %s\" % (key, value, SExtractor._SE_config[key]['comment'])), file=main_f)\n\n        main_f.close()"
    },
    {
        "instruction": "If the secondary_arg is list-like, check if its length is equal to the length of the states list. If not, raise a ValueError. Otherwise, return the secondary_arg. If it is not list-like, create a new list with the same value as secondary_arg repeated for the length of the states list, and return it. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _broadcast_maybelist_arg(states, secondary_arg, name):\n  \"\"\"Broadcast a listable secondary_arg to that of states.\"\"\"\n  if _is_list_like(secondary_arg):\n    if len(secondary_arg) != len(states):\n      raise ValueError('Argument `%s` was a list of different length ({}) than '\n                       '`states` ({})'.format(name, len(states)))\n  else:\n    secondary_arg = [secondary_arg] * len(states)\n\n  return secondary_arg"
    },
    {
        "instruction": "In Python, this function extracts relevant Spotlight entries by iterating through the UserShortcuts dictionary and extracting the LAST_USED, DISPLAY_NAME, and PATH values. It creates a PlistTimeEventData object and sets its attributes using the extracted values. Then it creates a PythonDatetimeEvent object using the datetime_value and TIME_DESCRIPTION_WRITTEN, and produces an event with the event_data using ProduceEventWithEventData method of parser_mediator. Please give the corresponding code according to the description. ",
        "response": "def GetEntries(self, parser_mediator, match=None, **unused_kwargs):\n    \"\"\"Extracts relevant Spotlight entries.\n\n    Args:\n      parser_mediator (ParserMediator): mediates interactions between parsers\n          and other components, such as storage and dfvfs.\n      match (Optional[dict[str: object]]): keys extracted from PLIST_KEYS.\n    \"\"\"\n    shortcuts = match.get('UserShortcuts', {})\n    for search_text, data in iter(shortcuts.items()):\n      datetime_value = data.get('LAST_USED', None)\n      if not datetime_value:\n        continue\n\n      display_name = data.get('DISPLAY_NAME', '<DISPLAY_NAME>')\n      path = data.get('PATH', '<PATH>')\n\n      event_data = plist_event.PlistTimeEventData()\n      event_data.desc = (\n          'Spotlight term searched \"{0:s}\" associate to {1:s} ({2:s})').format(\n              search_text, display_name, path)\n      event_data.key = search_text\n      event_data.root = '/UserShortcuts'\n\n      event = time_events.PythonDatetimeEvent(\n          datetime_value, definitions.TIME_DESCRIPTION_WRITTEN)\n      parser_mediator.ProduceEventWithEventData(event, event_data)"
    },
    {
        "instruction": "Load a configuration file into default settings. If the given configuration file path does not exist, log a warning message and use default settings. Read the configuration file in *. ini format using configparser module. Check if the configuration file has a section named 'main'. If it does not exist, raise a ValueError with a message. Iterate through all the key-value pairs in the 'main' section of the configuration file and set the corresponding key to the upper case of the key and its value to the given value. Return. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def load_config(config_file='~/.stancache.ini'):\n    \"\"\" Load config file into default settings\n    \"\"\"\n    if not os.path.exists(config_file):\n        logging.warning('Config file does not exist: {}. Using default settings.'.format(config_file))\n        return\n    ## get user-level config in *.ini format\n    config = configparser.ConfigParser()\n    config.read(config_file)\n    if not config.has_section('main'):\n        raise ValueError('Config file {} has no section \"main\"'.format(config_file))\n    for (key, val) in config.items('main'):\n        _set_value(key.upper(), val)\n    return"
    },
    {
        "instruction": "In Python, define a function called \"update_portal\" that updates a device portal object by sending a PUT request to the Exosite Portals API. The function takes in a portal object as a parameter, which will completely overwrite the existing portal. The function first sets the headers for the request, including the user agent and authentication, and then sends the PUT request with the updated portal object. If the request is successful, the function returns the updated portal object in JSON format. If the request is not successful, the function prints an error message and raises an exception. Please give the corresponding code according to the description. ",
        "response": "def update_portal(self, portal_obj):\n        \"\"\" Implements the Update device Portals API.\n\n            This function is extremely dangerous. The portal object\n            you pass in will completely overwrite the portal.\n            \n            http://docs.exosite.com/portals/#update-portal\n        \"\"\"\n        headers = {\n                'User-Agent': self.user_agent(),\n        }\n        headers.update(self.headers())\n\n        r = requests.put(   self.portals_url()+'/portals/'+self.portal_id(), \n                            data=json.dumps(portal_obj),\n                            headers=headers,\n                            auth=self.auth())\n        if HTTP_STATUS.OK == r.status_code:\n            return r.json()\n        else:\n            print(\"update_portal: Something went wrong: <{0}>: {1}\".format(\n                        r.status_code, r.reason))\n            r.raise_for_status()"
    },
    {
        "instruction": "This Python function deletes a file in a GitHub repository. It requires the path of the file, the commit message, and the SHA of the file being replaced. The branch name can be specified, but if it is not, the repository's default branch is used. The committer and author can also be specified as InputGitAuthor objects, but if they are not, the authenticated user's information will be used. The function returns a dictionary containing the commit and the content, which is set to None. Please give the corresponding code according to the description. ",
        "response": "def delete_file(self, path, message, sha,\n                    branch=github.GithubObject.NotSet,\n                    committer=github.GithubObject.NotSet,\n                    author=github.GithubObject.NotSet):\n        \"\"\"This method deletes a file in a repository\n\n        :calls: `DELETE /repos/:owner/:repo/contents/:path <https://developer.github.com/v3/repos/contents/#delete-a-file>`_\n        :param path: string, Required. The content path.\n        :param message: string, Required. The commit message.\n        :param sha: string, Required. The blob SHA of the file being replaced.\n        :param branch: string. The branch name. Default: the repository’s default branch (usually master)\n        :param committer: InputGitAuthor, (optional), if no information is given the authenticated user's information will be used. You must specify both a name and email.\n        :param author: InputGitAuthor, (optional), if omitted this will be filled in with committer information. If passed, you must specify both a name and email.\n        :rtype: {\n            'content': :class:`null <github.GithubObject.NotSet>`:,\n            'commit': :class:`Commit <github.Commit.Commit>`}\n        \"\"\"\n        assert isinstance(path, (str, unicode)),                   \\\n            'path must be str/unicode object'\n        assert isinstance(message, (str, unicode)),                \\\n            'message must be str/unicode object'\n        assert isinstance(sha, (str, unicode)),                    \\\n            'sha must be a str/unicode object'\n        assert branch is github.GithubObject.NotSet                \\\n            or isinstance(branch, (str, unicode)),                 \\\n            'branch must be a str/unicode object'\n        assert author is github.GithubObject.NotSet                \\\n            or isinstance(author, github.InputGitAuthor),          \\\n            'author must be a github.InputGitAuthor object'\n        assert committer is github.GithubObject.NotSet             \\\n            or isinstance(committer, github.InputGitAuthor),       \\\n            'committer must be a github.InputGitAuthor object'\n\n        url_parameters = {'message': message, 'sha': sha}\n        if branch is not github.GithubObject.NotSet:\n            url_parameters['branch'] = branch\n        if author is not github.GithubObject.NotSet:\n            url_parameters[\"author\"] = author._identity\n        if committer is not github.GithubObject.NotSet:\n            url_parameters[\"committer\"] = committer._identity\n\n        headers, data = self._requester.requestJsonAndCheck(\n            \"DELETE\",\n            self.url + \"/contents/\" + urllib.quote(path),\n            input=url_parameters\n        )\n\n        return {'commit': github.Commit.Commit(self._requester, headers, data[\"commit\"], completed=True),\n                'content': github.GithubObject.NotSet}"
    },
    {
        "instruction": "In Python, define a function named `_determine_base_url` that takes in two parameters: `document` and `page_url`. The function looks for a `<base>` tag in the HTML `document` and returns its `href` attribute value if it exists. If there is no `<base>` tag or it does not have a valid `href` attribute, the `page_url` is returned as the base URL. The input `document` is expected to be an HTML document representation, and the function uses the `html5lib. parse()` method. Please give the corresponding code according to the description. ",
        "response": "def _determine_base_url(document, page_url):\n    \"\"\"Determine the HTML document's base URL.\n\n    This looks for a ``<base>`` tag in the HTML document. If present, its href\n    attribute denotes the base URL of anchor tags in the document. If there is\n    no such tag (or if it does not have a valid href attribute), the HTML\n    file's URL is used as the base URL.\n\n    :param document: An HTML document representation. The current\n        implementation expects the result of ``html5lib.parse()``.\n    :param page_url: The URL of the HTML document.\n    \"\"\"\n    for base in document.findall(\".//base\"):\n        href = base.get(\"href\")\n        if href is not None:\n            return href\n    return page_url"
    },
    {
        "instruction": "In Python, this function handles a successful response to a roster request. It checks if the payload is not None and verifies the roster result for each item. If the payload is not None, it creates a Roster object with the items and version from the payload. Finally, it puts a RosterReceivedEvent with the roster object in the event queue. Please give the corresponding code according to the description. ",
        "response": "def _get_success(self, stanza):\n        \"\"\"Handle successful response to the roster request.\n        \"\"\"\n        payload = stanza.get_payload(RosterPayload)\n        if payload is None:\n            if \"versioning\" in self.server_features and self.roster:\n                logger.debug(\"Server will send roster delta in pushes\")\n            else:\n                logger.warning(\"Bad roster response (no payload)\")\n                self._event_queue.put(RosterNotReceivedEvent(self, stanza))\n                return\n        else:\n            items = list(payload)\n            for item in items:\n                item.verify_roster_result(True)\n            self.roster = Roster(items, payload.version)\n        self._event_queue.put(RosterReceivedEvent(self, self.roster))"
    },
    {
        "instruction": "In Python, the function `do_verify` verifies the integrity of a MAR file. It reads the file in binary mode and checks various parts of the file, such as signature algorithms and additional block sections. If there are any errors, it prints them and exits with an error code. If keyfiles are provided, it attempts to get the keys and verify the file using those keys. If verification is successful, it prints \"Verification OK\" and returns True. If verification fails, it prints \"Verification failed\" and exits with an error code. If no keyfiles are provided, it prints \"Verification OK\" and returns True. Please give the corresponding code according to the description. ",
        "response": "def do_verify(marfile, keyfiles=None):\n    \"\"\"Verify the MAR file.\"\"\"\n    try:\n        with open(marfile, 'rb') as f:\n            with MarReader(f) as m:\n                # Check various parts of the mar file\n                # e.g. signature algorithms and additional block sections\n                errors = m.get_errors()\n                if errors:\n                    print(\"File is not well formed: {}\".format(errors))\n                    sys.exit(1)\n\n                if keyfiles:\n                    try:\n                        keys = get_keys(keyfiles, m.signature_type)\n                    except ValueError as e:\n                        print(e)\n                        sys.exit(1)\n\n                    if any(m.verify(key) for key in keys):\n                        print(\"Verification OK\")\n                        return True\n                    else:\n                        print(\"Verification failed\")\n                        sys.exit(1)\n                else:\n                    print(\"Verification OK\")\n                    return True\n\n    except Exception as e:\n        print(\"Error opening or parsing file: {}\".format(e))\n        sys.exit(1)"
    },
    {
        "instruction": "In Python, validate the given IP address to ensure it can be used as an RPC server address. If the IP address is not a valid IPv4 or IPv6 address, raise an ApplicationException with a description indicating that the IP address is invalid. Otherwise, return the IP address. Please give the corresponding code according to the description. ",
        "response": "def validate_rpc_host(ip):\n    \"\"\"\n    Validates the given ip for use as RPC server address.\n    \"\"\"\n    if not is_valid_ipv4(ip) and not is_valid_ipv6(ip):\n        raise ApplicationException(\n            desc='Invalid RPC ip address: %s' % ip)\n    return ip"
    },
    {
        "instruction": "Decode a raw report into a single reading. Unpack the raw report using the format \"<BBHLLLL\". Ensure that the first byte of the unpacked data is 0. Estimate the UTC time when this device was turned on, subtracting the sent_timestamp from the received_time. Create an IOTileReading object with the reading_timestamp, stream, reading_value, and time_base. Set the origin and sent_timestamp of the report, and return a list containing the reading and an empty list. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def decode(self):\n        \"\"\"Decode this report into a single reading\n        \"\"\"\n\n        fmt, _, stream, uuid, sent_timestamp, reading_timestamp, reading_value = unpack(\"<BBHLLLL\", self.raw_report)\n        assert fmt == 0\n\n        # Estimate the UTC time when this device was turned on\n        time_base = self.received_time - datetime.timedelta(seconds=sent_timestamp)\n\n        reading = IOTileReading(reading_timestamp, stream, reading_value, time_base=time_base)\n        self.origin = uuid\n        self.sent_timestamp = sent_timestamp\n\n        return [reading], []"
    },
    {
        "instruction": "Create a new tailored audience using the provided account and name, by calling the '__create_audience__' method on the 'klass' object with the given name. If successful, return the reloaded audience. If a BadRequest error is raised, delete the audience and re-raise the error. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def create(klass, account, name):\n        \"\"\"\n        Creates a new tailored audience.\n        \"\"\"\n        audience = klass(account)\n        getattr(audience, '__create_audience__')(name)\n        try:\n            return audience.reload()\n        except BadRequest as e:\n            audience.delete()\n            raise e"
    },
    {
        "instruction": "Python: Define a function that attempts to find the user's home directory by first trying to expand the \"~\" character to the full path using the `os. path. expanduser()` method. If this fails, it tries to find the home directory using the \"HOME\", \"USERPROFILE\", and \"TMP\" environment variables. If a valid directory is found, it is returned. Otherwise, the function returns `None`. Please give the corresponding code according to the description. ",
        "response": "def _get_home():\n    \"\"\"Find user's home directory if possible.\n    Otherwise, returns None.\n\n    :see:  http://mail.python.org/pipermail/python-list/2005-February/325395.html\n\n    This function is copied from matplotlib version 1.4.3, Jan 2016\n    \"\"\"\n    try:\n        if six.PY2 and sys.platform == 'win32':\n            path = os.path.expanduser(b\"~\").decode(sys.getfilesystemencoding())\n        else:\n            path = os.path.expanduser(\"~\")\n    except ImportError:\n        # This happens on Google App Engine (pwd module is not present).\n        pass\n    else:\n        if os.path.isdir(path):\n            return path\n    for evar in ('HOME', 'USERPROFILE', 'TMP'):\n        path = os.environ.get(evar)\n        if path is not None and os.path.isdir(path):\n            return path\n    return None"
    },
    {
        "instruction": "In Python, define a method named \"lookup\" that takes in a public key in Z85 text format as an argument. The method should look up the certificate by the public key and return a \"zcert_t\" object if found, otherwise it should return NULL. The method should use the \"lib. zcertstore_lookup\" function and return a \"Zcert\" object with the result. Please give the corresponding code according to the description. ",
        "response": "def lookup(self, public_key):\n        \"\"\"\n        Look up certificate by public key, returns zcert_t object if found,\nelse returns NULL. The public key is provided in Z85 text format.\n        \"\"\"\n        return Zcert(lib.zcertstore_lookup(self._as_parameter_, public_key), False)"
    },
    {
        "instruction": "This is a Python function that handles IIIF Image Information requests. It checks if the request is authorized and not degraded, and if so, it creates an IIIFHandler object and returns the image information response. If the request is not authorized but authenticated, it returns a 401 error. If the request is not authorized or authenticated, it redirects to a degraded image information response. The function takes in several parameters including prefix, identifier, config, klass, and auth, and returns an HTTP response. Please give the corresponding code according to the description. ",
        "response": "def iiif_info_handler(prefix=None, identifier=None,\n                      config=None, klass=None, auth=None, **args):\n    \"\"\"Handler for IIIF Image Information requests.\"\"\"\n    if (not auth or degraded_request(identifier) or auth.info_authz()):\n        # go ahead with request as made\n        if (auth):\n            logging.debug(\"Authorized for image %s\" % identifier)\n        i = IIIFHandler(prefix, identifier, config, klass, auth)\n        try:\n            return i.image_information_response()\n        except IIIFError as e:\n            return i.error_response(e)\n    elif (auth.info_authn()):\n        # authn but not authz -> 401\n        abort(401)\n    else:\n        # redirect to degraded\n        response = redirect(host_port_prefix(\n            config.host, config.port, prefix) + '/' + identifier + '-deg/info.json')\n        response.headers['Access-control-allow-origin'] = '*'\n        return response"
    },
    {
        "instruction": "In Python, this code defines a method that adds a widget to a splitter and makes it visible. The method requires the widget to have a specific structure to ensure it is a QtmacsApplet or a QtmacsSplitter. Once added, the widget is automatically made visible. The method also adjusts the sizes of the widgets inside the splitter according to the handle position. To use the method, pass in a QWidget as an argument. Please give the corresponding code according to the description. ",
        "response": "def qteAddWidget(self, widget):\n        \"\"\"\n        Add a widget to the splitter and make it visible.\n\n        The only differences between this- and the native\n        ``QSplitter.addWidget()`` method are\n\n        1. ``widget`` must have a ``QtmacsAdmin`` structure to ensure it is a\n           ``QtmacsApplet`` or a ``QtmacsSplitter``, \n        2. ``widget`` is automatically made visible.\n\n        Both actions are mostly for convenience because adding ``widget`` to\n        a QtmacsSplitter is tantamount to displaying it.\n\n        |Args|\n\n        * ``widget`` (**QWidget**): the widget to add to the splitter.\n\n        |Returns|\n\n        * **None**\n\n        |Raises|\n\n        * **None**\n        \"\"\"\n        # Add ``widget`` to the splitter.\n        self.addWidget(widget)\n\n        # Show ``widget``. If it is a ``QtmacsSplitter`` instance then its\n        # show() methods has no argument, whereas ``QtmacsApplet`` instances\n        # have overloaded show() methods because they should not be called\n        # unless you really know what you are doing (it will mess with Qtmacs\n        # layout engine).\n        if widget._qteAdmin.widgetSignature == '__QtmacsLayoutSplitter__':\n            widget.show()\n        else:\n            widget.show(True)\n\n        # Adjust the sizes of the widgets inside the splitter according to\n        # the handle position.\n        self.qteAdjustWidgetSizes()"
    },
    {
        "instruction": "Apply a series of filters to the provided value in Python. The function takes in a value to filter, a parent entity, and a filtering context, which is usually the parent entity. If the value is None, it is returned as is. The function then iterates through a list of filter objects and applies each filter to the value. Finally, the filtered value is returned. Please give the corresponding code according to the description. ",
        "response": "def filter(self, value=None, model=None, context=None):\n        \"\"\"\n        Sequentially applies all the filters to provided value\n\n        :param value: a value to filter\n        :param model: parent entity\n        :param context: filtering context, usually parent entity\n        :return: filtered value\n        \"\"\"\n        if value is None:\n            return value\n        for filter_obj in self.filters:\n            value = filter_obj.filter(\n                value=value,\n                model=model,\n                context=context if self.use_context else None\n            )\n        return value"
    },
    {
        "instruction": "This is a Python function that runs a shell command given the command's parsed command line. It takes in a list of strings representing the command and its arguments. If the silent parameter is True, the function will suppress output to stdout and stderr. If the shell parameter is True, the command will be run through a shell interpreter. The function will raise an exception if the command is not found or if there is an OSError. Please give the corresponding code according to the description. ",
        "response": "def runCommandSplits(splits, silent=False, shell=False):\n    \"\"\"\n    Run a shell command given the command's parsed command line\n    \"\"\"\n    try:\n        if silent:\n            with open(os.devnull, 'w') as devnull:\n                subprocess.check_call(\n                    splits, stdout=devnull, stderr=devnull, shell=shell)\n        else:\n            subprocess.check_call(splits, shell=shell)\n    except OSError as exception:\n        if exception.errno == 2:  # cmd not found\n            raise Exception(\n                \"Can't find command while trying to run {}\".format(splits))\n        else:\n            raise"
    },
    {
        "instruction": "Calculate the integral of the spectral response function for each detector using the trapezoidal rule. The function should take in a bandname parameter and return a dictionary with the integral value for each detector. The input should be in the form of a dictionary with keys for wavelength and response for each detector. The function should use the numpy library's trapz function to perform the integration. The output should be a dictionary with keys for each detector and values for the integral of the response function for that detector. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def integral(self, bandname):\n        \"\"\"Calculate the integral of the spectral response function for each\n        detector.\n        \"\"\"\n        intg = {}\n        for det in self.rsr[bandname].keys():\n            wvl = self.rsr[bandname][det]['wavelength']\n            resp = self.rsr[bandname][det]['response']\n            intg[det] = np.trapz(resp, wvl)\n        return intg"
    },
    {
        "instruction": "Authenticate the user by checking the validity of the login and password provided in the request data using the LOGIN_SERIALIZER_CLASS. If the authentication is successful, perform the login and return a response indicating that the login was successful along with any extra data related to the login. If the authentication fails, raise a BadRequest exception with the message \"Login or password invalid. \" This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def login(request):\n    '''\n    Logs in the user via given login and password.\n    '''\n    serializer_class = registration_settings.LOGIN_SERIALIZER_CLASS\n    serializer = serializer_class(data=request.data)\n    serializer.is_valid(raise_exception=True)\n    user = serializer.get_authenticated_user()\n\n    if not user:\n        raise BadRequest('Login or password invalid.')\n\n    extra_data = perform_login(request, user)\n\n    return get_ok_response('Login successful', extra_data=extra_data)"
    },
    {
        "instruction": "In Python, this function reads a frame from an XYZ file. It first reads the size and title of the frame, then initializes an empty list of symbols and a numpy array of coordinates. It then loops through each line of the file, splitting it into words and adding the symbol (if not already present) and coordinates to their respective lists. If any errors occur, the function raises a StopIteration exception. Finally, the coordinates are scaled by a file unit factor and the symbols list is updated if necessary. The function returns the title and coordinates of the frame. Please give the corresponding code according to the description. ",
        "response": "def _read_frame(self):\n        \"\"\"Read a frame from the XYZ file\"\"\"\n\n        size = self.read_size()\n        title = self._f.readline()[:-1]\n        if self.symbols is None:\n            symbols = []\n        coordinates = np.zeros((size, 3), float)\n        for counter in range(size):\n            line = self._f.readline()\n            if len(line) == 0:\n                raise StopIteration\n            words = line.split()\n            if len(words) < 4:\n                raise StopIteration\n            if self.symbols is None:\n                symbols.append(words[0])\n            try:\n                coordinates[counter, 0] = float(words[1])\n                coordinates[counter, 1] = float(words[2])\n                coordinates[counter, 2] = float(words[3])\n            except ValueError:\n                raise StopIteration\n        coordinates *= self.file_unit\n        if self.symbols is None:\n            self.symbols = symbols\n        return title, coordinates"
    },
    {
        "instruction": "In Python, create a function that takes an object as input and converts its 'supported_os' attribute into a condition. If the 'supported_os' attribute is not empty, create a string that joins each operating system in the attribute with 'OR' and formats them as a condition where 'os' equals the name of the operating system. Return the resulting condition. Please give the corresponding code according to the description. ",
        "response": "def ConvertSupportedOSToConditions(src_object):\n  \"\"\"Turn supported_os into a condition.\"\"\"\n  if src_object.supported_os:\n    conditions = \" OR \".join(\"os == '%s'\" % o for o in src_object.supported_os)\n    return conditions"
    },
    {
        "instruction": "Python: Add an instruction to check if the given move is irreversible in a standard game of chess. This includes pawn moves, captures, and moves that destroy castling rights. The function should return a boolean value indicating whether the move is irreversible. The function should also clean the castling rights and check if the move is zeroing, or if the move's from_square or to_square is on the backrank. Please give the corresponding code according to the description. ",
        "response": "def is_irreversible(self, move: Move) -> bool:\n        \"\"\"\n        Checks if the given pseudo-legal move is irreversible.\n\n        In standard chess, pawn moves, captures and moves that destroy castling\n        rights are irreversible.\n        \"\"\"\n        backrank = BB_RANK_1 if self.turn == WHITE else BB_RANK_8\n        cr = self.clean_castling_rights() & backrank\n        return bool(self.is_zeroing(move) or\n                    cr and BB_SQUARES[move.from_square] & self.kings & ~self.promoted or\n                    cr & BB_SQUARES[move.from_square] or\n                    cr & BB_SQUARES[move.to_square])"
    },
    {
        "instruction": "In Python, define a method called \"history\" that takes in a variable number of bug IDs as arguments. Concatenate the first bug ID with the \"RHISTORY\" resource and store it in a variable called \"resource\". Create a dictionary called \"params\" with the key \"PIDS\" and value as the list of bug IDs. Call the \"call\" method with \"resource\" and \"params\" as arguments and store the response in a variable called \"response\". Return the \"response\". Please give the corresponding code according to the description. ",
        "response": "def history(self, *bug_ids):\n        \"\"\"Get the history of the given bugs.\n\n        :param bug_ids: list of bug identifiers\n        \"\"\"\n        resource = urijoin(self.RBUG, bug_ids[0], self.RHISTORY)\n\n        params = {\n            self.PIDS: bug_ids\n        }\n\n        response = self.call(resource, params)\n\n        return response"
    },
    {
        "instruction": "This Python function takes in a dictionary of summary statistics, a split identifier and an output stream. It logs the summary statistics to the output stream in a readable format, with a header containing the split identifier. If no output stream is provided, it logs the results to stdout. The function first checks if an output stream is provided and if not, uses stdout as the default. It then writes a header with the split identifier and loops through the dictionary to write each key-value pair to the output stream. Finally, it flushes the output stream. Please give the corresponding code according to the description. ",
        "response": "def output_results(results, split_id='results', output_stream=None):\n    '''\n    Log `results` readably to `output_stream`, with a header\n    containing `split_id`.\n\n    :param results: a dictionary of summary statistics from an evaluation\n    :type results: dict(str -> object)\n\n    :param str split_id: an identifier for the source of `results` (e.g. 'dev')\n\n    :param file output_stream: the file-like object to which to log the results\n        (default: stdout)\n    :type split_id: str\n    '''\n    if output_stream is None:\n        output_stream = sys.stdout\n\n    output_stream.write('----- %s -----\\n' % split_id)\n    for name in sorted(results.keys()):\n        output_stream.write('%s: %s\\n' % (name, repr(results[name])))\n\n    output_stream.flush()"
    },
    {
        "instruction": "This Python function is a decorator that allows a function to be called asynchronously on the loop thread. It wraps an instance method to be called on the loop thread, and then calls the function on the loop thread using `call_soon_threadsafe()`. If an exception occurs while calling the function, it logs the exception with the function name, arguments, and keyword arguments. Please give the corresponding code according to the description. ",
        "response": "def call_async(func):\n    \"\"\"Decorates a function to be called async on the loop thread\"\"\"\n\n    @wraps(func)\n    def wrapper(self, *args, **kw):\n        \"\"\"Wraps instance method to be called on loop thread\"\"\"\n\n        def call():\n            \"\"\"Calls function on loop thread\"\"\"\n            try:\n                func(self, *args, **kw)\n            except Exception:\n                logger.exception(\n                    \"failed to call async [%r] with [%r] [%r]\", func, args, kw\n                )\n\n        self.loop.call_soon_threadsafe(call)\n\n    return wrapper"
    },
    {
        "instruction": "In Python, define a function named \"oauth2_access_parser\" that takes in a string \"raw_access\" as input. The function should parse the JSON-formatted \"raw_access\" string using the \"json. loads()\" method, and extract the \"access_token\", \"token_type\", \"refresh_token\", and \"xoauth_yahoo_guid\" values from the parsed JSON object. Store these values in the corresponding instance variables of the class object. Finally, create a dictionary named \"credentials\" containing the extracted values, and return it. Please give the corresponding code according to the description. ",
        "response": "def oauth2_access_parser(self, raw_access):\n        \"\"\"Parse oauth2 access\n        \"\"\"\n        parsed_access = json.loads(raw_access.content.decode('utf-8'))\n        self.access_token = parsed_access['access_token']\n        self.token_type = parsed_access['token_type']\n        self.refresh_token = parsed_access['refresh_token']\n        self.guid = parsed_access['xoauth_yahoo_guid']\n\n        credentials = {\n            'access_token': self.access_token,\n            'token_type': self.token_type,\n            'refresh_token': self.refresh_token,\n            'guid': self.guid\n        }\n        \n        return credentials"
    },
    {
        "instruction": "This Python function creates an ArgumentParser for a given function, with arguments defined from the function arguments and their associated defaults. It takes in the following arguments: `func` - the function for which we want an ArgumentParser, `types` - the types to which the command line arguments should be converted to, `args_and_defaults` - a list of 2-tuples (arg_name, arg_default), and `delimiter_chars` - characters used to separate the parameters from their help message in the docstring. It returns the created ArgumentParser. Please give the corresponding code according to the description. ",
        "response": "def _get_arg_parser(func, types, args_and_defaults, delimiter_chars):\n    \"\"\"Return an ArgumentParser for the given function. Arguments are defined\n        from the function arguments and their associated defaults.\n\n    Args:\n        func: function for which we want an ArgumentParser\n        types: types to which the command line arguments should be converted to\n        args_and_defaults: list of 2-tuples (arg_name, arg_default)\n        delimiter_chars: characters used to separate the parameters from their\n        help message in the docstring\n    \"\"\"\n    _LOG.debug(\"Creating ArgumentParser for '%s'\", func.__name__)\n    (description, arg_help) = _prepare_doc(\n        func, [x for (x, _) in args_and_defaults], delimiter_chars)\n    parser = argparse.ArgumentParser(description=description)\n    for ((arg, default), arg_type) in zip_longest(args_and_defaults, types):\n        help_msg = arg_help[arg]\n        if default is NoDefault:\n            arg_type = arg_type or identity_type\n            if arg_type == bool:\n                _LOG.debug(\"Adding optional flag %s.%s\", func.__name__, arg)\n                parser.add_argument(\"--%s\" % arg, default=True, required=False,\n                                    action=\"store_false\",\n                                    help=\"%s. Defaults to True if not specified\"\n                                    % help_msg)\n            else:\n                _LOG.debug(\"Adding positional argument %s.%s\", func.__name__,\n                           arg)\n                parser.add_argument(arg, help=help_msg, type=arg_type)\n        else:\n            if default is None and arg_type is None:\n                raise ParseThisError(\"To use default value of 'None' you need \"\n                                     \"to specify the type of the argument '{}' \"\n                                     \"for the method '{}'\"\n                                     .format(arg, func.__name__))\n            arg_type = arg_type or type(default)\n            if arg_type == bool:\n                action = \"store_false\" if default else \"store_true\"\n                _LOG.debug(\"Adding optional flag %s.%s\", func.__name__, arg)\n                parser.add_argument(\"--%s\" % arg, help=help_msg,\n                                    default=default, action=action)\n            else:\n                _LOG.debug(\n                    \"Adding optional argument %s.%s\", func.__name__, arg)\n                parser.add_argument(\"--%s\" % arg, help=help_msg,\n                                    default=default, type=arg_type)\n    return parser"
    },
    {
        "instruction": "This Python function takes a string and wraps it after a specified number of characters (default is 79). If the second parameter is set to `True`, it breaks long words into multiple lines to fit within the specified width. If `False`, it will not split the words. The function uses the `textwrap` module to perform the wrapping and returns a copy of the wrapped string with newline characters separating each line. Please give the corresponding code according to the description. ",
        "response": "def do_wordwrap(s, width=79, break_long_words=True):\n    \"\"\"\n    Return a copy of the string passed to the filter wrapped after\n    ``79`` characters.  You can override this default using the first\n    parameter.  If you set the second parameter to `false` Jinja will not\n    split words apart if they are longer than `width`.\n    \"\"\"\n    import textwrap\n    return u'\\n'.join(textwrap.wrap(s, width=width, expand_tabs=False,\n                                   replace_whitespace=False,\n                                   break_long_words=break_long_words))"
    },
    {
        "instruction": "This Python function returns a chart object based on the specified chart type, x and y values, style, and options. It checks the chart type and sets the engine accordingly. If the engine is Bokeh, Altair, Chartjs, or Seaborn, it gets the chart using the corresponding function. If the engine is not recognized, it returns an error message. If there is an exception, it returns an error message with the exception. Please give the corresponding code according to the description. ",
        "response": "def _get_chart(self, chart_type, x=None, y=None, style=None, opts=None,\n\t\t\t\t   label=None, options={}, **kwargs):\n\t\t\"\"\"\n\t\tGet a full chart object\n\t\t\"\"\"\n\t\tsbcharts = [\"density\", \"distribution\", \"dlinear\"]\n\t\tacharts = [\"tick\", \"circle\", \"text\", \"line_num\", \"bar_num\"]\n\t\tif chart_type in sbcharts:\n\t\t\tself._set_seaborn_engine()\n\t\tif chart_type in acharts:\n\t\t\tself._set_altair_engine()\n\t\tif chart_type != \"sline\":\n\t\t\tx, y = self._check_fields(x, y)\n\t\tif opts is None:\n\t\t\topts = self.chart_opts\n\t\tif style is None:\n\t\t\tstyle = self.chart_style\n\t\tif self.engine == \"bokeh\":\n\t\t\tfunc = self._get_bokeh_chart\n\t\telif self.engine == \"altair\":\n\t\t\tfunc = self._get_altair_chart\n\t\telif self.engine == \"chartjs\":\n\t\t\tfunc = self._get_chartjs_chart\n\t\telif self.engine == \"seaborn\":\n\t\t\tfunc = self._get_seaborn_chart\n\t\telse:\n\t\t\tself.err(\"Engine \" + self.engine + \" unknown\")\n\t\t\treturn\n\t\ttry:\n\t\t\tchart = func(\n\t\t\t\tx, y, chart_type, label, opts, style,\n\t\t\t\toptions=options, **kwargs)\n\t\t\treturn chart\n\t\texcept Exception as e:\n\t\t\tself.err(e)"
    },
    {
        "instruction": "In Python, define a function called guess_payload_class that takes in two arguments, self and payload. Extract the first nibble of the payload and shift it right by 4 bits. If the resulting value is 0, return ISOTP_SF. If it's 1, return ISOTP_FF. If it's 2, return ISOTP_CF. Otherwise, return ISOTP_FC. This function is used to determine the type of frame being received in an ISOTP protocol. Please give the corresponding code according to the description. ",
        "response": "def guess_payload_class(self, payload):\n        \"\"\"\n        ISOTP encodes the frame type in the first nibble of a frame.\n        \"\"\"\n        t = (orb(payload[0]) & 0xf0) >> 4\n        if t == 0:\n            return ISOTP_SF\n        elif t == 1:\n            return ISOTP_FF\n        elif t == 2:\n            return ISOTP_CF\n        else:\n            return ISOTP_FC"
    },
    {
        "instruction": "In Python, create a function that takes in a dictionary of keyword arguments and returns a dictionary object with figure properties. The returned dictionary should include a schema URL, a width property with a default value of DEFAULT_WIDTH if not specified, a height property with a default value of DEFAULT_HEIGHT if not specified, and a padding property with a default value of DEFAULT_PADDING if not specified. The function should remove the width, height, and padding properties from the input dictionary if they are present. Please give the corresponding code according to the description. ",
        "response": "def _create_figure(kwargs: Mapping[str, Any]) -> dict:\n    \"\"\"Create basic dictionary object with figure properties.\"\"\"\n    return {\n        \"$schema\": \"https://vega.github.io/schema/vega/v3.json\",\n        \"width\": kwargs.pop(\"width\", DEFAULT_WIDTH),\n        \"height\": kwargs.pop(\"height\", DEFAULT_HEIGHT),\n        \"padding\": kwargs.pop(\"padding\", DEFAULT_PADDING)\n    }"
    },
    {
        "instruction": "In Python, create a function that parses an ISO datetime string and returns a datetime object. If the string ends with 'Z', localize the datetime to UTC timezone and return it. Otherwise, return the datetime object without any timezone information. Please give the corresponding code according to the description. ",
        "response": "def parse_datetime(dt):\n    '''Parse an ISO datetime, which Python does buggily.'''\n    d = datetime.strptime(dt[:-1], ISOFORMAT)\n\n    if dt[-1:] == 'Z':\n        return timezone('utc').localize(d)\n    else:\n        return d"
    },
    {
        "instruction": "Remove a weak reference from a list of weak subscribers if it exists. If it does not exist, do nothing. The function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def _try_disconnect(self, ref):\n        \"\"\"\n        Called by the weak reference when its target dies.\n        In other words, we can assert that self.weak_subscribers is not\n        None at this time.\n        \"\"\"\n        with self.lock:\n            weak = [s[0] for s in self.weak_subscribers]\n            try:\n                index = weak.index(ref)\n            except ValueError:\n                # subscriber was already removed by a call to disconnect()\n                pass\n            else:\n                self.weak_subscribers.pop(index)"
    },
    {
        "instruction": "Convert a list of `regions. Region` objects to a FITS region table. Ensure that every region is a pixel region. The function takes a list of regions as input and returns a FITS region table. The function also includes an example of how to use it. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def fits_region_objects_to_table(regions):\n    \"\"\"\n    Converts list of regions to FITS region table.\n\n    Parameters\n    ----------\n    regions : list\n        List of `regions.Region` objects\n\n    Returns\n    -------\n    region_string : `~astropy.table.Table`\n        FITS region table\n\n    Examples\n    --------\n\n    >>> from regions import CirclePixelRegion, PixCoord\n    >>> reg_pixel = CirclePixelRegion(PixCoord(1, 2), 5)\n    >>> table = fits_region_objects_to_table([reg_pixel])\n    >>> print(table)\n    X [1] Y [1] SHAPE    R [4]    ROTANG COMPONENT\n    pix   pix            pix      deg\n    ----- ----- ------ ---------- ------ ---------\n      1.0   2.0 circle 5.0 .. 0.0      0         1\n\n    \"\"\"\n    for reg in regions:\n        if isinstance(reg, SkyRegion):\n            raise TypeError('Every region must be a pixel region'.format(reg))\n\n    shape_list = to_shape_list(regions, coordinate_system='image')\n    return shape_list.to_fits()"
    },
    {
        "instruction": "In Python, this function retrieves a single bot user object by UUID or username. It sends a GET request to the Skype API using the provided ID as a parameter, and returns the resulting bot user object. If the ID is not found, it returns None. The resulting object is created using the `SkypeBotUser. fromRaw()` method, and then merged with the existing object using the `self. merge()` method. Please give the corresponding code according to the description. ",
        "response": "def bot(self, id):\n        \"\"\"\n        Retrieve a single bot.\n\n        Args:\n            id (str): UUID or username of the bot\n\n        Returns:\n            SkypeBotUser: resulting bot user object\n        \"\"\"\n        json = self.skype.conn(\"GET\", \"{0}/agents\".format(SkypeConnection.API_BOT), params={\"agentId\": id},\n                               auth=SkypeConnection.Auth.SkypeToken).json().get(\"agentDescriptions\", [])\n        return self.merge(SkypeBotUser.fromRaw(self.skype, json[0])) if json else None"
    },
    {
        "instruction": "In Python, this function sends a command message to the other end over a socket connection. The command and its payload are serialized to JSON before being sent. If the socket connection is closed, a ConnectionClosed error is raised. If there is a socket error while sending the message, the socket is closed and the error is re-raised. Please give the corresponding code according to the description. ",
        "response": "def send(self, cmd, *payload):\n        \"\"\"\n        Send a command message to the other end.\n\n        :param cmd: The command to send to the other end.\n        :param payload: The command payload.  Note that all elements\n                        of the payload must be serializable to JSON.\n        \"\"\"\n\n        # If it's closed, raise an error up front\n        if not self._sock:\n            raise ConnectionClosed(\"Connection closed\")\n\n        # Construct the outgoing message\n        msg = json.dumps(dict(cmd=cmd, payload=payload)) + '\\n'\n\n        # Send it\n        try:\n            self._sock.sendall(msg)\n        except socket.error:\n            # We'll need to re-raise\n            e_type, e_value, e_tb = sys.exc_info()\n\n            # Make sure the socket is closed\n            self.close()\n\n            # Re-raise\n            raise e_type, e_value, e_tb"
    },
    {
        "instruction": "Given an instance of a Vcs object, this Python function retrieves the installed version number of the project by reading a file containing the version number. If the file does not exist, it raises a VersionNotInstalledError exception. Please give the corresponding code according to the description. ",
        "response": "def get_installed_version(vcs):\n    \"\"\"Get the installed version for this project.\n\n    Args:\n        vcs (easyci.vcs.base.Vcs)\n\n    Returns:\n        str - version number\n\n    Raises:\n        VersionNotInstalledError\n    \"\"\"\n    version_path = _get_version_path(vcs)\n    if not os.path.exists(version_path):\n        raise VersionNotInstalledError\n    with open(version_path, 'r') as f:\n        return f.read().strip()"
    },
    {
        "instruction": "Given a community ID, record ID, and a boolean value of whether to accept the request, this function requests the acceptance of a record to a community. It retrieves the community and record objects from their respective IDs, and if the request is accepted, adds the record to the community and commits it. Otherwise, it creates an inclusion request with the community and record objects and sets notify to false. Finally, it commits the changes to the database and indexes the record by its ID. This code is written in Python. Please give the corresponding code according to the description. ",
        "response": "def request(community_id, record_id, accept):\n    \"\"\"Request a record acceptance to a community.\"\"\"\n    c = Community.get(community_id)\n    assert c is not None\n    record = Record.get_record(record_id)\n    if accept:\n        c.add_record(record)\n        record.commit()\n    else:\n        InclusionRequest.create(community=c, record=record,\n                                notify=False)\n    db.session.commit()\n    RecordIndexer().index_by_id(record.id)"
    },
    {
        "instruction": "In Python, define a method that updates the charging state of a Tesla vehicle. Call the update method of the controller object with the vehicle id and set wake_if_asleep to False. Then, get the charging parameters of the vehicle using the get_charging_params method of the controller object. If the data exists and the time elapsed since the last manual update is greater than 60 seconds, check if the charging state is not \"Charging\". If so, set the charger state to False. Otherwise, set the charger state to True. Please give the corresponding code according to the description. ",
        "response": "def update(self):\n        \"\"\"Update the charging state of the Tesla Vehicle.\"\"\"\n        self._controller.update(self._id, wake_if_asleep=False)\n        data = self._controller.get_charging_params(self._id)\n        if data and (time.time() - self.__manual_update_time > 60):\n            if data['charging_state'] != \"Charging\":\n                self.__charger_state = False\n            else:\n                self.__charger_state = True"
    },
    {
        "instruction": "Calculate the resistance distances of a graph. If the input is a sparse matrix, convert it to a Compressed Sparse Column matrix (CSC) format. If the input is a graph, check if it is a combinatorial Laplacian. If it is not, raise a ValueError. Calculate the pseudo-inverse of the Laplacian matrix. Calculate the diagonal of the pseudo-inverse matrix and create a sparse matrix using it. Create a sparse matrix of ones with the same shape as the Laplacian matrix. Use the Kronecker product to calculate the resistance distance matrix. Return the resistance distance matrix. This function is written in Python. Please give the corresponding code according to the description. ",
        "response": "def resistance_distance(G):\n    r\"\"\"\n    Compute the resistance distances of a graph.\n\n    Parameters\n    ----------\n    G : Graph or sparse matrix\n        Graph structure or Laplacian matrix (L)\n\n    Returns\n    -------\n    rd : sparse matrix\n        distance matrix\n\n    References\n    ----------\n    :cite:`klein1993resistance`\n    \"\"\"\n\n    if sparse.issparse(G):\n        L = G.tocsc()\n\n    else:\n        if G.lap_type != 'combinatorial':\n            raise ValueError('Need a combinatorial Laplacian.')\n        L = G.L.tocsc()\n\n    try:\n        pseudo = sparse.linalg.inv(L)\n    except RuntimeError:\n        pseudo = sparse.lil_matrix(np.linalg.pinv(L.toarray()))\n\n    N = np.shape(L)[0]\n    d = sparse.csc_matrix(pseudo.diagonal())\n    rd = sparse.kron(d, sparse.csc_matrix(np.ones((N, 1)))).T \\\n        + sparse.kron(d, sparse.csc_matrix(np.ones((N, 1)))) \\\n        - pseudo - pseudo.T\n\n    return rd"
    },
    {
        "instruction": "This is a Python function that sends an email using the provided sender email address and password, to the specified email address. The subject and content of the email can also be specified. Additionally, a list of file paths can be provided as attachments. The function uses the SMTP server of the specified email service (either '163' or 'qq'). The function returns nothing. Please give the corresponding code according to the description. ",
        "response": "def send_email(sender, pw, to, subject, content, files=None, service='163'):\n    \"\"\"send email, recommended use 163 mailbox service, as it is tested.\n\n    :param sender: str\n        email address of sender\n    :param pw: str\n        password for sender\n    :param to: str\n        email addressee\n    :param subject: str\n        subject of email\n    :param content: str\n        content of email\n    :param files: list\n        path list of attachments\n    :param service: str\n        smtp server address, optional is ['163', 'qq']\n    :return: None\n    \"\"\"\n    se = EmailSender(from_=sender, pw=pw, service=service)\n    se.send_email(to=to, subject=subject, content=content, files=files)\n    se.quit()"
    },
    {
        "instruction": "Python: Add a non-capturing group around the input pattern and attempt to match it at the start of the input string. If the match is successful and the end of the matched expression is less than the length of the string, return None. Otherwise, return the match object. Please give the corresponding code according to the description. ",
        "response": "def fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning a match\n    object if the whole string matches, or None if no match was found.\"\"\"\n    # Build a version of the pattern with a non-capturing group around it.\n    # This is needed to get m.end() to correctly report the size of the\n    # matched expression (as per the final doctest above).\n    grouped_pattern = re.compile(\"^(?:%s)$\" % pattern.pattern, pattern.flags)\n    m = grouped_pattern.match(string)\n    if m and m.end() < len(string):\n        # Incomplete match (which should never happen because of the $ at the\n        # end of the regexp), treat as failure.\n        m = None  # pragma no cover\n    return m"
    },
    {
        "instruction": "This is a Python function that runs Pylama after a Mercurial commit. It first creates an empty set and list for seen files and paths, respectively. It then iterates over the files in the repository since the specified node and adds them to the paths list if they haven't been seen before and exist. It then parses the options, sets up the logger, and processes the paths using the specified options. Please give the corresponding code according to the description. ",
        "response": "def hg_hook(ui, repo, node=None, **kwargs):\n    \"\"\"Run pylama after mercurial commit.\"\"\"\n    seen = set()\n    paths = []\n    if len(repo):\n        for rev in range(repo[node], len(repo)):\n            for file_ in repo[rev].files():\n                file_ = op.join(repo.root, file_)\n                if file_ in seen or not op.exists(file_):\n                    continue\n                seen.add(file_)\n                paths.append(file_)\n\n    options = parse_options()\n    setup_logger(options)\n    if paths:\n        process_paths(options, candidates=paths)"
    },
    {
        "instruction": "In Python, check if any global variable has been modified. Reset the global changed flag to False. Return a boolean value indicating whether any global variable has been modified or not. Please give the corresponding code according to the description. ",
        "response": "def globals_changed(self):\n        \"\"\"True if any Global has changed.\"\"\"\n        value = bool(lib.EnvGetGlobalsChanged(self._env))\n        lib.EnvSetGlobalsChanged(self._env, int(False))\n\n        return value"
    },
    {
        "instruction": "In Python, define a function that takes an argument and validates it as either \"upper\", \"lower\", or None. If the argument is None, return it. Otherwise, strip any leading or trailing white space from the argument and convert it to lowercase. If the resulting value is \"upper\" or \"lower\", return it. Otherwise, raise a ValueError with the message \"argument must be 'upper', 'lower' or None'\". Please give the corresponding code according to the description. ",
        "response": "def upper_lower_none(arg):\n    \"\"\"Validate arg value as \"upper\", \"lower\", or None.\"\"\"\n    if not arg:\n        return arg\n\n    arg = arg.strip().lower()\n    if arg in ['upper', 'lower']:\n        return arg\n\n    raise ValueError('argument must be \"upper\", \"lower\" or None')"
    },
    {
        "instruction": "Python - This function returns the number of the Hebrew parasha for the current week. It calculates the year type based on the diaspora, Rosh Hashana day of the week, year size, and Pesach day of the week. It then calculates the number of days and weeks since Rosh Hashana, and checks for special cases such as Simchat Torah. Finally, it unpacks the readings for the given year and returns the reading for the current week. If the current week is after the last reading for the year, it recursively calls the function for the upcoming Shabbat. Please give the corresponding code according to the description. ",
        "response": "def get_reading(self):\n        \"\"\"Return number of hebrew parasha.\"\"\"\n        _year_type = (self.year_size() % 10) - 3\n        year_type = (\n            self.diaspora * 1000 +\n            self.rosh_hashana_dow() * 100 +\n            _year_type * 10 +\n            self.pesach_dow())\n\n        _LOGGER.debug(\"Year type: %d\", year_type)\n\n        # Number of days since rosh hashana\n        rosh_hashana = HebrewDate(self.hdate.year, Months.Tishrei, 1)\n        days = self._jdn - conv.hdate_to_jdn(rosh_hashana)\n        # Number of weeks since rosh hashana\n        weeks = (days + self.rosh_hashana_dow() - 1) // 7\n        _LOGGER.debug(\"Days: %d, Weeks %d\", days, weeks)\n\n        # If it's currently Simchat Torah, return VeZot Haberacha.\n        if weeks == 3:\n            if (days <= 22 and self.diaspora and self.dow != 7 or\n                    days <= 21 and not self.diaspora):\n                return 54\n\n        # Special case for Simchat Torah in diaspora.\n        if weeks == 4 and days == 22 and self.diaspora:\n            return 54\n\n        # Return the indexes for the readings of the given year\n        def unpack_readings(readings):\n            return list(chain(\n                *([x] if isinstance(x, int) else x for x in readings)))\n\n        reading_for_year = htables.READINGS[year_type]\n        readings = unpack_readings(reading_for_year)\n        # Maybe recompute the year type based on the upcoming shabbat.\n        # This avoids an edge case where today is before Rosh Hashana but\n        # Shabbat is in a new year afterwards.\n        if (weeks >= len(readings)\n                and self.hdate.year < self.upcoming_shabbat.hdate.year):\n            return self.upcoming_shabbat.get_reading()\n        return readings[weeks]"
    },
    {
        "instruction": "In Python, define a method `gtr` that sets a new GTR object. The method takes a parameter `value` which should be an instance of the GTR class or its subclass GTR_site_specific. If the parameter is not an instance of either class, raise a TypeError with the message \"GTR instance expected\". Set the `_gtr` attribute of the object to the value of the parameter. Please give the corresponding code according to the description. ",
        "response": "def gtr(self, value):\n        \"\"\"\n        Set a new GTR object\n\n        Parameters\n        -----------\n\n         value : GTR\n            the new GTR object\n        \"\"\"\n        if not (isinstance(value, GTR) or isinstance(value, GTR_site_specific)):\n            raise TypeError(\" GTR instance expected\")\n        self._gtr = value"
    },
    {
        "instruction": "In Python, create a function that prints the current version of topydo and its license, then exits the program with a status code of 0. Please give the corresponding code according to the description. ",
        "response": "def version():\n    \"\"\" Print the current version and exit. \"\"\"\n    from topydo.lib.Version import VERSION, LICENSE\n    print(\"topydo {}\\n\".format(VERSION))\n    print(LICENSE)\n    sys.exit(0)"
    },
    {
        "instruction": "This Python function takes a list of vCards and a boolean value 'parsable' as input. If the vCard list is empty, the function prints \"Found no contacts\" and exits with error code 1. If 'parsable' is True, the function creates a list of contact lines, each containing the UID, name, and address book of a vCard, separated by tabs. The function then prints the contact lines separated by newlines. If 'parsable' is False, the function calls another function 'list_contacts' to print a user-friendly table of contacts. Please give the corresponding code according to the description. ",
        "response": "def list_subcommand(vcard_list, parsable):\n    \"\"\"Print a user friendly contacts table.\n\n    :param vcard_list: the vcards to print\n    :type vcard_list: list of carddav_object.CarddavObject\n    :param parsable: machine readable output: columns devided by tabulator (\\t)\n    :type parsable: bool\n    :returns: None\n    :rtype: None\n\n    \"\"\"\n    if not vcard_list:\n        if not parsable:\n            print(\"Found no contacts\")\n        sys.exit(1)\n    elif parsable:\n        contact_line_list = []\n        for vcard in vcard_list:\n            if config.display_by_name() == \"first_name\":\n                name = vcard.get_first_name_last_name()\n            else:\n                name = vcard.get_last_name_first_name()\n            contact_line_list.append('\\t'.join([vcard.get_uid(), name,\n                                                vcard.address_book.name]))\n        print('\\n'.join(contact_line_list))\n    else:\n        list_contacts(vcard_list)"
    },
    {
        "instruction": "In Python, this code defines the main function as an entry point. It sets up logging with a custom formatter and creates a Manager object. It then parses command line instructions and loads a Mirte file. Finally, it executes the command line instructions, runs the Manager object, and logs any debug messages. Please give the corresponding code according to the description. ",
        "response": "def main():\n    \"\"\" Entry-point \"\"\"\n    sarah.coloredLogging.basicConfig(level=logging.DEBUG,\n                                     formatter=MirteFormatter())\n    l = logging.getLogger('mirte')\n    instructions, args = parse_cmdLine_instructions(sys.argv[1:])\n    m = Manager(l)\n    load_mirteFile(args[0] if args else 'default', m, logger=l)\n    execute_cmdLine_instructions(instructions, m, l)\n    m.run()"
    },
    {
        "instruction": "In Python, define a method that sets the bulk size of an object. Take in a parameter called \"bulk_size\" that represents the desired bulk size. Set the object's bulk size attribute to the value of \"bulk_size\". Please give the corresponding code according to the description. ",
        "response": "def _set_bulk_size(self, bulk_size):\n        \"\"\"\n        Set the bulk size\n\n        :param bulk_size the bulker size\n        \"\"\"\n        self._bulk_size = bulk_size\n        self.bulker.bulk_size = bulk_size"
    },
    {
        "instruction": "In Python, update the scale of the Hamiltonian slice proposal based on the relative amount of time spent moving vs reflecting. Calculate the fraction of moves made and normalize it by the maximum of the fraction of moves and the fraction of reflections. Multiply the current scale by the exponential of the difference between the fraction of moves made and the previous fraction of moves made, divided by the normalization factor. Please give the corresponding code according to the description. ",
        "response": "def update_hslice(self, blob):\n        \"\"\"Update the Hamiltonian slice proposal scale based\n        on the relative amount of time spent moving vs reflecting.\"\"\"\n\n        nmove, nreflect = blob['nmove'], blob['nreflect']\n        ncontract = blob.get('ncontract', 0)\n        fmove = (1. * nmove) / (nmove + nreflect + ncontract + 2)\n        norm = max(self.fmove, 1. - self.fmove)\n        self.scale *= math.exp((fmove - self.fmove) / norm)"
    },
    {
        "instruction": "In Python, define a function called `_join_types` that takes in a sequence of class objects and an optional last separator. Convert each class object in the sequence to a string using the `_format_type` function, then join the resulting strings using the `_join_sequence` function with the last separator specified. Return the resulting string. Please give the corresponding code according to the description. ",
        "response": "def _join_types(seq, last_separator=''):\n    \"\"\"Join class object names into a string.\"\"\"\n    class_names = [_format_type(cls) for cls in seq]\n    return _join_sequence(class_names, last_separator)"
    },
    {
        "instruction": "This Python function reads a local file and outputs keywords. It takes in the local file path, taxonomy name, output mode (default is \"text\"), output limit (default is None), spires (default is False), match mode (default is \"full\"), no cache (default is False), with author keywords (default is False), rebuild cache (default is False), only core tags (default is False), and extract acronyms (default is False). It then calls the get_keywords_from_text() function with the appropriate parameters and returns the output. Please give the corresponding code according to the description. ",
        "response": "def get_keywords_from_local_file(\n        local_file, taxonomy_name, output_mode=\"text\",\n        output_limit=None, spires=False,\n        match_mode=\"full\", no_cache=False, with_author_keywords=False,\n        rebuild_cache=False, only_core_tags=False, extract_acronyms=False):\n    \"\"\"Output keywords reading a local file.\n\n    Arguments and output are the same as for :see: get_keywords_from_text().\n    \"\"\"\n    if output_limit is None:\n        output_limit = current_app.config['CLASSIFIER_DEFAULT_OUTPUT_NUMBER']\n\n    current_app.logger.info(\n        \"Analyzing keywords for local file %s.\" % local_file)\n    text_lines = text_lines_from_local_file(local_file)\n\n    return get_keywords_from_text(text_lines,\n                                  taxonomy_name,\n                                  output_mode=output_mode,\n                                  output_limit=output_limit,\n                                  spires=spires,\n                                  match_mode=match_mode,\n                                  no_cache=no_cache,\n                                  with_author_keywords=with_author_keywords,\n                                  rebuild_cache=rebuild_cache,\n                                  only_core_tags=only_core_tags,\n                                  extract_acronyms=extract_acronyms)"
    },
    {
        "instruction": "Given an absolute file path and an object name, this Python function imports the corresponding module and returns the object with the given name from the module. It does so by opening the file at the given path, reading its contents, and passing them to `import_object_from_string_code` function. Please give the corresponding code according to the description. ",
        "response": "def import_object_from_path(path, object):\n    \"\"\"Used to import an object from an absolute path.\n\n    This function takes an absolute path and imports it as a Python module.\n    It then returns the object with name `object` from the imported module.\n\n    Args:\n        path (string): Absolute file path of .py file to import\n\n        object (string): Name of object to extract from imported module\n    \"\"\"\n    with open(path) as f:\n        return import_object_from_string_code(f.read(), object)"
    },
    {
        "instruction": "This Python method returns the number of lines and columns of the current terminal window. It tries to get this information in several ways: by calling an ioctl function with the GWINSZ argument, by opening the terminal file descriptor and calling the same ioctl function, by calling the \"stty size\" command and parsing its output, and finally by getting the values of the environment variables LINES and COLUMNS. If none of these methods work, it simply returns the default values of 25 lines and 80 columns. Please give the corresponding code according to the description. ",
        "response": "def _term_size(self):\n        \"\"\"\n        Method returns lines and columns according to terminal size\n        \"\"\"\n        for fd in (0, 1, 2):\n            try:\n                return self._ioctl_GWINSZ(fd)\n            except:\n                pass\n        # try os.ctermid()\n        try:\n            fd = os.open(os.ctermid(), os.O_RDONLY)\n            try:\n                return self._ioctl_GWINSZ(fd)\n            finally:\n                os.close(fd)\n        except:\n            pass\n        # try `stty size`\n        try:\n            return tuple(int(x) for x in os.popen(\"stty size\", \"r\").read().split())\n        except:\n            pass\n        # try environment variables\n        try:\n            return tuple(int(os.getenv(var)) for var in (\"LINES\", \"COLUMNS\"))\n        except:\n            pass\n        # i give up. return default.\n        return (25, 80)"
    },
    {
        "instruction": "This Python function takes a dictionary of tags and parses them into different dictionaries based on their prefixes. It categorizes them into actions, contacts, formats, INSPIRE themes, keywords, licenses, owners, SRS, types, and unused tags. It also sets two 0/1 values for compliance and type_dataset. The function then overrides API tags to allow all datasets filter and returns all the categorized tags in a dictionary. Please give the corresponding code according to the description. ",
        "response": "def search_tags_as_filters(tags):\n    \"\"\"Get different tags as dicts ready to use as dropdown lists.\"\"\"\n    # set dicts\n    actions = {}\n    contacts = {}\n    formats = {}\n    inspire = {}\n    keywords = {}\n    licenses = {}\n    md_types = dict()\n    owners = defaultdict(str)\n    srs = {}\n    unused = {}\n    # 0/1 values\n    compliance = 0\n    type_dataset = 0\n    # parsing tags\n    print(len(tags.keys()))\n    i = 0\n    for tag in sorted(tags.keys()):\n        i += 1\n        # actions\n        if tag.startswith(\"action\"):\n            actions[tags.get(tag, tag)] = tag\n            continue\n        # compliance INSPIRE\n        elif tag.startswith(\"conformity\"):\n            compliance = 1\n            continue\n        # contacts\n        elif tag.startswith(\"contact\"):\n            contacts[tags.get(tag)] = tag\n            continue\n        # formats\n        elif tag.startswith(\"format\"):\n            formats[tags.get(tag)] = tag\n            continue\n        # INSPIRE themes\n        elif tag.startswith(\"keyword:inspire\"):\n            inspire[tags.get(tag)] = tag\n            continue\n        # keywords\n        elif tag.startswith(\"keyword:isogeo\"):\n            keywords[tags.get(tag)] = tag\n            continue\n        # licenses\n        elif tag.startswith(\"license\"):\n            licenses[tags.get(tag)] = tag\n            continue\n        # owners\n        elif tag.startswith(\"owner\"):\n            owners[tags.get(tag)] = tag\n            continue\n        # SRS\n        elif tag.startswith(\"coordinate-system\"):\n            srs[tags.get(tag)] = tag\n            continue\n        # types\n        elif tag.startswith(\"type\"):\n            md_types[tags.get(tag)] = tag\n            if tag in (\"type:vector-dataset\", \"type:raster-dataset\"):\n                type_dataset += 1\n            else:\n                pass\n            continue\n        # ignored tags\n        else:\n            unused[tags.get(tag)] = tag\n            continue\n\n    # override API tags to allow all datasets filter - see #\n    if type_dataset == 2:\n        md_types[\"Donnée\"] = \"type:dataset\"\n    else:\n        pass\n    # printing\n    # print(\"There are:\"\n    #       \"\\n{} actions\"\n    #       \"\\n{} contacts\"\n    #       \"\\n{} formats\"\n    #       \"\\n{} INSPIRE themes\"\n    #       \"\\n{} keywords\"\n    #       \"\\n{} licenses\"\n    #       \"\\n{} owners\"\n    #       \"\\n{} SRS\"\n    #       \"\\n{} types\"\n    #       \"\\n{} unused\".format(len(actions),\n    #                            len(contacts),\n    #                            len(formats),\n    #                            len(inspire),\n    #                            len(keywords),\n    #                            len(licenses),\n    #                            len(owners),\n    #   "
    }
  ]